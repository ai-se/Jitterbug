ID,projectname,classification,Abstract,label
0,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1,httpd,UNKNOWN,"/*
 * Compare a string to a mask
 * Mask characters:
 *   @ - uppercase letter
 *   # - lowercase letter
 *   & - hex digit
 *   # - digit
 *   * - swallow remaining characters
 *  <x> - exact match for any other character
 */",undetermined
2,httpd,UNKNOWN,"/*
 * Converts 8 hex digits to a time integer
 */",undetermined
3,httpd,UNKNOWN,/* so that it works with 8-byte ints */,undetermined
4,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5,httpd,UNKNOWN,"/*
    test-writev: use this to figure out if your writev() does intelligent
    things on the network.  Some writev()s when given multiple buffers
    will break them up into multiple packets, which is a waste.

    Linux prior to 2.0.31 has this problem.

    Solaris 2.5, 2.5.1 doesn't appear to, 2.6 hasn't been tested.

    IRIX 5.3 doesn't have this problem.

    To use this you want to snoop the wire with tcpdump, and then run
    ""test-writev a.b.c.d port#"" ... against some TCP service on another
    box.  For example you can run it against port 80 on another server.
    You want to look to see how many data packets are sent, you're hoping
    only one of size 300 is sent.
*/",undetermined
6,httpd,UNKNOWN,/* now build up a two part writev and write it out */,undetermined
7,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8,httpd,UNKNOWN,"/* This program tests the ap_find_list_item routine in ../main/util.c.
 *
 * The defines in this sample compile line are specific to Roy's system.
 * They should match whatever was used to compile Apache first.
 *
     gcc -g -O2 -I../os/unix -I../include -o test_find \
            -DSOLARIS2=250 -Wall -DALLOC_DEBUG -DPOOL_DEBUG \
            ../main/alloc.o ../main/buff.o ../main/util.o \
            ../ap/libap.a -lsocket -lnsl test_find.c
 *
 * Roy Fielding, 1999
 */",undetermined
9,httpd,UNKNOWN,"/*
 * Dummy a bunch of stuff just to get a compile
 */",undetermined
10,httpd,UNKNOWN,"/**************************************************************
 * test_limits.c
 *
 * A simple program for sending abusive requests to a server, based
 * on the sioux.c exploit code that this nimrod posted (see below).
 * Roy added options for testing long header fieldsize (-t h), long
 * request-lines (-t r), and a long request body (-t b).
 *
 * FreeBSD 2.2.x, FreeBSD 3.0, IRIX 5.3, IRIX 6.2:
 *   gcc -o test_limits test_limits.c
 *
 * Solaris 2.5.1:
 *   gcc -o test_limits test_limits.c -lsocket -lnsl
 *
 *
 * Message-ID: <861zqspvtw.fsf@niobe.ewox.org>
 * Date: Fri, 7 Aug 1998 19:04:27 +0200
 * Sender: Bugtraq List <BUGTRAQ@netspace.org>
 * From: Dag-Erling Coidan =?ISO-8859-1?Q?Sm=F8rgrav?= <finrod@EWOX.ORG>
 * Subject:      YA Apache DoS attack
 *
 * Copyright (c) 1998 Dag-Erling Codan Smrgrav
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 *    in this position and unchanged.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software withough specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */",undetermined
11,httpd,UNKNOWN,"/*
 * Kudos to Mark Huizer who originally suggested this on freebsd-current
 */",undetermined
12,httpd,UNKNOWN,/* default parameters */,undetermined
13,httpd,UNKNOWN,/* get options */,undetermined
14,httpd,UNKNOWN,/* connect */,undetermined
15,httpd,UNKNOWN,/* attack! */,undetermined
16,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17,httpd,UNKNOWN,"/* This program tests the ap_get_list_item routine in ../main/util.c.
 *
 * The defines in this sample compile line are specific to Roy's system.
 * They should match whatever was used to compile Apache first.
 *
     gcc -g -O2 -I../os/unix -I../include -o test_parser \
            -DSOLARIS2=250 -Wall -DALLOC_DEBUG -DPOOL_DEBUG \
            ../main/alloc.o ../main/buff.o ../main/util.o \
            ../ap/libap.a -lsocket -lnsl test_parser.c
 *
 * Roy Fielding, 1999
 */",undetermined
18,httpd,UNKNOWN,"/*
 * Dummy a bunch of stuff just to get a compile
 */",undetermined
19,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
20,httpd,UNKNOWN,"/* This is just a quick test program to see how long a wait is
 * produced by a select loop with an exponential backoff.
 *
 *   gcc -g -O2 -o test_select test_select.c
 *   test_select
 *
 * Roy Fielding, 1996
 */",undetermined
21,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
22,httpd,UNKNOWN,"/*
time-sem.c has the basics of the semaphores we use in http_main.c.  It's
intended for timing differences between various methods on an
architecture.  In practice we've found many things affect which semaphore
to be used:

    - NFS filesystems absolutely suck for fcntl() and flock()

    - uslock absolutely sucks on single-processor IRIX boxes, but
        absolutely rocks on multi-processor boxes.  The converse
        is true for fcntl.  sysvsem seems a moderate balance.

    - Under Solaris you can't have too many processes use SEM_UNDO, there
        might be a tuneable somewhere that increases the limit from 29.
        We're not sure what the tunable is, so there's a define
        NO_SEM_UNDO which can be used to simulate us trapping/blocking
        signals to be able to properly release the semaphore on a clean
        child death.  You'll also need to define NEED_UNION_SEMUN
        under solaris.

You'll need to define USE_SHMGET_SCOREBOARD if anonymous shared mmap()
doesn't work on your system (i.e. linux).

argv[1] is the #children, argv[2] is the #iterations per child

You should run each over many different #children inputs, and choose
#iter such that the program runs for at least a second or so... or even
longer depending on your patience.

compile with:

gcc -o time-FCNTL -Wall -O time-sem.c -DUSE_FCNTL_SERIALIZED_ACCEPT
gcc -o time-FLOCK -Wall -O time-sem.c -DUSE_FLOCK_SERIALIZED_ACCEPT
gcc -o time-SYSVSEM -Wall -O time-sem.c -DUSE_SYSVSEM_SERIALIZED_ACCEPT
gcc -o time-SYSVSEM2 -Wall -O time-sem.c -DUSE_SYSVSEM_SERIALIZED_ACCEPT -DNO_SEM_UNDO
gcc -o time-PTHREAD -Wall -O time-sem.c -DUSE_PTHREAD_SERIALIZED_ACCEPT -lpthread
gcc -o time-USLOCK -Wall -O time-sem.c -DUSE_USLOCK_SERIALIZED_ACCEPT

not all versions work on all systems.
*/",undetermined
23,httpd,UNKNOWN,"/*
 * Initialize mutex lock.
 * Must be safe to call this on a restart.
 */",undetermined
24,httpd,UNKNOWN,/* from current point */,undetermined
25,httpd,UNKNOWN,"/* -""- */",undetermined
26,httpd,UNKNOWN,/* until end of file */,undetermined
27,httpd,UNKNOWN,/* set exclusive/write lock */,undetermined
28,httpd,UNKNOWN,/* pid not actually interesting */,undetermined
29,httpd,UNKNOWN,/* from current point */,undetermined
30,httpd,UNKNOWN,"/* -""- */",undetermined
31,httpd,UNKNOWN,/* until end of file */,undetermined
32,httpd,UNKNOWN,/* set exclusive/write lock */,undetermined
33,httpd,UNKNOWN,/* pid not actually interesting */,undetermined
34,httpd,UNKNOWN,"/*
 * Initialize mutex lock.
 * Must be safe to call this on a restart.
 */",undetermined
35,httpd,UNKNOWN,"/* believe it or not, you need to define this under solaris */",undetermined
36,httpd,UNKNOWN,"/* note: pthread mutexes aren't released on child death, hence the
 * signal goop ... in a real implementation we'd do special things
 * during hup, term, usr1.
 */",undetermined
37,httpd,UNKNOWN,/* default is 8 */,undetermined
38,httpd,UNKNOWN,/* got lock */,undetermined
39,httpd,UNKNOWN,/* allocate shared memory for the shared_counter */,undetermined
40,httpd,UNKNOWN,"/*
     * Some SysV systems place the shared segment WAY too close
     * to the dynamic memory break point (sbrk(0)). This severely
     * limits the use of malloc/sbrk in the program since sbrk will
     * refuse to move past that point.
     *
     * To get around this, we move the break point ""way up there"",
     * attach the segment and then move break back down. Ugly
     */",undetermined
41,httpd,UNKNOWN,"/*
     * We must avoid leaving segments in the kernel's
     * (small) tables.
     */",undetermined
42,httpd,UNKNOWN,/* now bailout */,undetermined
43,httpd,UNKNOWN,/* nothing else to do */,undetermined
44,httpd,UNKNOWN,/* don't ask */,undetermined
45,httpd,UNKNOWN,/* allocate shared memory for the shared_counter */,undetermined
46,httpd,UNKNOWN,/* initialize counter to 0 */,undetermined
47,httpd,UNKNOWN,/* parent grabs mutex until done spawning children */,undetermined
48,httpd,UNKNOWN,"/* child, do our thing */",undetermined
49,httpd,UNKNOWN,/* a quick test to see that nothing is screwed up */,undetermined
50,httpd,UNKNOWN,/* launch children into action */,undetermined
51,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
52,httpd,UNKNOWN,"/*
   ** This program is based on ZeusBench V1.0 written by Adam Twiss
   ** which is Copyright (c) 1996 by Zeus Technology Ltd. http://www.zeustech.net/
   **
   ** This software is provided ""as is"" and any express or implied waranties,
   ** including but not limited to, the implied warranties of merchantability and
   ** fitness for a particular purpose are disclaimed.  In no event shall
   ** Zeus Technology Ltd. be liable for any direct, indirect, incidental, special,
   ** exemplary, or consequential damaged (including, but not limited to,
   ** procurement of substitute good or services; loss of use, data, or profits;
   ** or business interruption) however caused and on theory of liability.  Whether
   ** in contract, strict liability or tort (including negligence or otherwise)
   ** arising in any way out of the use of this software, even if advised of the
   ** possibility of such damage.
   **
 */",undetermined
53,httpd,UNKNOWN,"/*
   ** HISTORY:
   **    - Originally written by Adam Twiss <adam@zeus.co.uk>, March 1996
   **      with input from Mike Belshe <mbelshe@netscape.com> and
   **      Michael Campanella <campanella@stevms.enet.dec.com>
   **    - Enhanced by Dean Gaudet <dgaudet@apache.org>, November 1997
   **    - Cleaned up by Ralf S. Engelschall <rse@apache.org>, March 1998
   **    - POST and verbosity by Kurt Sussman <kls@merlot.com>, August 1998
   **    - HTML table output added by David N. Welton <davidw@prosa.it>, January 1999
   **    - Added Cookie, Arbitrary header and auth support. <dirkx@webweaving.org>, April 1999
   ** Version 1.3d
   **    - Increased version number - as some of the socket/error handling has
   **      fundamentally changed - and will give fundamentally different results
   **      in situations where a server is dropping requests. Therefore you can
   **      no longer compare results of AB as easily. Hence the inc of the version.
   **      They should be closer to the truth though. Sander & <dirkx@covalent.net>, End 2000.
   **    - Fixed proxy functionality, added median/mean statistics, added gnuplot
   **      output option, added _experimental/rudimentary_ SSL support. Added
   **      confidence guestimators and warnings. Sander & <dirkx@covalent.net>, End 2000
   **    - Fixed serious int overflow issues which would cause realistic (longer
   **      than a few minutes) run's to have wrong (but believable) results. Added
   **      trapping of connection errors which influenced measurements.
   **      Contributed by Sander Temme, Early 2001
   ** Version 1.3e
   **    - Changed timeout behavour during write to work whilst the sockets
   **      are filling up and apr_write() does writes a few - but not all.
   **      This will potentially change results. <dirkx@webweaving.org>, April 2001
   ** Version 2.0.36-dev
   **    Improvements to concurrent processing:
   **      - Enabled non-blocking connect()s.
   **      - Prevent blocking calls to apr_socket_recv() (thereby allowing AB to
   **        manage its entire set of socket descriptors).
   **      - Any error returned from apr_socket_recv() that is not EAGAIN or EOF
   **        is now treated as fatal.
   **      Contributed by Aaron Bannert, April 24, 2002
   **
   ** Version 2.0.36-2
   **     Internalized the version string - this string is part
   **     of the Agent: header and the result output.
   **
   ** Version 2.0.37-dev
   **     Adopted SSL code by Madhu Mathihalli <madhusudan_mathihalli@hp.com>
   **     [PATCH] ab with SSL support  Posted Wed, 15 Aug 2001 20:55:06 GMT
   **     Introduces four 'if (int == value)' tests per non-ssl request.
   **
   ** Version 2.0.40-dev
   **     Switched to the new abstract pollset API, allowing ab to
   **     take advantage of future apr_pollset_t scalability improvements.
   **     Contributed by Brian Pane, August 31, 2002
   **
   ** Version 2.3
   **     SIGINT now triggers output_results().
   **     Contributed by colm, March 30, 2006
   **/",undetermined
54,httpd,UNKNOWN,"/* Note: this version string should start with \d+[\d\.]* and be a valid
 * string for an HTTP Agent: header when prefixed with 'ApacheBench/'.
 * It should reflect the version of AB - and not that of the apache server
 * it happens to accompany. And it should be updated or changed whenever
 * the results are no longer fundamentally comparable to the results of
 * a previous version of ab. Either due to a change in the logic of
 * ab - or to due to a change in the distribution it is compiled with
 * (such as an APR change in for example blocking).
 */",undetermined
55,httpd,UNKNOWN,"/*
 * BUGS:
 *
 * - uses strcpy/etc.
 * - has various other poor buffer attacks related to the lazy parsing of
 *   response headers from the server
 * - doesn't implement much of HTTP/1.x, only accepts certain forms of
 *   responses
 * - (performance problem) heavy use of strstr shows up top in profile
 *   only an issue for loopback usage
 */",undetermined
56,httpd,UNKNOWN,/*  -------------------------------------------------------------------- */,undetermined
57,httpd,UNKNOWN,"/* Hmmm... This source code isn't being compiled in ASCII.
 * In order for data that flows over the network to make
 * sense, we need to translate to/from ASCII.
 */",undetermined
58,httpd,UNKNOWN,/* affects include files on Solaris */,undetermined
59,httpd,UNKNOWN,/* for getpid() */,undetermined
60,httpd,UNKNOWN,/* ------------------- DEFINITIONS -------------------------- */,undetermined
61,httpd,UNKNOWN,/* maximum number of requests on a time limited test */,undetermined
62,httpd,UNKNOWN,"/* connection state
 * don't add enums or rearrange or otherwise change values without
 * visiting set_conn_state()
 */",undetermined
63,httpd,UNKNOWN,"/* TCP connect initiated, but we don't
                                 * know if it worked yet
                                 */",undetermined
64,httpd,UNKNOWN,/* we know TCP connect completed */,undetermined
65,httpd,UNKNOWN,/* amount of bytes read */,undetermined
66,httpd,UNKNOWN,/* amount of body read */,undetermined
67,httpd,UNKNOWN,"/* keep pointers in what we write - across
                                 * EAGAINs */",undetermined
68,httpd,UNKNOWN,/* Content-Length value used for keep-alive */,undetermined
69,httpd,UNKNOWN,/* a buffer to store server response header */,undetermined
70,httpd,UNKNOWN,/* offset in cbuffer */,undetermined
71,httpd,UNKNOWN,/* non-zero if a keep-alive request */,undetermined
72,httpd,UNKNOWN,"/* non-zero if we have the entire header in
                                 * cbuff */",undetermined
73,httpd,UNKNOWN,/* Start of connection */,undetermined
74,httpd,UNKNOWN,"/* Connected, start writing */",undetermined
75,httpd,UNKNOWN,/* Request written */,undetermined
76,httpd,UNKNOWN,/* First byte of input */,undetermined
77,httpd,UNKNOWN,/* Connection closed */,undetermined
78,httpd,UNKNOWN,/* start time of connection */,undetermined
79,httpd,UNKNOWN,/* between request and reading response */,undetermined
80,httpd,UNKNOWN,/* time to connect */,undetermined
81,httpd,UNKNOWN,/* time for connection */,undetermined
82,httpd,UNKNOWN,/* --------------------- GLOBALS ---------------------------- */,undetermined
83,httpd,UNKNOWN,/* no verbosity by default */,undetermined
84,httpd,UNKNOWN,/* ok to proceed after socket receive errors */,undetermined
85,httpd,UNKNOWN,/* non-zero if sending body with request */,undetermined
86,httpd,UNKNOWN,/* Number of requests to make */,undetermined
87,httpd,UNKNOWN,/* How often do we say we're alive */,undetermined
88,httpd,UNKNOWN,/* Number of multiple requests to make */,undetermined
89,httpd,UNKNOWN,/* Show percentile served */,undetermined
90,httpd,UNKNOWN,/* Show confidence estimator and warnings */,undetermined
91,httpd,UNKNOWN,/* time limit in secs */,undetermined
92,httpd,UNKNOWN,/* try and do keepalive connections */,undetermined
93,httpd,UNKNOWN,/* we use the OS default window size */,undetermined
94,httpd,UNKNOWN,/* name that server reports */,undetermined
95,httpd,UNKNOWN,/* host name from URL */,undetermined
96,httpd,UNKNOWN,"/* value of ""Host:"" header field */",undetermined
97,httpd,UNKNOWN,/* path name */,undetermined
98,httpd,UNKNOWN,/* name of file containing post data */,undetermined
99,httpd,UNKNOWN,/* *buffer containing data from postfile */,undetermined
100,httpd,UNKNOWN,/* length of data to be POSTed */,undetermined
101,httpd,UNKNOWN,/* content type to put in POST header */,undetermined
102,httpd,UNKNOWN,/* optional cookie line */,undetermined
103,httpd,UNKNOWN,/* optional (basic/uuencoded) auhentication */,undetermined
104,httpd,UNKNOWN,/* optional arbitrary headers */,undetermined
105,httpd,UNKNOWN,/* port number */,undetermined
106,httpd,UNKNOWN,/* proxy host name */,undetermined
107,httpd,UNKNOWN,/* proxy port */,undetermined
108,httpd,UNKNOWN,/* GNUplot file */,undetermined
109,httpd,UNKNOWN,/* CSV Percentile file */,undetermined
110,httpd,UNKNOWN,/* timeout value */,undetermined
111,httpd,UNKNOWN,/* overrides for ab-generated common headers */,undetermined
112,httpd,UNKNOWN,"/* was an optional ""Host:"" header specified? */",undetermined
113,httpd,UNKNOWN,"/* was an optional ""User-Agent:"" header specified? */",undetermined
114,httpd,UNKNOWN,"/* was an optional ""Accept:"" header specified? */",undetermined
115,httpd,UNKNOWN,"/*
  * XXX - this is now a per read/write transact type of value
  */",undetermined
116,httpd,UNKNOWN,/* use html in the report */,undetermined
117,httpd,UNKNOWN,/* the length the document should be */,undetermined
118,httpd,UNKNOWN,/* total number of bytes read */,undetermined
119,httpd,UNKNOWN,/* totoal amount of entity body read */,undetermined
120,httpd,UNKNOWN,"/* total number of bytes posted, inc. headers */",undetermined
121,httpd,UNKNOWN,"/* number of requests started, so no excess */",undetermined
122,httpd,UNKNOWN,/* number of requests we have done */,undetermined
123,httpd,UNKNOWN,/* number of keep alive connections done */,undetermined
124,httpd,UNKNOWN,/* number of good and bad requests */,undetermined
125,httpd,UNKNOWN,/* number of broken pipe writes */,undetermined
126,httpd,UNKNOWN,/* requests failed due to response length */,undetermined
127,httpd,UNKNOWN,/* requests failed due to connection drop */,undetermined
128,httpd,UNKNOWN,/* requests failed due to broken read */,undetermined
129,httpd,UNKNOWN,/* requests failed due to exception */,undetermined
130,httpd,UNKNOWN,/* requests with invalid or non-200 response */,undetermined
131,httpd,UNKNOWN,/* global request (and its length) */,undetermined
132,httpd,UNKNOWN,/* one global throw-away buffer to read stuff into */,undetermined
133,httpd,UNKNOWN,/* interesting percentiles */,undetermined
134,httpd,UNKNOWN,/* connection array */,undetermined
135,httpd,UNKNOWN,/* data for each request */,undetermined
136,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
137,httpd,UNKNOWN,/* simple little function to write an error string and exit */,undetermined
138,httpd,UNKNOWN,/* simple little function to write an APR error string and exit */,undetermined
139,httpd,UNKNOWN,/* for STATE_UNCONNECTED */,undetermined
140,httpd,UNKNOWN,/* for STATE_CONNECTING */,undetermined
141,httpd,UNKNOWN,"/* for STATE_CONNECTED; we don't poll in this state,
                      * so prepare for polling in the following state --
                      * STATE_READ
                      */",undetermined
142,httpd,UNKNOWN,/* for STATE_READ */,undetermined
143,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
144,httpd,UNKNOWN,"/* write out request to a connection - assumes we can write
 * (small) request out in one go into our new socket buffer
 *
 */",undetermined
145,httpd,UNKNOWN,"/*
     * seed in the current time (usually just 4 bytes)
     */",undetermined
146,httpd,UNKNOWN,"/*
     * seed in the current process id (usually just 4 bytes)
     */",undetermined
147,httpd,UNKNOWN,"/*
     * seed in some current state of the run-time stack (128 bytes)
     */",undetermined
148,httpd,UNKNOWN,/* dump the extension list too */,undetermined
149,httpd,UNKNOWN,/* Anon DH */,undetermined
150,httpd,UNKNOWN,/* Try again */,undetermined
151,httpd,UNKNOWN,/* Unexpected result */,undetermined
152,httpd,UNKNOWN,/* USE_SSL */,undetermined
153,httpd,UNKNOWN,/* prevent gcc warning */,undetermined
154,httpd,UNKNOWN,"/*
         * First time round ?
         */",undetermined
155,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
156,httpd,UNKNOWN,/* calculate and output results */,undetermined
157,httpd,UNKNOWN,/* record final time if interrupted */,undetermined
158,httpd,UNKNOWN,/* avoid divide by zero */,undetermined
159,httpd,UNKNOWN,/* work out connection times */,undetermined
160,httpd,UNKNOWN,"/* calculating the sample variance: the sum of the squared deviations, divided by n-1 */",undetermined
161,httpd,UNKNOWN,"/*
         * XXX: what is better; this hideous cast of the compradre function; or
         * the four warnings during compile ? dirkx just does not know and
         * hates both/
         */",undetermined
162,httpd,UNKNOWN,"/*
         * Reduce stats from apr time to milliseconds
         */",undetermined
163,httpd,UNKNOWN,/* Sorted on total connect times */,undetermined
164,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
165,httpd,UNKNOWN,/* calculate and output results in HTML  */,undetermined
166,httpd,UNKNOWN,/* avoid divide by zero */,undetermined
167,httpd,UNKNOWN,/* work out connection times */,undetermined
168,httpd,UNKNOWN,"/*
         * Reduce stats from apr time to milliseconds
         */",undetermined
169,httpd,UNKNOWN,/* avoid division by zero (if 0 done) */,undetermined
170,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
171,httpd,UNKNOWN,/* start asnchronous non-blocking connection */,undetermined
172,httpd,UNKNOWN,/* connected first time */,undetermined
173,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
174,httpd,UNKNOWN,/* close down connection and save stats */,undetermined
175,httpd,UNKNOWN,"/*
         * server has legitimately shut down an idle keep alive request
         */",undetermined
176,httpd,UNKNOWN,/* connection never happened */,undetermined
177,httpd,UNKNOWN,/* first time here */,undetermined
178,httpd,UNKNOWN,/* save out time */,undetermined
179,httpd,UNKNOWN,/* connect again */,undetermined
180,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
181,httpd,UNKNOWN,/* read data from connection */,undetermined
182,httpd,UNKNOWN,/* 3 digits and null */,undetermined
183,httpd,UNKNOWN,/* connection closed cleanly: */,undetermined
184,httpd,UNKNOWN,"/* connection closed, but in violation of the protocol, after
                 * some data has already been read; this commonly happens, so
                 * let the length check catch any response errors
                 */",undetermined
185,httpd,UNKNOWN,/* some fatal error: */,undetermined
186,httpd,UNKNOWN,/* catch legitimate fatal apr_socket_recv errors */,undetermined
187,httpd,UNKNOWN,/* -1 allows for \0 term */,undetermined
188,httpd,UNKNOWN,/* NOT_ASCII */,undetermined
189,httpd,UNKNOWN,/* terminate for benefit of strstr */,undetermined
190,httpd,UNKNOWN,"/*
         * this next line is so that we talk to NCSA 1.5 which blatantly
         * breaks the http specifaction
         */",undetermined
191,httpd,UNKNOWN,/* read rest next time */,undetermined
192,httpd,UNKNOWN,/* header is in invalid or too big - close connection */,undetermined
193,httpd,UNKNOWN,/* have full header */,undetermined
194,httpd,UNKNOWN,"/*
                 * this is first time, extract some interesting info
                 */",undetermined
195,httpd,UNKNOWN,"/*
             * XXX: this parsing isn't even remotely HTTP compliant... but in
             * the interest of speed it doesn't totally have to be, it just
             * needs to be extended to handle whatever servers folks want to
             * test against. -djg
             */",undetermined
196,httpd,UNKNOWN,/* check response code */,undetermined
197,httpd,UNKNOWN,/* really HTTP/1.x_ */,undetermined
198,httpd,UNKNOWN,/* terminate at end of header */,undetermined
199,httpd,UNKNOWN,/* for benefit of MSIIS */,undetermined
200,httpd,UNKNOWN,"/* handle NCSA, which sends Content-length: */",undetermined
201,httpd,UNKNOWN,/* response to HEAD doesn't have entity body */,undetermined
202,httpd,UNKNOWN,/* The response may not have a Content-Length header */,undetermined
203,httpd,UNKNOWN,"/* outside header, everything we have read is entity body */",undetermined
204,httpd,UNKNOWN,/* finished a keep-alive connection */,undetermined
205,httpd,UNKNOWN,/* save out time */,undetermined
206,httpd,UNKNOWN,/* first time here */,undetermined
207,httpd,UNKNOWN,/* zero connect time with keep-alive */,undetermined
208,httpd,UNKNOWN,/* --------------------------------------------------------- */,undetermined
209,httpd,UNKNOWN,/* run the tests */,undetermined
210,httpd,UNKNOWN,"/*
     * XXX: a way to calculate the stats without requiring O(requests) memory
     * XXX: would be nice.
     */",undetermined
211,httpd,UNKNOWN,/* add default headers if necessary */,undetermined
212,httpd,UNKNOWN,"/* Host: header not overridden, add default value to hdrs */",undetermined
213,httpd,UNKNOWN,"/* Header overridden, no need to add, as it is already in hdrs */",undetermined
214,httpd,UNKNOWN,"/* User-Agent: header not overridden, add default value to hdrs */",undetermined
215,httpd,UNKNOWN,"/* Header overridden, no need to add, as it is already in hdrs */",undetermined
216,httpd,UNKNOWN,"/* Accept: header not overridden, add default value to hdrs */",undetermined
217,httpd,UNKNOWN,"/* Header overridden, no need to add, as it is already in hdrs */",undetermined
218,httpd,UNKNOWN,/* setup request */,undetermined
219,httpd,UNKNOWN,"/*
     * Combine headers and (optional) post file into one continuous buffer
     */",undetermined
220,httpd,UNKNOWN,/* NOT_ASCII */,undetermined
221,httpd,UNKNOWN,/* This only needs to be done once */,undetermined
222,httpd,UNKNOWN,/* This too */,undetermined
223,httpd,UNKNOWN,/* ok - lets start */,undetermined
224,httpd,UNKNOWN,/* Output the results if the user terminates the run early. */,undetermined
225,httpd,UNKNOWN,/* initialise lots of requests */,undetermined
226,httpd,UNKNOWN,"/*
             * If the connection isn't connected how can we check it?
             */",undetermined
227,httpd,UNKNOWN,"/*
             * Notes: APR_POLLHUP is set after FIN is received on some
             * systems, so treat that like APR_POLLIN so that we try to read
             * again.
             *
             * Some systems return APR_POLLERR with APR_POLLHUP.  We need to
             * call read_connection() for APR_POLLHUP, so check for
             * APR_POLLHUP first so that a closed connection isn't treated
             * like an I/O error.  If it is, we never figure out that the
             * connection is done and we loop here endlessly calling
             * apr_poll().
             */",undetermined
228,httpd,UNKNOWN,"/* avoid apr_poll/EINPROGRESS loop on HP-UX, let recv discover ECONNREFUSED */",undetermined
229,httpd,UNKNOWN,/* ------------------------------------------------------- */,undetermined
230,httpd,UNKNOWN,/* display copyright information */,undetermined
231,httpd,UNKNOWN,/* display usage information */,undetermined
232,httpd,UNKNOWN,"/* 80 column ruler:  ********************************************************************************
 */",undetermined
233,httpd,UNKNOWN,/* ------------------------------------------------------- */,undetermined
234,httpd,UNKNOWN,/* split URL into parts */,undetermined
235,httpd,UNKNOWN,/* Save a copy for the proxy */,undetermined
236,httpd,UNKNOWN,/* IPv6 numeric address string */,undetermined
237,httpd,UNKNOWN,/* no port specified */,undetermined
238,httpd,UNKNOWN,/* ------------------------------------------------------- */,undetermined
239,httpd,UNKNOWN,"/* read data to POST/PUT from file, save contents and length */",undetermined
240,httpd,UNKNOWN,/* ------------------------------------------------------- */,undetermined
241,httpd,UNKNOWN,/* sort out command-line args and call test */,undetermined
242,httpd,UNKNOWN,/* table defaults  */,undetermined
243,httpd,UNKNOWN,/* 0.0.0.0 or :: */,undetermined
244,httpd,UNKNOWN,/* timeout value */,undetermined
245,httpd,UNKNOWN,"/* need to size data array on
                                             * something */",undetermined
246,httpd,UNKNOWN,"/*
                 * assume username passwd already to be in colon separated form.
                 * Ready to be uu-encoded.
                 */",undetermined
247,httpd,UNKNOWN,"/*
                 * assume username passwd already to be in colon separated form.
                 */",undetermined
248,httpd,UNKNOWN,"/*
                 * allow override of some of the common headers that ab adds
                 */",undetermined
249,httpd,UNKNOWN,"/*
                 * if any of the following three are used, turn on html output
                 * automatically
                 */",undetermined
250,httpd,UNKNOWN,"/*
                     * assume proxy-name[:port]
                     */",undetermined
251,httpd,UNKNOWN,/* Print line every 10% of requests */,undetermined
252,httpd,UNKNOWN,"/* but never more often than once every 100
                                 * connections. */",undetermined
253,httpd,UNKNOWN,/* Keep memory usage as low as possible */,undetermined
254,httpd,UNKNOWN,"/* Ignore writes to connections that
                                         * have been closed at the other end. */",undetermined
255,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
256,httpd,UNKNOWN,"/*
 * Given one or more group identifers on the command line (e.g.,
 * ""httpd"" or ""#-1""), figure out whether they'll be valid for
 * the server to use at run-time.
 *
 * If a groupname isn't found, or we can't setgid() to it, return
 * -1.  If all groups are valid, return 0.
 *
 * This may need to be run as the superuser for the setgid() to
 * succeed; running it as any other user may result in a false
 * negative.
 */",undetermined
257,httpd,UNKNOWN,"/*
     * Assume success. :-)
     */",undetermined
258,httpd,UNKNOWN,"/*
         * If it's from a 'Group #-1' statement, get the numeric value
         * and skip the group lookup stuff.
         */",undetermined
259,httpd,UNKNOWN,"/*
         * A NULL return means no such group was found, so we're done
         * with this one.
         */",undetermined
260,httpd,UNKNOWN,"/*
             * See if we can switch to the numeric GID we have. If so,
             * all well and good; if not, well..
             */",undetermined
261,httpd,UNKNOWN,"/*
     * Worst-case return value.
     */",undetermined
262,httpd,UNKNOWN,"/*
 * Local Variables:
 * mode: C
 * c-file-style: ""bsd""
 * End:
 */",undetermined
263,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
264,httpd,UNKNOWN,"/* For EXIT_SUCCESS, EXIT_FAILURE */",undetermined
265,httpd,UNKNOWN,/* For execl */,undetermined
266,httpd,UNKNOWN,/* Command line arguments */,undetermined
267,httpd,UNKNOWN,"/* Ok, so we need a file that has file descriptor 0 (which
             * FastCGI wants), but points to our socket.  This isn't really
             * possible in APR, so we cheat a bit.  I have no idea how to
             * do this on a non-unix platform, so for now this is platform
             * specific.  Ick.
             *
             * Note that this has to happen post-detach, otherwise fd 0
             * gets closed during apr_proc_detach and it's all for nothing.
             *
             * Unfortunately, doing this post detach means we have no way
             * to let anyone know if there's a problem at this point :( */",undetermined
268,httpd,UNKNOWN,"/* XXX Can't use apr_proc_create because there's no way to get
             *     infd into the procattr without going through another dup2,
             *     which means by the time it gets to the fastcgi process it
             *     is no longer fd 0, so it doesn't work.  Sigh. */",undetermined
269,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
270,httpd,UNKNOWN,"/*
 * htcacheclean.c: simple program for cleaning of
 * the disk cache of the Apache HTTP server
 *
 * Contributed by Andreas Steinmetz <ast domdv.de>
 * 8 Oct 2004
 */",undetermined
271,httpd,UNKNOWN,/* define the following for debugging */,undetermined
272,httpd,UNKNOWN,"/*
 * Note: on Linux delays <= 2ms are busy waits without
 *       scheduling, so never use a delay <= 2ms below
 */",undetermined
273,httpd,UNKNOWN,/* usecs */,undetermined
274,httpd,UNKNOWN,/* be nice after this amount of delete ops */,undetermined
275,httpd,UNKNOWN,/* maximum stat attempts for a file */,undetermined
276,httpd,UNKNOWN,/* usecs */,undetermined
277,httpd,UNKNOWN,/* headers file */,undetermined
278,httpd,UNKNOWN,/* body file */,undetermined
279,httpd,UNKNOWN,/* temporary file */,undetermined
280,httpd,UNKNOWN,/* secs */,undetermined
281,httpd,UNKNOWN,"/* type of file/fileset: TEMP, HEADER, DATA, HEADERDATA */",undetermined
282,httpd,UNKNOWN,/* headers file modification time */,undetermined
283,httpd,UNKNOWN,/* body file modification time */,undetermined
284,httpd,UNKNOWN,/* headers file size */,undetermined
285,httpd,UNKNOWN,/* body or temporary file size */,undetermined
286,httpd,UNKNOWN,/* file/fileset base name */,undetermined
287,httpd,UNKNOWN,/* cache entry exiration time */,undetermined
288,httpd,UNKNOWN,/* cache entry time of last response to client */,undetermined
289,httpd,UNKNOWN,/* headers file modification time */,undetermined
290,httpd,UNKNOWN,/* body file modification time */,undetermined
291,httpd,UNKNOWN,/* headers file size */,undetermined
292,httpd,UNKNOWN,/* body or temporary file size */,undetermined
293,httpd,UNKNOWN,/* fileset base name */,undetermined
294,httpd,UNKNOWN,/* file deletion count for nice mode */,undetermined
295,httpd,UNKNOWN,/* flag: true if SIGINT or SIGTERM occurred */,undetermined
296,httpd,UNKNOWN,/* flag: true means user said apache is not running */,undetermined
297,httpd,UNKNOWN,/* flag: true means print statistics */,undetermined
298,httpd,UNKNOWN,/* flag: true means nice mode is activated */,undetermined
299,httpd,UNKNOWN,"/* flag: true means dry run, don't actually delete
                                 anything */",undetermined
300,httpd,UNKNOWN,/* flag: true means directories should be deleted */,undetermined
301,httpd,UNKNOWN,/* flag: true means list cached urls */,undetermined
302,httpd,UNKNOWN,/* flag: true means list cached urls */,undetermined
303,httpd,UNKNOWN,/* string length of the path to the proxy directory */,undetermined
304,httpd,UNKNOWN,/* start time of this processing run */,undetermined
305,httpd,UNKNOWN,/* stderr file handle */,undetermined
306,httpd,UNKNOWN,/* stdout file handle */,undetermined
307,httpd,UNKNOWN,"/* file size summary for deleted unsolicited
                                 files */",undetermined
308,httpd,UNKNOWN,/* ENTRY ring anchor */,undetermined
309,httpd,UNKNOWN,/* short program name as called */,undetermined
310,httpd,UNKNOWN,/* what did we clean? */,undetermined
311,httpd,UNKNOWN,"/*
 * fake delete for debug purposes
 */",undetermined
312,httpd,UNKNOWN,"/* stat and printing to simulate some deletion system load and to
       display what would actually have happened */",undetermined
313,httpd,UNKNOWN,"/*
 * called on SIGINT or SIGTERM
 */",undetermined
314,httpd,UNKNOWN,"/*
 * called in out of memory condition
 */",undetermined
315,httpd,UNKNOWN,/* be careful to call exit() only once */,undetermined
316,httpd,UNKNOWN,"/*
 * print purge statistics
 */",undetermined
317,httpd,UNKNOWN,"/**
 * Round the value up to the given threshold.
 */",undetermined
318,httpd,UNKNOWN,"/*
 * delete parent directories
 */",undetermined
319,httpd,UNKNOWN,"/* temp pool, otherwise lots of memory could be allocated */",undetermined
320,httpd,UNKNOWN,"/* If asked to delete dirs, do so now. We don't care if it fails.
     * If it fails, it likely means there was something else there.
     */",undetermined
321,httpd,UNKNOWN,/* remove the directory */,undetermined
322,httpd,UNKNOWN,/* vary directory found? */,undetermined
323,httpd,UNKNOWN,"/*
 * delete a single file
 */",undetermined
324,httpd,UNKNOWN,"/* temp pool, otherwise lots of memory could be allocated */",undetermined
325,httpd,UNKNOWN,"/*
 * delete cache file set
 */",undetermined
326,httpd,UNKNOWN,"/* temp pool, otherwise lots of memory could be allocated */",undetermined
327,httpd,UNKNOWN,"/*
 * list the cache directory tree
 */",undetermined
328,httpd,UNKNOWN,/* stat the header file */,undetermined
329,httpd,UNKNOWN,/* ignore the file */,undetermined
330,httpd,UNKNOWN,/* ignore the file */,undetermined
331,httpd,UNKNOWN,/* ignore the file */,undetermined
332,httpd,UNKNOWN,/* stat the data file */,undetermined
333,httpd,UNKNOWN,/* ignore the file */,undetermined
334,httpd,UNKNOWN,/* ignore the file */,undetermined
335,httpd,UNKNOWN,"/*
 * walk the cache directory tree
 */",undetermined
336,httpd,UNKNOWN,"/* there may be temporary files which may be gone before
         * processing, always skip these if not in realclean mode
         */",undetermined
337,httpd,UNKNOWN,"/* this may look strange but apr_stat() may return an error which
         * is system dependent and there may be transient failures,
         * so just blindly retry for a short while
         */",undetermined
338,httpd,UNKNOWN,"/* what may happen here is that apache did create a file which
         * we did detect but then does delete the file before we can
         * get file information, so if we don't get any file information
         * we will ignore the file in this case
         */",undetermined
339,httpd,UNKNOWN,/* if a user manually creates a '.header' file */,undetermined
340,httpd,UNKNOWN,/* if a user manually creates a '.data' file */,undetermined
341,httpd,UNKNOWN,"/* This must be a URL that added Vary headers later,
                         * so kill the orphaned .data file
                         */",undetermined
342,httpd,UNKNOWN,"/* We didn't recognise the format, kill the files */",undetermined
343,httpd,UNKNOWN,"/* we have a somehow unreadable headers file which is associated
             * with a data file. this may be caused by apache currently
             * rewriting the headers file. thus we may delete the file set
             * either in realclean mode or if the headers file modification
             * timestamp is not within a specified positive or negative offset
             * to the current time.
             */",undetermined
344,httpd,UNKNOWN,"/* single data and header files may be deleted either in realclean
         * mode or if their modification timestamp is not within a
         * specified positive or negative offset to the current time.
         * this handling is necessary due to possible race conditions
         * between apache and this process
         */",undetermined
345,httpd,UNKNOWN,"/* temp files may only be deleted in realclean mode which
         * is asserted above if a tempfile is in the hash array
         */",undetermined
346,httpd,UNKNOWN,"/*
 * purge cache entries
 */",undetermined
347,httpd,UNKNOWN,"/* process all entries with a timestamp in the future, this may
     * happen if a wrong system time is corrected
     */",undetermined
348,httpd,UNKNOWN,/* process all entries with are expired */,undetermined
349,httpd,UNKNOWN,"/* process remaining entries oldest to newest, the check for an emtpy
     * ring actually isn't necessary except when the compiler does
     * corrupt 64bit arithmetics which happend to me once, so better safe
     * than sorry
     */",undetermined
350,httpd,UNKNOWN,"/* tolerate the directory not being empty, the cache may have
                 * attempted to recreate the directory in the mean time.
                 */",undetermined
351,httpd,UNKNOWN,"/* If asked to delete dirs, do so now. We don't care if it fails.
     * If it fails, it likely means there was something else there.
     */",undetermined
352,httpd,UNKNOWN,"/**
 * Delete a specific URL from the cache.
 */",undetermined
353,httpd,UNKNOWN,"/* encode 128 bits as 22 characters, using a modified uuencoding
     * the encoding is 3 bytes -> 4 characters* i.e. 128 bits is
     * 5 x 3 bytes + 1 byte -> 5 * 4 characters + 2 characters
     */",undetermined
354,httpd,UNKNOWN,/* one byte left */,undetermined
355,httpd,UNKNOWN,/* use up 6 bits */,undetermined
356,httpd,UNKNOWN,/* automatically find the directory levels */,undetermined
357,httpd,UNKNOWN,"/*
 * usage info
 */",undetermined
358,httpd,UNKNOWN,"/*
 * main
 */",undetermined
359,httpd,UNKNOWN,/* avoid compiler warning */,undetermined
360,httpd,UNKNOWN,/* neither empty nor [Bb] */,undetermined
361,httpd,UNKNOWN,/* neither empty nor [Bb] */,undetermined
362,httpd,UNKNOWN,/* switch */,undetermined
363,httpd,UNKNOWN,/* else */,undetermined
364,httpd,UNKNOWN,/* while */,undetermined
365,httpd,UNKNOWN,"/* before daemonizing, so we
                                               * can report errors
                                               */",undetermined
366,httpd,UNKNOWN,/* delete original pidfile only in parent */,undetermined
367,httpd,UNKNOWN,"/* we can't sleep the whole delay time here apiece as this is racy
         * with respect to interrupt delivery - think about what happens
         * if we have tested for an interrupt, then get scheduled
         * before the apr_sleep() call and while waiting for the cpu
         * we do get an interrupt
         */",undetermined
368,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
369,httpd,UNKNOWN,"/*
 * htdbm.c: simple program for manipulating DBM
 * password databases for the Apache HTTP server
 *
 * Contributed by Mladen Turk <mturk mappingsoft.com>
 * 12 Oct 2001
 */",undetermined
370,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
371,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
372,httpd,UNKNOWN,/* Set MD5 as default */,undetermined
373,httpd,UNKNOWN,/* Note: we don't store \0-terminators on our dbm data */,undetermined
374,httpd,UNKNOWN,"/*
     * Make sure we still have exactly the right number of arguments left
     * (the filename, the username, and possibly the password if -b was
     * specified).
     */",undetermined
375,httpd,UNKNOWN,/* Suppress compiler warning. */,undetermined
376,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
377,httpd,UNKNOWN,"/******************************************************************************
 ******************************************************************************
 * NOTE! This program is not safe as a setuid executable!  Do not make it
 * setuid!
 ******************************************************************************
 *****************************************************************************/",undetermined
378,httpd,UNKNOWN,"/*
 * htdigest.c: simple program for manipulating digest passwd file for Apache
 *
 * by Alexei Kosut, based on htpasswd.c, by Rob McCool
 */",undetermined
379,httpd,UNKNOWN,/* for apr_getpass() */,undetermined
380,httpd,UNKNOWN,/* for apr_pstrdup() */,undetermined
381,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
382,httpd,UNKNOWN,/* we need 2 remaining bytes in buffer */,undetermined
383,httpd,UNKNOWN,/* First remaining byte potentially used here */,undetermined
384,httpd,UNKNOWN,/* Second remaining byte used here */,undetermined
385,httpd,UNKNOWN,/* this includes room for 2 * ':' + '\0' */,undetermined
386,httpd,UNKNOWN,/* Do MD5 stuff */,undetermined
387,httpd,UNKNOWN,"/* The temporary file has all the data, just copy it to the new location.
     */",undetermined
388,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
389,httpd,UNKNOWN,"/******************************************************************************
 ******************************************************************************
 * NOTE! This program is not safe as a setuid executable!  Do not make it
 * setuid!
 ******************************************************************************
 *****************************************************************************/",undetermined
390,httpd,UNKNOWN,"/*
 * htpasswd.c: simple program for manipulating password file for
 * the Apache HTTP server
 *
 * Originally by Rob McCool
 *
 * Exit values:
 *  0: Success
 *  1: Failure; file access/permission problem
 *  2: Failure; command line syntax problem (usage message issued)
 *  3: Failure; password verification failure
 *  4: Failure; operation interrupted (such as with CTRL/C)
 *  5: Failure; buffer would overflow (username, filename, or computed
 *     record too long)
 *  6: Failure; username contains illegal or reserved characters
 *  7: Failure; file is not a valid htpasswd file
 */",undetermined
391,httpd,UNKNOWN,"/*
 * Check to see if the specified file can be opened for the given
 * access.
 */",undetermined
392,httpd,UNKNOWN,"/*
 * Return true if the named file exists, regardless of permissions.
 */",undetermined
393,httpd,UNKNOWN,"/* not a power of two, i.e. more than one flag specified */",undetermined
394,httpd,UNKNOWN,"/*
     * Make sure we still have exactly the right number of arguments left
     * (the filename, the username, and possibly the password if -b was
     * specified).
     */",undetermined
395,httpd,UNKNOWN,"/*
 * Let's do it.  We end up doing a lot of file opening and closing,
 * but what do we care?  This application isn't run constantly.
 */",undetermined
396,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
397,httpd,UNKNOWN,"/*
     * Only do the file checks if we're supposed to frob it.
     */",undetermined
398,httpd,UNKNOWN,"/*
             * Check that this existing file is readable and writable.
             */",undetermined
399,httpd,UNKNOWN,"/*
             * Error out if -c was omitted for this non-existant file.
             */",undetermined
400,httpd,UNKNOWN,"/*
             * As it doesn't exist yet, verify that we can create it.
             */",undetermined
401,httpd,UNKNOWN,"/*
     * All the file access checks (if any) have been made.  Time to go to work;
     * try to create the record for the username in question.  If that
     * fails, there's no need to waste any time on file manipulations.
     * Any error message text is returned in the record buffer, since
     * the mkrecord() routine doesn't have access to argv[].
     */",undetermined
402,httpd,UNKNOWN,"/*
         * We can access the files the right way, and we have a record
         * to add or update.  Let's do it..
         */",undetermined
403,httpd,UNKNOWN,"/*
     * If we're not creating a new file, copy records from the existing
     * one to the temporary file until we find the specified user.
     */",undetermined
404,httpd,UNKNOWN,"/*
             * See if this is our user.
             */",undetermined
405,httpd,UNKNOWN,"/*
                 * If we've not got a colon on the line, this could well
                 * not be a valid htpasswd file.
                 * We should bail at this point.
                 */",undetermined
406,httpd,UNKNOWN,/* We found the user we were looking for */,undetermined
407,httpd,UNKNOWN,/* Delete entry from the file */,undetermined
408,httpd,UNKNOWN,/* Verify */,undetermined
409,httpd,UNKNOWN,/* Update entry */,undetermined
410,httpd,UNKNOWN,"/* The temporary file has all the data, just copy it to the new location.
     */",undetermined
411,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
412,httpd,UNKNOWN,"/*
 * httxt2dbm.c: simple program for converting RewriteMap text files to DBM
 * Rewrite databases for the Apache HTTP server
 *
 */",undetermined
413,httpd,UNKNOWN,/* for atexit() */,undetermined
414,httpd,UNKNOWN,/* From mod_rewrite.c */,undetermined
415,httpd,UNKNOWN,/* +1 for \0 */,undetermined
416,httpd,UNKNOWN,/* no value. solid line of data. */,undetermined
417,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
418,httpd,UNKNOWN,"/*
 * logresolve 2.0
 *
 * Tom Rathborne - tomr uunet.ca - http://www.uunet.ca/~tomr/
 * UUNET Canada, April 16, 1995
 *
 * Rewritten by David Robinson. (drtr ast.cam.ac.uk)
 * Rewritten again, and ported to APR by Colm MacCarthaigh
 *
 * Usage: logresolve [-s filename] [-c] < access_log > new_log
 *
 * Arguments:
 *    -s filename     name of a file to record statistics
 *    -c              check the DNS for a matching A record for the host.
 *
 * Notes:             (For historical interest)
 *
 * To generate meaningful statistics from an HTTPD log file, it's good
 * to have the domain name of each machine that accessed your site, but
 * doing this on the fly can slow HTTPD down.
 *
 * Compiling NCSA HTTPD with the -DMINIMAL_DNS flag turns IP#->hostname
 * resolution off. Before running your stats program, just run your log
 * file through this program (logresolve) and all of your IP numbers will
 * be resolved into hostnames (where possible).
 *
 * logresolve takes an HTTPD access log (in the COMMON log file format,
 * or any other format that has the IP number/domain name as the first
 * field for that matter), and outputs the same file with all of the
 * domain names looked up. Where no domain name can be found, the IP
 * number is left in.
 *
 * To minimize impact on your nameserver, logresolve has its very own
 * internal hash-table cache. This means that each IP number will only
 * be looked up the first time it is found in the log file.
 *
 * The -c option causes logresolve to apply the same check as httpd
 * compiled with -DMAXIMUM_DNS; after finding the hostname from the IP
 * address, it looks up the IP addresses for the hostname and checks
 * that one of these matches the original address.
 */",undetermined
419,httpd,UNKNOWN,/* Statistics */,undetermined
420,httpd,UNKNOWN,"/*
 * prints various statistics to output
 */",undetermined
421,httpd,UNKNOWN,"/*
 * usage info
 */",undetermined
422,httpd,UNKNOWN,/* switch */,undetermined
423,httpd,UNKNOWN,/* else */,undetermined
424,httpd,UNKNOWN,/* while */,undetermined
425,httpd,UNKNOWN,/* Allocate two new 10k file buffers */,undetermined
426,httpd,UNKNOWN,/* Set the buffers */,undetermined
427,httpd,UNKNOWN,/* Count our log entries */,undetermined
428,httpd,UNKNOWN,/* Check if this could even be an IP address */,undetermined
429,httpd,UNKNOWN,/* Terminate the line at the next space */,undetermined
430,httpd,UNKNOWN,/* See if we have it in our cache */,undetermined
431,httpd,UNKNOWN,/* Parse the IP address */,undetermined
432,httpd,UNKNOWN,/* Not an IP address */,undetermined
433,httpd,UNKNOWN,"/* This does not make much sense, but historically ""resolves"" means
         * ""parsed as an IP address"". It does not mean we actually resolved
         * the IP address into a hostname.
         */",undetermined
434,httpd,UNKNOWN,"/* From here on our we cache each result, even if it was not
         * succesful
         */",undetermined
435,httpd,UNKNOWN,/* Try and perform a reverse lookup */,undetermined
436,httpd,UNKNOWN,/* Could not perform a reverse lookup */,undetermined
437,httpd,UNKNOWN,/* Add to cache */,undetermined
438,httpd,UNKNOWN,/* Perform a double lookup */,undetermined
439,httpd,UNKNOWN,"/* Do a forward lookup on our hostname, and see if that matches our
             * original IP address.
             */",undetermined
440,httpd,UNKNOWN,/* Double-lookup failed  */,undetermined
441,httpd,UNKNOWN,/* Add to cache */,undetermined
442,httpd,UNKNOWN,/* Outout the resolved name */,undetermined
443,httpd,UNKNOWN,/* Store it in the cache */,undetermined
444,httpd,UNKNOWN,/* Flush any remaining output */,undetermined
445,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
446,httpd,UNKNOWN,/* NOTREACHED */,undetermined
447,httpd,UNKNOWN,"/*
 * Make a password record from the given information.  A zero return
 * indicates success; on failure, ctx->errstr points to the error message.
 */",undetermined
448,httpd,UNKNOWN,/* XXX out >= 28 + strlen(sha1) chars - fixed len SHA */,undetermined
449,httpd,UNKNOWN,/* XXX this len limitation is not in sync with any HTTPd len. */,undetermined
450,httpd,UNKNOWN,/* CRYPT_ALGO_SUPPORTED */,undetermined
451,httpd,UNKNOWN,/* BCRYPT_ALGO_SUPPORTED */,undetermined
452,httpd,UNKNOWN,/* Backward compatible behavior: Just print a warning */,undetermined
453,httpd,UNKNOWN,/* Backward compatible behavior: Use MD5. OK since MD5 is more secure */,undetermined
454,httpd,UNKNOWN,/* Don't fall back to something less secure */,undetermined
455,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
456,httpd,UNKNOWN,"/*
 * Must be initialized with apr_file_open_stderr() before using any of the
 * below functions.
 */",undetermined
457,httpd,UNKNOWN,"/*
 * To be used as apr_pool_abort_fn
 */",undetermined
458,httpd,UNKNOWN,"/*
 * Write a line to the file. On error, print a message and exit
 */",undetermined
459,httpd,UNKNOWN,"/*
 * The following functions return zero on success; otherwise, one of
 * the ERR_* codes is returned and an error message is stored in ctx->errstr.
 */",undetermined
460,httpd,UNKNOWN,"/*
 * Parse the algorithm specific options.
 */",undetermined
461,httpd,UNKNOWN,"/*
 * Ask for password with verification.
 */",undetermined
462,httpd,UNKNOWN,"/*
 * Make a password record from the given information.
 */",undetermined
463,httpd,UNKNOWN,/* _PASSWD_COMMON_H */,undetermined
464,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
465,httpd,UNKNOWN,"/*
 * Simple program to rotate Apache logs without having to kill the server.
 *
 * Contributed by Ben Laurie <ben algroup.co.uk>
 *
 * 12 Mar 1996
 *
 * Ported to APR by Mladen Turk <mturk mappingsoft.com>
 *
 * 23 Sep 2001
 *
 * -l option added 2004-06-11
 *
 * -l causes the use of local time rather than GMT as the base for the
 * interval.  NB: Using -l in an environment which changes the GMT offset
 * (such as for BST or DST) can lead to unpredictable results!
 *
 * -f option added Feb, 2008. This causes rotatelog to open/create
 *    the logfile as soon as it's started, not as soon as it sees
 *    data.
 *
 * -v option added Feb, 2008. Verbose output of command line parsing.
 */",undetermined
466,httpd,UNKNOWN,"/* Structure to contain relevant logfile state: fd, pool and
 * filename. */",undetermined
467,httpd,UNKNOWN,/* current logfile. */,undetermined
468,httpd,UNKNOWN,/* top-level pool */,undetermined
469,httpd,UNKNOWN,"/*
 * Get the unix time with timezone corrections
 * given in the config struct.
 */",undetermined
470,httpd,UNKNOWN,"/* Check for our UTC offset before using it, since it might
         * change if there's a switch between standard and daylight
         * savings time.
         */",undetermined
471,httpd,UNKNOWN,"/*
 * Close a file and destroy the associated pool.
 */",undetermined
472,httpd,UNKNOWN,"/*
 * Dump the configuration parsing result to STDERR.
 */",undetermined
473,httpd,UNKNOWN,"/*
 * Check whether we need to rotate.
 * Possible reasons are:
 * - No log file open (ROTATE_NEW)
 * - User forces us to rotate (ROTATE_FORCE)
 * - Our log file size is already bigger than the
 *   allowed maximum (ROTATE_SIZE)
 * - The next log time interval expired (ROTATE_TIME)
 *
 * When size and time constraints are both given,
 * it suffices that one of them is fulfilled.
 */",undetermined
474,httpd,UNKNOWN,"/*
 * Handle post-rotate processing.
 */",undetermined
475,httpd,UNKNOWN,"/* Handle link file, if configured. */",undetermined
476,httpd,UNKNOWN,/* Nothing more to do. */,undetermined
477,httpd,UNKNOWN,"/* Collect any zombies from a previous run, but don't wait. */",undetermined
478,httpd,UNKNOWN,/* noop */,undetermined
479,httpd,UNKNOWN,"/*
 * Open a new log file, and if successful
 * also close the old one.
 *
 * The timestamp for the calculation of the file
 * name of the new log file will be the actual millisecond
 * timestamp, except when a regular rotation based on a time
 * interval is configured and the previous interval
 * is over. Then the timestamp is the starting time
 * of the actual interval.
 */",undetermined
480,httpd,UNKNOWN,"/*
         * Check if rotation was forced and the last rotation
         * interval is not yet over. Use the value of now instead
         * of the time interval boundary for the file name then.
         */",undetermined
481,httpd,UNKNOWN,/* Handle post-rotate processing. */,undetermined
482,httpd,UNKNOWN,"/* Close out old (previously 'current') logfile, if any. */",undetermined
483,httpd,UNKNOWN,/* New log file is now 'current'. */,undetermined
484,httpd,UNKNOWN,"/* Uh-oh. Failed to open the new log file. Try to clear
         * the previous log file, note the lost log entries,
         * and keep on truckin'. */",undetermined
485,httpd,UNKNOWN,/* Throw away new state; it isn't going to be used. */,undetermined
486,httpd,UNKNOWN,"/* Try to keep this error message constant length
         * in case it occurs several times. */",undetermined
487,httpd,UNKNOWN,"/*
 * Get a size or time param from a string.
 * Parameter 'last' indicates, whether the
 * argument is the last commadnline argument.
 * UTC offset is only allowed as a last argument
 * in order to make is distinguishable from the
 * rotation interval time.
 */",undetermined
488,httpd,UNKNOWN,/* Byte multiplier */,undetermined
489,httpd,UNKNOWN,/* Found KB size */,undetermined
490,httpd,UNKNOWN,/* Found KB size */,undetermined
491,httpd,UNKNOWN,/* Found MB size */,undetermined
492,httpd,UNKNOWN,/* Found GB size */,undetermined
493,httpd,UNKNOWN,/* rotation based on file size */,undetermined
494,httpd,UNKNOWN,/* rotation based on elapsed time */,undetermined
495,httpd,UNKNOWN,/* rotation based on elapsed time */,undetermined
496,httpd,UNKNOWN,/* specific error message already issued */,undetermined
497,httpd,UNKNOWN,"/*
     * After the initial flags we need 2 to 4 arguments,
     * the file name, either the rotation interval time or size
     * or both of them, and optionally the UTC offset.
     */",undetermined
498,httpd,UNKNOWN,"/* Read in the remaining flags, namely time, size and UTC offset. */",undetermined
499,httpd,UNKNOWN,"/*
     * Write out result of config parsing if verbose is set.
     */",undetermined
500,httpd,UNKNOWN,"/*
     * Immediately open the logfile as we start, if we were forced
     * to do so via '-f'.
     */",undetermined
501,httpd,UNKNOWN,/* APR_FILES_AS_SOCKETS */,undetermined
502,httpd,UNKNOWN,/* APR_FILES_AS_SOCKETS */,undetermined
503,httpd,UNKNOWN,/* reached only at stdin EOF. */,undetermined
504,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
505,httpd,UNKNOWN,"/*
 * suexec.c -- ""Wrapper"" support program for suEXEC behaviour for Apache
 *
 ***********************************************************************
 *
 * NOTE! : DO NOT edit this code!!!  Unless you know what you are doing,
 *         editing this code might open up your system in unexpected
 *         ways to would-be crackers.  Every precaution has been taken
 *         to make this code as safe as possible; alter it at your own
 *         risk.
 *
 ***********************************************************************
 *
 *
 */",undetermined
506,httpd,UNKNOWN,/* variable name starts with */,undetermined
507,httpd,UNKNOWN,/* variable name is */,undetermined
508,httpd,UNKNOWN,/* AP_LOG_EXEC */,undetermined
509,httpd,UNKNOWN,/* 1 == is_error */,undetermined
510,httpd,UNKNOWN,/* AP_LOG_EXEC */,undetermined
511,httpd,UNKNOWN,/* 0 == !is_error */,undetermined
512,httpd,UNKNOWN,/* AP_LOG_EXEC */,undetermined
513,httpd,UNKNOWN,"/* While cleaning the environment, the environment should be clean.
     * (e.g. malloc() may get the name of a file for writing debugging info.
     * Bad news if MALLOC_DEBUG_FILE is set to /etc/passwd.  Sprintf() may be
     * susceptible to bad locale settings....)
     * (from PR 2790)
     */",undetermined
514,httpd,UNKNOWN,/* VERY safe environment */,undetermined
515,httpd,UNKNOWN,/* ~userdir flag             */,undetermined
516,httpd,UNKNOWN,/* user information          */,undetermined
517,httpd,UNKNOWN,/* target group placeholder  */,undetermined
518,httpd,UNKNOWN,/* target user name          */,undetermined
519,httpd,UNKNOWN,/* target group name         */,undetermined
520,httpd,UNKNOWN,/* target home directory     */,undetermined
521,httpd,UNKNOWN,/* actual user name          */,undetermined
522,httpd,UNKNOWN,/* actual group name         */,undetermined
523,httpd,UNKNOWN,/* command to be executed    */,undetermined
524,httpd,UNKNOWN,/* current working directory */,undetermined
525,httpd,UNKNOWN,/* docroot working directory */,undetermined
526,httpd,UNKNOWN,/* password entry holder     */,undetermined
527,httpd,UNKNOWN,/* group entry holder        */,undetermined
528,httpd,UNKNOWN,/* directory info holder     */,undetermined
529,httpd,UNKNOWN,/* program info holder       */,undetermined
530,httpd,UNKNOWN,"/*
     * Start with a ""clean"" environment
     */",undetermined
531,httpd,UNKNOWN,"/*
     * Check existence/validity of the UID of the user
     * running this program.  Error out if invalid.
     */",undetermined
532,httpd,UNKNOWN,"/*
     * See if this is a 'how were you compiled' request, and
     * comply if so.
     */",undetermined
533,httpd,UNKNOWN,/* User name comparisons are case insensitive on BS2000/OSD */,undetermined
534,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
535,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
536,httpd,UNKNOWN,"/*
     * If there are a proper number of arguments, set
     * all of them to variables.  Otherwise, error out.
     */",undetermined
537,httpd,UNKNOWN,"/*
     * Check to see if the user running this program
     * is the user allowed to do so as defined in
     * suexec.h.  If not the allowed user, error out.
     */",undetermined
538,httpd,UNKNOWN,/* User name comparisons are case insensitive on BS2000/OSD */,undetermined
539,httpd,UNKNOWN,/*_OSD_POSIX*/,undetermined
540,httpd,UNKNOWN,/*_OSD_POSIX*/,undetermined
541,httpd,UNKNOWN,"/*
     * Check for a leading '/' (absolute path) in the command to be executed,
     * or attempts to back up out of the current directory,
     * to protect against attacks.  If any are
     * found, error out.  Naughty naughty crackers.
     */",undetermined
542,httpd,UNKNOWN,"/*
     * Check to see if this is a ~userdir request.  If
     * so, set the flag, and remove the '~' from the
     * target username.
     */",undetermined
543,httpd,UNKNOWN,"/*
     * Error out if the target username is invalid.
     */",undetermined
544,httpd,UNKNOWN,"/*
     * Error out if the target group name is invalid.
     */",undetermined
545,httpd,UNKNOWN,"/*
     * Initialize BS2000 user environment
     */",undetermined
546,httpd,UNKNOWN,/* Error */,undetermined
547,httpd,UNKNOWN,/* Child */,undetermined
548,httpd,UNKNOWN,/* Father */,undetermined
549,httpd,UNKNOWN,/* @@@ FIXME: should we deal with STOP signals as well? */,undetermined
550,httpd,UNKNOWN,/*_OSD_POSIX*/,undetermined
551,httpd,UNKNOWN,"/*
     * Save these for later since initgroups will hose the struct
     */",undetermined
552,httpd,UNKNOWN,"/*
     * Log the transaction here to be sure we have an open log
     * before we setuid().
     */",undetermined
553,httpd,UNKNOWN,"/*
     * Error out if attempt is made to execute as root or as
     * a UID less than AP_UID_MIN.  Tsk tsk.
     */",undetermined
554,httpd,UNKNOWN,"/*
     * Error out if attempt is made to execute as root group
     * or as a GID less than AP_GID_MIN.  Tsk tsk.
     */",undetermined
555,httpd,UNKNOWN,"/*
     * Change UID/GID here so that the following tests work over NFS.
     *
     * Initialize the group access list for the target user,
     * and setgid() to the target group. If unsuccessful, error out.
     */",undetermined
556,httpd,UNKNOWN,"/*
     * setuid() to the target user.  Error out on fail.
     */",undetermined
557,httpd,UNKNOWN,"/*
     * Get the current working directory, as well as the proper
     * document root (dependant upon whether or not it is a
     * ~userdir request).  Error out if we cannot get either one,
     * or if the current working directory is not in the docroot.
     * Use chdir()s and getcwd()s to avoid problems with symlinked
     * directories.  Yuck.
     */",undetermined
558,httpd,UNKNOWN,"/*
     * Stat the cwd and verify it is a directory, or error out.
     */",undetermined
559,httpd,UNKNOWN,"/*
     * Error out if cwd is writable by others.
     */",undetermined
560,httpd,UNKNOWN,"/*
     * Error out if we cannot stat the program.
     */",undetermined
561,httpd,UNKNOWN,"/*
     * Error out if the program is writable by others.
     */",undetermined
562,httpd,UNKNOWN,"/*
     * Error out if the file is setuid or setgid.
     */",undetermined
563,httpd,UNKNOWN,"/*
     * Error out if the target name/group is different from
     * the name/group of the cwd or the program.
     */",undetermined
564,httpd,UNKNOWN,"/*
     * Error out if the program is not executable for the user.
     * Otherwise, she won't find any error in the logs except for
     * ""[error] Premature end of script headers: ...""
     */",undetermined
565,httpd,UNKNOWN,"/*
     * umask() uses inverse logic; bits are CLEAR for allowed access.
     */",undetermined
566,httpd,UNKNOWN,/* AP_SUEXEC_UMASK */,undetermined
567,httpd,UNKNOWN,/* Be sure to close the log file so the CGI can't mess with it. */,undetermined
568,httpd,UNKNOWN,"/*
         * ask fcntl(2) to set the FD_CLOEXEC flag on the log file,
         * so it'll be automagically closed if the exec() call succeeds.
         */",undetermined
569,httpd,UNKNOWN,"/*
         * In this case, exec() errors won't be logged because we have already
         * dropped privileges and won't be able to reopen the log file.
         */",undetermined
570,httpd,UNKNOWN,"/*
     * Execute the command, replacing our image with its own.
     */",undetermined
571,httpd,UNKNOWN,/* We need the #! emulation when we want to execute scripts */,undetermined
572,httpd,UNKNOWN,/*NEED_HASHBANG_EMUL*/,undetermined
573,httpd,UNKNOWN,/*NEED_HASHBANG_EMUL*/,undetermined
574,httpd,UNKNOWN,"/*
     * (I can't help myself...sorry.)
     *
     * Uh oh.  Still here.  Where's the kaboom?  There was supposed to be an
     * EARTH-shattering kaboom!
     *
     * Oh well, log the failure and error out.
     */",undetermined
575,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
576,httpd,UNKNOWN,"/**
 * @file  suexec.h
 * @brief user-definable variables for the suexec wrapper code.
 *        (See README.configure on how to customize these variables.)
 */",undetermined
577,httpd,UNKNOWN,"/*
 * Include ap_config_layout so we can work out where the default htdocsdir
 * and logsdir are.
 */",undetermined
578,httpd,UNKNOWN,"/*
 * HTTPD_USER -- Define as the username under which Apache normally
 *               runs.  This is the only user allowed to execute
 *               this program.
 */",undetermined
579,httpd,UNKNOWN,"/*
 * UID_MIN -- Define this as the lowest UID allowed to be a target user
 *            for suEXEC.  For most systems, 500 or 100 is common.
 */",undetermined
580,httpd,UNKNOWN,"/*
 * GID_MIN -- Define this as the lowest GID allowed to be a target group
 *            for suEXEC.  For most systems, 100 is common.
 */",undetermined
581,httpd,UNKNOWN,"/*
 * USERDIR_SUFFIX -- Define to be the subdirectory under users'
 *                   home directories where suEXEC access should
 *                   be allowed.  All executables under this directory
 *                   will be executable by suEXEC as the user so
 *                   they should be ""safe"" programs.  If you are
 *                   using a ""simple"" UserDir directive (ie. one
 *                   without a ""*"" in it) this should be set to
 *                   the same value.  suEXEC will not work properly
 *                   in cases where the UserDir directive points to
 *                   a location that is not the same as the user's
 *                   home directory as referenced in the passwd file.
 *
 *                   If you have VirtualHosts with a different
 *                   UserDir for each, you will need to define them to
 *                   all reside in one parent directory; then name that
 *                   parent directory here.  IF THIS IS NOT DEFINED
 *                   PROPERLY, ~USERDIR CGI REQUESTS WILL NOT WORK!
 *                   See the suEXEC documentation for more detailed
 *                   information.
 */",undetermined
582,httpd,UNKNOWN,"/*
 * LOG_EXEC -- Define this as a filename if you want all suEXEC
 *             transactions and errors logged for auditing and
 *             debugging purposes.
 */",undetermined
583,httpd,UNKNOWN,/* Need me? */,undetermined
584,httpd,UNKNOWN,"/*
 * DOC_ROOT -- Define as the DocumentRoot set for Apache.  This
 *             will be the only hierarchy (aside from UserDirs)
 *             that can be used for suEXEC behavior.
 */",undetermined
585,httpd,UNKNOWN,"/*
 * SAFE_PATH -- Define a safe PATH environment to pass to CGI executables.
 *
 */",undetermined
586,httpd,UNKNOWN,/* _SUEXEC_H */,undetermined
587,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
588,httpd,UNKNOWN,"/* ====================================================================
 * ApacheMonitor.c Simple program to manage and monitor Apache services.
 *
 * Contributed by Mladen Turk <mturk mappingsoft.com>
 *
 * 05 Aug 2001
 * ====================================================================
 */",undetermined
589,httpd,UNKNOWN,/** Properly quote a value as a string in the C preprocessor */,undetermined
590,httpd,UNKNOWN,/** Helper macro for AM_STRINGIFY */,undetermined
591,httpd,UNKNOWN,/* Should be enough */,undetermined
592,httpd,UNKNOWN,/* service refresh time (ms) */,undetermined
593,httpd,UNKNOWN,/* registry rescan time (ms) */,undetermined
594,httpd,UNKNOWN,/* Global variables */,undetermined
595,httpd,UNKNOWN,/* The title bar text */,undetermined
596,httpd,UNKNOWN,/* Window Class Name  */,undetermined
597,httpd,UNKNOWN,/* locale language support */,undetermined
598,httpd,UNKNOWN,"/*
    Try calling GetVersionEx using the OSVERSIONINFOEX structure.
    If that fails, try using the OSVERSIONINFO structure.
    */",undetermined
599,httpd,UNKNOWN,/* create popup menu */,undetermined
600,httpd,UNKNOWN,/* create services list popup menu and submenus */,undetermined
601,httpd,UNKNOWN,/* Get the Height and Width of the child window */,undetermined
602,httpd,UNKNOWN,/* Get the limits of the 'workarea' */,undetermined
603,httpd,UNKNOWN,/* Calculate new X and Y position*/,undetermined
604,httpd,UNKNOWN,/* Avoid recursion of ImagePath NULL (from this Respawn) */,undetermined
605,httpd,UNKNOWN,/* the service name could be httpd*.exe or Apache*.exe */,undetermined
606,httpd,UNKNOWN,/* SBT_TOOLTIPS */,undetermined
607,httpd,UNKNOWN,/* Dirty hack to bring the window to the foreground */,undetermined
608,httpd,UNKNOWN,"/* if started then stop, if stopped then start */",undetermined
609,httpd,UNKNOWN,/* restore the tray icon on shell restart */,undetermined
610,httpd,UNKNOWN,/* check if services list changed */,undetermined
611,httpd,UNKNOWN,/* Dirty hack to bring the window to the foreground */,undetermined
612,httpd,UNKNOWN,/* seconds */,undetermined
613,httpd,UNKNOWN,/* Perhaps we were short of permissions? */,undetermined
614,httpd,UNKNOWN,"/* This is graceful, close our own Window, clearing the icon */",undetermined
615,httpd,UNKNOWN,"/* This is ungraceful; close other Windows, with a lingering icon.
     * Since on terminal server it's not possible to post the message
     * to exit across sessions, we have to suffer this side effect
     * of a taskbar 'icon' which will evaporate the next time that
     * the user hovers over it or when the taskbar area is updated.
     */",undetermined
616,httpd,UNKNOWN,/* Create main invisible window */,undetermined
617,httpd,UNKNOWN,/* Borrowed from CRT internal.h for _MBCS argc/argv parsing in this GUI app */,undetermined
618,httpd,UNKNOWN,/* existing window */,undetermined
619,httpd,UNKNOWN,/* Off to chase and close up every ApacheMonitor taskbar window */,undetermined
620,httpd,UNKNOWN,/* Chase down and close up our session's previous window */,undetermined
621,httpd,UNKNOWN,"/* To avoid recursion, pass ImagePath NULL (a noop on NT and later) */",undetermined
622,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
623,httpd,UNKNOWN,"/**
 * @file  ApacheMonitor.h
 * @brief Resource definitions for ApacheMonitor.rc and ApacheMonitor.c
 */",undetermined
624,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
625,httpd,UNKNOWN,"/* --------------------------------------------------------------------
 *
 * wintty : a Apache/WinNT support utility for monitoring and
 *          reflecting user feedback from the Apache process via
 *          stdin/stdout, even as running within the service context.
 *
 * Originally contributed by William Rowe <wrowe covalent.net>
 *
 * Note: this implementation is _very_ experimental, and error handling
 * is far from complete.  Using it as a cgi or pipe process allows the
 * programmer to discover if facilities such as reliable piped logs
 * are working as expected, or answer operator prompts that would
 * otherwise be discarded by the service process.
 *
 * Also note the isservice detection semantics, which far exceed any
 * mechanism we have discovered thus far.
 *
 * --------------------------------------------------------------------
 */",undetermined
626,httpd,UNKNOWN,"/* You can't close the console till all the handles above were
     * rescued by DuplicateHandle()
     */",undetermined
627,httpd,UNKNOWN,/* SW_SHOWNORMAL */,undetermined
628,httpd,UNKNOWN,"/* Instantly, upon creating the new process, we will close our
         * copies of the handles so our parent isn't confused when the
         * child closes their copy of the handle.  Without this action,
         * we would hold a copy of the handle, and the parent would not
         * receive their EOF notification.
         */",undetermined
629,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
630,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
631,httpd,UNKNOWN,"/*
 * http_config.c: once was auxillary functions for reading httpd's config
 * file and converting filenames into a namespace
 *
 * Rob McCool
 *
 * Wall-to-wall rewrite for Apache... commands which are part of the
 * server core can now be found next door in ""http_core.c"".  Now contains
 * general command loop, and functions which do bookkeeping for the new
 * Apache config stuff (modules and configuration vectors).
 *
 * rst
 *
 */",undetermined
632,httpd,UNKNOWN,/* for errors in parse_htaccess */,undetermined
633,httpd,UNKNOWN,/* for default_handler (see invoke_handler) */,undetermined
634,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
635,httpd,UNKNOWN,"/* During the course of debugging I expanded this macro out, so
 * rather than remove all the useful information there is in the
 * following lines, I'm going to leave it here in case anyone
 * else finds it useful.
 *
 * Ben has looked at it and thinks it correct :)
 *
AP_DECLARE(int) ap_hook_post_config(ap_HOOK_post_config_t *pf,
                                    const char * const *aszPre,
                                    const char * const *aszSucc,
                                    int nOrder)
{
    ap_LINK_post_config_t *pHook;

    if (!_hooks.link_post_config) {
        _hooks.link_post_config = apr_array_make(apr_hook_global_pool, 1,
                                                 sizeof(ap_LINK_post_config_t));
        apr_hook_sort_register(""post_config"", &_hooks.link_post_config);
    }

    pHook = apr_array_push(_hooks.link_post_config);
    pHook->pFunc = pf;
    pHook->aszPredecessors = aszPre;
    pHook->aszSuccessors = aszSucc;
    pHook->nOrder = nOrder;
    pHook->szName = apr_hook_debug_current;

    if (apr_hook_debug_enabled)
        apr_hook_debug_show(""post_config"", aszPre, aszSucc);
}

AP_DECLARE(apr_array_header_t *) ap_hook_get_post_config(void) {
    return _hooks.link_post_config;
}

AP_DECLARE(int) ap_run_post_config(apr_pool_t *pconf,
                                   apr_pool_t *plog,
                                   apr_pool_t *ptemp,
                                   server_rec *s)
{
    ap_LINK_post_config_t *pHook;
    int n;

    if(!_hooks.link_post_config)
        return;

    pHook = (ap_LINK_post_config_t *)_hooks.link_post_config->elts;
    for (n = 0; n < _hooks.link_post_config->nelts; ++n)
        pHook[n].pFunc (pconf, plog, ptemp, s);
}
 */",undetermined
636,httpd,UNKNOWN,"/* hooks with no args are implemented last, after disabling APR hook probes */",undetermined
637,httpd,UNKNOWN,"/****************************************************************
 *
 * We begin with the functions which deal with the linked list
 * of modules which control just about all of the server operation.
 */",undetermined
638,httpd,UNKNOWN,"/* total_modules is the number of modules that have been linked
 * into the server.
 */",undetermined
639,httpd,UNKNOWN,"/* dynamic_modules is the number of modules that have been added
 * after the pre-loaded ones have been set up. It shouldn't be larger
 * than DYNAMIC_MODULE_LIMIT.
 */",undetermined
640,httpd,UNKNOWN,"/* The maximum possible value for total_modules, i.e. number of static
 * modules plus DYNAMIC_MODULE_LIMIT.
 */",undetermined
641,httpd,UNKNOWN,"/* The number of elements we need to alloc for config vectors. Before loading
 * of dynamic modules, we must be liberal and set this to max_modules. After
 * loading of dynamic modules, we can trim it down to total_modules. On
 * restart, reset to max_modules.
 */",undetermined
642,httpd,UNKNOWN,"/* a list of the module symbol names with the trailing ""_module""removed */",undetermined
643,httpd,UNKNOWN,"/* A list of the merge_dir_config functions of all loaded modules, sorted
 * by module_index.
 * Using this list in ap_merge_per_dir_configs() is faster than following
 * the module->next linked list because of better memory locality (resulting
 * in better cache usage).
 */",undetermined
644,httpd,UNKNOWN,/* maximum nesting level for config directories */,undetermined
645,httpd,UNKNOWN,"/* Dealing with config vectors.  These are associated with per-directory,
 * per-server, and per-request configuration, and have a void* pointer for
 * each modules.  The nature of the structure pointed to is private to the
 * module in question... the core doesn't (and can't) know.  However, there
 * are defined interfaces which allow it to create instances of its private
 * per-directory and per-server structures, and to merge the per-directory
 * structures of a directory and its subdirectory (producing a new one in
 * which the defaults applying to the base directory have been properly
 * overridden).
 */",undetermined
646,httpd,UNKNOWN,"/* Can reuse the 'virt' vector for the spine of it, since we don't
     * have to deal with the moral equivalent of .htaccess files here...
     */",undetermined
647,httpd,UNKNOWN,"/* Invoke the filter_init_func for all filters with FILTERS where f->r
 * matches R.  Restricting to a matching R avoids re-running init
 * functions for filters configured for r->main where r is a
 * subrequest.  */",undetermined
648,httpd,UNKNOWN,"/*
 * TODO: Move this to an appropriate include file and possibly prefix it
 * with AP_.
 */",undetermined
649,httpd,UNKNOWN,"/*
     * The new insert_filter stage makes the most sense here.  We only use
     * it when we are going to run the request, so we must insert filters
     * if any are available.  Since the goal of this phase is to allow all
     * modules to insert a filter if they want to, this filter returns
     * void.  I just can't see any way that this filter can reasonably
     * fail, either your modules inserts something or it doesn't.  rbb
     */",undetermined
650,httpd,UNKNOWN,"/* Before continuing, allow each filter that is in the two chains to
     * run their init function to let them do any magic before we could
     * start generating data.
     */",undetermined
651,httpd,UNKNOWN,/* exclude media type arguments */,undetermined
652,httpd,UNKNOWN,/* strip trailing spaces */,undetermined
653,httpd,UNKNOWN,/* ap_die() knows about this specifically */,undetermined
654,httpd,UNKNOWN,"/* If a module is deliberately returning something else
         * (request_rec in non-HTTP or proprietary extension?)
         * let it set a note to allow it explicitly.
         * Otherwise, a return code that is neither reserved nor HTTP
         * is a bug, as in PR#31759.
         */",undetermined
655,httpd,UNKNOWN,"/*
     * A method number either hardcoded into apache or
     * added by a module and registered.
     */",undetermined
656,httpd,UNKNOWN,/* not found */,undetermined
657,httpd,UNKNOWN,/* One-time setup for precompiled modules --- NOT to be done on restart */,undetermined
658,httpd,UNKNOWN,"/* This could be called from a LoadModule httpd.conf command,
     * after the file has been linked and the module structure within it
     * teased out...
     */",undetermined
659,httpd,UNKNOWN,"/*
         * If this fails some module forgot to call ap_reserve_module_slots*.
         */",undetermined
660,httpd,UNKNOWN,"/* Some C compilers put a complete path into __FILE__, but we want
     * only the filename (e.g. mod_includes.c). So check for path
     * components (Unix and DOS), and remove them.
     */",undetermined
661,httpd,UNKNOWN,"/* __FILE__ =
     * ""*POSIX(/home/martin/apache/src/modules/standard/mod_info.c)""
     */",undetermined
662,httpd,UNKNOWN,"/* We cannot fix the string in-place, because it's const */",undetermined
663,httpd,UNKNOWN,"/* FIXME: memory leak, albeit a small one */",undetermined
664,httpd,UNKNOWN,/*_OSD_POSIX*/,undetermined
665,httpd,UNKNOWN,"/*  FIXME: is this the right place to call this?
     *  It doesn't appear to be
     */",undetermined
666,httpd,UNKNOWN,"/*
 * remove_module undoes what add_module did. There are some caveats:
 * when the module is removed, its slot is lost so all the current
 * per-dir and per-server configurations are invalid. So we should
 * only ever call this function when you are invalidating almost
 * all our current data. I.e. when doing a restart.
 */",undetermined
667,httpd,UNKNOWN,"/* We are the top module, special case */",undetermined
668,httpd,UNKNOWN,"/* Not the top module, find use. When found modp will
         * point to the module _before_ us in the list
         */",undetermined
669,httpd,UNKNOWN,"/* Uh-oh, this module doesn't exist */",undetermined
670,httpd,UNKNOWN,/* Eliminate us from the module list */,undetermined
671,httpd,UNKNOWN,"/* simulate being unloaded, should
                           * be unnecessary */",undetermined
672,httpd,UNKNOWN,"/*
     *  Add module pointer to top of chained module list
     */",undetermined
673,httpd,UNKNOWN,"/*
     *  And module pointer to list of loaded modules
     *
     *  Notes: 1. ap_add_module() would already complain if no more space
     *            exists for adding a dynamically loaded module
     *         2. ap_add_module() accepts double inclusion, so we have
     *            to accept this, too.
     */",undetermined
674,httpd,UNKNOWN,"/*
     *  Remove module pointer from chained module list
     */",undetermined
675,httpd,UNKNOWN,"/*
     *  Remove module pointer from list of loaded modules
     *
     *  Note: 1. We cannot determine if the module was successfully
     *           removed by ap_remove_module().
     *        2. We have not to complain explicity when the module
     *           is not found because ap_remove_module() did it
     *           for us already.
     */",undetermined
676,httpd,UNKNOWN,"/*
     *  Initialise total_modules variable and module indices
     */",undetermined
677,httpd,UNKNOWN,"/*
     *  Initialise list of loaded modules and short names
     */",undetermined
678,httpd,UNKNOWN,"/*
     *   Initialize chain of linked (=activate) modules
     */",undetermined
679,httpd,UNKNOWN,"/*****************************************************************
 *
 * Resource, access, and .htaccess config files now parsed by a common
 * command loop.
 *
 * Let's begin with the basics; parsing the line and
 * invoking the function...
 */",undetermined
680,httpd,UNKNOWN,/** Have we been provided a list of acceptable directives? */,undetermined
681,httpd,UNKNOWN,/* ### need to fix the create_dir_config functions' prototype... */,undetermined
682,httpd,UNKNOWN,"/* Note: this branch should not occur. An empty line should have
         * triggered the exit further above.
         */",undetermined
683,httpd,UNKNOWN,"/* Before walking *current to the end of the list,
                     * set the head to *current.
                     */",undetermined
684,httpd,UNKNOWN,/* done with this section; move up a level */,undetermined
685,httpd,UNKNOWN,/* lower limit for .htaccess */,undetermined
686,httpd,UNKNOWN,/* Once was enough? */,undetermined
687,httpd,UNKNOWN,"/* If the directive in error has already been set, don't
             * replace it.  Otherwise, an error inside a container
             * will be reported as occuring on the first line of the
             * container.
             */",undetermined
688,httpd,UNKNOWN,"/* scan through all directives, executing each one */",undetermined
689,httpd,UNKNOWN,/* actually parse the command and execute the correct function */,undetermined
690,httpd,UNKNOWN,/* restore the context (just in case) */,undetermined
691,httpd,UNKNOWN,/* lower limit for .htaccess */,undetermined
692,httpd,UNKNOWN,"/* If we have to traverse the whole tree again for every included
         * config file, the required time grows as O(n^2) with the number of
         * files. This can be a significant delay for large configurations.
         * Therefore we cache a pointer to the last node.
         */",undetermined
693,httpd,UNKNOWN,/* update cached pointer to last node */,undetermined
694,httpd,UNKNOWN,"/*
 * Generic command functions...
 */",undetermined
695,httpd,UNKNOWN,"/* Prepend server_root to relative arg.
     * This allows most args to be independent of server_root,
     * so the server can be moved or mirrored with less pain.
     */",undetermined
696,httpd,UNKNOWN,"/*****************************************************************
 *
 * Reading whole config files...
 */",undetermined
697,httpd,UNKNOWN,/* lower limit for .htaccess */,undetermined
698,httpd,UNKNOWN,/* found end of container */,undetermined
699,httpd,UNKNOWN,"/* This structure and the following functions are needed for the
 * table-based config file reading. They are passed to the
 * cfg_open_custom() routine.
 */",undetermined
700,httpd,UNKNOWN,"/* Structure to be passed to cfg_open_custom(): it contains an
 * index which is incremented from 0 to nelts on each call to
 * cfg_getline() (which in turn calls arr_elts_getstr())
 * and an apr_array_header_t pointer for the string array.
 */",undetermined
701,httpd,UNKNOWN,/* arr_elts_getstr() returns the next line from the string array. */,undetermined
702,httpd,UNKNOWN,/* End of array reached? */,undetermined
703,httpd,UNKNOWN,/* return the line */,undetermined
704,httpd,UNKNOWN,/* arr_elts_close(): dummy close routine (makes sure no more lines can be read) */,undetermined
705,httpd,UNKNOWN,"/*
         * first course of business is to grok all the directory
         * entries here and store 'em away. Recall we need full pathnames
         * for this.
         */",undetermined
706,httpd,UNKNOWN,/* strip out '.' and '..' */,undetermined
707,httpd,UNKNOWN,"/*
             * Now recurse these... we handle errors and subdirectories
             * via the recursion, which is nice
             */",undetermined
708,httpd,UNKNOWN,/* find the first part of the filename */,undetermined
709,httpd,UNKNOWN,"/* optimisation - if the filename isn't a wildcard, process it directly */",undetermined
710,httpd,UNKNOWN,"/*
     * first course of business is to grok all the directory
     * entries here and store 'em away. Recall we need full pathnames
     * for this.
     */",undetermined
711,httpd,UNKNOWN,/* strip out '.' and '..' */,undetermined
712,httpd,UNKNOWN,"/* If matching internal to path, and we happen to match something
             * other than a directory, skip it
             */",undetermined
713,httpd,UNKNOWN,"/*
         * Now recurse these... we handle errors and subdirectories
         * via the recursion, which is nice
         */",undetermined
714,httpd,UNKNOWN,"/* XXX: lstat() won't work on the wildcard pattern...
     */",undetermined
715,httpd,UNKNOWN,/* don't require conf/httpd.conf if we have a -C or -c switch */,undetermined
716,httpd,UNKNOWN,/* locate the start of the directories proper */,undetermined
717,httpd,UNKNOWN,/* we allow APR_SUCCESS and APR_EINCOMPLETE */,undetermined
718,httpd,UNKNOWN,/* walk the filepath */,undetermined
719,httpd,UNKNOWN,"/* firstly, search cache */",undetermined
720,httpd,UNKNOWN,/* loop through the access names and find the first one */,undetermined
721,httpd,UNKNOWN,"/* AFAICT; there is no use of the actual 'filename' against
         * any canonicalization, so we will simply take the given
         * name, ignoring case sensitivity and aliases
         */",undetermined
722,httpd,UNKNOWN,/* cache it */,undetermined
723,httpd,UNKNOWN,/* add to head of list */,undetermined
724,httpd,UNKNOWN,/* TODO: this crap belongs in http_core */,undetermined
725,httpd,UNKNOWN,"/* useful default, otherwise we get a port of 0 on redirects */",undetermined
726,httpd,UNKNOWN,"/* Setting the main loglevel resets all per-module log levels.
         * I.e. if new->level has been set, we must ignore old->module_levels.
         */",undetermined
727,httpd,UNKNOWN,"/* XXX: this is really something that should be dealt with by a
         * post-config api phase
         */",undetermined
728,httpd,UNKNOWN,"/*****************************************************************
 *
 * Getting *everything* configured...
 */",undetermined
729,httpd,UNKNOWN,/* Global virtual host hash bucket pointers.  Init to null. */,undetermined
730,httpd,UNKNOWN,/* NOT virtual host; don't match any real network interface */,undetermined
731,httpd,UNKNOWN,/* should we test here for rv being an EAIERR? */,undetermined
732,httpd,UNKNOWN,/* matches any port */,undetermined
733,httpd,UNKNOWN,/* must be non-NULL */,undetermined
734,httpd,UNKNOWN,"/*
     * We have loaded all modules that are loaded by EXEC_ON_READ directives.
     * From now on we reduce the size of the config vectors to what we need,
     * plus what has been reserved (e.g. by mod_perl) for additional modules
     * loaded later on.
     * If max_modules is too small, ap_add_module() will abort.
     */",undetermined
735,httpd,UNKNOWN,/* All server-wide config files now have the SAME syntax... */,undetermined
736,httpd,UNKNOWN,"/* process_command_config may change the ServerRoot so
     * compute this config file name afterwards.
     */",undetermined
737,httpd,UNKNOWN,"/********************************************************************
 * Configuration directives are restricted in terms of where they may
 * appear in the main configuration files and/or .htaccess files according
 * to the bitmask req_override in the command_rec structure.
 * If any of the overrides set in req_override are also allowed in the
 * context in which the command is read, then the command is allowed.
 * The context is determined as follows:
 *
 *    inside *.conf --> override = (RSRC_CONF|OR_ALL)&~(OR_AUTHCFG|OR_LIMIT);
 *    within <Directory> or <Location> --> override = OR_ALL|ACCESS_CONF;
 *    within .htaccess --> override = AllowOverride for current directory;
 *
 * the result is, well, a rather confusing set of possibilities for when
 * a particular directive is allowed to be used.  This procedure prints
 * in English where the given (pc) directive can be used.
 */",undetermined
738,httpd,UNKNOWN,"/* Warn if the directive is allowed inside <Directory> or .htaccess
     * but module doesn't support per-dir configuration
     */",undetermined
739,httpd,UNKNOWN,"/* Show the preloaded configuration directives, the help string explaining
 * the directive arguments, in what module they are handled, and in
 * what parts of the configuration they are allowed.  Used for httpd -L.
 */",undetermined
740,httpd,UNKNOWN,/* Show the preloaded module names.  Used for httpd -l. */,undetermined
741,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
742,httpd,UNKNOWN,"/*
 * More machine-dependent networking gooo... on some systems,
 * you've got to be *really* sure that all the packets are acknowledged
 * before closing the connection, since the client will not be able
 * to see the last response if their TCP buffer is flushed by a RST
 * packet from us, which is what the server's TCP stack will send
 * if it receives any request data after closing the connection.
 *
 * In an ideal world, this function would be accomplished by simply
 * setting the socket option SO_LINGER and handling it within the
 * server's TCP stack while the process continues on to the next request.
 * Unfortunately, it seems that most (if not all) operating systems
 * block the server process on close() when SO_LINGER is used.
 * For those that don't, see USE_SO_LINGER below.  For the rest,
 * we have created a home-brew lingering_close.
 *
 * Many operating systems tend to block, puke, or otherwise mishandle
 * calls to shutdown only half of the connection.  You should define
 * NO_LINGCLOSE in ap_config.h if such is the case for your system.
 */",undetermined
743,httpd,UNKNOWN,/* FLUSH bucket */,undetermined
744,httpd,UNKNOWN,/* End Of Connection bucket */,undetermined
745,httpd,UNKNOWN,"/* we now proceed to read from the client until we get EOF, or until
 * MAX_SECS_TO_LINGER has passed.  the reasons for doing this are
 * documented in a draft:
 *
 * http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-connection-00.txt
 *
 * in a nutshell -- if we don't make this effort we risk causing
 * TCP RST packets to be sent which can tear down a connection before
 * all the response data has been sent to the client.
 */",undetermined
746,httpd,UNKNOWN,/* just close it */,undetermined
747,httpd,UNKNOWN,"/* Close the connection, being careful to send out whatever is still
     * in our buffers.  If possible, try to avoid a hard close until the
     * client has ACKed our FIN and/or has stopped sending us data.
     */",undetermined
748,httpd,UNKNOWN,"/* Send any leftover data to the client, but never try to again */",undetermined
749,httpd,UNKNOWN,"/* Shut down the socket for write, which will send a FIN
     * to the peer.
     */",undetermined
750,httpd,UNKNOWN,"/* Read available data from the client whilst it continues sending
     * it, for a maximum time of MAX_SECS_TO_LINGER.  If the client
     * does not send any data within 2 seconds (a value pulled from
     * Apache 1.3 which seems to work well), give up.
     */",undetermined
751,httpd,UNKNOWN,"/* The common path here is that the initial apr_socket_recv() call
     * will return 0 bytes read; so that case must avoid the expensive
     * apr_time_now() call and time arithmetic. */",undetermined
752,httpd,UNKNOWN,"/*
             * First time through;
             * calculate now + 30 seconds (MAX_SECS_TO_LINGER).
             *
             * If some module requested a shortened waiting period, only wait for
             * 2s (SECONDS_TO_LINGER). This is useful for mitigating certain
             * DoS attacks.
             */",undetermined
753,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
754,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
755,httpd,UNKNOWN,/* For index_of_response().  Grump. */,undetermined
756,httpd,UNKNOWN,/* For the default_handler below... */,undetermined
757,httpd,UNKNOWN,/* for ap_find_loaded_module_symbol */,undetermined
758,httpd,UNKNOWN,/* LimitRequestBody handling */,undetermined
759,httpd,UNKNOWN,/* LimitXMLRequestBody handling */,undetermined
760,httpd,UNKNOWN,/* maximum include nesting level */,undetermined
761,httpd,UNKNOWN,"/* valid in core-conf, but not in runtime r->used_path_info */",undetermined
762,httpd,UNKNOWN,"/* Server core module... This module provides support for really basic
 * server operations, including options and commands which control the
 * operation of other modules.  Consider this the bureaucracy module.
 *
 * The core module also defines handlers, etc., to handle just enough
 * to allow a server with the core module ONLY to actually serve documents.
 *
 * This file could almost be mod_core.c, except for the stuff which affects
 * the http_conf_globals.
 */",undetermined
763,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
764,httpd,UNKNOWN,/* Handles for core filters */,undetermined
765,httpd,UNKNOWN,/* Provide ap_document_root_check storage and default value = true */,undetermined
766,httpd,UNKNOWN,"/* magic pointer for ErrorDocument xxx ""default"" */",undetermined
767,httpd,UNKNOWN,/* conf->r and conf->d[_*] are initialized by dirsection() or left NULL */,undetermined
768,httpd,UNKNOWN,"/*
     * left as NULL (we use apr_pcalloc):
     * conf->limit_cpu = NULL;
     * conf->limit_mem = NULL;
     * conf->limit_nproc = NULL;
     * conf->sec_file = NULL;
     * conf->sec_if   = NULL;
     */",undetermined
769,httpd,UNKNOWN,"/* Overriding all negotiation
     * Set NULL by apr_pcalloc:
     * conf->mime_type = NULL;
     * conf->handler = NULL;
     * conf->output_filters = NULL;
     * conf->input_filters = NULL;
     */",undetermined
770,httpd,UNKNOWN,"/*
     * Flag for use of inodes in ETags.
     */",undetermined
771,httpd,UNKNOWN,"/* Create this conf by duplicating the base, replacing elements
     * (or creating copies for merging) where new-> values exist.
     */",undetermined
772,httpd,UNKNOWN,"/* there was no explicit setting of new->opts, so we merge
         * preserve the invariant (opts_add & opts_remove) == 0
         */",undetermined
773,httpd,UNKNOWN,"/* If Includes was enabled with exec in the base config, but
         * was enabled without exec in the new config, then disable
         * exec in the merged set. */",undetermined
774,httpd,UNKNOWN,"/* otherwise we just copy, because an explicit opts setting
         * overrides all earlier +/- modifiers
         */",undetermined
775,httpd,UNKNOWN,"/* If we merge, the merge-result must have its own array
         */",undetermined
776,httpd,UNKNOWN,"/* Otherwise we simply use the base->response_code_strings array
     */",undetermined
777,httpd,UNKNOWN,"/* If we merge, the merge-result must have its own array
         */",undetermined
778,httpd,UNKNOWN,"/* Otherwise we simply use the base->sec_file array
     */",undetermined
779,httpd,UNKNOWN,"/* If we merge, the merge-result must have its own array
         */",undetermined
780,httpd,UNKNOWN,"/* Otherwise we simply use the base->sec_if array
     */",undetermined
781,httpd,UNKNOWN,"/* Overriding all negotiation
     */",undetermined
782,httpd,UNKNOWN,"/*
     * Now merge the setting of the FileETag directive.
     */",undetermined
783,httpd,UNKNOWN,/* httpready broken before 4.1.1 */,undetermined
784,httpd,UNKNOWN,/* global-default / global-only settings */,undetermined
785,httpd,UNKNOWN,/* A mapping only makes sense in the global context */,undetermined
786,httpd,UNKNOWN,"/* pcalloc'ed - we have NULL's/0's
    else ** is_virtual ** {
        conf->ap_document_root = NULL;
        conf->access_name = NULL;
        conf->accf_map = NULL;
    }
     */",undetermined
787,httpd,UNKNOWN,"/* initialization, no special case for global context */",undetermined
788,httpd,UNKNOWN,"/* pcalloc'ed - we have NULL's/0's
    conf->gprof_dir = NULL;

    ** recursion stopper; 0 == unset
    conf->redirect_limit = 0;
    conf->subreq_limit = 0;

    conf->protocol = NULL;
     */",undetermined
789,httpd,UNKNOWN,/* XXX optimize to keep base->sec_ pointers if virt->sec_ array is empty */,undetermined
790,httpd,UNKNOWN,"/* no action for virt->accf_map, not allowed per-vhost */",undetermined
791,httpd,UNKNOWN,"/* Add per-directory configuration entry (for <directory> section);
 * these are part of the core server config.
 */",undetermined
792,httpd,UNKNOWN,"/* We need to do a stable sort, qsort isn't stable.  So to make it stable
 * we'll be maintaining the original index into the list, and using it
 * as the minor key during sorting.  The major key is the number of
 * components (where the root component is zero).
 */",undetermined
793,httpd,UNKNOWN,"/* a regex always sorts after a non-regex
     */",undetermined
794,httpd,UNKNOWN,"/* we always sort next by the number of components
     */",undetermined
795,httpd,UNKNOWN,"/* They have the same number of components, we now have to compare
     * the minor key to maintain the original order (from the config.)
     */",undetermined
796,httpd,UNKNOWN,/* simple case of already being sorted... */,undetermined
797,httpd,UNKNOWN,"/* We're not checking this condition to be fast... we're checking
         * it to avoid trying to palloc zero bytes, which can trigger some
         * memory debuggers to barf
         */",undetermined
798,httpd,UNKNOWN,/* we have to allocate tmp space to do a stable sort */,undetermined
799,httpd,UNKNOWN,/* and now copy back to the original array */,undetermined
800,httpd,UNKNOWN,"/*****************************************************************
 *
 * There are some elements of the core config structures in which
 * other modules have a legitimate interest (this is ugly, but necessary
 * to preserve NCSA back-compatibility).  So, we have a bunch of accessors
 * here...
 */",undetermined
801,httpd,UNKNOWN,"/*
 * Optional function coming from mod_authn_core, used for
 * retrieving the type of autorization
 */",undetermined
802,httpd,UNKNOWN,"/*
 * Optional function coming from mod_authn_core, used for
 * retrieving the authorization realm
 */",undetermined
803,httpd,UNKNOWN,"/*
 * Optional function coming from mod_access_compat, used to determine how
   access control interacts with authentication/authorization
 */",undetermined
804,httpd,UNKNOWN,/* Don't use this! */,undetermined
805,httpd,UNKNOWN,"/* Should probably just get rid of this... the only code that cares is
 * part of the core anyway (and in fact, it isn't publicised to other
 * modules).
 */",undetermined
806,httpd,UNKNOWN,/* check for string registered via ap_custom_response() first */,undetermined
807,httpd,UNKNOWN,/* check for string specified via ErrorDocument */,undetermined
808,httpd,UNKNOWN,/* Code from Harald Hanche-Olsen <hanche@imf.unit.no> */,undetermined
809,httpd,UNKNOWN,/* already done */,undetermined
810,httpd,UNKNOWN,"/* single reverse failed, so don't bother */",undetermined
811,httpd,UNKNOWN,/* caller doesn't want to know */,undetermined
812,httpd,UNKNOWN,"/* If we haven't checked the host name, and we want to */",undetermined
813,httpd,UNKNOWN,/* the default */,undetermined
814,httpd,UNKNOWN,"/* if failed, set it to the NULL string to indicate error */",undetermined
815,httpd,UNKNOWN,"/*
     * Return the desired information; either the remote DNS name, if found,
     * or either NULL (if the hostname was requested) or the IP address
     * (if any identifier was requested).
     */",undetermined
816,httpd,UNKNOWN,"/*
 * Optional function coming from mod_ident, used for looking up ident user
 */",undetermined
817,httpd,UNKNOWN,"/* There are two options regarding what the ""name"" of a server is.  The
 * ""canonical"" name as defined by ServerName and Port, or the ""client's
 * name"" as supplied by a possible Host: header or full URI.
 *
 * The DNS option to UseCanonicalName causes this routine to do a
 * reverse lookup on the local IP address of the connection and use
 * that for the ServerName. This makes its value more reliable while
 * at the same time allowing Demon's magic virtual hosting to work.
 * The assumption is that DNS lookups are sufficiently quick...
 * -- fanf 1998-10-03
 */",undetermined
818,httpd,UNKNOWN,"/*
 * Get the current server name from the request for the purposes
 * of using in a URL.  If the server name is an IPv6 literal
 * address, it will be returned in URL format (e.g., ""[fe80::1]"").
 */",undetermined
819,httpd,UNKNOWN,/* IPv6 literal? */,undetermined
820,httpd,UNKNOWN,/* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */,undetermined
821,httpd,UNKNOWN,"/* With UseCanonicalName on (and in all versions prior to 1.3)
             * Apache will use the hostname and port specified in the
             * ServerName directive to construct a canonical name for the
             * server. (If no port was specified in the ServerName
             * directive, Apache uses the port supplied by the client if
             * any is supplied, and finally the default port for the protocol
             * used.
             */",undetermined
822,httpd,UNKNOWN,/* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */,undetermined
823,httpd,UNKNOWN,"/*****************************************************************
 *
 * Commands... this module handles almost all of the NCSA httpd.conf
 * commands, but most of the old srm.conf is in the the modules.
 */",undetermined
824,httpd,UNKNOWN,/* returns a parent if it matches the given directive */,undetermined
825,httpd,UNKNOWN,/* ### it would be nice to have atom-ized directives */,undetermined
826,httpd,UNKNOWN,"/* EXEC_ON_READ must be NOT_IN_DIR_LOC_FILE, if not, it will
             * (deliberately) segfault below in the individual tests...
             */",undetermined
827,httpd,UNKNOWN,"/* well, actually something to do */",undetermined
828,httpd,UNKNOWN,/* prepare next entry */,undetermined
829,httpd,UNKNOWN,/* assemble result */,undetermined
830,httpd,UNKNOWN,"/*
 * Make sure we can revert the effects of Define/UnDefine when restarting.
 * This function must be called once per loading of the config, before
 * ap_server_config_defines is changed. This may be during reading of the
 * config, which is even before the pre_config hook is run (due to
 * EXEC_ON_READ for Define/UnDefine).
 */",undetermined
831,httpd,UNKNOWN,"/* Use apr_array_copy instead of apr_array_copy_hdr because it does not
     * protect from the way unset_define removes entries.
     */",undetermined
832,httpd,UNKNOWN,/* strip off quotes */,undetermined
833,httpd,UNKNOWN,/*GPROF*/,undetermined
834,httpd,UNKNOWN,/* When ap_document_root_check is false; skip all the stuff below */,undetermined
835,httpd,UNKNOWN,"/* Make it absolute, relative to ServerRoot */",undetermined
836,httpd,UNKNOWN,/* TODO: ap_configtestonly */,undetermined
837,httpd,UNKNOWN,"/* 1st parameter should be a 3 digit number, which we recognize;
     * convert it into an array index
     */",undetermined
838,httpd,UNKNOWN,/* Heuristic to determine second argument. */,undetermined
839,httpd,UNKNOWN,/* The entry should be ignored if it is a full URL for a 401 error */,undetermined
840,httpd,UNKNOWN,/* Store it... */,undetermined
841,httpd,UNKNOWN,"/* special case: ErrorDocument 404 default restores the
             * canned server error response
             */",undetermined
842,httpd,UNKNOWN,"/* hack. Prefix a "" if it is a msg; as that is what
             * http_protocol.c relies on to distinguish between
             * a msg and a (local) path.
             */",undetermined
843,httpd,UNKNOWN,"/* If Includes is permitted, both Includes and
             * IncludesNOEXEC may be changed. */",undetermined
844,httpd,UNKNOWN,/* AI backcompat. Yuck */,undetermined
845,httpd,UNKNOWN,/* Throw a warning if we're in <Location> or <Files> */,undetermined
846,httpd,UNKNOWN,/* Throw a warning if we're in <Location> or <Files> */,undetermined
847,httpd,UNKNOWN,/* AI backcompat. Yuck */,undetermined
848,httpd,UNKNOWN,/* Only works since None may not follow any other option. */,undetermined
849,httpd,UNKNOWN,/* Only works since All may not follow any other option. */,undetermined
850,httpd,UNKNOWN,/* we ensure the invariant (d->opts_add & d->opts_remove) == 0 */,undetermined
851,httpd,UNKNOWN,"/*
 * Note what data should be used when forming file ETag values.
 * It would be nicer to do this as an ITERATE, but then we couldn't
 * remember the +/- state properly.
 */",undetermined
852,httpd,UNKNOWN,"/*
             * The occurrence of an absolute setting wipes
             * out any previous relative ones.  The first such
             * occurrence forgets any inherited ones, too.
             */",undetermined
853,httpd,UNKNOWN,"/*
             * Make sure it's in the 'add' list and absent from the
             * 'subtract' list.
             */",undetermined
854,httpd,UNKNOWN,"/*
             * Non-relative values wipe out any + or - values
             * accumulated so far.
             */",undetermined
855,httpd,UNKNOWN,"/*
     * Any setting at all will clear the 'None' and 'Unset' bits.
     */",undetermined
856,httpd,UNKNOWN,"/*
 * Report a missing-'>' syntax error.
 */",undetermined
857,httpd,UNKNOWN,"/*
 * Report a missing args in '<Foo >' syntax error.
 */",undetermined
858,httpd,UNKNOWN,/* check for builtin or module registered method number */,undetermined
859,httpd,UNKNOWN,"/* method has not been registered yet, but resorce restriction
             * is always checked before method handling, so register it.
             */",undetermined
860,httpd,UNKNOWN,"/* Killing two features with one function,
     * if (tog == NULL) <Limit>, else <LimitExcept>
     */",undetermined
861,httpd,UNKNOWN,"/* XXX: Bogus - need to do this differently (at least OS2/Netware suffer
 * the same problem!!!
 * We use this in <DirectoryMatch> and <FilesMatch>, to ensure that
 * people don't get bitten by wrong-cased regex matches
 */",undetermined
862,httpd,UNKNOWN,/* <DirectoryMatch> */,undetermined
863,httpd,UNKNOWN,"/*
         * Ensure that the pathname is canonical, and append the trailing /
         */",undetermined
864,httpd,UNKNOWN,/* initialize our config and fetch it */,undetermined
865,httpd,UNKNOWN,"/* Make this explicit - the ""/"" root has 0 elements, that is, we
     * will always merge it, and it will always sort and merge first.
     * All others are sorted and tested by the number of slashes.
     */",undetermined
866,httpd,UNKNOWN,/* <LocationMatch> */,undetermined
867,httpd,UNKNOWN,/* initialize our config and fetch it */,undetermined
868,httpd,UNKNOWN,"/* No mangling, please */",undetermined
869,httpd,UNKNOWN,/* Only if not an .htaccess file */,undetermined
870,httpd,UNKNOWN,/* <FilesMatch> */,undetermined
871,httpd,UNKNOWN,"/* Ensure that the pathname is canonical, but we
         * can't test the case/aliases without a fixed path */",undetermined
872,httpd,UNKNOWN,/* initialize our config and fetch it */,undetermined
873,httpd,UNKNOWN,"/*
     * Set a dummy value so that other directives notice that they are inside
     * a config section.
     */",undetermined
874,httpd,UNKNOWN,/* Only if not an .htaccess file */,undetermined
875,httpd,UNKNOWN,/* initialize our config and fetch it */,undetermined
876,httpd,UNKNOWN,/* search prelinked stuff */,undetermined
877,httpd,UNKNOWN,/* search dynamic stuff */,undetermined
878,httpd,UNKNOWN,"/*
             * There are two phases where calling ap_find_loaded_module_symbol
             * is problematic:
             *
             * During reading of the config, ap_server_conf is invalid but s
             * points to the main server config, if passed from cmd->server
             * of an EXEC_ON_READ directive.
             *
             * During config parsing, s may be a virtual host that would cause
             * a segfault in mod_so if passed to ap_find_loaded_module_symbol,
             * because mod_so's server config for vhosts is initialized later.
             * But ap_server_conf is already set at this time.
             *
             * Therefore we use s if it is not virtual and ap_server_conf if
             * s is virtual.
             */",undetermined
879,httpd,UNKNOWN,/* httpd.conf commands... beginning with the <VirtualHost> business */,undetermined
880,httpd,UNKNOWN,"/* FIXME: There's another feature waiting to happen here -- since you
        can now put multiple addresses/names on a single <VirtualHost>
        you might want to use it to group common definitions and then
        define other ""subhosts"" with their individual differences.  But
        personally I'd rather just do it with a macro preprocessor. -djg */",undetermined
881,httpd,UNKNOWN,/* This one's pretty generic... */,undetermined
882,httpd,UNKNOWN,"/*
 * The ServerName directive takes one argument with format
 * [scheme://]fully-qualified-domain-name[:port], for instance
 * ServerName www.example.com
 * ServerName www.example.com:80
 * ServerName https://www.example.com:443
 */",undetermined
883,httpd,UNKNOWN,/* 65536 == 1<<16 */,undetermined
884,httpd,UNKNOWN,/* for compatibility with 2.0 & 2.2 */,undetermined
885,httpd,UNKNOWN,/* recursion level done */,undetermined
886,httpd,UNKNOWN,"/*
 * Handle a request to include the server's OS platform in the Server
 * response header field (the ServerTokens directive).  Unfortunately
 * this requires a new global in order to communicate the setting back to
 * http_main so it can insert the information in the right place in the
 * string.
 */",undetermined
887,httpd,UNKNOWN,/* eg: Apache/2 */,undetermined
888,httpd,UNKNOWN,/* eg. Apache/2.0 */,undetermined
889,httpd,UNKNOWN,/* eg: Apache/2.0.41 */,undetermined
890,httpd,UNKNOWN,/* eg: Apache/2.0.41 (UNIX) */,undetermined
891,httpd,UNKNOWN,/* eg: Apache/2.0.41 (UNIX) PHP/4.2.2 FooBar/1.2b */,undetermined
892,httpd,UNKNOWN,/* eg: Apache */,undetermined
893,httpd,UNKNOWN,"/*
         * If the version string is null, register our cleanup to reset the
         * pointer on pool destruction. We also know that, if NULL,
         * we are adding the original SERVER_BASEVERSION string.
         */",undetermined
894,httpd,UNKNOWN,"/*
             * Tack the given component identifier to the end of
             * the existing string.
             */",undetermined
895,httpd,UNKNOWN,"/*
 * This routine adds the real server base identity to the banner string,
 * and then locks out changes until the next reconfig.
 */",undetermined
896,httpd,UNKNOWN,"/*
     * Lock the server_banner string if we're not displaying
     * the full set of tokens
     */",undetermined
897,httpd,UNKNOWN,"/*
 * check whether redirect limit is reached
 */",undetermined
898,httpd,UNKNOWN,"/* uuh, too much. */",undetermined
899,httpd,UNKNOWN,/* post backtrace */,undetermined
900,httpd,UNKNOWN,/* return failure */,undetermined
901,httpd,UNKNOWN,"/* uuh, too much. */",undetermined
902,httpd,UNKNOWN,/* post backtrace */,undetermined
903,httpd,UNKNOWN,/* return failure */,undetermined
904,httpd,UNKNOWN,/* recursion state: ok */,undetermined
905,httpd,UNKNOWN,"/*
     * non-leading white space terminates this string to allow the next field
     * separator to be inserted
     */",undetermined
906,httpd,UNKNOWN,/* handle end of string */,undetermined
907,httpd,UNKNOWN,/* copy next char verbatim */,undetermined
908,httpd,UNKNOWN,/* percent-space (% ) is a field separator */,undetermined
909,httpd,UNKNOWN,/* recurse */,undetermined
910,httpd,UNKNOWN,"/* Note --- ErrorDocument will now work from .htaccess files.
 * The AllowOverride of Fileinfo allows webmasters to turn it off
 */",undetermined
911,httpd,UNKNOWN,/* Old access config file commands */,undetermined
912,httpd,UNKNOWN,/* Old resource config file commands */,undetermined
913,httpd,UNKNOWN,/* Old server config file commands */,undetermined
914,httpd,UNKNOWN,"/* TODO: RlimitFoo should all be part of mod_cgi, not in the core */",undetermined
915,httpd,UNKNOWN,/* TODO: ListenBacklog in MPM */,undetermined
916,httpd,UNKNOWN,/* System Resource Controls */,undetermined
917,httpd,UNKNOWN,/* internal recursion stopper */,undetermined
918,httpd,UNKNOWN,/* scoreboard.c directives */,undetermined
919,httpd,UNKNOWN,"/*
 * These are default configuration directives that mpms can/should
 * pay attention to.
 * XXX These are not for all platforms, and even some Unix MPMs might not want
 * some directives.
 */",undetermined
920,httpd,UNKNOWN,"/*****************************************************************
 *
 * Core handlers for various phases of server operation...
 */",undetermined
921,httpd,UNKNOWN,"/* XXX this seems too specific, this should probably become
     * some general-case test
     */",undetermined
922,httpd,UNKNOWN,"/*
     * Make sure that we do not mess up the translation by adding two
     * /'s in a row.  This happens under windows when the document
     * root ends with a /
     */",undetermined
923,httpd,UNKNOWN,"/* skip all leading /'s (e.g. http://localhost///foo)
     * so we are looking at only the relative path.
     */",undetermined
924,httpd,UNKNOWN,"/*****************************************************************
 *
 * Test the filesystem name through directory_walk and file_walk
 */",undetermined
925,httpd,UNKNOWN,"/* Check for overrides with ForceType / SetHandler
     */",undetermined
926,httpd,UNKNOWN,"/* Deal with the poor soul who is trying to force path_info to be
     * accepted within the core_handler, where they will let the subreq
     * address its contents.  This is toggled by the user in the very
     * beginning of the fixup phase (here!), so modules should override the user's
     * discretion in their own module fixup phase.  It is tristate, if
     * the user doesn't specify, the result is AP_REQ_DEFAULT_PATH_INFO.
     * (which the module may interpret to its own customary behavior.)
     * It won't be touched if the value is no longer AP_ACCEPT_PATHINFO_UNSET,
     * so any module changing the value prior to the fixup phase
     * OVERRIDES the user's choice.
     */",undetermined
927,httpd,UNKNOWN,"/* No module knew better, and the user coded AcceptPathInfo */",undetermined
928,httpd,UNKNOWN,"/* XXX if/when somebody writes a content-md5 filter we either need to
     *     remove this support or coordinate when to use the filter vs.
     *     when to use this code
     *     The current choice of when to compute the md5 here matches the 1.3
     *     support fairly closely (unlike 1.3, we don't handle computing md5
     *     when the charset is translated).
     */",undetermined
929,httpd,UNKNOWN,"/* If filters intend to consume the request body, they must
     * register an InputFilter to slurp the contents of the POST
     * data from the POST input stream.  It no longer exists when
     * the output filters are invoked by the default handler.
     */",undetermined
930,httpd,UNKNOWN,"/* Don't try to serve a dir.  Some OSs do weird things with
         * raw I/O on a dir.
         */",undetermined
931,httpd,UNKNOWN,/* default to reject */,undetermined
932,httpd,UNKNOWN,"/* We understood the (non-GET) method, but it might not be legal for
           this particular resource. Check to see if the 'deliver_script'
           flag is set. If so, then we go ahead and deliver the file since
           it isn't really content (only GET normally returns content).

           Note: based on logic further above, the only possible non-GET
           method at this point is POST. In the future, we should enable
           script delivery for all methods.  */",undetermined
933,httpd,UNKNOWN,/* The flag hasn't been set for this request. Punt. */,undetermined
934,httpd,UNKNOWN,/* no way to know what type of error occurred */,undetermined
935,httpd,UNKNOWN,/* unusual method (not GET or POST) */,undetermined
936,httpd,UNKNOWN,"/* See if this looks like an undecrypted SSL handshake attempt.
             * It's safe to look a couple bytes into the_request if it exists, as it's
             * always allocated at least MIN_LINE_ALLOC (80) bytes.
             */",undetermined
937,httpd,UNKNOWN,"/* Optional function coming from mod_logio, used for logging of output
 * traffic
 */",undetermined
938,httpd,UNKNOWN,"/* Insist that at least one module will undertake to provide system
 * security by dropping startup privileges.
 */",undetermined
939,httpd,UNKNOWN,"/* Alloc the config struct and the array of request notes in
     * a single block for efficiency
     */",undetermined
940,httpd,UNKNOWN,/* ### temporarily enable script delivery as the default */,undetermined
941,httpd,UNKNOWN,"/* Got a connection structure, so initialize what fields we can
     * (the rest are zeroed out by pcalloc).
     */",undetermined
942,httpd,UNKNOWN,"/* The Nagle algorithm says that we should delay sending partial
     * packets in hopes of getting more data.  We don't want to do
     * this; we are not telnet.  There are bad interactions between
     * persistent connections and Nagle's algorithm that have very severe
     * performance penalties.  (Failing to disable Nagle is not much of a
     * problem with simple HTTP.)
     */",undetermined
943,httpd,UNKNOWN,"/* expected cause is that the client disconnected already,
         * hence the debug level
         */",undetermined
944,httpd,UNKNOWN,"/* The core filter requires the timeout mode to be set, which
     * incidentally sets the socket to be nonblocking.  If this
     * is not initialized correctly, Linux - for example - will
     * be initially blocking, while Solaris will be non blocking
     * and any initial read will fail.
     */",undetermined
945,httpd,UNKNOWN,/* expected cause is that the client disconnected already */,undetermined
946,httpd,UNKNOWN,"/* The MPMs use plain fork() and not apr_proc_fork(), so we have to call
     * apr_random_after_fork() manually in the child
     */",undetermined
947,httpd,UNKNOWN,"/*
     * To ensure that the RNG state in the parent changes after the fork, we
     * pull some data from the RNG and discard it. This ensures that the RNG
     * states in the children are different even after the pid wraps around.
     * As we only use apr_random for insecure random bytes, pulling 2 bytes
     * should be enough.
     * XXX: APR should probably have some dedicated API to do this, but it
     * XXX: currently doesn't.
     */",undetermined
948,httpd,UNKNOWN,"/* apr_random_insecure_bytes can only fail with APR_ENOTENOUGHENTROPY,
     * and we have ruled that out during initialization. Therefore we don't
     * need to check the return code.
     */",undetermined
949,httpd,UNKNOWN,"/*
 * Finding a random number in a range.
 *      n' = a + n(b-a+1)/(M+1)
 * where:
 *      n' = random number in range
 *      a  = low end of range
 *      b  = high end of range
 *      n  = random number of 0..M
 *      M  = maxint
 * Algorithm 'borrowed' from PHP's rand() function.
 */",undetermined
950,httpd,UNKNOWN,"/* This triggers a gcc bug on sparc/64bit with gcc < 4.8, PR 52900 */",undetermined
951,httpd,UNKNOWN,"/* create_connection and pre_connection should always be hooked
     * APR_HOOK_REALLY_LAST by core to give other modules the opportunity
     * to install alternate network transports and stop other functions
     * from being run.
     */",undetermined
952,httpd,UNKNOWN,/* FIXME: I suspect we can eliminate the need for these do_nothings - Ben */,undetermined
953,httpd,UNKNOWN,"/* register the core's insert_filter hook and register core-provided
     * filters
     */",undetermined
954,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
955,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
956,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
957,httpd,UNKNOWN,/* create per-server config structure */,undetermined
958,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
959,httpd,UNKNOWN,/* command apr_table_t */,undetermined
960,httpd,UNKNOWN,/* register hooks */,undetermined
961,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
962,httpd,UNKNOWN,"/**
 * @file  core_filters.c
 * @brief Core input/output network filters.
 */",undetermined
963,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
964,httpd,UNKNOWN,/* For index_of_response().  Grump. */,undetermined
965,httpd,UNKNOWN,/* For the default_handler below... */,undetermined
966,httpd,UNKNOWN,/* for ap_find_loaded_module_symbol */,undetermined
967,httpd,UNKNOWN,"/**
 * Remove all zero length buckets from the brigade.
 */",undetermined
968,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
969,httpd,UNKNOWN,"/*
         * this mode is for filters that might need to 'initialize'
         * a connection before reading request data from a client.
         * NNTP over SSL for example needs to handshake before the
         * server sends the welcome message.
         * such filters would have changed the mode before this point
         * is reached.  however, protocol modules such as NNTP should
         * not need to know anything about SSL.  given the example, if
         * SSL is not in the filter chain, AP_MODE_INIT is a noop.
         */",undetermined
970,httpd,UNKNOWN,/* seed the brigade with the client socket. */,undetermined
971,httpd,UNKNOWN,/* ### This is bad. */,undetermined
972,httpd,UNKNOWN,"/* check for empty brigade again *AFTER* BRIGADE_NORMALIZE()
     * If we have lost our socket bucket (see above), we are EOF.
     *
     * Ideally, this should be returning SUCCESS with EOS bucket, but
     * some higher-up APIs (spec. read_request_line via ap_rgetline)
     * want an error code. */",undetermined
973,httpd,UNKNOWN,"/* we are reading a single LF line, e.g. the HTTP headers */",undetermined
974,httpd,UNKNOWN,"/* We should treat EAGAIN here the same as we do for EOF (brigade is
         * empty).  We do this by returning whatever we have read.  This may
         * or may not be bogus, but is consistent (for now) with EOF logic.
         */",undetermined
975,httpd,UNKNOWN,"/* ### AP_MODE_PEEK is a horrific name for this mode because we also
     * eat any CRLFs that we see.  That's not the obvious intention of
     * this mode.  Determine whether anyone actually uses this or not. */",undetermined
976,httpd,UNKNOWN,"/* The purpose of this loop is to ignore any CRLF (or LF) at the end
         * of a request.  Many browsers send extra lines at the end of POST
         * requests.  We use the PEEK method to determine if there is more
         * data on the socket, so that we know if we should delay sending the
         * end of one request until we have served the second request in a
         * pipelined situation.  We don't want to actually delay sending a
         * response if the server finds a CRLF (or LF), becuause that doesn't
         * mean that there is another request, just a blank line.
         */",undetermined
977,httpd,UNKNOWN,"/* If we reach here, we were a bucket just full of CRLFs, so
             * just toss the bucket. */",undetermined
978,httpd,UNKNOWN,/* FIXME: Is this the right thing to do in the core? */,undetermined
979,httpd,UNKNOWN,"/* If mode is EXHAUSTIVE, we want to just read everything until the end
     * of the brigade, which in this case means the end of the socket.
     * To do this, we attach the brigade that has currently been setaside to
     * the brigade that was passed down, and send that brigade back.
     *
     * NOTE:  This is VERY dangerous to use, and should only be done with
     * extreme caution.  FWLIW, this would be needed by an MPM like Perchild;
     * such an MPM can easily request the socket and all data that has been
     * read, which means that it can pass it to the correct child process.
     */",undetermined
980,httpd,UNKNOWN,/* Tack on any buckets that were set aside. */,undetermined
981,httpd,UNKNOWN,"/* Since we've just added all potential buckets (which will most
         * likely simply be the socket bucket) we know this is the end,
         * so tack on an EOS too. */",undetermined
982,httpd,UNKNOWN,"/* We have read until the brigade was empty, so we know that we
         * must be EOS. */",undetermined
983,httpd,UNKNOWN,/* read up to the amount they specified. */,undetermined
984,httpd,UNKNOWN,"/* getting EAGAIN for a blocking read is an error; for a
             * non-blocking read, return an empty brigade. */",undetermined
985,httpd,UNKNOWN,"/* We wanted to read some bytes in blocking mode.  We read
             * 0 bytes.  Hence, we now assume we are EOS.
             *
             * When we are in normal mode, return an EOS bucket to the
             * caller.
             * When we are in speculative mode, leave ctx->b empty, so
             * that the next call returns an EOS bucket.
             */",undetermined
986,httpd,UNKNOWN,/* Have we read as much data as we wanted (be greedy)? */,undetermined
987,httpd,UNKNOWN,/* We already registered the data in e in len */,undetermined
988,httpd,UNKNOWN,/* Check for the availability of buckets with known length */,undetermined
989,httpd,UNKNOWN,"/*
                     * Read from bucket, but non blocking. If there isn't any
                     * more data, well than this is fine as well, we will
                     * not wait for more since we already got some and we are
                     * only checking if there isn't more.
                     */",undetermined
990,httpd,UNKNOWN,/* We can only return at most what we read. */,undetermined
991,httpd,UNKNOWN,/* Must do move before CONCAT */,undetermined
992,httpd,UNKNOWN,/* Take what was originally there and place it back on ctx->b */,undetermined
993,httpd,UNKNOWN,/* XXX: Should these be configurable parameters? */,undetermined
994,httpd,UNKNOWN,"/* Optional function coming from mod_logio, used for logging of output
 * traffic
 */",undetermined
995,httpd,UNKNOWN,/* Fail quickly if the connection has already been aborted. */,undetermined
996,httpd,UNKNOWN,"/*
         * Need to create tmp brigade with correct lifetime. Passing
         * NULL to apr_brigade_split_ex would result in a brigade
         * allocated from bb->pool which might be wrong.
         */",undetermined
997,httpd,UNKNOWN,/* same for buffered_bb and ap_save_brigade */,undetermined
998,httpd,UNKNOWN,"/* Scan through the brigade and decide whether to attempt a write,
     * and how much to write, based on the following rules:
     *
     *  1) The new_bb is null: Do a nonblocking write of as much as
     *     possible: do a nonblocking write of as much data as possible,
     *     then save the rest in ctx->buffered_bb.  (If new_bb == NULL,
     *     it probably means that the MPM is doing asynchronous write
     *     completion and has just determined that this connection
     *     is writable.)
     *
     *  2) Determine if and up to which bucket we need to do a blocking
     *     write:
     *
     *  a) The brigade contains a flush bucket: Do a blocking write
     *     of everything up that point.
     *
     *  b) The request is in CONN_STATE_HANDLER state, and the brigade
     *     contains at least THRESHOLD_MAX_BUFFER bytes in non-file
     *     buckets: Do blocking writes until the amount of data in the
     *     buffer is less than THRESHOLD_MAX_BUFFER.  (The point of this
     *     rule is to provide flow control, in case a handler is
     *     streaming out lots of data faster than the data can be
     *     sent to the client.)
     *
     *  c) The request is in CONN_STATE_HANDLER state, and the brigade
     *     contains at least MAX_REQUESTS_IN_PIPELINE EOR buckets:
     *     Do blocking writes until less than MAX_REQUESTS_IN_PIPELINE EOR
     *     buckets are left. (The point of this rule is to prevent too many
     *     FDs being kept open by pipelined requests, possibly allowing a
     *     DoS).
     *
     *  d) The brigade contains a morphing bucket: If there was no other
     *     reason to do a blocking write yet, try reading the bucket. If its
     *     contents fit into memory before THRESHOLD_MAX_BUFFER is reached,
     *     everything is fine. Otherwise we need to do a blocking write the
     *     up to and including the morphing bucket, because ap_save_brigade()
     *     would read the whole bucket into memory later on.
     *
     *  3) Actually do the blocking write up to the last bucket determined
     *     by rules 2a-d. The point of doing only one flush is to make as
     *     few calls to writev() as possible.
     *
     *  4) If the brigade contains at least THRESHOLD_MIN_WRITE
     *     bytes: Do a nonblocking write of as much data as possible,
     *     then save the rest in ctx->buffered_bb.
     */",undetermined
999,httpd,UNKNOWN,/* The client has aborted the connection */,undetermined
1000,httpd,UNKNOWN,"/*
                 * A setaside of morphing buckets would read everything into
                 * memory. Instead, we will flush everything up to and
                 * including this bucket.
                 */",undetermined
1001,httpd,UNKNOWN,/* this segment of the brigade MUST be sent before returning. */,undetermined
1002,httpd,UNKNOWN,"/*
             * Defer the actual blocking write to avoid doing many writes.
             */",undetermined
1003,httpd,UNKNOWN,/* The client has aborted the connection */,undetermined
1004,httpd,UNKNOWN,/* The client has aborted the connection */,undetermined
1005,httpd,UNKNOWN,"/*
 * This function assumes that either ctx->buffered_bb == NULL, or
 * ctx->buffered_bb is empty, or ctx->buffered_bb == bb
 */",undetermined
1006,httpd,UNKNOWN,"/*
         * There are no more requests in the pipeline. We can just clear the
         * pool.
         */",undetermined
1007,httpd,UNKNOWN,"/* Use sendfile to send this file unless:
             *   - the platform doesn't support sendfile,
             *   - the file is too small for sendfile to be useful, or
             *   - sendfile is disabled in the httpd config via ""EnableSendfile off""
             */",undetermined
1008,httpd,UNKNOWN,/* APR_HAS_SENDFILE */,undetermined
1009,httpd,UNKNOWN,/* didn't sendfile */,undetermined
1010,httpd,UNKNOWN,"/* Non-blocking read first, in case this is a morphing
             * bucket type. */",undetermined
1011,httpd,UNKNOWN,/* Read would block; flush any pending data and retry. */,undetermined
1012,httpd,UNKNOWN,"/* reading may have split the bucket, so recompute next: */",undetermined
1013,httpd,UNKNOWN,/* Wait until we can send more data */,undetermined
1014,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1015,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1016,httpd,UNKNOWN,"/*
         * If eor_bucket_destroy is called after us, this prevents
         * eor_bucket_destroy from trying to destroy the pool again.
         */",undetermined
1017,httpd,UNKNOWN,/* Update child status and log the transaction */,undetermined
1018,httpd,UNKNOWN,"/*
         * Register a cleanup for the request pool as the eor bucket could
         * have been allocated from a different pool then the request pool
         * e.g. the parent pool of the request pool. In this case
         * eor_bucket_destroy might be called at a point of time when the
         * request pool had been already destroyed.
         * We need to use a pre-cleanup here because a module may create a
         * sub-pool which is still needed during the log_transaction hook.
         */",undetermined
1019,httpd,UNKNOWN,/* eor_bucket_cleanup will be called when the pool gets destroyed */,undetermined
1020,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1021,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1022,httpd,UNKNOWN,"/* A bunch of functions in util.c scan strings looking for certain characters.
 * To make that more efficient we encode a lookup table.
 */",undetermined
1023,httpd,UNKNOWN,/* escape_shell_cmd */,undetermined
1024,httpd,UNKNOWN,"/* Win32/OS2 have many of the same vulnerable characters
         * as Unix sh, plus the carriage return and percent char.
         * The proper escaping of these characters varies from unix
         * since Win32/OS2 use carets or doubled-double quotes,
         * and neither lf nor cr can be escaped.  We escape unix
         * specific as well, to assure that cross-compiled unix
         * applications behave similiarly when invoked on win32/os2.
         *
         * Rem please keep in-sync with apr's list in win32/filesys.c
         */",undetermined
1025,httpd,UNKNOWN,"/* these are the ""tspecials"" (RFC2068) or ""separators"" (RFC2616) */",undetermined
1026,httpd,UNKNOWN,"/* For logging, escape all control characters,
         * double quotes (because they delimit the request in the log file)
         * backslashes (because we use backslash for escaping)
         * and 8-bit chars with the high bit set
         */",undetermined
1027,httpd,UNKNOWN,"/* For forensic logging, escape all control characters, top bit set,
         * :, | (used as delimiters) and % (used for escaping).
         */",undetermined
1028,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1029,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1030,httpd,UNKNOWN,/* TODO: make_sock is just begging and screaming for APR abstraction */,undetermined
1031,httpd,UNKNOWN,"/*
     * To send data over high bandwidth-delay connections at full
     * speed we must force the TCP window to open wide enough to keep the
     * pipe full.  The default window size on many systems
     * is only 4kB.  Cross-country WAN connections of 100ms
     * at 1Mb/s are not impossible for well connected sites.
     * If we assume 100ms cross-country latency,
     * a 4kB buffer limits throughput to 40kB/s.
     *
     * To avoid this problem I've added the SendBufferSize directive
     * to allow the web master to configure send buffer size.
     *
     * The trade-off of larger buffers is that more kernel memory
     * is consumed.  YMMV, know your customers and your network!
     *
     * -John Heidemann <johnh@isi.edu> 25-Oct-96
     *
     * If no size is specified, use the kernel default.
     */",undetermined
1032,httpd,UNKNOWN,/* not a fatal error */,undetermined
1033,httpd,UNKNOWN,/* not a fatal error */,undetermined
1034,httpd,UNKNOWN,"/* I seriously doubt that this would work on Unix; I have doubts that
     * it entirely solves the problem on Win32.  However, since setting
     * reuseaddr on the listener -prior- to binding the socket has allowed
     * us to attach to the same port as an already running instance of
     * Apache, or even another web server, we cannot identify that this
     * port was exclusively granted to this instance of Apache.
     *
     * So set reuseaddr, but do not attempt to do so until we have the
     * parent listeners successfully bound.
     */",undetermined
1035,httpd,UNKNOWN,"/* In APR 1.x, the 2nd and 3rd parameters are char * instead of 
         * const char *, so make a copy of those args here.
         */",undetermined
1036,httpd,UNKNOWN,/* see if we've got an old listener for this address:port */,undetermined
1037,httpd,UNKNOWN,/* Some listeners are not real so they will not have a bind_addr. */,undetermined
1038,httpd,UNKNOWN,"/* If both ports are equivalent, then if their names are equivalent,
             * then we will re-use the existing record.
             */",undetermined
1039,httpd,UNKNOWN,/* Initialize to our last configured ap_listener. */,undetermined
1040,httpd,UNKNOWN,/* this has to survive restarts */,undetermined
1041,httpd,UNKNOWN,/* Go to the next sockaddr. */,undetermined
1042,httpd,UNKNOWN,"/* What could happen is that we got an IPv6 address, but this system
         * doesn't actually support IPv6.  Try the next address.
         */",undetermined
1043,httpd,UNKNOWN,/* We need to preserve the order returned by getaddrinfo() */,undetermined
1044,httpd,UNKNOWN,"/* Evaluates to true if the (apr_sockaddr_t *) addr argument is the
 * IPv4 match-any-address, 0.0.0.0. */",undetermined
1045,httpd,UNKNOWN,"/* Evaluates to true if the (apr_sockaddr_t *) addr argument is the
 * IPv6 match-any-address, [::]. */",undetermined
1046,httpd,UNKNOWN,"/**
 * Create, open, listen, and bind all sockets.
 * @param process The process record for the currently running server
 * @return The number of open sockets
 */",undetermined
1047,httpd,UNKNOWN,"/* Don't allocate a default listener.  If we need to listen to a
     * port, then the user needs to have a Listen directive in their
     * config file.
     */",undetermined
1048,httpd,UNKNOWN,"/* If we have the unspecified IPv4 address (0.0.0.0) and
             * the unspecified IPv6 address (::) is next, we need to
             * swap the order of these in the list. We always try to
             * bind to IPv6 first, then IPv4, since an IPv6 socket
             * might be able to receive IPv4 packets if V6ONLY is not
             * enabled, but never the other way around.
             * Note: In some configurations, the unspecified IPv6 address
             * could be even later in the list.  This logic only corrects
             * the situation where it is next in the list, such as when
             * apr_sockaddr_info_get() returns an IPv4 and an IPv6 address,
             * in that order.
             */",undetermined
1049,httpd,UNKNOWN,/* Exchange lr and lr->next */,undetermined
1050,httpd,UNKNOWN,"/* If we are trying to bind to 0.0.0.0 and a previous listener
             * was :: on the same port and in turn that socket does not have
             * the IPV6_V6ONLY flag set; we must skip the current attempt to
             * listen (which would generate an error). IPv4 will be handled
             * on the established IPv6 socket.
             */",undetermined
1051,httpd,UNKNOWN,/* Remove the current listener from the list */,undetermined
1052,httpd,UNKNOWN,"/* maintain current value of previous after
                                        * post-loop expression is evaluated
                                        */",undetermined
1053,httpd,UNKNOWN,"/* If we tried to bind to ::, and the next listener is
                 * on 0.0.0.0 with the same port, don't give a fatal
                 * error. The user will still get a warning from make_sock
                 * though.
                 */",undetermined
1054,httpd,UNKNOWN,/* Remove the current listener from the list */,undetermined
1055,httpd,UNKNOWN,"/* Although we've removed ourselves from the list,
                     * we need to make sure that the next iteration won't
                     * consider ""previous"" a working IPv6 '::' socket.
                     * Changing the family is enough to make sure the
                     * conditions before make_sock() fail.
                     */",undetermined
1056,httpd,UNKNOWN,/* fatal error */,undetermined
1057,httpd,UNKNOWN,/* close the old listeners */,undetermined
1058,httpd,UNKNOWN,"/* if multiple listening sockets, make them non-blocking so that
     * if select()/poll() reports readability for a reset connection that
     * is already forgotten about by the time we call accept, we won't
     * be hung until another connection arrives on that port
     */",undetermined
1059,httpd,UNKNOWN,/* AP_NONBLOCK_WHEN_MULTI_LISTEN */,undetermined
1060,httpd,UNKNOWN,"/* we come through here on both passes of the open logs phase
     * only register the cleanup once... otherwise we try to close
     * listening sockets twice when cleaning up prior to exec
     */",undetermined
1061,httpd,UNKNOWN,"/* No protocol was set for this vhost,
             * use the default for this listener.
             */",undetermined
1062,httpd,UNKNOWN,"/* TODO: set protocol defaults per-Port, eg 25=smtp */",undetermined
1063,httpd,UNKNOWN,/* XXX scope id support is useful with link-local IPv6 addresses */,undetermined
1064,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1065,httpd,UNKNOWN,"/*
 * http_log.c: Dealing with the logs and errors
 *
 * Rob McCool
 *
 */",undetermined
1066,httpd,UNKNOWN,/* for signal stuff */,undetermined
1067,httpd,UNKNOWN,/* for getpid() on Win32 */,undetermined
1068,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1069,httpd,UNKNOWN,/* track pipe handles to close in child process */,undetermined
1070,httpd,UNKNOWN,"/**
 * @brief The piped logging structure.
 *
 * Piped logs are used to move functionality out of the main server.
 * For example, log rotation is done with piped logs.
 */",undetermined
1071,httpd,UNKNOWN,/** The pool to use for the piped log */,undetermined
1072,httpd,UNKNOWN,/** The pipe between the server and the logging process */,undetermined
1073,httpd,UNKNOWN,/** The name of the program the logging process is running */,undetermined
1074,httpd,UNKNOWN,/** The pid of the logging process */,undetermined
1075,httpd,UNKNOWN,/** How to reinvoke program when it must be replaced */,undetermined
1076,httpd,UNKNOWN,"/* remember to close this handle in the child process
 *
 * On Win32 this makes zero sense, because we don't
 * take the parent process's child procs.
 * If the win32 parent instead passed each and every
 * logger write handle from itself down to the child,
 * and the parent manages all aspects of keeping the
 * reliable pipe log children alive, this would still
 * make no sense :)  Cripple it on Win32.
 */",undetermined
1077,httpd,UNKNOWN,"/* This is safe provided we revert it when we are finished.
         * We don't manager the callers pool!
         */",undetermined
1078,httpd,UNKNOWN,"/*
             * You might ponder why stderr_pool should survive?
             * The trouble is, stderr_pool may have s_main->error_log,
             * so we aren't in a position to destory stderr_pool until
             * the next recycle.  There's also an apparent bug which
             * is not; if some folk decided to call this function before
             * the core open error logs hook, this pool won't survive.
             * Neither does the stderr logger, so this isn't a problem.
             */",undetermined
1079,httpd,UNKNOWN,"/* Revert, see above */",undetermined
1080,httpd,UNKNOWN,"/* Create a child process running PROGNAME with a pipe connected to
 * the childs stdin.  The write-end of the pipe will be placed in
 * *FPIN on successful return.  If dummy_stderr is non-zero, the
 * stderr for the child will be the same as the stdout of the parent.
 * Otherwise the child will inherit the stderr from the parent. */",undetermined
1081,httpd,UNKNOWN,"/* Child process code for 'ErrorLog ""|...""';
     * may want a common framework for this, since I expect it will
     * be common for other foo-loggers to want this sort of thing...
     */",undetermined
1082,httpd,UNKNOWN,"/* read handle to pipe not kept open, so no need to call
             * close_handle_in_child()
             */",undetermined
1083,httpd,UNKNOWN,"/* Open the error log for the given server_rec.  If IS_MAIN is
 * non-zero, s is the main server. */",undetermined
1084,httpd,UNKNOWN,"/* In 2.4 favor PROGRAM_ENV, accept ""||prog"" syntax for compatibility
         * and ""|$cmd"" to override the default.
         * Any 2.2 backport would continue to favor SHELLCMD_ENV so there
         * accept ""||prog"" to override, and ""|$cmd"" to ease conversion.
         */",undetermined
1085,httpd,UNKNOWN,"/* Spawn a new child logger.  If this is the main server_rec,
         * the new child must use a dummy stderr since the current
         * stderr might be a pipe to the old logger.  Otherwise, the
         * child inherits the parents stderr. */",undetermined
1086,httpd,UNKNOWN,/* plog */,undetermined
1087,httpd,UNKNOWN,"/* Register to throw away the read_handles list when we
     * cleanup plog.  Upon fork() for the apache children,
     * this read_handles list is closed so only the parent
     * can relaunch a lost log child.  These read handles
     * are always closed on exec.
     * We won't care what happens to our stderr log child
     * between log phases, so we don't mind losing stderr's
     * read_handle a little bit early.
     */",undetermined
1088,httpd,UNKNOWN,"/* HERE we need a stdout log that outlives plog.
     * We *presume* the parent of plog is a process
     * or global pool which spans server restarts.
     * Create our stderr_pool as a child of the plog's
     * parent pool.
     */",undetermined
1089,httpd,UNKNOWN,/* Replace existing stderr with new log. */,undetermined
1090,httpd,UNKNOWN,"/* We are done with stderr_pool, close it, killing
             * the previous generation's stderr logger
             */",undetermined
1091,httpd,UNKNOWN,"/*
             * Now that we have dup'ed s_main->error_log to stderr_log
             * close it and set s_main->error_log to stderr_log. This avoids
             * this fd being inherited by the next piped logger who would
             * keep open the writing end of the pipe that this one uses
             * as stdin. This in turn would prevent the piped logger from
             * exiting.
             */",undetermined
1092,httpd,UNKNOWN,"/* note that stderr may still need to be replaced with something
     * because it points to the old error log, or back to the tty
     * of the submitter.
     * XXX: This is BS - /dev/null is non-portable
     *      errno-as-apr_status_t is also non-portable
     */",undetermined
1093,httpd,UNKNOWN,/* ap_recent_ctime_ex includes the trailing \0 in time_len */,undetermined
1094,httpd,UNKNOWN,"/*
     * C: log conn log_id if available,
     * c: log conn log id if available and not a once-per-request log line
     * else: log request log id if available
     */",undetermined
1095,httpd,UNKNOWN,"/* In OSD/POSIX, the compiler returns for __FILE__
         * a string like: __FILE__=""*POSIX(/usr/include/stdio.h)""
         * (it even returns an absolute path for sources in
         * the current directory). Here we try to strip this
         * down to the basename.
         */",undetermined
1096,httpd,UNKNOWN,/* _OSD_POSIX || WIN32 */,undetermined
1097,httpd,UNKNOWN,"/* On Unix, __FILE__ may be an absolute path in a
         * VPATH build. */",undetermined
1098,httpd,UNKNOWN,/*_OSD_POSIX || WIN32 */,undetermined
1099,httpd,UNKNOWN,/* XXX: maybe escaping the entry is not necessary for notes? */,undetermined
1100,httpd,UNKNOWN,/* includes trailing \0 */,undetermined
1101,httpd,UNKNOWN,"/* Skip the last char, it is always '=' */",undetermined
1102,httpd,UNKNOWN,/* need to cast const away */,undetermined
1103,httpd,UNKNOWN,"/*
 * This is used if no error log format is defined and during startup.
 * It automatically omits the timestamp if logging to syslog.
 */",undetermined
1104,httpd,UNKNOWN,"/*
     * useragent_ip/client_ip can be client or backend server. If we have
     * a scoreboard handle, it is likely a client.
     */",undetermined
1105,httpd,UNKNOWN,/* the actual error message */,undetermined
1106,httpd,UNKNOWN,/* the actual error message */,undetermined
1107,httpd,UNKNOWN,/* required item is empty. skip whole line */,undetermined
1108,httpd,UNKNOWN,/* NULL if we are logging to syslog */,undetermined
1109,httpd,UNKNOWN,/* Truncate for the terminator (as apr_snprintf does) */,undetermined
1110,httpd,UNKNOWN,/* do we need to log once-per-req or once-per-conn info? */,undetermined
1111,httpd,UNKNOWN,"/*
         * If we are doing stderr logging (startup), don't log messages that are
         * above the default server log level unless it is a startup/shutdown
         * notice
         */",undetermined
1112,httpd,UNKNOWN,"/*
             * If we are doing normal logging, don't log messages that are
             * above the module's log level unless it is a startup/shutdown notice
             */",undetermined
1113,httpd,UNKNOWN,"/*
             * If we are doing syslog logging, don't log messages that are
             * above the module's log level (including a startup/shutdown notice)
             */",undetermined
1114,httpd,UNKNOWN,/* the faked server_rec from mod_cgid does not have s->module_config */,undetermined
1115,httpd,UNKNOWN,/* XXX: do we need separate log ids for subrequests? */,undetermined
1116,httpd,UNKNOWN,"/*
                     * XXX: potential optimization: only create log id if %L is
                     * XXX: actually used
                     */",undetermined
1117,httpd,UNKNOWN,/* XXX: potential optimization: format common prefixes only once */,undetermined
1118,httpd,UNKNOWN,/* once-per-connection info */,undetermined
1119,httpd,UNKNOWN,/* this is the last line of once-per-connection info */,undetermined
1120,httpd,UNKNOWN,/* once-per-request info */,undetermined
1121,httpd,UNKNOWN,/* this is the last line of once-per-request info */,undetermined
1122,httpd,UNKNOWN,/* the actual error message */,undetermined
1123,httpd,UNKNOWN,"/*
         * prepare and log one line
         */",undetermined
1124,httpd,UNKNOWN,"/*
             * Don't log empty lines. This can happen with once-per-conn/req
             * info if an item with AP_ERRORLOG_FLAG_REQUIRED is NULL.
             */",undetermined
1125,httpd,UNKNOWN,"/*
             * We don't call the error_log hook for per-request/per-conn
             * lines, and we only pass the actual log message, not the
             * prefix and suffix.
             */",undetermined
1126,httpd,UNKNOWN,"/*
     * IF APLOG_TOCLIENT is set,
     * AND the error level is 'warning' or more severe,
     * AND there isn't already error text associated with this request,
     * THEN make the message text available to ErrorDocument and
     * other error processors.
     */",undetermined
1127,httpd,UNKNOWN,"/* Piece together the command line from the pieces
     * in process->argv, with spaces in between.
     */",undetermined
1128,httpd,UNKNOWN,"/* AP_SIG_GRACEFUL and HUP call this on each restart.
         * Only warn on first time through for this pid.
         *
         * XXX: Could just write first time through too, although
         *      that may screw up scripts written to do something
         *      based on the last modification time of the pid file.
         */",undetermined
1129,httpd,UNKNOWN,/* see apr_ltoa */,undetermined
1130,httpd,UNKNOWN,"/* If we fill the buffer, we're probably reading a corrupt pid file.
     * To be nice, let's also ensure the first char is a digit. */",undetermined
1131,httpd,UNKNOWN,/* unix assert does an abort leading to a core dump */,undetermined
1132,httpd,UNKNOWN,/* piped log support */,undetermined
1133,httpd,UNKNOWN,/* forward declaration */,undetermined
1134,httpd,UNKNOWN,/* Spawn the piped logger process pl->program. */,undetermined
1135,httpd,UNKNOWN,"/* Something bad happened, give up and go away. */",undetermined
1136,httpd,UNKNOWN,"/* procnew->in was dup2'd from pl->write_fd;
             * since the original fd is still valid, close the copy to
             * avoid a leak. */",undetermined
1137,httpd,UNKNOWN,"/* Something bad happened, give up and go away. */",undetermined
1138,httpd,UNKNOWN,"/* in case we don't get it going again, this
                         * tells other logic not to try to kill it
                         */",undetermined
1139,httpd,UNKNOWN,"/* what can we do?  This could be the error log we're having
                 * problems opening up... */",undetermined
1140,httpd,UNKNOWN,"/* We should not kill off the pipe here, since it may only be full.
         * If it really is locked, we should kill it off manually. */",undetermined
1141,httpd,UNKNOWN,/* !AP_HAVE_RELIABLE_PIPED_LOGS */,undetermined
1142,httpd,UNKNOWN,"/* In 2.4 favor PROGRAM_ENV, accept ""||prog"" syntax for compatibility
     * and ""|$cmd"" to override the default.
     * Any 2.2 backport would continue to favor SHELLCMD_ENV so there
     * accept ""||prog"" to override, and ""|$cmd"" to ease conversion.
     */",undetermined
1143,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1144,httpd,UNKNOWN,"/* WARNING: Win32 binds http_main.c dynamically to the server. Please place
 *          extern functions and global data in another appropriate module.
 *
 * Most significant main() global data can be found in http_config.c
 */",undetermined
1145,httpd,UNKNOWN,"/* sizeof(foo) is long on some platforms so we might as well
     * make it long everywhere to keep the printf format
     * consistent
     */",undetermined
1146,httpd,UNKNOWN,/* This list displays the compiled in default paths: */,undetermined
1147,httpd,UNKNOWN,"/*
     * Sleep for TASK_SWITCH_SLEEP micro seconds to cause a task switch on
     * OS layer and thus give possibly started piped loggers a chance to
     * process their input. Otherwise it is possible that they get killed
     * by us before they can do so. In this case maybe valueable log messages
     * might get lost.
     */",undetermined
1148,httpd,UNKNOWN,/* and destroy all descendent pools */,undetermined
1149,httpd,UNKNOWN,/* APR callback invoked if allocation fails. */,undetermined
1150,httpd,UNKNOWN,"/* unreachable, hopefully. */",undetermined
1151,httpd,UNKNOWN,"/* For all intents and purposes, this is impossibly unlikely,
         * but APR doesn't exist yet, we can't use it for reporting
         * these earliest two failures;
         *
         * XXX: Note the apr_ctime() and apr_time_now() calls.  These
         * work, today, against an uninitialized APR, but in the future
         * (if they relied on global pools or mutexes, for example) then
         * the datestamp logic will need to be replaced.
         */",undetermined
1152,httpd,UNKNOWN,"/* Now we have initialized apr and our logger, no more
     * exceptional error reporting required for the lifetime
     * of this server process.
     */",undetermined
1153,httpd,UNKNOWN,"/* XXX not all MPMs support signalling the server in general or graceful-stop
 * in particular
 */",undetermined
1154,httpd,UNKNOWN,"/* Pool of log streams, reset _after_ each read of conf */",undetermined
1155,httpd,UNKNOWN,"/* Pool for temporary config stuff, reset often */",undetermined
1156,httpd,UNKNOWN,"/* Pool for -D, -C and -c switches */",undetermined
1157,httpd,UNKNOWN,/* turn off profiling of startup */,undetermined
1158,httpd,UNKNOWN,"/* Set up the OOM callback in the global pool, so all pools should
     * by default inherit it. */",undetermined
1159,httpd,UNKNOWN,"/* Maintain AP_SERVER_BASEARGS list in http_main.h to allow the MPM
     * to safely pass on our args from its rewrite_args() handler.
     */",undetermined
1160,httpd,UNKNOWN,/* Setting -D DUMP_VHOSTS should work like setting -S */,undetermined
1161,httpd,UNKNOWN,/* Setting -D DUMP_RUN_CFG should work like setting -S */,undetermined
1162,httpd,UNKNOWN,/* Setting -D DUMP_MODULES is equivalent to setting -M */,undetermined
1163,httpd,UNKNOWN,/* MPM built-in? */,undetermined
1164,httpd,UNKNOWN,/* bad cmdline option?  then we die */,undetermined
1165,httpd,UNKNOWN,"/* Note that we preflight the config file once
     * before reading it _again_ in the main loop.
     * This allows things, log files configuration
     * for example, to settle down.
     */",undetermined
1166,httpd,UNKNOWN,/* sort hooks here to make sure pre_config hooks are sorted properly */,undetermined
1167,httpd,UNKNOWN,"/*
         * Sort hooks again because ap_process_config_tree may have add modules
         * and hence hooks. This happens with mod_perl and modules written in
         * perl.
         */",undetermined
1168,httpd,UNKNOWN,/* deferred due to dynamically loaded MPM */,undetermined
1169,httpd,UNKNOWN,/* deferred in case of DSOs */,undetermined
1170,httpd,UNKNOWN,"/* If our config failed, deal with that here. */",undetermined
1171,httpd,UNKNOWN,"/* This is a hack until we finish the code so that it only reads
         * the config file once and just operates on the tree already in
         * memory.  rbb
         */",undetermined
1172,httpd,UNKNOWN,/* sort hooks here to make sure pre_config hooks are sorted properly */,undetermined
1173,httpd,UNKNOWN,"/*
         * Sort hooks again because ap_process_config_tree may have add modules
         * and hence hooks. This happens with mod_perl and modules written in
         * perl.
         */",undetermined
1174,httpd,UNKNOWN,/* Termination 'ok' */,undetermined
1175,httpd,UNKNOWN,"/* This ugly little hack pulls any function referenced in exports.c into
 * the web server.  exports.c is generated during the build, and it
 * has all of the APR functions specified by the apr/apr.exports and
 * apr-util/aprutil.exports files.
 */",undetermined
1176,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1177,httpd,UNKNOWN,"/* The purpose of this file is to store the code that MOST mpm's will need
 * this does not mean a function only goes into this file if every MPM needs
 * it.  It means that if a function is needed by more than one MPM, and
 * future maintenance would be served by making the code common, then the
 * function belongs here.
 *
 * This is going in src/main because it is not platform specific, it is
 * specific to multi-process servers, but NOT to Unix.  Which is why it
 * does not belong in src/os/unix
 */",undetermined
1178,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1179,httpd,UNKNOWN,"/* hooks with no args are implemented last, after disabling APR hook probes */",undetermined
1180,httpd,UNKNOWN,/* which gen? */,undetermined
1181,httpd,UNKNOWN,/* number of active processes */,undetermined
1182,httpd,UNKNOWN,/* gen finished? (whether or not active processes) */,undetermined
1183,httpd,UNKNOWN,/* yuck */,undetermined
1184,httpd,UNKNOWN,/* variables representing config directives implemented here */,undetermined
1185,httpd,UNKNOWN,"/* Set defaults for config directives implemented here.  This is
 * called from core's pre-config hook, so MPMs which need to override
 * one of these should run their pre-config hook after that of core.
 */",undetermined
1186,httpd,UNKNOWN,/* unlimited */,undetermined
1187,httpd,UNKNOWN,/* unlimited */,undetermined
1188,httpd,UNKNOWN,/* use system default */,undetermined
1189,httpd,UNKNOWN,/* number of calls to wait_or_timeout between writable probes */,undetermined
1190,httpd,UNKNOWN,"/* The Nagle algorithm says that we should delay sending partial
     * packets in hopes of getting more data.  We don't want to do
     * this; we are not telnet.  There are bad interactions between
     * persistent connections and Nagle's algorithm that have very severe
     * performance penalties.  (Failing to disable Nagle is not much of a
     * problem with simple HTTP.)
     *
     * In spite of these problems, failure here is not a shooting offense.
     */",undetermined
1191,httpd,UNKNOWN,/* def HAVE_INITGROUPS */,undetermined
1192,httpd,UNKNOWN,/* standard mpm configuration handling */,undetermined
1193,httpd,UNKNOWN,/* cleanup on pconf */,undetermined
1194,httpd,UNKNOWN,/* differs from MPM generation */,undetermined
1195,httpd,UNKNOWN,"/* initial pconf teardown, MPM hasn't run */",undetermined
1196,httpd,UNKNOWN,/* last child of generation already exited */,undetermined
1197,httpd,UNKNOWN,"/* core's child-status hook
 * tracks number of remaining children per generation and
 * runs the end-generation hook when the last child of
 * a generation exits
 */",undetermined
1198,httpd,UNKNOWN,/* where to run this? */,undetermined
1199,httpd,UNKNOWN,/* first child for this generation */,undetermined
1200,httpd,UNKNOWN,"/* no children, server has stopped/restarted */",undetermined
1201,httpd,UNKNOWN,"/* we don't track by slot, so it doesn't matter */",undetermined
1202,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1203,httpd,UNKNOWN,"/* The purpose of this file is to store the code that MOST mpm's will need
 * this does not mean a function only goes into this file if every MPM needs
 * it.  It means that if a function is needed by more than one MPM, and
 * future maintenance would be served by making the code common, then the
 * function belongs here.
 *
 * This is going in src/main because it is not platform specific, it is
 * specific to multi-process servers, but NOT to Unix.  Which is why it
 * does not belong in src/os/unix
 */",undetermined
1204,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1205,httpd,UNKNOWN,/* found */,undetermined
1206,httpd,UNKNOWN,/* we don't know about any such process */,undetermined
1207,httpd,UNKNOWN,/* Ensure pid sanity. */,undetermined
1208,httpd,UNKNOWN,"/* ok, now it's being annoying */",undetermined
1209,httpd,UNKNOWN,"/* gave it our best shot, but alas...  If this really
         * is a child we are trying to kill and it really hasn't
         * exited, we will likely fail to bind to the port
         * after the restart.
         */",undetermined
1210,httpd,UNKNOWN,"/* this table of actions and elapsed times tells what action is taken
     * at which elapsed time from starting the reclaim
     */",undetermined
1211,httpd,UNKNOWN,"/* dummy entry for iterations where we reap
                          * children but take no action against
                          * stragglers
                          */",undetermined
1212,httpd,UNKNOWN,"/* index of action we decided to take this
                          * iteration
                          */",undetermined
1213,httpd,UNKNOWN,/* index of first real action */,undetermined
1214,httpd,UNKNOWN,"/* don't let waittime get longer than 1 second; otherwise, we don't
         * react quickly to the last child exiting, and taking action can
         * be delayed
         */",undetermined
1215,httpd,UNKNOWN,"/* see what action to take, if any */",undetermined
1216,httpd,UNKNOWN,/* nothing to do */,undetermined
1217,httpd,UNKNOWN,/* now see who is done */,undetermined
1218,httpd,UNKNOWN,/* not every scoreboard entry is in use */,undetermined
1219,httpd,UNKNOWN,/* now see who is done */,undetermined
1220,httpd,UNKNOWN,/* not every scoreboard entry is in use */,undetermined
1221,httpd,UNKNOWN,"/* Before sending the signal to the pid this function verifies that
 * the pid is a member of the current process group; either using
 * apr_proc_wait(), where waitpid() guarantees to fail for non-child
 * processes; or by using getpgid() directly, if available. */",undetermined
1222,httpd,UNKNOWN,/* Ensure pid sanity */,undetermined
1223,httpd,UNKNOWN,"/* The child already died - log the termination status if
         * necessary: */",undetermined
1224,httpd,UNKNOWN,"/* The child is already dead and reaped, or was a bogus pid -
         * log this either way. */",undetermined
1225,httpd,UNKNOWN,/* Ensure pid sanity. */,undetermined
1226,httpd,UNKNOWN,/* Process already dead... */,undetermined
1227,httpd,UNKNOWN,"/* Child died... if it died due to a fatal error,
     * we should simply bail out.  The caller needs to
     * check for bad rc from us and exit, running any
     * appropriate cleanups.
     *
     * If the child died due to a resource shortage,
     * the parent should limit the rate of forking
     */",undetermined
1228,httpd,UNKNOWN,/* close these before exec. */,undetermined
1229,httpd,UNKNOWN,"/* This function connects to the server and sends enough data to
 * ensure the child wakes up and processes a new connection.  This
 * permits the MPM to skip the poll when there is only one listening
 * socket, because it provides a alternate way to unblock an accept()
 * when the pod is used.  */",undetermined
1230,httpd,UNKNOWN,/* create a temporary pool for the socket.  pconf stays around too long */,undetermined
1231,httpd,UNKNOWN,"/* If possible, find a listener which is configured for
     * plain-HTTP, not SSL; using an SSL port would either be
     * expensive to do correctly (performing a complete SSL handshake)
     * or cause log spam by doing incorrectly (simply sending EOF). */",undetermined
1232,httpd,UNKNOWN,"/* on some platforms (e.g., FreeBSD), the kernel won't accept many
     * queued connections before it starts blocking local connects...
     * we need to keep from blocking too long and instead return an error,
     * because the MPM won't want to hold up a graceful restart for a
     * long time
     */",undetermined
1233,httpd,UNKNOWN,"/* probably some server processes bailed out already and there
             * is nobody around to call accept and clear out the kernel
             * connection queue; usually this is not worth logging
             */",undetermined
1234,httpd,UNKNOWN,"/* Send a TLS 1.0 close_notify alert.  This is perhaps the
         * ""least wrong"" way to open and cleanly terminate an SSL
         * connection.  It should ""work"" without noisy error logs if
         * the server actually expects SSLv3/TLSv1.  With
         * SSLv23_server_method() OpenSSL's SSL_accept() fails
         * ungracefully on receipt of this message, since it requires
         * an 11-byte ClientHello message and this is too short. */",undetermined
1235,httpd,UNKNOWN,/* TLSPlainText.type = Alert (21) */,undetermined
1236,httpd,UNKNOWN,"/* TLSPlainText.version = {3, 1} */",undetermined
1237,httpd,UNKNOWN,/* TLSPlainText.length = 2 */,undetermined
1238,httpd,UNKNOWN,/* Alert.level = warning (1) */,undetermined
1239,httpd,UNKNOWN,/* Alert.description = close_notify (0) */,undetermined
1240,httpd,UNKNOWN,/* ... XXX other request types here? */,undetermined
1241,httpd,UNKNOWN,"/* Create an HTTP request string.  We include a User-Agent so
         * that adminstrators can track down the cause of the
         * odd-looking requests in their logs.  A complete request is
         * used since kernel-level filtering may require that much
         * data before returning from accept(). */",undetermined
1242,httpd,UNKNOWN,"/* we don't write anything to the pod here...  we assume
     * that the would-be reader of the pod has another way to
     * see that it is time to die once we wake it up
     *
     * writing lots of things to the pod at once is very
     * problematic... we can fill the kernel pipe buffer and
     * be blocked until somebody consumes some bytes or
     * we hit a timeout...  if we hit a timeout we can't just
     * keep trying because maybe we'll never successfully
     * write again...  but then maybe we'll leave would-be
     * readers stranded (a number of them could be tied up for
     * a while serving time-consuming requests)
     */",undetermined
1243,httpd,UNKNOWN,/* option char returned by apr_getopt() will be stored in optbuf[1] */,undetermined
1244,httpd,UNKNOWN,/* back up to capture the bad argument */,undetermined
1245,httpd,UNKNOWN,/* AP_ENABLE_EXCEPTION_HOOK */,undetermined
1246,httpd,UNKNOWN,/* handle all varieties of core dumping signals */,undetermined
1247,httpd,UNKNOWN,"/* linuxthreads issue calling getpid() here:
     *   This comparison won't match if the crashing thread is
     *   some module's thread that runs in the parent process.
     *   The fallout, which is limited to linuxthreads:
     *   The special log message won't be written when such a
     *   thread in the parent causes the parent to crash.
     */",undetermined
1248,httpd,UNKNOWN,"/* XXX we can probably add some rudimentary cleanup code here,
         * like getting rid of the pid file.  If any additional bad stuff
         * happens, we are protected from recursive errors taking down the
         * system since this function is no longer the signal handler   GLA
         */",undetermined
1249,httpd,UNKNOWN,"/* At this point we've got sig blocked, because we're still inside
     * the signal handler.  When we leave the signal handler it will
     * be unblocked, and we'll take the signal... and coredump or whatever
     * is appropriate for this particular Unix.  In addition the parent
     * will see the real signal we received -- whereas if we called
     * abort() here, the parent would only see SIGABRT.
     */",undetermined
1250,httpd,UNKNOWN,/* NO_USE_SIGACTION */,undetermined
1251,httpd,UNKNOWN,/* SIGBUS */,undetermined
1252,httpd,UNKNOWN,/* SIGABORT */,undetermined
1253,httpd,UNKNOWN,/* SIGABRT */,undetermined
1254,httpd,UNKNOWN,/* SIGILL */,undetermined
1255,httpd,UNKNOWN,/* SIGFPE */,undetermined
1256,httpd,UNKNOWN,/* NO_USE_SIGACTION */,undetermined
1257,httpd,UNKNOWN,/* WIN32 */,undetermined
1258,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1259,httpd,UNKNOWN,"/*
 * protocol.c --- routines which directly communicate with the client.
 *
 * Code originally by Rob McCool; much redone by Robert S. Thau
 * and the Apache Software Foundation.
 */",undetermined
1260,httpd,UNKNOWN,/* for sscanf */,undetermined
1261,httpd,UNKNOWN,"/* For errors detected in basic auth common
                                 * support code... */",undetermined
1262,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1263,httpd,UNKNOWN,/* Patterns to match in ap_make_content_type() */,undetermined
1264,httpd,UNKNOWN,"/*
 * Builds the content-type that should be sent to the client from the
 * content-type specified.  The following rules are followed:
 *    - if type is NULL or """", return NULL (do not set content-type).
 *    - if charset adding is disabled, stop processing and return type.
 *    - then, if there are no parameters on type, add the default charset
 *    - return type
 */",undetermined
1265,httpd,UNKNOWN,"/* already has parameter, do nothing */",undetermined
1266,httpd,UNKNOWN,/* XXX we don't check the validity */,undetermined
1267,httpd,UNKNOWN,"/* see if it makes sense to add the charset. At present,
         * we only add it if the Content-type is one of needcset[]
         */",undetermined
1268,httpd,UNKNOWN,"/*
 * Return the latest rational time from a request/mtime (modification time)
 * pair.  We return the mtime unless it's in the future, in which case we
 * return the current time.  We use the request time as a reference in order
 * to limit the number of calls to time().  We don't check for futurosity
 * unless the mtime is at least as new as the reference.
 */",undetermined
1269,httpd,UNKNOWN,"/* For all static responses, it's almost certain that the file was
     * last modified before the beginning of the request.  So there's
     * no reason to call time(NULL) again.  But if the response has been
     * created on demand, then it might be newer than the time the request
     * started.  In this event we really have to call time(NULL) again
     * so that we can give the clients the most accurate Last-Modified.  If we
     * were given a time in the future, we return the current time - the
     * Last-Modified can't be in the future.
     */",undetermined
1270,httpd,UNKNOWN,"/* Get a line of protocol input, including any continuation lines
 * caused by MIME folding (or broken clients) if fold != 0, and place it
 * in the buffer s, of size n bytes, without the ending newline.
 *
 * If s is NULL, ap_rgetline_core will allocate necessary memory from r->pool.
 *
 * Returns APR_SUCCESS if there are no problems and sets *read to be
 * the full length of s.
 *
 * APR_ENOSPC is returned if there is not enough buffer space.
 * Other errors may be returned on other errors.
 *
 * The LF is *not* returned in the buffer.  Therefore, a *read of 0
 * indicates that an empty line was read.
 *
 * Notes: Because the buffer uses 1 char for NUL, the most we can return is
 *        (n - 1) actual characters.
 *
 *        If no LF is detected on the last line due to a dropped connection
 *        or a full buffer, that's considered an error.
 */",undetermined
1271,httpd,UNKNOWN,"/*
     * Initialize last_char as otherwise a random value will be compared
     * against APR_ASCII_LF at the end of the loop if bb only contains
     * zero-length buckets.
     */",undetermined
1272,httpd,UNKNOWN,/* Something horribly wrong happened.  Someone didn't block! */,undetermined
1273,httpd,UNKNOWN,"/* If we see an EOS, don't bother doing anything more. */",undetermined
1274,httpd,UNKNOWN,"/* no use attempting a zero-byte alloc (hurts when
                 * using --with-efence --enable-pool-debug) or
                 * doing any of the other logic either
                 */",undetermined
1275,httpd,UNKNOWN,"/* Would this overrun our buffer?  If so, we'll die. */",undetermined
1276,httpd,UNKNOWN,/* ensure this string is NUL terminated */,undetermined
1277,httpd,UNKNOWN,/* Do we have to handle the allocation ourselves? */,undetermined
1278,httpd,UNKNOWN,/* We'll assume the common case where one bucket is enough. */,undetermined
1279,httpd,UNKNOWN,/* Increase the buffer size */,undetermined
1280,httpd,UNKNOWN,/* Copy what we already had. */,undetermined
1281,httpd,UNKNOWN,/* Just copy the rest of the data to the end of the old buffer. */,undetermined
1282,httpd,UNKNOWN,/* We've now processed that new data - update accordingly. */,undetermined
1283,httpd,UNKNOWN,"/* If we got a full line of input, stop reading */",undetermined
1284,httpd,UNKNOWN,"/* Now NUL-terminate the string at the end of the line;
     * if the last-but-one character is a CR, terminate there */",undetermined
1285,httpd,UNKNOWN,"/* If we're folding, we have more work to do.
     *
     * Note that if an EOS was seen, we know we can't have another line.
     */",undetermined
1286,httpd,UNKNOWN,/* Clear the temp brigade for this filter read. */,undetermined
1287,httpd,UNKNOWN,/* We only care about the first byte. */,undetermined
1288,httpd,UNKNOWN,"/* If we see an EOS, don't bother doing anything more. */",undetermined
1289,httpd,UNKNOWN,"/* Found one, so call ourselves again to get the next line.
             *
             * FIXME: If the folding line is completely blank, should we
             * stop folding?  Does that require also looking at the next
             * char?
             */",undetermined
1290,httpd,UNKNOWN,"/* When we call destroy, the buckets are deleted, so save that
             * one character we need.  This simplifies our execution paths
             * at the cost of one character read.
             */",undetermined
1291,httpd,UNKNOWN,/* Do we have enough space? We may be full now. */,undetermined
1292,httpd,UNKNOWN,/* ensure this string is terminated */,undetermined
1293,httpd,UNKNOWN,"/* If we're doing the allocations for them, we have to
                     * give ourselves a NULL and copy it on return.
                     */",undetermined
1294,httpd,UNKNOWN,/* We're null terminated. */,undetermined
1295,httpd,UNKNOWN,/* we need to alloc an extra byte for a null */,undetermined
1296,httpd,UNKNOWN,/* Copy what we already had. */,undetermined
1297,httpd,UNKNOWN,"/* copy the new line, including the trailing null */",undetermined
1298,httpd,UNKNOWN,/* next character is not tab or space */,undetermined
1299,httpd,UNKNOWN,/* PR#43039: We shouldn't accept NULL bytes within the line */,undetermined
1300,httpd,UNKNOWN,"/* on ASCII boxes, ap_rgetline is a macro which simply invokes
     * ap_rgetline_core with the same parms
     *
     * on EBCDIC boxes, each complete http protocol input line needs to be
     * translated into the code page used by the compiler.  Since
     * ap_rgetline_core uses recursion, we do the translation in a wrapper
     * function to ensure that each input character gets translated only once.
     */",undetermined
1301,httpd,UNKNOWN,/* Map the out-of-space condition to the old API. */,undetermined
1302,httpd,UNKNOWN,/* Anything else is just bad. */,undetermined
1303,httpd,UNKNOWN,"/* parse_uri: break apart the uri
 * Side Effects:
 * - sets r->args to rest after '?' (or NULL if no '?')
 * - sets r->uri to request uri (without r->args part)
 * - sets r->hostname (if not set already) from request (scheme://host:port)
 */",undetermined
1304,httpd,UNKNOWN,"/* http://issues.apache.org/bugzilla/show_bug.cgi?id=31875
     * http://issues.apache.org/bugzilla/show_bug.cgi?id=28450
     *
     * This is not in fact a URI, it's a path.  That matters in the
     * case of a leading double-slash.  We need to resolve the issue
     * by normalising that out before treating it as a URI.
     */",undetermined
1305,httpd,UNKNOWN,/* if it has a scheme we may need to do absoluteURI vhost stuff */,undetermined
1306,httpd,UNKNOWN,"/* Handle path translations for OS/2 and plug security hole.
         * This will prevent ""http://www.wherever.com/..\..\/"" from
         * returning a directory for the root drive.
         */",undetermined
1307,httpd,UNKNOWN,/* OS2 || WIN32 */,undetermined
1308,httpd,UNKNOWN,/* set error status */,undetermined
1309,httpd,UNKNOWN,"/* Assume HTTP/1.0 if non-""HTTP"" protocol */",undetermined
1310,httpd,UNKNOWN,"/* Read past empty lines until we get a real request line,
     * a read error, the connection closes (EOF), or we timeout.
     *
     * We skip empty lines because browsers have to tack a CRLF on to the end
     * of POSTs to support old CERN webservers.  But note that we may not
     * have flushed any previous response completely to the client yet.
     * We delay the flush as long as possible so that we can improve
     * performance for clients that are pipelining requests.  If a request
     * is pipelined then we won't block during the (implicit) read() below.
     * If the requests aren't pipelined, then the client is still waiting
     * for the final buffer flush from us, and we will block in the implicit
     * read().  B_SAFEREAD ensures that the BUFF layer flushes if it will
     * have to block during a read.
     */",undetermined
1311,httpd,UNKNOWN,"/* ensure ap_rgetline allocates memory each time thru the loop
         * if there are empty lines
         */",undetermined
1312,httpd,UNKNOWN,"/* ap_rgetline returns APR_ENOSPC if it fills up the
             * buffer before finding the end-of-line.  This is only going to
             * happen if it exceeds the configured limit for a request-line.
             */",undetermined
1313,httpd,UNKNOWN,/* Provide quick information about the request method as soon as known */,undetermined
1314,httpd,UNKNOWN,/* Avoid sscanf in the common case */,undetermined
1315,httpd,UNKNOWN,/* don't allow HTTP/0.1000 */,undetermined
1316,httpd,UNKNOWN,"/* get the length of the field name for logging, but no more than 80 bytes */",undetermined
1317,httpd,UNKNOWN,"/*
     * Read header lines until we get the empty separator line, a read error,
     * the connection closes (EOF), reach the server limit, or we timeout.
     */",undetermined
1318,httpd,UNKNOWN,"/* ap_rgetline returns APR_ENOSPC if it fills up the buffer before
             * finding the end-of-line.  This is only going to happen if it
             * exceeds the configured limit for a field size.
             */",undetermined
1319,httpd,UNKNOWN,/* ensure ap_escape_html will terminate correctly */,undetermined
1320,httpd,UNKNOWN,"/* This line is a continuation of the preceding line(s),
                 * so append it to the line that we've set aside.
                 * Note: this uses a power-of-two allocator to avoid
                 * doing O(n) allocs and using O(n^2) space for
                 * continuations that span many many lines.
                 */",undetermined
1321,httpd,UNKNOWN,/* trailing null */,undetermined
1322,httpd,UNKNOWN,"/* report what we have accumulated so far before the
                     * overflow (last_field) as the field with the problem
                     */",undetermined
1323,httpd,UNKNOWN,/* +1 for nul */,undetermined
1324,httpd,UNKNOWN,/* not a continuation line */,undetermined
1325,httpd,UNKNOWN,/* Find ':' or    */,undetermined
1326,httpd,UNKNOWN,/* abort bad request */,undetermined
1327,httpd,UNKNOWN,/* last character of field-name */,undetermined
1328,httpd,UNKNOWN,/* NUL-terminate at colon */,undetermined
1329,httpd,UNKNOWN,/* Skip to start of value   */,undetermined
1330,httpd,UNKNOWN,/* Strip LWS after field-name: */,undetermined
1331,httpd,UNKNOWN,/* Strip LWS after field-value: */,undetermined
1332,httpd,UNKNOWN,"/* reset the alloc_len so that we'll allocate a new
                 * buffer if we have to do any more folding: we can't
                 * use the previous buffer because its contents are
                 * now part of r->headers_in
                 */",undetermined
1333,httpd,UNKNOWN,/* end if current line is not a continuation starting with tab */,undetermined
1334,httpd,UNKNOWN,"/* Found a blank line, stop. */",undetermined
1335,httpd,UNKNOWN,"/* Keep track of this line so that we can parse it on
         * the next loop iteration.  (In the folded case, last_field
         * has been updated already.)
         */",undetermined
1336,httpd,UNKNOWN,"/* Combine multiple message-header fields with the same
     * field-name, following RFC 2616, 4.2.
     */",undetermined
1337,httpd,UNKNOWN,/* enforce LimitRequestFieldSize for merged headers */,undetermined
1338,httpd,UNKNOWN,/* Must be set before we run create request hook */,undetermined
1339,httpd,UNKNOWN,/* bytect isn't for body */,undetermined
1340,httpd,UNKNOWN,/* Until further notice */,undetermined
1341,httpd,UNKNOWN,"/* Begin by presuming any module can make its own path_info assumptions,
     * until some module interjects and changes the value.
     */",undetermined
1342,httpd,UNKNOWN,/* Get the request... */,undetermined
1343,httpd,UNKNOWN,"/* We may have been in keep_alive_timeout mode, so toggle back
     * to the normal timeout mode as we fetch the header lines,
     * as necessary.
     */",undetermined
1344,httpd,UNKNOWN,"/* 2616 section 4.4, point 3: ""if both Transfer-Encoding
             * and Content-Length are received, the latter MUST be
             * ignored""; so unset it here to prevent any confusion
             * later. */",undetermined
1345,httpd,UNKNOWN,"/*
             * Client asked for headers only with HTTP/0.9, which doesn't send
             * headers! Have to dink things just to make sure the error message
             * comes through...
             */",undetermined
1346,httpd,UNKNOWN,"/* update what we think the virtual host is based on the headers we've
     * now read. may update status.
     */",undetermined
1347,httpd,UNKNOWN,"/* Toggle to the Host:-based vhost's timeout mode to fetch the
     * request body and send the response body, if needed.
     */",undetermined
1348,httpd,UNKNOWN,/* we may have switched to another server */,undetermined
1349,httpd,UNKNOWN,"/*
         * Client sent us an HTTP/1.1 or later request without telling us the
         * hostname, either with a full URL or a Host: header. We therefore
         * need to (as per the 1.1 spec) send an error.  As a special case,
         * HTTP/1.1 mentions twice (S9, S14.23) that a request MUST contain
         * a Host: header, and the server MUST respond with 400 if it doesn't.
         */",undetermined
1350,httpd,UNKNOWN,"/*
     * Add the HTTP_IN filter here to ensure that ap_discard_request_body
     * called by ap_die and by ap_send_error_response works correctly on
     * status codes that do not cause the connection to be dropped and
     * in situations where the connection should be kept alive.
     */",undetermined
1351,httpd,UNKNOWN,"/*
         * The Expect header field was added to HTTP/1.1 after RFC 2068
         * as a means to signal when a 100 response is desired and,
         * unfortunately, to signal a poor man's mandatory extension that
         * the server must understand or return 417 Expectation Failed.
         */",undetermined
1352,httpd,UNKNOWN,"/* if a request with a body creates a subrequest, remove original request's
 * input headers which pertain to the body which has already been read.
 * out-of-line helper function for ap_set_sub_req_protocol.
 */",undetermined
1353,httpd,UNKNOWN,"/*
 * A couple of other functions which initialize some of the fields of
 * a request structure, as appropriate for adjuncts of one kind or another
 * to a request in progress.  Best here, rather than elsewhere, since
 * *someone* has to set the protocol-specific fields...
 */",undetermined
1354,httpd,UNKNOWN,/* Keep original request-line */,undetermined
1355,httpd,UNKNOWN,/* Don't send headers from this. */,undetermined
1356,httpd,UNKNOWN,"/* Don't try to send HTTP_NOT_MODIFIED for a
                                  * fragment. */",undetermined
1357,httpd,UNKNOWN,"/* did the original request have a body?  (e.g. POST w/SSI tags)
     * if so, make sure the subrequest doesn't inherit body headers
     */",undetermined
1358,httpd,UNKNOWN,/* tell the filter chain there is no more content coming */,undetermined
1359,httpd,UNKNOWN,"/* finalize_request_protocol is called at completion of sending the
 * response.  Its sole purpose is to send the terminating protocol
 * information for any wrappers around the response message body
 * (i.e., transfer encodings).  It should have been named finalize_response.
 */",undetermined
1360,httpd,UNKNOWN,/* tell the filter chain there is no more content coming */,undetermined
1361,httpd,UNKNOWN,"/*
 * Support for the Basic authentication protocol, and a bit for Digest.
 */",undetermined
1362,httpd,UNKNOWN,/* Client tried to authenticate using wrong auth scheme */,undetermined
1363,httpd,UNKNOWN,"/* true if the C-L filter has already sent at
                     * least one bucket on to the next output filter
                     * for this request
                     */",undetermined
1364,httpd,UNKNOWN,"/* This filter computes the content length, but it also computes the number
 * of bytes sent to the client.  This means that this filter will always run
 * through all of the buckets in all brigades
 */",undetermined
1365,httpd,UNKNOWN,"/* Loop through this set of buckets to compute their length
     */",undetermined
1366,httpd,UNKNOWN,"/* This is probably a pipe bucket.  Send everything
             * prior to this, and then read the data for this bucket.
             */",undetermined
1367,httpd,UNKNOWN,/* Attempt a nonblocking read next time through */,undetermined
1368,httpd,UNKNOWN,"/* Output everything prior to this bucket, and then
                 * do a blocking read on the next batch.
                 */",undetermined
1369,httpd,UNKNOWN,"/* If we've now seen the entire response and it's otherwise
     * okay to set the C-L in the response header, then do so now.
     *
     * We can only set a C-L in the response header if we haven't already
     * sent any buckets on to the next output filter for this request.
     */",undetermined
1370,httpd,UNKNOWN,"/* don't whack the C-L if it has already been set for a HEAD
         * by something like proxy.  the brigade only has an EOS bucket
         * in this case, making r->bytes_sent zero.
         *
         * if r->bytes_sent > 0 we have a (temporary) body whose length may
         * have been changed by a filter.  the C-L header might not have been
         * updated so we do it here.  long term it would be cleaner to have
         * such filters update or remove the C-L header, and just use it
         * if present.
         */",undetermined
1371,httpd,UNKNOWN,"/*
 * Send the body of a response to the client.
 */",undetermined
1372,httpd,UNKNOWN,/* no way to tell how many were actually sent */,undetermined
1373,httpd,UNKNOWN,/* send data from an in-memory buffer */,undetermined
1374,httpd,UNKNOWN,/* XXX - change API to report apr_status_t? */,undetermined
1375,httpd,UNKNOWN,/* APR_HAS_MMAP */,undetermined
1376,httpd,UNKNOWN,"/* whatever is coming down the pipe (we don't care), we
         * can simply insert our buffered data at the front and
         * pass the whole bundle down the chain.
         */",undetermined
1377,httpd,UNKNOWN,"/* future optimization: record some flags in the request_rec to
     * say whether we've added our filter, and whether it is first.
     */",undetermined
1378,httpd,UNKNOWN,/* this will typically exit on the first test */,undetermined
1379,httpd,UNKNOWN,/* our filter hasn't been added yet */,undetermined
1380,httpd,UNKNOWN,"/* if the first filter is not our buffering filter, then we have to
     * deliver the content through the normal filter chain
     */",undetermined
1381,httpd,UNKNOWN,"/* callback function passed to ap_vformatter to be called when
     * vformatter needs to write into buff and buff.curpos > buff.endpos */",undetermined
1382,httpd,UNKNOWN,"/* ap_vrprintf_data passed as a apr_vformatter_buff_t, which is then
     * ""downcast"" to an ap_vrprintf_data */",undetermined
1383,httpd,UNKNOWN,/* r_flush is called when vbuff is completely full */,undetermined
1384,httpd,UNKNOWN,/* reset the buffer position */,undetermined
1385,httpd,UNKNOWN,"/* last call to buffer_output, to finish clearing the buffer */",undetermined
1386,httpd,UNKNOWN,"/* ### TODO: if the total output is large, put all the strings
     * ### into a single brigade, rather than flushing each time we
     * ### fill the buffer
     */",undetermined
1387,httpd,UNKNOWN,"/*
 * This function sets the Last-Modified output header field to the value
 * of the mtime field in the request structure - rationalized to keep it from
 * being in the future.
 */",undetermined
1388,httpd,UNKNOWN,/* don't send interim response to HTTP/1.0 Client */,undetermined
1389,httpd,UNKNOWN,"/*
         * Don't send 100-Continue when there was no Expect: 100-continue
         * in the request headers. For origin servers this is a SHOULD NOT
         * for proxies it is a MUST NOT according to RFC 2616 8.2.3
         */",undetermined
1390,httpd,UNKNOWN,"/* if we send an interim response, we're no longer in a state of
     * expecting one.  Also, this could feasibly be in a subrequest,
     * so we need to propagate the fact that we responded.
     */",undetermined
1391,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1392,httpd,UNKNOWN,"/* First, deal with storing the provider away */",undetermined
1393,httpd,UNKNOWN,/* just set it. no biggy if it was there before. */,undetermined
1394,httpd,UNKNOWN,"/* Now, tuck away the provider names in an easy-to-get format */",undetermined
1395,httpd,UNKNOWN,/* just set it. no biggy if it was there before. */,undetermined
1396,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1397,httpd,UNKNOWN,"/*
 * @file  request.c
 * @brief functions to get and process requests
 *
 * @author Rob McCool 3/21/93
 *
 * Thoroughly revamped by rst for Apache.  NB this file reads
 * best from the bottom up.
 *
 */",undetermined
1398,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1399,httpd,UNKNOWN,"/* This is the master logic for processing requests.  Do NOT duplicate
 * this logic elsewhere, or the security model will be broken by future
 * API changes.  Each phase must be individually optimized to pick up
 * redundant/duplicate calls by subrequests, and redirects.
 */",undetermined
1400,httpd,UNKNOWN,/* Ignore embedded %2F's in path for proxy requests */,undetermined
1401,httpd,UNKNOWN,/* OK --- shrinking transformations... */,undetermined
1402,httpd,UNKNOWN,"/* All file subrequests are a huge pain... they cannot bubble through the
     * next several steps.  Only file subrequests are allowed an empty uri,
     * otherwise let translate_name kill the request.
     */",undetermined
1403,httpd,UNKNOWN,"/* Reset to the server default config prior to running map_to_storage
     */",undetermined
1404,httpd,UNKNOWN,/* This request wasn't in storage (e.g. TRACE) */,undetermined
1405,httpd,UNKNOWN,"/* Rerun the location walk, which overrides any map_to_storage config.
     */",undetermined
1406,httpd,UNKNOWN,/* Only on the main request! */,undetermined
1407,httpd,UNKNOWN,"/* Skip authn/authz if the parent or prior request passed the authn/authz,
     * and that configuration didn't change (this requires optimized _walk()
     * functions in map_to_storage that use the same merge results given
     * identical input.)  If the config changes, we must re-auth.
     */",undetermined
1408,httpd,UNKNOWN,/* don't let buggy authn module crash us in authz */,undetermined
1409,httpd,UNKNOWN,/* don't let buggy authn module crash us in authz */,undetermined
1410,httpd,UNKNOWN,"/* XXX Must make certain the ap_run_type_checker short circuits mime
     * in mod-proxy for r->proxyreq && r->parsed_uri.scheme
     *                              && !strcmp(r->parsed_uri.scheme, ""http"")
     */",undetermined
1411,httpd,UNKNOWN,"/* Useful caching structures to repeat _walk/merge sequences as required
 * when a subrequest or redirect reuses substantially the same config.
 *
 * Directive order in the httpd.conf file and its Includes significantly
 * impact this optimization.  Grouping common blocks at the front of the
 * config that are less likely to change between a request and
 * its subrequests, or between a request and its redirects reduced
 * the work of these functions significantly.
 */",undetermined
1412,httpd,UNKNOWN,/* A dir_conf sections we matched */,undetermined
1413,httpd,UNKNOWN,/* The dir_conf merged result */,undetermined
1414,httpd,UNKNOWN,/* The identifier we matched */,undetermined
1415,httpd,UNKNOWN,/* The sections we matched against */,undetermined
1416,httpd,UNKNOWN,/* Base per_dir_config */,undetermined
1417,httpd,UNKNOWN,/* per_dir_config += walked result */,undetermined
1418,httpd,UNKNOWN,/* The list of walk_walked_t results */,undetermined
1419,httpd,UNKNOWN,/* Prev cache of same call in this (sub)req */,undetermined
1420,httpd,UNKNOWN,/* Number of prev invocations of same call in this (sub)req */,undetermined
1421,httpd,UNKNOWN,"/* Find the most relevant, recent walk cache to work from and provide
     * a copy the caller is allowed to munge.  In the case of a sub-request
     * or internal redirect, this is the cache corresponding to the equivalent
     * invocation of the same function call in the ""parent"" request, if such
     * a cache exists.  Otherwise it is the walk cache of the previous
     * invocation of the same function call in the current request, if
     * that exists; if not, then create a new walk cache.
     */",undetermined
1422,httpd,UNKNOWN,"/*****************************************************************
 *
 * Getting and checking directory configuration.  Also checks the
 * FollowSymlinks and FollowSymOwner stuff, since this is really the
 * only place that can happen (barring a new mid_dir_walk callout).
 *
 * We can't do it as an access_checker module function which gets
 * called with the final per_dir_config, since we could have a directory
 * with FollowSymLinks disabled, which contains a symlink to another
 * with a .htaccess file which turns FollowSymLinks back on --- and
 * access in such a case must be denied.  So, whatever it is that
 * checks FollowSymLinks needs to know the state of the options as
 * they change, all the way down.
 */",undetermined
1423,httpd,UNKNOWN,"/*
 * resolve_symlink must _always_ be called on an APR_LNK file type!
 * It will resolve the actual target file type, modification date, etc,
 * and provide any processing required for symlink evaluation.
 * Path must already be cleaned, no trailing slash, no multi-slashes,
 * and don't call this on the root!
 *
 * Simply, the number of times we deref a symlink are minimal compared
 * to the number of times we had an extra lstat() since we 'weren't sure'.
 *
 * To optimize, we stat() anything when given (opts & OPT_SYM_LINKS), otherwise
 * we start off with an lstat().  Every lstat() must be dereferenced in case
 * it points at a 'nasty' - we must always rerun check_safe_file (or similar.)
 */",undetermined
1424,httpd,UNKNOWN,/* Save the name from the valid bits. */,undetermined
1425,httpd,UNKNOWN,"/* if OPT_SYM_OWNER is unset, we only need to check target accessible */",undetermined
1426,httpd,UNKNOWN,/* Give back the target */,undetermined
1427,httpd,UNKNOWN,"/* OPT_SYM_OWNER only works if we can get the owner of
     * both the file and symlink.  First fill in a missing
     * owner of the symlink, then get the info of the target.
     */",undetermined
1428,httpd,UNKNOWN,/* Give back the target */,undetermined
1429,httpd,UNKNOWN,"/*
 * As we walk the directory configuration, the merged config won't
 * be 'rooted' to a specific vhost until the very end of the merge.
 *
 * We need a very fast mini-merge to a real, vhost-rooted merge
 * of core.opts and core.override, the only options tested within
 * directory_walk itself.
 *
 * See core.c::merge_core_dir_configs() for explanation.
 */",undetermined
1430,httpd,UNKNOWN,"/*****************************************************************
 *
 * Getting and checking directory configuration.  Also checks the
 * FollowSymlinks and FollowSymOwner stuff, since this is really the
 * only place that can happen (barring a new mid_dir_walk callout).
 *
 * We can't do it as an access_checker module function which gets
 * called with the final per_dir_config, since we could have a directory
 * with FollowSymLinks disabled, which contains a symlink to another
 * with a .htaccess file which turns FollowSymLinks back on --- and
 * access in such a case must be denied.  So, whatever it is that
 * checks FollowSymLinks needs to know the state of the options as
 * they change, all the way down.
 */",undetermined
1431,httpd,UNKNOWN,"/* XXX: Better (faster) tests needed!!!
     *
     * ""OK"" as a response to a real problem is not _OK_, but to allow broken
     * modules to proceed, we will permit the not-a-path filename to pass the
     * following two tests.  This behavior may be revoked in future versions
     * of Apache.  We still must catch it later if it's heading for the core
     * handler.  Leave INFO notes here for module debugging.
     */",undetermined
1432,httpd,UNKNOWN,"/* Canonicalize the file path without resolving filename case or aliases
     * so we can begin by checking the cache for a recent directory walk.
     * This call will ensure we have an absolute path in the same pass.
     */",undetermined
1433,httpd,UNKNOWN,"/* XXX Notice that this forces path_info to be canonical.  That might
     * not be desired by all apps.  However, some of those same apps likely
     * have significant security holes.
     */",undetermined
1434,httpd,UNKNOWN,"/* If this is not a dirent subrequest with a preconstructed
     * r->finfo value, then we can simply stat the filename to
     * save burning mega-cycles with unneeded stats - if this is
     * an exact file match.  We don't care about failure... we
     * will stat by component failing this meager attempt.
     *
     * It would be nice to distinguish APR_ENOENT from other
     * types of failure, such as APR_ENOTDIR.  We can do something
     * with APR_ENOENT, knowing that the path is good.
     */",undetermined
1435,httpd,UNKNOWN,"/* some OSs will return APR_SUCCESS/APR_REG if we stat
         * a regular file but we have '/' at the end of the name;
         *
         * other OSs will return APR_ENOTDIR for that situation;
         *
         * handle it the same everywhere by simulating a failure
         * if it looks like a directory but really isn't
         *
         * Also reset if the stat failed, just for safety.
         */",undetermined
1436,httpd,UNKNOWN,/* forget what we learned */,undetermined
1437,httpd,UNKNOWN,"/* If we have a file already matches the path of r->filename,
     * and the vhost's list of directory sections hasn't changed,
     * we can skip rewalking the directory_walk entries.
     */",undetermined
1438,httpd,UNKNOWN,"/* Well this looks really familiar!  If our end-result (per_dir_result)
         * didn't change, we have absolutely nothing to do :)
         * Otherwise (as is the case with most dir_merged/file_merged requests)
         * we must merge our dir_conf_merged onto this new r->per_dir_config.
         */",undetermined
1439,httpd,UNKNOWN,"/*
             * If Symlinks are allowed in general we do not need the following
             * check.
             */",undetermined
1440,httpd,UNKNOWN,"/*
                 * APR_INCOMPLETE is as fine as result as APR_SUCCESS as we
                 * have added APR_FINFO_NAME to the wanted parameter of
                 * apr_stat above. On Unix platforms this means that apr_stat
                 * is always going to return APR_INCOMPLETE in the case that
                 * the call to the native stat / lstat did not fail.
                 */",undetermined
1441,httpd,UNKNOWN,"/*
                     * This should never happen, because we did a stat on the
                     * same file, resolving a possible symlink several lines
                     * above. Therefore do not make a detailed analysis of rv
                     * in this case for the reason of the failure, just bail out
                     * with a HTTP_FORBIDDEN in case we hit a race condition
                     * here.
                     */",undetermined
1442,httpd,UNKNOWN,/* Is this a possibly acceptable symlink? */,undetermined
1443,httpd,UNKNOWN,"/* We start now_merged from NULL since we want to build
         * a locations list that can be merged to any vhost.
         */",undetermined
1444,httpd,UNKNOWN,"/* Invariant: from the first time filename_len is set until
         * it goes out of scope, filename_len==strlen(r->filename)
         */",undetermined
1445,httpd,UNKNOWN,"/*
         * We must play our own mini-merge game here, for the few
         * running dir_config values we care about within dir_walk.
         * We didn't start the merge from r->per_dir_config, so we
         * accumulate opts and override as we merge, from the globals.
         */",undetermined
1446,httpd,UNKNOWN,"/* Set aside path_info to merge back onto path_info later.
         * If r->filename is a directory, we must remerge the path_info,
         * before we continue!  [Directories cannot, by definition, have
         * path info.  Either the next segment is not-found, or a file.]
         *
         * r->path_info tracks the unconsumed source path.
         * r->filename  tracks the path as we process it
         */",undetermined
1447,httpd,UNKNOWN,"/*
         * Now build r->filename component by component, starting
         * with the root (on Unix, simply ""/"").  We will make a huge
         * assumption here for efficiency, that any canonical path
         * already given included a canonical root.
         */",undetermined
1448,httpd,UNKNOWN,"/*
         * Bad assumption above?  If the root's length is longer
         * than the canonical length, then it cannot be trusted as
         * a truename.  So try again, this time more seriously.
         */",undetermined
1449,httpd,UNKNOWN,"/* ndef CASE_BLIND_FILESYSTEM, really this simple for Unix today; */",undetermined
1450,httpd,UNKNOWN,"/* Working space for terminating null and an extra / is required.
         */",undetermined
1451,httpd,UNKNOWN,"/* It's the root, of course it's a dir */",undetermined
1452,httpd,UNKNOWN,"/*
         * seg keeps track of which segment we've copied.
         * sec_idx keeps track of which section we're on, since sections are
         *     ordered by number of segments. See core_reorder_directories
         * startseg tells us how many segments describe the root path
         *     e.g. the complete path ""//host/foo/"" to a UNC share (4)
         */",undetermined
1453,httpd,UNKNOWN,"/*
         * Go down the directory hierarchy.  Where we have to check for
         * symlinks, do so.  Where a .htaccess file has permission to
         * override anything, try to find one.
         */",undetermined
1454,httpd,UNKNOWN,"/* We have no trailing slash, but we sure would appreciate one.
             * However, we don't want to append a / our first time through.
             */",undetermined
1455,httpd,UNKNOWN,"/* Begin *this* level by looking for matching <Directory> sections
             * from the server config.
             */",undetermined
1456,httpd,UNKNOWN,"/* No more possible matches for this many segments?
                 * We are done when we find relative/regex/longer components.
                 */",undetermined
1457,httpd,UNKNOWN,"/* We will never skip '0' element components, e.g. plain old
                 * <Directory >, and <Directory ""/""> are classified as zero
                 * so that Win32/Netware/OS2 etc all pick them up.
                 * Otherwise, skip over the mismatches.
                 */",undetermined
1458,httpd,UNKNOWN,"/* If we haven't continue'd above, we have a match.
                 *
                 * Calculate our full-context core opts & override.
                 */",undetermined
1459,httpd,UNKNOWN,"/* If we merged this same section last time, reuse it
                 */",undetermined
1460,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
                     * so truncate the remaining matches and reset remaining.
                     */",undetermined
1461,httpd,UNKNOWN,"/* If .htaccess files are enabled, check for one, provided we
             * have reached a real path.
             */",undetermined
1462,httpd,UNKNOWN,"/* Not really a loop, just a break'able code block */",undetermined
1463,httpd,UNKNOWN,"/* No htaccess in an incomplete root path,
                 * nor if it's disabled
                 */",undetermined
1464,httpd,UNKNOWN,"/* If we are still here, we found our htaccess.
                 *
                 * Calculate our full-context core opts & override.
                 */",undetermined
1465,httpd,UNKNOWN,"/* If we merged this same htaccess last time, reuse it...
                 * this wouldn't work except that we cache the htaccess
                 * sections for the lifetime of the request, so we match
                 * the same conf.  Good planning (no, pure luck ;)
                 */",undetermined
1466,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
                     * so truncate the remaining matches and reset
                     * remaining.
                     */",undetermined
1467,httpd,UNKNOWN,"/* Only one htaccess, not a real loop */",undetermined
1468,httpd,UNKNOWN,"/* That temporary trailing slash was useful, now drop it.
             */",undetermined
1469,httpd,UNKNOWN,"/* Time for all good things to come to an end?
             */",undetermined
1470,httpd,UNKNOWN,"/* Now it's time for the next segment...
             * We will assume the next element is an end node, and fix it up
             * below as necessary...
             */",undetermined
1471,httpd,UNKNOWN,"/* If nothing remained but a '/' string, we are finished
             * XXX: NO WE ARE NOT!!!  Now process this puppy!!! */",undetermined
1472,httpd,UNKNOWN,"/* First optimization;
             * If...we knew r->filename was a file, and
             * if...we have strict (case-sensitive) filenames, or
             *      we know the canonical_filename matches to _this_ name, and
             * if...we have allowed symlinks
             * skip the lstat and dummy up an APR_DIR value for thisinfo.
             */",undetermined
1473,httpd,UNKNOWN,"/* We choose apr_stat with flag APR_FINFO_LINK here, rather that
             * plain apr_stat, so that we capture this path object rather than
             * its target.  We will replace the info with our target's info
             * below.  We especially want the name of this 'link' object, not
             * the name of its target, if we are fixing the filename
             * case/resolving aliases.
             */",undetermined
1474,httpd,UNKNOWN,"/* Nothing?  That could be nice.  But our directory
                 * walk is done.
                 */",undetermined
1475,httpd,UNKNOWN,"/* If we hit ENOTDIR, we must have over-optimized, deny
                 * rather than assume not found.
                 */",undetermined
1476,httpd,UNKNOWN,"/* Fix up the path now if we have a name, and they don't agree
             */",undetermined
1477,httpd,UNKNOWN,"/* TODO: provide users an option that an internal/external
                 * redirect is required here?  We need to walk the URI and
                 * filename in tandem to properly correlate these.
                 */",undetermined
1478,httpd,UNKNOWN,"/* Is this a possibly acceptable symlink?
                 */",undetermined
1479,httpd,UNKNOWN,"/* Ok, we are done with the link's info, test the real target
             */",undetermined
1480,httpd,UNKNOWN,"/* That was fun, nothing left for us here
                 */",undetermined
1481,httpd,UNKNOWN,"/* If we have _not_ optimized, this is the time to recover
         * the final stat result.
         */",undetermined
1482,httpd,UNKNOWN,"/* Now splice the saved path_info back onto any new path_info
         */",undetermined
1483,httpd,UNKNOWN,"/*
         * Now we'll deal with the regexes, note we pick up sec_idx
         * where we left off (we gave up after we hit entry_core->r)
         */",undetermined
1484,httpd,UNKNOWN,"/* If we haven't already continue'd above, we have a match.
             *
             * Calculate our full-context core opts & override.
             */",undetermined
1485,httpd,UNKNOWN,"/* If we merged this same section last time, reuse it
             */",undetermined
1486,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
                 * so truncate the remaining matches and reset remaining.
                 */",undetermined
1487,httpd,UNKNOWN,"/* Whoops - everything matched in sequence, but either the original
         * walk found some additional matches (which we need to truncate), or
         * this walk found some additional matches.
         */",undetermined
1488,httpd,UNKNOWN,"/* It seems this shouldn't be needed anymore.  We translated the
 x symlink above into a real resource, and should have died up there.
 x Even if we keep this, it needs more thought (maybe an r->file_is_symlink)
 x perhaps it should actually happen in file_walk, so we catch more
 x obscure cases in autoindex subrequests, etc.
 x
 x    * Symlink permissions are determined by the parent.  If the request is
 x    * for a directory then applying the symlink test here would use the
 x    * permissions of the directory as opposed to its parent.  Consider a
 x    * symlink pointing to a dir with a .htaccess disallowing symlinks.  If
 x    * you access /symlink (or /symlink/) you would get a 403 without this
 x    * APR_DIR test.  But if you accessed /symlink/index.html, for example,
 x    * you would *not* get the 403.
 x
 x   if (r->finfo.filetype != APR_DIR
 x       && (res = resolve_symlink(r->filename, r->info, ap_allow_options(r),
 x                                 r->pool))) {
 x       ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,
 x                     ""Symbolic link not allowed: %s"", r->filename);
 x       return res;
 x   }
 */",undetermined
1489,httpd,UNKNOWN,"/* Save future sub-requestors much angst in processing
     * this subrequest.  If dir_walk couldn't canonicalize
     * the file path, nothing can.
     */",undetermined
1490,httpd,UNKNOWN,"/* Merge our cache->dir_conf_merged construct with the r->per_dir_configs,
     * and note the end result to (potentially) skip this step next time.
     */",undetermined
1491,httpd,UNKNOWN,"/* No tricks here, there are no <Locations > to parse in this vhost.
     * We won't destroy the cache, just in case _this_ redirect is later
     * redirected again to a vhost with <Location > blocks to optimize.
     */",undetermined
1492,httpd,UNKNOWN,"/* Location and LocationMatch differ on their behaviour w.r.t. multiple
     * slashes.  Location matches multiple slashes with a single slash,
     * LocationMatch doesn't.  An exception, for backwards brokenness is
     * absoluteURIs... in which case neither match multiple slashes.
     */",undetermined
1493,httpd,UNKNOWN,"/* If we have an cache->cached location that matches r->uri,
     * and the vhost's list of locations hasn't changed, we can skip
     * rewalking the location_walk entries.
     */",undetermined
1494,httpd,UNKNOWN,"/* Well this looks really familiar!  If our end-result (per_dir_result)
         * didn't change, we have absolutely nothing to do :)
         * Otherwise (as is the case with most dir_merged/file_merged requests)
         * we must merge our dir_conf_merged onto this new r->per_dir_config.
         */",undetermined
1495,httpd,UNKNOWN,"/* We start now_merged from NULL since we want to build
         * a locations list that can be merged to any vhost.
         */",undetermined
1496,httpd,UNKNOWN,"/* Go through the location entries, and check for matches.
         * We apply the directive sections in given order, we should
         * really try them with the most general first.
         */",undetermined
1497,httpd,UNKNOWN,/* ### const strlen can be optimized in location config parsing */,undetermined
1498,httpd,UNKNOWN,"/* Test the regex, fnmatch or string as appropriate.
             * If it's a strcmp, and the <Location > pattern was
             * not slash terminated, then this uri must be slash
             * terminated (or at the end of the string) to match.
             */",undetermined
1499,httpd,UNKNOWN,"/* If we merged this same section last time, reuse it
             */",undetermined
1500,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
                 * so truncate the remaining matches and reset remaining.
                 */",undetermined
1501,httpd,UNKNOWN,"/* Whoops - everything matched in sequence, but either the original
         * walk found some additional matches (which we need to truncate), or
         * this walk found some additional matches.
         */",undetermined
1502,httpd,UNKNOWN,"/* Merge our cache->dir_conf_merged construct with the r->per_dir_configs,
     * and note the end result to (potentially) skip this step next time.
     */",undetermined
1503,httpd,UNKNOWN,"/* To allow broken modules to proceed, we allow missing filenames to pass.
     * We will catch it later if it's heading for the core handler.
     * directory_walk already posted an INFO note for module debugging.
     */",undetermined
1504,httpd,UNKNOWN,"/* No tricks here, there are just no <Files > to parse in this context.
     * We won't destroy the cache, just in case _this_ redirect is later
     * redirected again to a context containing the same or similar <Files >.
     */",undetermined
1505,httpd,UNKNOWN,"/* Get the basename .. and copy for the cache just
     * in case r->filename is munged by another module
     */",undetermined
1506,httpd,UNKNOWN,"/* If we have an cache->cached file name that matches test_file,
     * and the directory's list of file sections hasn't changed, we
     * can skip rewalking the file_walk entries.
     */",undetermined
1507,httpd,UNKNOWN,"/* Well this looks really familiar!  If our end-result (per_dir_result)
         * didn't change, we have absolutely nothing to do :)
         * Otherwise (as is the case with most dir_merged requests)
         * we must merge our dir_conf_merged onto this new r->per_dir_config.
         */",undetermined
1508,httpd,UNKNOWN,"/* We start now_merged from NULL since we want to build
         * a file section list that can be merged to any dir_walk.
         */",undetermined
1509,httpd,UNKNOWN,"/* Go through the location entries, and check for matches.
         * We apply the directive sections in given order, we should
         * really try them with the most general first.
         */",undetermined
1510,httpd,UNKNOWN,"/* If we merged this same section last time, reuse it
             */",undetermined
1511,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
                 * so truncate the remaining matches and reset remaining.
                 */",undetermined
1512,httpd,UNKNOWN,"/* Whoops - everything matched in sequence, but either the original
         * walk found some additional matches (which we need to truncate), or
         * this walk found some additional matches.
         */",undetermined
1513,httpd,UNKNOWN,"/* Merge our cache->dir_conf_merged construct with the r->per_dir_configs,
     * and note the end result to (potentially) skip this step next time.
     */",undetermined
1514,httpd,UNKNOWN,"/* No tricks here, there are just no <If > to parse in this context.
     * We won't destroy the cache, just in case _this_ redirect is later
     * redirected again to a context containing the same or similar <If >.
     */",undetermined
1515,httpd,UNKNOWN,"/* Go through the if entries, and check for matches  */",undetermined
1516,httpd,UNKNOWN,"/* If we merged this same section last time, reuse it
         */",undetermined
1517,httpd,UNKNOWN,"/* We fell out of sync.  This is our own copy of walked,
             * so truncate the remaining matches and reset remaining.
             */",undetermined
1518,httpd,UNKNOWN,"/* Everything matched in sequence, but it may be that the original
     * walk found some additional matches (which we need to truncate), or
     * this walk found some additional matches.
     */",undetermined
1519,httpd,UNKNOWN,"/* Merge our cache->dir_conf_merged construct with the r->per_dir_configs,
     * and note the end result to (potentially) skip this step next time.
     */",undetermined
1520,httpd,UNKNOWN,"/*****************************************************************
 *
 * The sub_request mechanism.
 *
 * Fns to look up a relative URI from, e.g., a map file or SSI document.
 * These do all access checks, etc., but don't actually run the transaction
 * ... use run_sub_req below for that.  Also, be sure to use destroy_sub_req
 * as appropriate if you're likely to be creating more than a few of these.
 * (An early Apache version didn't destroy the sub_reqs used in directory
 * indexing.  The result, when indexing a directory with 800-odd files in
 * it, was massively excessive storage allocation).
 *
 * Note more manipulation of protocol-specific vars in the request
 * structure...
 */",undetermined
1521,httpd,UNKNOWN,"/* Start a clean config from this subrequest's vhost.  Optimization in
     * Location/File/Dir walks from the parent request assure that if the
     * config blocks of the subrequest match the parent request, no merges
     * will actually occur (and generally a minimal number of merges are
     * required, even if the parent and subrequest aren't quite identical.)
     */",undetermined
1522,httpd,UNKNOWN,/* make a copy of the allowed-methods list */,undetermined
1523,httpd,UNKNOWN,/* start with the same set of output filters */,undetermined
1524,httpd,UNKNOWN,"/* while there are no input filters for a subrequest, we will
         * try to insert some, so if we don't have valid data, the code
         * will seg fault.
         */",undetermined
1525,httpd,UNKNOWN,"/* If NULL - we are expecting to be internal_fast_redirect'ed
         * to this subrequest - or this request will never be invoked.
         * Ignore the original request filter stack entirely, and
         * drill the input and output stacks back to the connection.
         */",undetermined
1526,httpd,UNKNOWN,/* no input filters for a subrequest */,undetermined
1527,httpd,UNKNOWN,"/* We have to run this after we fill in sub req vars,
     * or the r->main pointer won't be setup
     */",undetermined
1528,httpd,UNKNOWN,"/* Begin by presuming any module can make its own path_info assumptions,
     * until some module interjects and changes the value.
     */",undetermined
1529,httpd,UNKNOWN,/* Pass on the kept body (if any) into the new request. */,undetermined
1530,httpd,UNKNOWN,/* Is there a require line configured for the type of *this* req? */,undetermined
1531,httpd,UNKNOWN,"/* Initialise res, to avoid a gcc warning */",undetermined
1532,httpd,UNKNOWN,"/* would be nicer to pass ""method"" to ap_set_sub_req_protocol */",undetermined
1533,httpd,UNKNOWN,/* re-escape it */,undetermined
1534,httpd,UNKNOWN,"/* We cannot return NULL without violating the API. So just turn this
     * subrequest into a 500 to indicate the failure. */",undetermined
1535,httpd,UNKNOWN,"/* lookup_uri
     * If the content can be served by the quick_handler, we can
     * safely bypass request_internal processing.
     *
     * If next_filter is NULL we are expecting to be
     * internal_fast_redirect'ed to the subrequest, or the subrequest will
     * never be invoked. We need to make sure that the quickhandler is not
     * invoked by any lookups. Since an internal_fast_redirect will always
     * occur too late for the quickhandler to handle the request.
     */",undetermined
1536,httpd,UNKNOWN,"/* Special case: we are looking at a relative lookup in the same directory.
     * This is 100% safe, since dirent->name just came from the filesystem.
     */",undetermined
1537,httpd,UNKNOWN,"/* strip path_info off the end of the uri to keep it in sync
         * with r->filename, which has already been stripped by directory_walk,
         * merge the dirent->name, and then, if the caller wants us to remerge
         * the original path info, do so.  Note we never fix the path_info back
         * to r->filename, since dir_walk would do so (but we don't expect it
         * to happen in the usual cases)
         */",undetermined
1538,httpd,UNKNOWN,"/* XXX This is now less relevant; we will do a full location walk
     * these days for this case.  Preserve the apr_stat results, and
     * perhaps we also tag that symlinks were tested and/or found for
     * r->filename.
     */",undetermined
1539,httpd,UNKNOWN,"/*
         * apr_dir_read isn't very complete on this platform, so
         * we need another apr_stat (with or without APR_FINFO_LINK
         * depending on whether we allow all symlinks here.)  If this
         * is an APR_LNK that resolves to an APR_DIR, then we will rerun
         * everything anyways... this should be safe.
         */",undetermined
1540,httpd,UNKNOWN,"/*
         * Resolve this symlink.  We should tie this back to dir_walk's cache
         */",undetermined
1541,httpd,UNKNOWN,"/* ap_make_full_path overallocated the buffers
         * by one character to help us out here.
         */",undetermined
1542,httpd,UNKNOWN,"/* fill in parsed_uri values
     */",undetermined
1543,httpd,UNKNOWN,"/* We cannot return NULL without violating the API. So just turn this
     * subrequest into a 500. */",undetermined
1544,httpd,UNKNOWN,"/* Translate r->filename, if it was canonical, it stays canonical
     */",undetermined
1545,httpd,UNKNOWN,"/*
     * Check for a special case... if there are no '/' characters in new_file
     * at all, and the path was the same, then we are looking at a relative
     * lookup in the same directory.  Fixup the URI to match.
     */",undetermined
1546,httpd,UNKNOWN,/* fill in parsed_uri values */,undetermined
1547,httpd,UNKNOWN,/* fill in parsed_uri values */,undetermined
1548,httpd,UNKNOWN,"/* XXX: @@@: What should be done with the parsed_uri values?
         * We would be better off stripping down to the 'common' elements
         * of the path, then reassembling the URI as best as we can.
         */",undetermined
1549,httpd,UNKNOWN,/* fill in parsed_uri values */,undetermined
1550,httpd,UNKNOWN,"/*
         * XXX: this should be set properly like it is in the same-dir case
         * but it's actually sometimes to impossible to do it... because the
         * file may not have a uri associated with it -djg
         */",undetermined
1551,httpd,UNKNOWN,"/* We cannot return NULL without violating the API. So just turn this
     * subrequest into a 500. */",undetermined
1552,httpd,UNKNOWN,"/* Run the quick handler if the subrequest is not a dirent or file
     * subrequest
     */",undetermined
1553,httpd,UNKNOWN,/* Reclaim the space */,undetermined
1554,httpd,UNKNOWN,"/*
 * Function to set the r->mtime field to the specified value if it's later
 * than what's already there.
 */",undetermined
1555,httpd,UNKNOWN,"/*
 * Is it the initial main request, which we only get *once* per HTTP request?
 */",undetermined
1556,httpd,UNKNOWN,"/* otherwise, this is a sub-request */",undetermined
1557,httpd,UNKNOWN,"/* otherwise, this is an internal redirect */",undetermined
1558,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1559,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1560,httpd,UNKNOWN,/* Default to false when mod_status is not loaded */,undetermined
1561,httpd,UNKNOWN,/* but must be exported to mpm_winnt */,undetermined
1562,httpd,UNKNOWN,"/*
 * ToDo:
 * This function should be renamed to cleanup_shared
 * and it should handle cleaning up a scoreboard shared
 * between processes using any form of IPC (file, shared memory
 * segment, etc.). Leave it as is now because it is being used
 * by various MPMs.
 */",undetermined
1563,httpd,UNKNOWN,"/**
 * Create a name-based scoreboard in the given pool using the
 * given filename.
 */",undetermined
1564,httpd,UNKNOWN,"/* The shared memory file must not exist before we create the
     * segment. */",undetermined
1565,httpd,UNKNOWN,/* ignore errors */,undetermined
1566,httpd,UNKNOWN,/* APR_HAS_SHARED_MEMORY */,undetermined
1567,httpd,UNKNOWN,"/* ToDo: This function should be made to handle setting up
 * a scoreboard shared between processes using any IPC technique,
 * not just a shared memory segment
 */",undetermined
1568,httpd,UNKNOWN,"/* We don't want to have to recreate the scoreboard after
     * restarts, so we'll create a global pool and never clean it.
     */",undetermined
1569,httpd,UNKNOWN,/* The config says to create a name-based shmem */,undetermined
1570,httpd,UNKNOWN,/* make sure it's an absolute pathname */,undetermined
1571,httpd,UNKNOWN,"/* config didn't specify, we get to choose shmem type */",undetermined
1572,httpd,UNKNOWN,/* anonymous shared memory */,undetermined
1573,httpd,UNKNOWN,/* Make up a filename and do name-based shmem */,undetermined
1574,httpd,UNKNOWN,/* Make sure it's an absolute pathname */,undetermined
1575,httpd,UNKNOWN,/* APR_HAS_SHARED_MEMORY */,undetermined
1576,httpd,UNKNOWN,"/* If detach is non-zero, this is a separate child process,
 * if zero, it is a forked child.
 */",undetermined
1577,httpd,UNKNOWN,/* everything will be cleared shortly */,undetermined
1578,httpd,UNKNOWN,"/* Create or reinit an existing scoreboard. The MPM can control whether
 * the scoreboard is shared across multiple processes or not
 */",undetermined
1579,httpd,UNKNOWN,/* A simple malloc will suffice */,undetermined
1580,httpd,UNKNOWN,"/* Routines called to deal with the scoreboard image
 * --- note that we do *not* need write locks, since update_child_status
 * only updates a *single* record in place, and only one process writes to
 * a given scoreboard slot at a time (either the child process owning that
 * slot, or the parent, noting that the child has died).
 *
 * As a final note --- setting the score entry to getpid() is always safe,
 * since when the parent is writing an entry, it's only noting SERVER_DEAD
 * anyway.
 */",undetermined
1581,httpd,UNKNOWN,/* short circuit below */,undetermined
1582,httpd,UNKNOWN,/* Don't reveal the password in the server-status view */,undetermined
1583,httpd,UNKNOWN,/* now figure out if we copy over the 1st rbuflen chars or the last */,undetermined
1584,httpd,UNKNOWN,/* it all fits anyway */,undetermined
1585,httpd,UNKNOWN,"/*
             * Reset individual counters
             */",undetermined
1586,httpd,UNKNOWN,/* Out of range */,undetermined
1587,httpd,UNKNOWN,/* Out of range */,undetermined
1588,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1589,httpd,UNKNOWN,"/*
 * util.c: string utility things
 *
 * 3/21/93 Rob McCool
 * 1995-96 Many changes by the Apache Software Foundation
 *
 */",undetermined
1590,httpd,UNKNOWN,"/* Debugging aid:
 * #define DEBUG            to trace all cfg_open*()/cfg_closefile() calls
 * #define DEBUG_CFG_LINES  to trace every line read from the config files
 */",undetermined
1591,httpd,UNKNOWN,/* for getpid() on Win32 */,undetermined
1592,httpd,UNKNOWN,/* for gethostbyname() */,undetermined
1593,httpd,UNKNOWN,"/* A bunch of functions in util.c scan strings looking for certain characters.
 * To make that more efficient we encode a lookup table.  The test_char_table
 * is generated automatically by gen_test_char.c.
 */",undetermined
1594,httpd,UNKNOWN,"/* we assume the folks using this ensure 0 <= c < 256... which means
 * you need a cast to (unsigned char) first, you can't just plug a
 * char in here and get it to work, because if char is signed then it
 * will first be sign extended.
 */",undetermined
1595,httpd,UNKNOWN,"/* Win32/NetWare/OS2 need to check for both forward and back slashes
 * in ap_getparents() and ap_escape_url.
 */",undetermined
1596,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1597,httpd,UNKNOWN,"/*
 * Examine a field value (such as a media-/content-type) string and return
 * it sans any parameters; e.g., strip off any ';charset=foo' and the like.
 */",undetermined
1598,httpd,UNKNOWN,"/* Convert %Z to ""GMT"" and %z to ""+0000"";
         * on hosts that do not have a time zone string in struct tm,
         * strftime must assume its argument is local time.
         */",undetermined
1599,httpd,UNKNOWN,/* common extension */,undetermined
1600,httpd,UNKNOWN,/* check return code? */,undetermined
1601,httpd,UNKNOWN,/* Roy owes Rob beer. */,undetermined
1602,httpd,UNKNOWN,/* Rob owes Roy dinner. */,undetermined
1603,httpd,UNKNOWN,"/* These legacy comments would make a lot more sense if Roy hadn't
 * replaced the old later_than() routine with util_date.c.
 *
 * Well, okay, they still wouldn't make any sense.
 */",undetermined
1604,httpd,UNKNOWN,"/* Match = 0, NoMatch = 1, Abort = -1
 * Based loosely on sections of wildmat.c by Rich Salz
 * Hmmm... shouldn't this really go component by component?
 */",undetermined
1605,httpd,UNKNOWN,"/* We actually compare the canonical root to this root, (but we don't
 * waste time checking the case), since every use of this function in
 * httpd-2.1 tests if the path is 'proper', meaning we've already passed
 * it through apr_filepath_merge, or we haven't.
 */",undetermined
1606,httpd,UNKNOWN,"/*
 * Here's a pool-based interface to the POSIX-esque ap_regcomp().
 * Note that we return ap_regex_t instead of being passed one.
 * The reason is that if you use an already-used ap_regex_t structure,
 * the memory that you've already allocated gets forgotten, and
 * regfree() doesn't clear it. So we don't allow it.
 */",undetermined
1607,httpd,UNKNOWN,"/*
 * Similar to standard strstr() but we ignore case in this version.
 * Based on the strstr() implementation further below.
 */",undetermined
1608,httpd,UNKNOWN,/* an empty s2 */,undetermined
1609,httpd,UNKNOWN,"/* found first character of s2, see if the rest matches */",undetermined
1610,httpd,UNKNOWN,/* both strings ended together */,undetermined
1611,httpd,UNKNOWN,"/* second string ended, a match */",undetermined
1612,httpd,UNKNOWN,"/* didn't find a match here, try starting at next character in s1 */",undetermined
1613,httpd,UNKNOWN,"/*
 * Returns an offsetted pointer in bigstring immediately after
 * prefix. Returns bigstring if bigstring doesn't start with
 * prefix or if prefix is longer than bigstring while still matching.
 * NOTE: pointer returned is relative to bigstring, so we
 * can use standard pointer comparisons in the calling function
 * (eg: test if ap_stripprefix(a,b) == a)
 */",undetermined
1614,httpd,UNKNOWN,/* hit the end of bigstring! */,undetermined
1615,httpd,UNKNOWN,"/* This function substitutes for $0-$9, filling in regular expression
 * submatches. Pass it the same nmatch and pmatch arguments that you
 * passed ap_regexec(). pmatch should not be greater than the maximum number
 * of subexpressions - i.e. one more than the re_nsub member of ap_regex_t.
 *
 * nmatch must be <=AP_MAX_REG_MATCH (10).
 *
 * input should be the string with the $-expressions, source should be the
 * string that was matched against.
 *
 * It returns the substituted string, or NULL if a vbuf is used.
 * On errors, returns the orig string.
 *
 * Parts of this code are based on Henry Spencer's regsub(), from his
 * AT&T V8 regexp package.
 */",undetermined
1616,httpd,UNKNOWN,"/* First pass, find the size */",undetermined
1617,httpd,UNKNOWN,/* Ordinary character. */,undetermined
1618,httpd,UNKNOWN,/* Now actually fill in the string */,undetermined
1619,httpd,UNKNOWN,/* Ordinary character. */,undetermined
1620,httpd,UNKNOWN,"/*
 * Parse .. so we don't compromise security
 */",undetermined
1621,httpd,UNKNOWN,"/* Four paseses, as per RFC 1808 */",undetermined
1622,httpd,UNKNOWN,/* a) remove ./ path segments */,undetermined
1623,httpd,UNKNOWN,"/* b) remove trailing . path, segment */",undetermined
1624,httpd,UNKNOWN,/* c) remove all xx/../ segments. (including leading ../ and /../) */,undetermined
1625,httpd,UNKNOWN,/* d) remove trailing xx/.. segment. */,undetermined
1626,httpd,UNKNOWN,/* Check for UNC names.  Leave leading two slashes. */,undetermined
1627,httpd,UNKNOWN,"/*
 * copy at most n leading directories of s into d
 * d should be at least as large as s plus 1 extra byte
 * assumes n > 0
 * the return value is the ever useful pointer to the trailing \0 of d
 *
 * MODIFIED FOR HAVE_DRIVE_LETTERS and NETWARE environments,
 * so that if n == 0, ""/"" is returned in d with n == 1
 * and s == ""e:/test.html"", ""e:/"" is returned in d
 * *** See also directory_walk in modules/http/http_request.c

 * examples:
 *    /a/b, 0  ==> /  (true for all platforms)
 *    /a/b, 1  ==> /
 *    /a/b, 2  ==> /a/
 *    /a/b, 3  ==> /a/b/
 *    /a/b, 4  ==> /a/b/
 *
 *    c:/a/b 0 ==> /
 *    c:/a/b 1 ==> c:/
 *    c:/a/b 2 ==> c:/a/
 *    c:/a/b 3 ==> c:/a/b
 *    c:/a/b 4 ==> c:/a/b
 */",undetermined
1628,httpd,UNKNOWN,"/*
 * return the parent directory name including trailing / of the file s
 */",undetermined
1629,httpd,UNKNOWN,"/* Get a word, (new) config-file style --- quoted strings and backslashes
 * all honored
 */",undetermined
1630,httpd,UNKNOWN,/* we can't use apr_file_* directly because of linking issues on Windows */,undetermined
1631,httpd,UNKNOWN,"/* Open a ap_configfile_t as FILE, return open ap_configfile_t struct pointer */",undetermined
1632,httpd,UNKNOWN,/* WIN32 || OS2 */,undetermined
1633,httpd,UNKNOWN,"/* Some twisted character [no pun intended] at MS decided that a
     * zero width joiner as the lead wide character would be ideal for
     * describing Unicode text files.  This was further convoluted to
     * another MSism that the same character mapped into utf-8, EF BB BF
     * would signify utf-8 text files.
     *
     * Since MS configuration files are all protecting utf-8 encoded
     * Unicode path, file and resource names, we already have the correct
     * WinNT encoding.  But at least eat the stupid three bytes up front.
     */",undetermined
1634,httpd,UNKNOWN,/* Allocate a ap_configfile_t handle with user defined functions and params */,undetermined
1635,httpd,UNKNOWN,/* Read one character from a configfile_t */,undetermined
1636,httpd,UNKNOWN,"/* Read one line from open ap_configfile_t, strip LF, increase line number */",undetermined
1637,httpd,UNKNOWN,"/* If custom handler does not define a getstr() function, read char by char */",undetermined
1638,httpd,UNKNOWN,"/* If a ""get string"" function is defined, use it */",undetermined
1639,httpd,UNKNOWN,"/*
             *  check for line continuation,
             *  i.e. match [^\\]\\[\r]\n only
             */",undetermined
1640,httpd,UNKNOWN,"/*
                     * line continuation requested -
                     * then remove backslash and continue
                     */",undetermined
1641,httpd,UNKNOWN,"/* No ""get string"" function defined; read character by character */",undetermined
1642,httpd,UNKNOWN,"/* too small, assume caller is crazy */",undetermined
1643,httpd,UNKNOWN,/* check for line continuation */,undetermined
1644,httpd,UNKNOWN,"/*
     * Leading and trailing white space is eliminated completely
     */",undetermined
1645,httpd,UNKNOWN,/* blast trailing whitespace */,undetermined
1646,httpd,UNKNOWN,/* Zap leading whitespace by shifting */,undetermined
1647,httpd,UNKNOWN,"/* Read one line from open ap_configfile_t, strip LF, increase line number */",undetermined
1648,httpd,UNKNOWN,"/* If custom handler does not define a getstr() function, read char by char */",undetermined
1649,httpd,UNKNOWN,"/* Size an HTTP header field list item, as separated by a comma.
 * The return value is a pointer to the beginning of the non-empty list item
 * within the original string (or NULL if there is none) and the address
 * of field is shifted to the next non-comma, non-whitespace character.
 * len is the length of the item excluding any beginning whitespace.
 */",undetermined
1650,httpd,UNKNOWN,"/* Find first non-comma, non-whitespace byte */",undetermined
1651,httpd,UNKNOWN,"/* Find the end of this item, skipping over dead bits */",undetermined
1652,httpd,UNKNOWN,/* quoted-pair         */,undetermined
1653,httpd,UNKNOWN,/* quoted string delim */,undetermined
1654,httpd,UNKNOWN,/* comment (may nest)  */,undetermined
1655,httpd,UNKNOWN,/* end comment         */,undetermined
1656,httpd,UNKNOWN,"/* Advance field pointer to the next non-comma, non-white byte */",undetermined
1657,httpd,UNKNOWN,"/* Retrieve an HTTP header field list item, as separated by a comma,
 * while stripping insignificant whitespace and lowercasing anything not in
 * a quoted string or comment.  The return value is a new string containing
 * the converted list item (or NULL if none) and the address pointed to by
 * field is shifted to the next non-comma, non-whitespace.
 */",undetermined
1658,httpd,UNKNOWN,"/* Find the beginning and maximum length of the list item so that
     * we can allocate a buffer for the new string and reset the field.
     */",undetermined
1659,httpd,UNKNOWN,"/* Scan the token again, but this time copy only the good bytes.
     * We skip extra whitespace and any whitespace around a '=', '/',
     * or ';' and lowercase normal characters not within a comment,
     * quoted-string or quoted-pair.
     */",undetermined
1660,httpd,UNKNOWN,"/* Find an item in canonical form (lowercase, no extra spaces) within
 * an HTTP field value list.  Returns 1 if found, 0 if not found.
 * This would be much more efficient if we stored header fields as
 * an array of list items as they are received instead of a plain string.
 */",undetermined
1661,httpd,UNKNOWN,/* loop for each item in line's list */,undetermined
1662,httpd,UNKNOWN,"/* Find first non-comma, non-whitespace byte */",undetermined
1663,httpd,UNKNOWN,"/* Account for strong or weak Etags, depending on our search */",undetermined
1664,httpd,UNKNOWN,/* until proven otherwise for this item */,undetermined
1665,httpd,UNKNOWN,/* no items left and nothing good found */,undetermined
1666,httpd,UNKNOWN,"/* We skip extra whitespace and any whitespace around a '=', '/',
         * or ';' and lowercase normal characters not within a comment,
         * quoted-string or quoted-pair.
         */",undetermined
1667,httpd,UNKNOWN,/* not good if only a prefix was matched */,undetermined
1668,httpd,UNKNOWN,"/* Find an item in canonical form (lowercase, no extra spaces) within
 * an HTTP field value list.  Returns 1 if found, 0 if not found.
 * This would be much more efficient if we stored header fields as
 * an array of list items as they are received instead of a plain string.
 */",undetermined
1669,httpd,UNKNOWN,"/* Find a strong Etag in canonical form (lowercase, no extra spaces) within
 * an HTTP field value list.  Returns 1 if found, 0 if not found.
 */",undetermined
1670,httpd,UNKNOWN,"/* Find a weak ETag in canonical form (lowercase, no extra spaces) within
 * an HTTP field value list.  Returns 1 if found, 0 if not found.
 */",undetermined
1671,httpd,UNKNOWN,"/* Retrieve a token, spacing over it and returning a pointer to
 * the first non-white byte afterwards.  Note that these tokens
 * are delimited by semis and commas; and can also be delimited
 * by whitespace at the caller's option.
 */",undetermined
1672,httpd,UNKNOWN,/* Find first non-white byte */,undetermined
1673,httpd,UNKNOWN,"/* find token end, skipping over quoted strings.
     * (comments are already gone).
     */",undetermined
1674,httpd,UNKNOWN,/* Advance accept_line pointer to the next non-white byte */,undetermined
1675,httpd,UNKNOWN,"/* find http tokens, see the definition of token from RFC2068 */",undetermined
1676,httpd,UNKNOWN,"/* find start of token, skip all stop characters, note NUL
         * isn't a token stop, so we don't need to test for it
         */",undetermined
1677,httpd,UNKNOWN,/* find end of the token */,undetermined
1678,httpd,UNKNOWN,/* Be safe */,undetermined
1679,httpd,UNKNOWN,"/*
         * Newlines to Win32/OS2 CreateProcess() are ill advised.
         * Convert them to spaces since they are effectively white
         * space to most applications
         */",undetermined
1680,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
1681,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
1682,httpd,UNKNOWN,"/*
 * Unescapes a URL, leaving reserved characters intact.
 * Returns 0 on success, non-zero on error
 * Failure is due to
 *   bad % escape       returns HTTP_BAD_REQUEST
 *
 *   decoding %00 or a forbidden character returns HTTP_NOT_FOUND
 */",undetermined
1683,httpd,UNKNOWN,"/* Initial scan for first '%'. Don't bother writing values before
     * seeing a '%' */",undetermined
1684,httpd,UNKNOWN,/* Traditional */,undetermined
1685,httpd,UNKNOWN,/* AllowEncodedSlashes (corrected) */,undetermined
1686,httpd,UNKNOWN,/* no chars reserved */,undetermined
1687,httpd,UNKNOWN,/* reserve (do not decode) encoded slashes */,undetermined
1688,httpd,UNKNOWN,"/* IFDEF these out until they've been thought through.
 * Just a germ of an API extension for now
 */",undetermined
1689,httpd,UNKNOWN,"/* leave RFC1738 reserved characters intact, * so proxied URLs
     * don't get mangled.  Where does that leave encoded '&' ?
     */",undetermined
1690,httpd,UNKNOWN,/* replace plus with a space */,undetermined
1691,httpd,UNKNOWN,/* unescape everything else */,undetermined
1692,httpd,UNKNOWN,"/* c2x takes an unsigned, and expects the caller has guaranteed that
 * 0 <= what < 256... which usually means that you have to cast to
 * unsigned char first, because (unsigned)(char)(x) first goes through
 * signed extension to an int before the unsigned cast.
 *
 * The reason for this assumption is to assist gcc code generation --
 * the unsigned char -> unsigned extension is already done earlier in
 * both uses of this code, so there's no need to waste time doing it
 * again.
 */",undetermined
1693,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
1694,httpd,UNKNOWN,"/*
 * escape_path_segment() escapes a path segment, as defined in RFC 1808. This
 * routine is (should be) OS independent.
 *
 * os_escape_path() converts an OS path to a URL, in an OS dependent way. In all
 * cases if a ':' occurs before the first '/' in the URL, the URL should be
 * prefixed with ""./"" (or the ':' escaped). In the case of Unix, this means
 * leaving '/' alone, but otherwise doing what escape_path_segment() does. For
 * efficiency reasons, we don't use escape_path_segment(), which is provided for
 * reference. Again, RFC 1808 is where this stuff is defined.
 *
 * If partial is set, os_escape_path() assumes that the path will be appended to
 * something with a '/' in it (and thus does not prefix ""./"").
 */",undetermined
1695,httpd,UNKNOWN,/* ap_escape_uri is now a macro for os_escape_path */,undetermined
1696,httpd,UNKNOWN,"/* first, count the number of extra characters */",undetermined
1697,httpd,UNKNOWN,/* Compute how many characters need to be escaped */,undetermined
1698,httpd,UNKNOWN,"/* Compute the length of the input string, including NULL */",undetermined
1699,httpd,UNKNOWN,/* Fast path: nothing to escape */,undetermined
1700,httpd,UNKNOWN,/* Each escaped character needs up to 3 extra bytes (0 --> \x00) */,undetermined
1701,httpd,UNKNOWN,/* be safe */,undetermined
1702,httpd,UNKNOWN,/* no need for this in error log */,undetermined
1703,httpd,UNKNOWN,/* break the for loop as well */,undetermined
1704,httpd,UNKNOWN,"/* in error condition, just return no */",undetermined
1705,httpd,UNKNOWN,"/* in error condition, just return no */",undetermined
1706,httpd,UNKNOWN,"/* allocate +3 for '/' delimiter, trailing NULL and overallocate
      * one extra byte to allow the caller to add a trailing '/'
      */",undetermined
1707,httpd,UNKNOWN,"/*
 * Check for an absoluteURI syntax (see section 3.2 in RFC2068).
 */",undetermined
1708,httpd,UNKNOWN,"/* If the first character is ':', it's broken, too */",undetermined
1709,httpd,UNKNOWN,"/*
 * We must return a FQDN
 */",undetermined
1710,httpd,UNKNOWN,"/* simple 'pool' alloc()ing glue to apr_base64.c
 */",undetermined
1711,httpd,UNKNOWN,/* make binary sequence into string */,undetermined
1712,httpd,UNKNOWN,/* make binary sequence into string */,undetermined
1713,httpd,UNKNOWN,"/* we want to downcase the type/subtype for comparison purposes
 * but nothing else because ;parameter=foo values are case sensitive.
 * XXX: in truth we want to downcase parameter names... but really,
 * apache has never handled parameters and such correctly.  You
 * also need to compress spaces and such to be able to compare
 * properly. -djg
 */",undetermined
1714,httpd,UNKNOWN,"/*
 * Given a string, replace any bare "" with \"" .
 */",undetermined
1715,httpd,UNKNOWN,"/*
     * Look through the input string, jogging the length of the output
     * string up by an extra byte each time we find an unescaped "".
     */",undetermined
1716,httpd,UNKNOWN,"/*
         * If we find a slosh, and it's not the last byte in the string,
         * it's escaping something - advance past both bytes.
         */",undetermined
1717,httpd,UNKNOWN,"/*
     * Now copy the input string to the output string, inserting a slosh
     * in front of every "" that doesn't already have one.
     */",undetermined
1718,httpd,UNKNOWN,"/*
 * Given a string, append the PID deliminated by delim.
 * Usually used to create a pid-appended filepath name
 * (eg: /a/b/foo -> /a/b/foo.6726). A function, and not
 * a macro, to avoid unistd.h dependency
 */",undetermined
1719,httpd,UNKNOWN,"/**
 * Parse a given timeout parameter string into an apr_interval_time_t value.
 * The unit of the time interval is given as postfix string to the numeric
 * string. Currently the following units are understood:
 *
 * ms    : milliseconds
 * s     : seconds
 * mi[n] : minutes
 * h     : hours
 *
 * If no unit is contained in the given timeout parameter the default_time_unit
 * will be used instead.
 * @param timeout_parameter The string containing the timeout parameter.
 * @param timeout The timeout value to be returned.
 * @param default_time_unit The default time unit to use if none is specified
 * in timeout_parameter.
 * @return Status value indicating whether the parsing was successful or not.
 */",undetermined
1720,httpd,UNKNOWN,/* Time is in seconds */,undetermined
1721,httpd,UNKNOWN,/* Time is in hours */,undetermined
1722,httpd,UNKNOWN,/* Time is in milliseconds */,undetermined
1723,httpd,UNKNOWN,/* Time is in minutes */,undetermined
1724,httpd,UNKNOWN,"/**
 * Determine if a request has a request body or not.
 *
 * @param r the request_rec of the request
 * @return truth value
 */",undetermined
1725,httpd,UNKNOWN,"/**
 * Read the body and parse any form found, which must be of the
 * type application/x-www-form-urlencoded.
 *
 * Name/value pairs are returned in an array, with the names as
 * strings with a maximum length of HUGE_STRING_LEN, and the
 * values as bucket brigades. This allows values to be arbitrarily
 * large.
 *
 * All url-encoding is removed from both the names and the values
 * on the fly. The names are interpreted as strings, while the
 * values are interpreted as blocks of binary data, that may
 * contain the 0 character.
 *
 * In order to ensure that resource limits are not exceeded, a
 * maximum size must be provided. If the sum of the lengths of
 * the names and the values exceed this size, this function
 * will return HTTP_REQUEST_ENTITY_TOO_LARGE.
 *
 * An optional number of parameters can be provided, if the number
 * of parameters provided exceeds this amount, this function will
 * return HTTP_REQUEST_ENTITY_TOO_LARGE. If this value is negative,
 * no limit is imposed, and the number of parameters is in turn
 * constrained by the size parameter above.
 *
 * This function honours any kept_body configuration, and the
 * original raw request body will be saved to the kept_body brigade
 * if so configured, just as ap_discard_request_body does.
 *
 * NOTE: File upload is not yet supported, but can be without change
 * to the function call.
 */",undetermined
1726,httpd,UNKNOWN,/* form parsing stuff */,undetermined
1727,httpd,UNKNOWN,/* sanity check - we only support forms for now */,undetermined
1728,httpd,UNKNOWN,"/* at least double the size, to avoid repeated reallocations */",undetermined
1729,httpd,UNKNOWN,/* add space for trailing \0 */,undetermined
1730,httpd,UNKNOWN,"/* We are lucky: the new memory lies directly after our old
                 * buffer, we can now use both.
                 */",undetermined
1731,httpd,UNKNOWN,/* copy up to vb->strlen + 1 bytes */,undetermined
1732,httpd,UNKNOWN,"/* The required block is rather larger. Use allocator directly so that
     * the memory can be freed independently from the pool. */",undetermined
1733,httpd,UNKNOWN,"/* preload errored fields, we overwrite */",undetermined
1734,httpd,UNKNOWN,"/* preload errored fields, we overwrite */",undetermined
1735,httpd,UNKNOWN,/* XXX: we are reading 1 byte at a time here */,undetermined
1736,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1737,httpd,UNKNOWN,/* we just started a new parent */,undetermined
1738,httpd,UNKNOWN,/* First item in config file or container is a container */,undetermined
1739,httpd,UNKNOWN,"/* switch parents, navigate into child */",undetermined
1740,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1741,httpd,UNKNOWN,"/* ap_hdrs_to_ascii, ap_hdrs_from_ascii
 *
 * These are the translation handles used to translate between the network
 * format of protocol headers and the local machine format.
 *
 * For an EBCDIC machine, these are valid handles which are set up at
 * initialization to translate between ISO-8859-1 and the code page of
 * the source code.
 *
 * For an ASCII machine, these remain NULL so that when they are stored
 * in the BUFF via ap_bsetop(BO_RXLATE) it ensures that no translation is
 * performed.
 */",undetermined
1742,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC */,undetermined
1743,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1744,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1745,httpd,UNKNOWN,"/**
 * Write an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs The string containing additional cookie attributes. If NULL, the
 *              DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 */",undetermined
1746,httpd,UNKNOWN,/* handle expiry */,undetermined
1747,httpd,UNKNOWN,/* create RFC2109 compliant cookie */,undetermined
1748,httpd,UNKNOWN,/* write the cookie to the header table(s) provided */,undetermined
1749,httpd,UNKNOWN,"/**
 * Write an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs2 The string containing additional cookie attributes. If NULL, the
 *               DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 */",undetermined
1750,httpd,UNKNOWN,/* handle expiry */,undetermined
1751,httpd,UNKNOWN,/* create RFC2965 compliant cookie */,undetermined
1752,httpd,UNKNOWN,/* write the cookie to the header table(s) provided */,undetermined
1753,httpd,UNKNOWN,"/**
 * Remove an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 */",undetermined
1754,httpd,UNKNOWN,/* create RFC2109 compliant cookie */,undetermined
1755,httpd,UNKNOWN,/* write the cookie to the header table(s) provided */,undetermined
1756,httpd,UNKNOWN,"/**
 * Remove an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 */",undetermined
1757,httpd,UNKNOWN,/* create RFC2965 compliant cookie */,undetermined
1758,httpd,UNKNOWN,/* write the cookie to the header table(s) provided */,undetermined
1759,httpd,UNKNOWN,"/* Iterate through the cookies, isolate our cookie and then remove it.
 *
 * If our cookie appears two or more times, but with different values,
 * remove it twice and set the duplicated flag to true. Remove any
 * $path or other attributes following our cookie if present. If we end
 * up with an empty cookie, remove the whole header.
 */",undetermined
1760,httpd,UNKNOWN,/* find the cookie called name */,undetermined
1761,httpd,UNKNOWN,/* any cookies left over? */,undetermined
1762,httpd,UNKNOWN,"/**
 * Read a cookie called name, placing its value in val.
 *
 * Both the Cookie and Cookie2 headers are scanned for the cookie.
 *
 * If the cookie is duplicated, this function returns APR_EGENERAL. If found,
 * and if remove is non zero, the cookie will be removed from the headers, and
 * thus kept private from the backend.
 */",undetermined
1763,httpd,UNKNOWN,"/* remove our cookie(s), and replace them */",undetermined
1764,httpd,UNKNOWN,"/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain the special characters '=', ';' and '&'.
 *
 * It is used to sanity check the cookie names.
 */",undetermined
1765,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1766,httpd,UNKNOWN,/* Possibly get rid of the macros we defined in httpd.h */,undetermined
1767,httpd,UNKNOWN,"/**
 * Generic accessors for other modules to set at their own module-specific
 * data
 * @param conf_vector The vector in which the modules configuration is stored.
 *        usually r->per_dir_config or s->module_config
 * @param m The module to set the data for.
 * @param val The module-specific data to set
 * @fn void ap_set_module_config(ap_conf_vector_t *cv, const module *m, void *val)
 */",undetermined
1768,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1769,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1770,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
1771,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
1772,httpd,UNKNOWN,"/*                      _             _
 *  ap_expr_eval.c, based on ssl_expr_eval.c from mod_ssl
 */",undetermined
1773,httpd,UNKNOWN,/* for INT_MAX */,undetermined
1774,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
1775,httpd,UNKNOWN,/* define AP_EXPR_DEBUG to log the parse tree when parsing an expression */,undetermined
1776,httpd,UNKNOWN,"/*
 * To reduce counting overhead, we only count calls to
 * ap_expr_eval_word() and ap_expr_eval(). The max number of
 * stack frames is larger by some factor.
 */",undetermined
1777,httpd,UNKNOWN,/* short circuit further evaluation */,undetermined
1778,httpd,UNKNOWN,"/*
             * $0 ... $9 may contain stuff the user wants to keep. Therefore
             * we only set them if there are capturing parens in the regex.
             */",undetermined
1779,httpd,UNKNOWN,/* combined string/int comparison for compatibility with ssl_expr */,undetermined
1780,httpd,UNKNOWN,"/* generic bison error message (XXX: usually not very useful, should be axed) */",undetermined
1781,httpd,UNKNOWN,/* additional error message */,undetermined
1782,httpd,UNKNOWN,/* XXX can this happen? */,undetermined
1783,httpd,UNKNOWN,/* no arg */,undetermined
1784,httpd,UNKNOWN,"/* arg1: string, arg2: expr */",undetermined
1785,httpd,UNKNOWN,"/* arg1: expr, arg2: expr */",undetermined
1786,httpd,UNKNOWN,/* arg1: string */,undetermined
1787,httpd,UNKNOWN,"/* arg1: pointer, arg2: pointer */",undetermined
1788,httpd,UNKNOWN,/* arg1: pointer */,undetermined
1789,httpd,UNKNOWN,/* arg1: pointer to int */,undetermined
1790,httpd,UNKNOWN,/* AP_EXPR_DEBUG */,undetermined
1791,httpd,UNKNOWN,"/* XXX: allow r, c == NULL */",undetermined
1792,httpd,UNKNOWN,/* short-cut for constant strings */,undetermined
1793,httpd,UNKNOWN,/* Not reached */,undetermined
1794,httpd,UNKNOWN,/* resp */,undetermined
1795,httpd,UNKNOWN,"/* Try r->headers_out first, fall back on err_headers_out. */",undetermined
1796,httpd,UNKNOWN,/* notes */,undetermined
1797,httpd,UNKNOWN,/* reqenv */,undetermined
1798,httpd,UNKNOWN,/* req_novary */,undetermined
1799,httpd,UNKNOWN,"/* req, http */",undetermined
1800,httpd,UNKNOWN,/* this order is for ssl_expr compatibility */,undetermined
1801,httpd,UNKNOWN,/* avoid some infinite recursions */,undetermined
1802,httpd,UNKNOWN,/* double-check that file exists since default result is 200 */,undetermined
1803,httpd,UNKNOWN,/*  0 */,undetermined
1804,httpd,UNKNOWN,/*  1 */,undetermined
1805,httpd,UNKNOWN,/*  2 */,undetermined
1806,httpd,UNKNOWN,/*  3 */,undetermined
1807,httpd,UNKNOWN,/*  0 */,undetermined
1808,httpd,UNKNOWN,/*  1 */,undetermined
1809,httpd,UNKNOWN,/*  2 */,undetermined
1810,httpd,UNKNOWN,/*  3 */,undetermined
1811,httpd,UNKNOWN,/*  4 */,undetermined
1812,httpd,UNKNOWN,/*  5 */,undetermined
1813,httpd,UNKNOWN,/*  6 */,undetermined
1814,httpd,UNKNOWN,/*  7 */,undetermined
1815,httpd,UNKNOWN,/*  8 */,undetermined
1816,httpd,UNKNOWN,/*  9 */,undetermined
1817,httpd,UNKNOWN,/* 10 */,undetermined
1818,httpd,UNKNOWN,/* 11 */,undetermined
1819,httpd,UNKNOWN,/* 12 */,undetermined
1820,httpd,UNKNOWN,/* 13 */,undetermined
1821,httpd,UNKNOWN,/* 14 */,undetermined
1822,httpd,UNKNOWN,/* 15 */,undetermined
1823,httpd,UNKNOWN,/* 16 */,undetermined
1824,httpd,UNKNOWN,/* 17 */,undetermined
1825,httpd,UNKNOWN,/* 18 */,undetermined
1826,httpd,UNKNOWN,/* 19 */,undetermined
1827,httpd,UNKNOWN,/* 20 */,undetermined
1828,httpd,UNKNOWN,/* 21 */,undetermined
1829,httpd,UNKNOWN,/* 22 */,undetermined
1830,httpd,UNKNOWN,/* 23 */,undetermined
1831,httpd,UNKNOWN,/* 24 */,undetermined
1832,httpd,UNKNOWN,/* 25 */,undetermined
1833,httpd,UNKNOWN,/* 26 */,undetermined
1834,httpd,UNKNOWN,/* 27 */,undetermined
1835,httpd,UNKNOWN,/* 28 */,undetermined
1836,httpd,UNKNOWN,/* 0 */,undetermined
1837,httpd,UNKNOWN,/* 1 */,undetermined
1838,httpd,UNKNOWN,/* 2 */,undetermined
1839,httpd,UNKNOWN,/* 3 */,undetermined
1840,httpd,UNKNOWN,/* 4 */,undetermined
1841,httpd,UNKNOWN,/* 5 */,undetermined
1842,httpd,UNKNOWN,/* 6 */,undetermined
1843,httpd,UNKNOWN,/* 7 */,undetermined
1844,httpd,UNKNOWN,/* 8 */,undetermined
1845,httpd,UNKNOWN,/* 9 */,undetermined
1846,httpd,UNKNOWN,/* maybe log an error if this goes wrong? */,undetermined
1847,httpd,UNKNOWN,/* 'http' as alias for 'req' for compatibility with ssl_expr */,undetermined
1848,httpd,UNKNOWN,"/* A Bison parser, made by GNU Bison 2.5.  */",undetermined
1849,httpd,UNKNOWN,"/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",undetermined
1850,httpd,UNKNOWN,"/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */",undetermined
1851,httpd,UNKNOWN,"/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called ""semantic"" parser.  */",undetermined
1852,httpd,UNKNOWN,"/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted ""INFRINGES ON
   USER NAME SPACE"" below.  */",undetermined
1853,httpd,UNKNOWN,/* Identify Bison output.  */,undetermined
1854,httpd,UNKNOWN,/* Bison version.  */,undetermined
1855,httpd,UNKNOWN,/* Skeleton name.  */,undetermined
1856,httpd,UNKNOWN,/* Pure parsers.  */,undetermined
1857,httpd,UNKNOWN,/* Push parsers.  */,undetermined
1858,httpd,UNKNOWN,/* Pull parsers.  */,undetermined
1859,httpd,UNKNOWN,/* Using locations.  */,undetermined
1860,httpd,UNKNOWN,/* Substitute the variable and function names.  */,undetermined
1861,httpd,UNKNOWN,/* Copy the first part of user declarations.  */,undetermined
1862,httpd,UNKNOWN,/* Line 268 of yacc.c  */,undetermined
1863,httpd,UNKNOWN,/* Line 268 of yacc.c  */,undetermined
1864,httpd,UNKNOWN,/* Enabling traces.  */,undetermined
1865,httpd,UNKNOWN,/* Enabling verbose error messages.  */,undetermined
1866,httpd,UNKNOWN,/* Enabling the token table.  */,undetermined
1867,httpd,UNKNOWN,/* Tokens.  */,undetermined
1868,httpd,UNKNOWN,"/* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */",undetermined
1869,httpd,UNKNOWN,/* Line 293 of yacc.c  */,undetermined
1870,httpd,UNKNOWN,/* Line 293 of yacc.c  */,undetermined
1871,httpd,UNKNOWN,/* obsolescent; will be withdrawn */,undetermined
1872,httpd,UNKNOWN,/* Copy the second part of user declarations.  */,undetermined
1873,httpd,UNKNOWN,/* Line 343 of yacc.c  */,undetermined
1874,httpd,UNKNOWN,/* Line 343 of yacc.c  */,undetermined
1875,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1876,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1877,httpd,UNKNOWN,"/* Suppress unused-variable warnings by ""using"" E.  */",undetermined
1878,httpd,UNKNOWN,/* empty */,undetermined
1879,httpd,UNKNOWN,"/* Identity function, used to suppress warnings about constant conditions.  */",undetermined
1880,httpd,UNKNOWN,/* The parser invokes alloca or malloc; define the necessary symbols.  */,undetermined
1881,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1882,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1883,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1884,httpd,UNKNOWN,/* Pacify GCC's `empty if-body' warning.  */,undetermined
1885,httpd,UNKNOWN,/* empty */,undetermined
1886,httpd,UNKNOWN,"/* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */",undetermined
1887,httpd,UNKNOWN,/* reasonable circa 2006 */,undetermined
1888,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1889,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1890,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1891,httpd,UNKNOWN,/* ! defined yyoverflow || YYERROR_VERBOSE */,undetermined
1892,httpd,UNKNOWN,/* A type that is properly aligned for any stack member.  */,undetermined
1893,httpd,UNKNOWN,/* The size of the maximum gap between one aligned stack and the next.  */,undetermined
1894,httpd,UNKNOWN,"/* The size of an array large to enough to hold all stacks, each with
   N elements.  */",undetermined
1895,httpd,UNKNOWN,"/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */",undetermined
1896,httpd,UNKNOWN,"/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */",undetermined
1897,httpd,UNKNOWN,/* !YYCOPY_NEEDED */,undetermined
1898,httpd,UNKNOWN,/* YYFINAL -- State number of the termination state.  */,undetermined
1899,httpd,UNKNOWN,/* YYLAST -- Last index in YYTABLE.  */,undetermined
1900,httpd,UNKNOWN,/* YYNTOKENS -- Number of terminals.  */,undetermined
1901,httpd,UNKNOWN,/* YYNNTS -- Number of nonterminals.  */,undetermined
1902,httpd,UNKNOWN,/* YYNRULES -- Number of rules.  */,undetermined
1903,httpd,UNKNOWN,/* YYNRULES -- Number of states.  */,undetermined
1904,httpd,UNKNOWN,/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */,undetermined
1905,httpd,UNKNOWN,/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */,undetermined
1906,httpd,UNKNOWN,"/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */",undetermined
1907,httpd,UNKNOWN,/* YYRHS -- A `-1'-separated list of the rules' RHS.  */,undetermined
1908,httpd,UNKNOWN,/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */,undetermined
1909,httpd,UNKNOWN,"/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */",undetermined
1910,httpd,UNKNOWN,"/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */",undetermined
1911,httpd,UNKNOWN,/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */,undetermined
1912,httpd,UNKNOWN,/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */,undetermined
1913,httpd,UNKNOWN,"/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */",undetermined
1914,httpd,UNKNOWN,/* YYDEFGOTO[NTERM-NUM].  */,undetermined
1915,httpd,UNKNOWN,"/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */",undetermined
1916,httpd,UNKNOWN,/* YYPGOTO[NTERM-NUM].  */,undetermined
1917,httpd,UNKNOWN,"/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */",undetermined
1918,httpd,UNKNOWN,"/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */",undetermined
1919,httpd,UNKNOWN,"/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */",undetermined
1920,httpd,UNKNOWN,"/* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */",undetermined
1921,httpd,UNKNOWN,"/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */",undetermined
1922,httpd,UNKNOWN,/* This macro is provided for backward compatibility. */,undetermined
1923,httpd,UNKNOWN,/* YYLEX -- calling `yylex' with the right arguments.  */,undetermined
1924,httpd,UNKNOWN,/* Enable debugging if requested.  */,undetermined
1925,httpd,UNKNOWN,/* INFRINGES ON USER NAME SPACE */,undetermined
1926,httpd,UNKNOWN,"/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/",undetermined
1927,httpd,UNKNOWN,/*ARGSUSED*/,undetermined
1928,httpd,UNKNOWN,"/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/",undetermined
1929,httpd,UNKNOWN,"/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/",undetermined
1930,httpd,UNKNOWN,"/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/",undetermined
1931,httpd,UNKNOWN,/* The symbols being reduced.  */,undetermined
1932,httpd,UNKNOWN,"/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */",undetermined
1933,httpd,UNKNOWN,/* !YYDEBUG */,undetermined
1934,httpd,UNKNOWN,/* !YYDEBUG */,undetermined
1935,httpd,UNKNOWN,/* YYINITDEPTH -- initial size of the parser's stacks.  */,undetermined
1936,httpd,UNKNOWN,"/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */",undetermined
1937,httpd,UNKNOWN,/* Return the length of YYSTR.  */,undetermined
1938,httpd,UNKNOWN,"/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */",undetermined
1939,httpd,UNKNOWN,"/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */",undetermined
1940,httpd,UNKNOWN,/* Fall through.  */,undetermined
1941,httpd,UNKNOWN,"/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */",undetermined
1942,httpd,UNKNOWN,/* Internationalized format string. */,undetermined
1943,httpd,UNKNOWN,/* Arguments of yyformat. */,undetermined
1944,httpd,UNKNOWN,"/* Number of reported tokens (one for the ""unexpected"", one per
     ""expected""). */",undetermined
1945,httpd,UNKNOWN,"/* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple ""syntax error"".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */",undetermined
1946,httpd,UNKNOWN,"/* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */",undetermined
1947,httpd,UNKNOWN,/* Stay within bounds of both yycheck and yytname.  */,undetermined
1948,httpd,UNKNOWN,"/* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of ""%s""s.  */",undetermined
1949,httpd,UNKNOWN,/* YYERROR_VERBOSE */,undetermined
1950,httpd,UNKNOWN,"/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/",undetermined
1951,httpd,UNKNOWN,/*ARGSUSED*/,undetermined
1952,httpd,UNKNOWN,/* Prevent warnings from -Wmissing-prototypes.  */,undetermined
1953,httpd,UNKNOWN,/* ! YYPARSE_PARAM */,undetermined
1954,httpd,UNKNOWN,/* ! YYPARSE_PARAM */,undetermined
1955,httpd,UNKNOWN,"/*----------.
| yyparse.  |
`----------*/",undetermined
1956,httpd,UNKNOWN,/* ! YYPARSE_PARAM */,undetermined
1957,httpd,UNKNOWN,/* The lookahead symbol.  */,undetermined
1958,httpd,UNKNOWN,/* The semantic value of the lookahead symbol.  */,undetermined
1959,httpd,UNKNOWN,/* Number of syntax errors so far.  */,undetermined
1960,httpd,UNKNOWN,/* Number of tokens to shift before error messages enabled.  */,undetermined
1961,httpd,UNKNOWN,"/* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */",undetermined
1962,httpd,UNKNOWN,/* The state stack.  */,undetermined
1963,httpd,UNKNOWN,/* The semantic value stack.  */,undetermined
1964,httpd,UNKNOWN,/* Lookahead token as an internal (translated) token number.  */,undetermined
1965,httpd,UNKNOWN,"/* The variables used to return semantic value and location from the
     action routines.  */",undetermined
1966,httpd,UNKNOWN,"/* Buffer for error messages, and its allocated size.  */",undetermined
1967,httpd,UNKNOWN,"/* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */",undetermined
1968,httpd,UNKNOWN,/* Cause a token to be read.  */,undetermined
1969,httpd,UNKNOWN,"/* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */",undetermined
1970,httpd,UNKNOWN,"/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/",undetermined
1971,httpd,UNKNOWN,"/* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */",undetermined
1972,httpd,UNKNOWN,"/* Get the current used size of the three stacks, in elements.  */",undetermined
1973,httpd,UNKNOWN,"/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */",undetermined
1974,httpd,UNKNOWN,"/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */",undetermined
1975,httpd,UNKNOWN,/* no yyoverflow */,undetermined
1976,httpd,UNKNOWN,/* Extend the stack our own way.  */,undetermined
1977,httpd,UNKNOWN,/* no yyoverflow */,undetermined
1978,httpd,UNKNOWN,"/*-----------.
| yybackup.  |
`-----------*/",undetermined
1979,httpd,UNKNOWN,"/* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */",undetermined
1980,httpd,UNKNOWN,/* First try to decide what to do without reference to lookahead token.  */,undetermined
1981,httpd,UNKNOWN,/* Not known => get a lookahead token if don't already have one.  */,undetermined
1982,httpd,UNKNOWN,/* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */,undetermined
1983,httpd,UNKNOWN,"/* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */",undetermined
1984,httpd,UNKNOWN,"/* Count tokens shifted since error; after three, turn off error
     status.  */",undetermined
1985,httpd,UNKNOWN,/* Shift the lookahead token.  */,undetermined
1986,httpd,UNKNOWN,/* Discard the shifted token.  */,undetermined
1987,httpd,UNKNOWN,"/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/",undetermined
1988,httpd,UNKNOWN,"/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/",undetermined
1989,httpd,UNKNOWN,/* yyn is the number of a rule to reduce with.  */,undetermined
1990,httpd,UNKNOWN,"/* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */",undetermined
1991,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1992,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1993,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1994,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1995,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1996,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1997,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1998,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
1999,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2000,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2001,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2002,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2003,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2004,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2005,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2006,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2007,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2008,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2009,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2010,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2011,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2012,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2013,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2014,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2015,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2016,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2017,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2018,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2019,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2020,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2021,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2022,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2023,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2024,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2025,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2026,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2027,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2028,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2029,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2030,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2031,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2032,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2033,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2034,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2035,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2036,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2037,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2038,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2039,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2040,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2041,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2042,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2043,httpd,UNKNOWN,/* Line 1806 of yacc.c  */,undetermined
2044,httpd,UNKNOWN,"/* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */",undetermined
2045,httpd,UNKNOWN,"/* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */",undetermined
2046,httpd,UNKNOWN,"/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/",undetermined
2047,httpd,UNKNOWN,"/* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */",undetermined
2048,httpd,UNKNOWN,"/* If not already recovering from an error, report this error.  */",undetermined
2049,httpd,UNKNOWN,"/* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */",undetermined
2050,httpd,UNKNOWN,/* Return failure if at end of input.  */,undetermined
2051,httpd,UNKNOWN,"/* Else will try to reuse lookahead token after shifting the error
     token.  */",undetermined
2052,httpd,UNKNOWN,"/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/",undetermined
2053,httpd,UNKNOWN,"/* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */",undetermined
2054,httpd,UNKNOWN,/*CONSTCOND*/,undetermined
2055,httpd,UNKNOWN,"/* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */",undetermined
2056,httpd,UNKNOWN,"/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/",undetermined
2057,httpd,UNKNOWN,/* Each real token shifted decrements this.  */,undetermined
2058,httpd,UNKNOWN,/* Pop the current state because it cannot handle the error token.  */,undetermined
2059,httpd,UNKNOWN,/* Shift the error token.  */,undetermined
2060,httpd,UNKNOWN,"/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/",undetermined
2061,httpd,UNKNOWN,"/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/",undetermined
2062,httpd,UNKNOWN,"/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/",undetermined
2063,httpd,UNKNOWN,/* Fall through.  */,undetermined
2064,httpd,UNKNOWN,"/* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */",undetermined
2065,httpd,UNKNOWN,"/* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */",undetermined
2066,httpd,UNKNOWN,/* Make sure YYID is used.  */,undetermined
2067,httpd,UNKNOWN,/* Line 2067 of yacc.c  */,undetermined
2068,httpd,UNKNOWN,/* s is allocated on the stack */,undetermined
2069,httpd,UNKNOWN,"/* A Bison parser, made by GNU Bison 2.5.  */",undetermined
2070,httpd,UNKNOWN,"/* Bison interface for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",undetermined
2071,httpd,UNKNOWN,"/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */",undetermined
2072,httpd,UNKNOWN,/* Tokens.  */,undetermined
2073,httpd,UNKNOWN,"/* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */",undetermined
2074,httpd,UNKNOWN,/* Line 2068 of yacc.c  */,undetermined
2075,httpd,UNKNOWN,/* Line 2068 of yacc.c  */,undetermined
2076,httpd,UNKNOWN,/* obsolescent; will be withdrawn */,undetermined
2077,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2078,httpd,UNKNOWN,/* Avoid some warnings with Visual Studio (likely due to a bug in bison) */,undetermined
2079,httpd,UNKNOWN,/** The operations in a parse tree node */,undetermined
2080,httpd,UNKNOWN,"/*
     * call external functions/operators.
     * The info node contains the function pointer and some function specific
     * info.
     * For Binary operators, the Call node links to the Info node and the
     * Args node, which in turn links to the left and right operand.
     * For all other variants, the Call node links to the Info node and the
     * argument.
     */",undetermined
2081,httpd,UNKNOWN,/** The basic parse tree node */,undetermined
2082,httpd,UNKNOWN,/** The context used by scanner and parser */,undetermined
2083,httpd,UNKNOWN,/* internal state of the scanner */,undetermined
2084,httpd,UNKNOWN,/* pools for result and temporary usage */,undetermined
2085,httpd,UNKNOWN,/* The created parse tree */,undetermined
2086,httpd,UNKNOWN,"/*
     * The function to use to lookup provider functions for variables
     * and funtctions
     */",undetermined
2087,httpd,UNKNOWN,/* flex/bison functions */,undetermined
2088,httpd,UNKNOWN,/* create a parse tree node */,undetermined
2089,httpd,UNKNOWN,/* create parse tree node for the string-returning function 'name' */,undetermined
2090,httpd,UNKNOWN,/* create parse tree node for the list-returning function 'name' */,undetermined
2091,httpd,UNKNOWN,/* create parse tree node for the variable 'name' */,undetermined
2092,httpd,UNKNOWN,/* create parse tree node for the unary operator 'name' */,undetermined
2093,httpd,UNKNOWN,/* create parse tree node for the binary operator 'name' */,undetermined
2094,httpd,UNKNOWN,/* __AP_EXPR_PRIVATE_H__ */,undetermined
2095,httpd,UNKNOWN,/** @} */,undetermined
2096,httpd,UNKNOWN,/* A lexical scanner generated by flex */,undetermined
2097,httpd,UNKNOWN,"/* First, we deal with  platform-specific or compiler-specific issues. */",undetermined
2098,httpd,UNKNOWN,/* begin standard C headers. */,undetermined
2099,httpd,UNKNOWN,/* end standard C headers. */,undetermined
2100,httpd,UNKNOWN,/* flex integer type definitions */,undetermined
2101,httpd,UNKNOWN,/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */,undetermined
2102,httpd,UNKNOWN,"/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */",undetermined
2103,httpd,UNKNOWN,/* Limits of integral types. */,undetermined
2104,httpd,UNKNOWN,/* ! C99 */,undetermined
2105,httpd,UNKNOWN,/* ! FLEXINT_H */,undetermined
2106,httpd,UNKNOWN,"/* The ""const"" storage-class-modifier is valid. */",undetermined
2107,httpd,UNKNOWN,/* ! __cplusplus */,undetermined
2108,httpd,UNKNOWN,/* C99 requires __STDC__ to be defined as 1. */,undetermined
2109,httpd,UNKNOWN,/* defined (__STDC__) */,undetermined
2110,httpd,UNKNOWN,/* ! __cplusplus */,undetermined
2111,httpd,UNKNOWN,/* Returned upon end-of-file. */,undetermined
2112,httpd,UNKNOWN,"/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */",undetermined
2113,httpd,UNKNOWN,/* An opaque pointer. */,undetermined
2114,httpd,UNKNOWN,"/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */",undetermined
2115,httpd,UNKNOWN,"/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */",undetermined
2116,httpd,UNKNOWN,"/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */",undetermined
2117,httpd,UNKNOWN,/* Action number for EOF rule of a given start state. */,undetermined
2118,httpd,UNKNOWN,"/* Special action meaning ""start processing a new file"". */",undetermined
2119,httpd,UNKNOWN,/* Size of default input buffer. */,undetermined
2120,httpd,UNKNOWN,"/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */",undetermined
2121,httpd,UNKNOWN,/* __ia64__ */,undetermined
2122,httpd,UNKNOWN,"/* The state buf must be large enough to hold one state per character in the main buffer.
 */",undetermined
2123,httpd,UNKNOWN,"/* Return all but the first ""n"" matched characters back to the input stream. */",undetermined
2124,httpd,UNKNOWN,/* Undo effects of setting up yytext. */,undetermined
2125,httpd,UNKNOWN,/* set up yytext again */,undetermined
2126,httpd,UNKNOWN,/* input buffer */,undetermined
2127,httpd,UNKNOWN,/* current position in input buffer */,undetermined
2128,httpd,UNKNOWN,"/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */",undetermined
2129,httpd,UNKNOWN,"/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */",undetermined
2130,httpd,UNKNOWN,"/* Whether we ""own"" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */",undetermined
2131,httpd,UNKNOWN,"/* Whether this is an ""interactive"" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */",undetermined
2132,httpd,UNKNOWN,"/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */",undetermined
2133,httpd,UNKNOWN,/**< The line count. */,undetermined
2134,httpd,UNKNOWN,/**< The column count. */,undetermined
2135,httpd,UNKNOWN,"/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */",undetermined
2136,httpd,UNKNOWN,"/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to ""new""
	 * (via ap_expr_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */",undetermined
2137,httpd,UNKNOWN,/* !YY_STRUCT_YY_BUFFER_STATE */,undetermined
2138,httpd,UNKNOWN,"/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * ""scanner state"".
 *
 * Returns the top of the stack, or NULL.
 */",undetermined
2139,httpd,UNKNOWN,"/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */",undetermined
2140,httpd,UNKNOWN,/* Begin user sect3 */,undetermined
2141,httpd,UNKNOWN,"/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */",undetermined
2142,httpd,UNKNOWN,"/* This struct is not used in this scanner,
   but its presence is necessary. */",undetermined
2143,httpd,UNKNOWN,"/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */",undetermined
2144,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2145,httpd,UNKNOWN,"/*
 *  ap_expr_scan.l, based on ssl_expr_scan.l from mod_ssl
 */",undetermined
2146,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Expression Scanner
**  _________________________________________________________________
*/",undetermined
2147,httpd,UNKNOWN,"/* Special case for ""unistd.h"", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */",undetermined
2148,httpd,UNKNOWN,/* Holds the entire state of the reentrant scanner. */,undetermined
2149,httpd,UNKNOWN,/* User-defined. Not touched by flex. */,undetermined
2150,httpd,UNKNOWN,/* The rest are the same as the globals declared in the non-reentrant scanner. */,undetermined
2151,httpd,UNKNOWN,/**< index of top of stack. */,undetermined
2152,httpd,UNKNOWN,/**< capacity of stack. */,undetermined
2153,httpd,UNKNOWN,/**< Stack as an array. */,undetermined
2154,httpd,UNKNOWN,/* end struct yyguts_t */,undetermined
2155,httpd,UNKNOWN,"/* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/",undetermined
2156,httpd,UNKNOWN,"/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */",undetermined
2157,httpd,UNKNOWN,"/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */",undetermined
2158,httpd,UNKNOWN,/* Amount of stuff to slurp up with each read. */,undetermined
2159,httpd,UNKNOWN,"/* On IA-64, the buffer size is 16k, not 8k */",undetermined
2160,httpd,UNKNOWN,/* __ia64__ */,undetermined
2161,httpd,UNKNOWN,/* Copy whatever the last rule matched to the standard output. */,undetermined
2162,httpd,UNKNOWN,"/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */",undetermined
2163,httpd,UNKNOWN,"/* Gets input and stuffs it into ""buf"".  number of characters read, or YY_NULL,
 * is returned in ""result"".
 */",undetermined
2164,httpd,UNKNOWN,"/* No semi-colon after return; correct usage is to write ""yyterminate();"" -
 * we don't want an extra ';' after the ""return"" because that will cause
 * some compilers to complain about unreachable statements.
 */",undetermined
2165,httpd,UNKNOWN,/* Number of entries by which start-condition stack grows. */,undetermined
2166,httpd,UNKNOWN,/* Report a fatal error. */,undetermined
2167,httpd,UNKNOWN,/* end tables serialization structures and prototypes */,undetermined
2168,httpd,UNKNOWN,"/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */",undetermined
2169,httpd,UNKNOWN,/* !YY_DECL */,undetermined
2170,httpd,UNKNOWN,"/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */",undetermined
2171,httpd,UNKNOWN,/* Code executed at the end of each rule. */,undetermined
2172,httpd,UNKNOWN,"/** The main scanner function which does all the work.
 */",undetermined
2173,httpd,UNKNOWN,"/*
  * Set initial state for string expressions
  */",undetermined
2174,httpd,UNKNOWN,"/*
  * Whitespaces
  */",undetermined
2175,httpd,UNKNOWN,/* first start state */,undetermined
2176,httpd,UNKNOWN,/* loops until end-of-file is reached */,undetermined
2177,httpd,UNKNOWN,/* Support of yytext. */,undetermined
2178,httpd,UNKNOWN,"/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */",undetermined
2179,httpd,UNKNOWN,/* This label is used only to access EOF actions. */,undetermined
2180,httpd,UNKNOWN,/* beginning of action switch */,undetermined
2181,httpd,UNKNOWN,/* must back up */,undetermined
2182,httpd,UNKNOWN,/* undo the effects of YY_DO_BEFORE_ACTION */,undetermined
2183,httpd,UNKNOWN,/* rule 1 can match eol */,undetermined
2184,httpd,UNKNOWN,/* NOP */,undetermined
2185,httpd,UNKNOWN,"/*
  * strings (""..."" and '...')
  */",undetermined
2186,httpd,UNKNOWN,/* return what we have so far and scan delimiter again */,undetermined
2187,httpd,UNKNOWN,/* rule 4 can match eol */,undetermined
2188,httpd,UNKNOWN,/* rule 12 can match eol */,undetermined
2189,httpd,UNKNOWN,/* regexp backref inside string/arg */,undetermined
2190,httpd,UNKNOWN,/* return what we have so far and scan '$x' again */,undetermined
2191,httpd,UNKNOWN,/* variable inside string/arg */,undetermined
2192,httpd,UNKNOWN,/* return what we have so far and scan '%{' again */,undetermined
2193,httpd,UNKNOWN,"/*
  * fixed name variable expansion %{XXX} and function call in %{func:arg} syntax
  */",undetermined
2194,httpd,UNKNOWN,/* rule 23 can match eol */,undetermined
2195,httpd,UNKNOWN,/* return what we have so far and scan '}' again */,undetermined
2196,httpd,UNKNOWN,"/*
  * Regular Expression
  */",undetermined
2197,httpd,UNKNOWN,/* rule 27 can match eol */,undetermined
2198,httpd,UNKNOWN,/* rule 29 can match eol */,undetermined
2199,httpd,UNKNOWN,"/*
  * Operators
  */",undetermined
2200,httpd,UNKNOWN,/* for compatibility with ssl_expr */,undetermined
2201,httpd,UNKNOWN,"/*
  * Specials
  */",undetermined
2202,httpd,UNKNOWN,"/*
  * Digits
  */",undetermined
2203,httpd,UNKNOWN,"/*
  * Identifiers
  */",undetermined
2204,httpd,UNKNOWN,"/*
  * These are parts of the grammar and are returned as is
  */",undetermined
2205,httpd,UNKNOWN,"/*
  * Anything else is an error
  */",undetermined
2206,httpd,UNKNOWN,/* rule 66 can match eol */,undetermined
2207,httpd,UNKNOWN,/* Amount of text matched not including the EOB char. */,undetermined
2208,httpd,UNKNOWN,/* Undo the effects of YY_DO_BEFORE_ACTION. */,undetermined
2209,httpd,UNKNOWN,"/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ap_expr_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */",undetermined
2210,httpd,UNKNOWN,"/* Note that here we test for yy_c_buf_p ""<="" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */",undetermined
2211,httpd,UNKNOWN,/* This was really a NUL. */,undetermined
2212,httpd,UNKNOWN,"/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */",undetermined
2213,httpd,UNKNOWN,/* Consume the NUL. */,undetermined
2214,httpd,UNKNOWN,"/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */",undetermined
2215,httpd,UNKNOWN,/* end of action switch */,undetermined
2216,httpd,UNKNOWN,/* end of scanning one token */,undetermined
2217,httpd,UNKNOWN,/* end of ap_expr_yylex */,undetermined
2218,httpd,UNKNOWN,"/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */",undetermined
2219,httpd,UNKNOWN,"/* Don't try to fill the buffer, so this is an EOF. */",undetermined
2220,httpd,UNKNOWN,"/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */",undetermined
2221,httpd,UNKNOWN,"/* We matched some text prior to the EOB, first
			 * process it.
			 */",undetermined
2222,httpd,UNKNOWN,/* Try to read more data. */,undetermined
2223,httpd,UNKNOWN,/* First move last chars to start of buffer. */,undetermined
2224,httpd,UNKNOWN,"/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */",undetermined
2225,httpd,UNKNOWN,/* Not enough room in the buffer - grow it. */,undetermined
2226,httpd,UNKNOWN,/* just a shorter name for the current buffer */,undetermined
2227,httpd,UNKNOWN,/* Include room in for 2 EOB chars. */,undetermined
2228,httpd,UNKNOWN,"/* Can't grow it, we don't own it. */",undetermined
2229,httpd,UNKNOWN,/* Read in more data. */,undetermined
2230,httpd,UNKNOWN,"/* Extend the array by 50%, plus the number we really need. */",undetermined
2231,httpd,UNKNOWN,/* yy_get_previous_state - get the state just before the EOB char was reached */,undetermined
2232,httpd,UNKNOWN,"/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */",undetermined
2233,httpd,UNKNOWN,/* This var may be unused depending upon options. */,undetermined
2234,httpd,UNKNOWN,"/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */",undetermined
2235,httpd,UNKNOWN,/* This was really a NUL. */,undetermined
2236,httpd,UNKNOWN,/* need more input */,undetermined
2237,httpd,UNKNOWN,"/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */",undetermined
2238,httpd,UNKNOWN,/* Reset buffer status. */,undetermined
2239,httpd,UNKNOWN,/*FALLTHROUGH*/,undetermined
2240,httpd,UNKNOWN,/* cast for 8-bit char's */,undetermined
2241,httpd,UNKNOWN,/* preserve yytext */,undetermined
2242,httpd,UNKNOWN,/* ifndef YY_NO_INPUT */,undetermined
2243,httpd,UNKNOWN,"/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */",undetermined
2244,httpd,UNKNOWN,"/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */",undetermined
2245,httpd,UNKNOWN,"/* TODO. We should be able to replace this entire function body
	 * with
	 *		ap_expr_yypop_buffer_state();
	 *		ap_expr_yypush_buffer_state(new_buffer);
     */",undetermined
2246,httpd,UNKNOWN,/* Flush out information for old buffer. */,undetermined
2247,httpd,UNKNOWN,"/* We don't actually know whether we did this switch during
	 * EOF (ap_expr_yywrap()) processing, but the only time this flag
	 * is looked at is after ap_expr_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */",undetermined
2248,httpd,UNKNOWN,"/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */",undetermined
2249,httpd,UNKNOWN,"/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */",undetermined
2250,httpd,UNKNOWN,"/** Destroy the buffer.
 * @param b a buffer created with ap_expr_yy_create_buffer()
 * @param yyscanner The scanner object.
 */",undetermined
2251,httpd,UNKNOWN,/* Not sure if we should pop here. */,undetermined
2252,httpd,UNKNOWN,"/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ap_expr_yyrestart() or at EOF.
 */",undetermined
2253,httpd,UNKNOWN,"/* If b is the current buffer, then ap_expr_yy_init_buffer was _probably_
     * called from ap_expr_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */",undetermined
2254,httpd,UNKNOWN,"/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */",undetermined
2255,httpd,UNKNOWN,"/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */",undetermined
2256,httpd,UNKNOWN,"/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */",undetermined
2257,httpd,UNKNOWN,/* This block is copied from ap_expr_yy_switch_to_buffer. */,undetermined
2258,httpd,UNKNOWN,/* Flush out information for old buffer. */,undetermined
2259,httpd,UNKNOWN,"/* Only push if top exists. Otherwise, replace top. */",undetermined
2260,httpd,UNKNOWN,/* copied from ap_expr_yy_switch_to_buffer. */,undetermined
2261,httpd,UNKNOWN,"/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */",undetermined
2262,httpd,UNKNOWN,"/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */",undetermined
2263,httpd,UNKNOWN,"/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */",undetermined
2264,httpd,UNKNOWN,/* Increase the buffer to prepare for a possible push. */,undetermined
2265,httpd,UNKNOWN,/* arbitrary grow size */,undetermined
2266,httpd,UNKNOWN,/* zero only the new slots.*/,undetermined
2267,httpd,UNKNOWN,"/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */",undetermined
2268,httpd,UNKNOWN,/* They forgot to leave room for the EOB's. */,undetermined
2269,httpd,UNKNOWN,"/* ""- 2"" to take care of EOB's */",undetermined
2270,httpd,UNKNOWN,"/** Setup the input buffer state to scan a string. The next call to ap_expr_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ap_expr_yy_scan_bytes() instead.
 */",undetermined
2271,httpd,UNKNOWN,"/** Setup the input buffer state to scan the given bytes. The next call to ap_expr_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */",undetermined
2272,httpd,UNKNOWN,"/* Get memory for full buffer, including space for trailing EOB's. */",undetermined
2273,httpd,UNKNOWN,"/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */",undetermined
2274,httpd,UNKNOWN,/* Redefine yyless() so it works in section 3 code. */,undetermined
2275,httpd,UNKNOWN,/* Undo effects of setting up yytext. */,undetermined
2276,httpd,UNKNOWN,/* Accessor  methods (get/set functions) to struct members. */,undetermined
2277,httpd,UNKNOWN,"/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */",undetermined
2278,httpd,UNKNOWN,"/** Get the current line number.
 * @param yyscanner The scanner object.
 */",undetermined
2279,httpd,UNKNOWN,"/** Get the current column number.
 * @param yyscanner The scanner object.
 */",undetermined
2280,httpd,UNKNOWN,"/** Get the input stream.
 * @param yyscanner The scanner object.
 */",undetermined
2281,httpd,UNKNOWN,"/** Get the output stream.
 * @param yyscanner The scanner object.
 */",undetermined
2282,httpd,UNKNOWN,"/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */",undetermined
2283,httpd,UNKNOWN,"/** Get the current token.
 * @param yyscanner The scanner object.
 */",undetermined
2284,httpd,UNKNOWN,"/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */",undetermined
2285,httpd,UNKNOWN,"/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */",undetermined
2286,httpd,UNKNOWN,/* lineno is only valid if an input buffer exists. */,undetermined
2287,httpd,UNKNOWN,"/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */",undetermined
2288,httpd,UNKNOWN,"/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ap_expr_yy_switch_to_buffer
 */",undetermined
2289,httpd,UNKNOWN,/* Accessor methods for yylval and yylloc */,undetermined
2290,httpd,UNKNOWN,/* User-visible API */,undetermined
2291,httpd,UNKNOWN,"/* ap_expr_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */",undetermined
2292,httpd,UNKNOWN,"/* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */",undetermined
2293,httpd,UNKNOWN,"/* ap_expr_yylex_init_extra has the same functionality as ap_expr_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ap_expr_yyalloc in
 * the yyextra field.
 */",undetermined
2294,httpd,UNKNOWN,"/* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */",undetermined
2295,httpd,UNKNOWN,"/* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ap_expr_yylex_destroy(), so don't allocate here.
     */",undetermined
2296,httpd,UNKNOWN,/* Defined in main.c */,undetermined
2297,httpd,UNKNOWN,"/* For future reference: Set errno on error, since we are called by
     * ap_expr_yylex_init()
     */",undetermined
2298,httpd,UNKNOWN,/* ap_expr_yylex_destroy is for both reentrant and non-reentrant scanners. */,undetermined
2299,httpd,UNKNOWN,"/* Pop the buffer stack, destroying each element. */",undetermined
2300,httpd,UNKNOWN,/* Destroy the stack itself. */,undetermined
2301,httpd,UNKNOWN,/* Destroy the start condition stack. */,undetermined
2302,httpd,UNKNOWN,"/* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ap_expr_yylex() is called, initialization will occur. */",undetermined
2303,httpd,UNKNOWN,/* Destroy the main struct (reentrant only). */,undetermined
2304,httpd,UNKNOWN,"/*
 * Internal utility routines.
 */",undetermined
2305,httpd,UNKNOWN,"/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */",undetermined
2306,httpd,UNKNOWN,/* see ap_expr_yyrealloc() for (char *) cast */,undetermined
2307,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2308,httpd,UNKNOWN,"/* NOTE: Apache's current design doesn't allow a pool to be passed thru,
   so we depend on a global to hold the correct pool
*/",undetermined
2309,httpd,UNKNOWN,/* for apr_hook_global_pool */,undetermined
2310,httpd,UNKNOWN,"/*
** This macro returns true/false if a given filter should be inserted BEFORE
** another filter. This will happen when one of: 1) there isn't another
** filter; 2) that filter has a higher filter type (class); 3) that filter
** corresponds to a different request.
*/",undetermined
2311,httpd,UNKNOWN,"/* Trie structure to hold the mapping from registered
 * filter names to filters
 */",undetermined
2312,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
2313,httpd,UNKNOWN,"/* Each trie node has an array of pointers to its children.
 * The array is kept in sorted order so that add_any_filter()
 * can do a binary search
 */",undetermined
2314,httpd,UNKNOWN,"/* Link a trie node to its parent
 */",undetermined
2315,httpd,UNKNOWN,"/* Allocate a new node for a trie.
 * If parent is non-NULL, link the new node under the parent node with
 * key 'c' (or, if an existing child node matches, return that one)
 */",undetermined
2316,httpd,UNKNOWN,/* No parent node */,undetermined
2317,httpd,UNKNOWN,/* f->r must always be NULL for connection filters */,undetermined
2318,httpd,UNKNOWN,"/* If we are adding our first non-connection filter,
                 * Then don't try to find the right location, it is
                 * automatically first.
                 */",undetermined
2319,httpd,UNKNOWN,"/*
 * Read data from the next filter in the filter stack.  Data should be
 * modified in the bucket brigade that is passed in.  The core allocates the
 * bucket brigade, modules that wish to replace large chunks of data or to
 * save data off to the side should probably create their own temporary
 * brigade especially for that use.
 */",undetermined
2320,httpd,UNKNOWN,"/* Pass the buckets to the next filter in the filter stack.  If the
 * current filter is a handler, we should get NULL passed in instead of
 * the current filter.  At that point, we can just call the first filter in
 * the stack, or r->output_filters.
 */",undetermined
2321,httpd,UNKNOWN,"/* This is only safe because HTTP_HEADER filter is always in
             * the filter stack.   This ensures that there is ALWAYS a
             * request-based filter that we can attach this to.  If the
             * HTTP_FILTER is removed, and another filter is not put in its
             * place, then handlers like mod_cgi, which attach their own
             * EOS bucket to the brigade will be broken, because we will
             * get two EOS buckets on the same request.
             */",undetermined
2322,httpd,UNKNOWN,"/* remember the eos for internal redirects, too */",undetermined
2323,httpd,UNKNOWN,"/* Pass the buckets to the next filter in the filter stack
 * checking return status for filter errors.
 * returns: OK if ap_pass_brigade returns APR_SUCCESS
 *          AP_FILTER_ERROR if filter error exists
 *          HTTP_INTERNAL_SERVER_ERROR for all other cases
 *          logged with optional errmsg
 */",undetermined
2324,httpd,UNKNOWN,"/* If have never stored any data in the filter, then we had better
     * create an empty bucket brigade so that we can concat.
     */",undetermined
2325,httpd,UNKNOWN,"/* If the bucket type does not implement setaside, then
         * (hopefully) morph it into a bucket type which does, and set
         * *that* aside... */",undetermined
2326,httpd,UNKNOWN,"/* Return an error but still save the brigade if
             * ->setaside() is really not implemented. */",undetermined
2327,httpd,UNKNOWN,"/* Before invocation of the flush callback, apr_brigade_write et
     * al may place transient buckets in the brigade, which will fall
     * out of scope after returning.  Empty the brigade here, to avoid
     * issues with leaving such buckets in the brigade if some filter
     * fails and leaves a non-empty brigade. */",undetermined
2328,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2329,httpd,UNKNOWN,"/************************************************************************
 * NCSA HTTPd Server
 * Software Development Group
 * National Center for Supercomputing Applications
 * University of Illinois at Urbana-Champaign
 * 605 E. Springfield, Champaign, IL 61820
 * httpd@ncsa.uiuc.edu
 *
 * Copyright  (C)  1995, Board of Trustees of the University of Illinois
 *
 ************************************************************************
 *
 * md5.c: NCSA HTTPd code which uses the md5c.c RSA Code
 *
 *  Original Code Copyright (C) 1994, Jeff Hostetler, Spyglass, Inc.
 *  Portions of Content-MD5 code Copyright (C) 1993, 1994 by Carnegie Mellon
 *     University (see Copyright below).
 *  Portions of Content-MD5 code Copyright (C) 1991 Bell Communications
 *     Research, Inc. (Bellcore) (see Copyright below).
 *  Portions extracted from mpack, John G. Myers - jgm+@cmu.edu
 *  Content-MD5 Code contributed by Martin Hamilton (martin@net.lut.ac.uk)
 *
 */",undetermined
2330,httpd,UNKNOWN,/* md5.c --Module Interface to MD5. */,undetermined
2331,httpd,UNKNOWN,"/* Jeff Hostetler, Spyglass, Inc., 1994. */",undetermined
2332,httpd,UNKNOWN,"/*
     * Take the MD5 hash of the string argument.
     */",undetermined
2333,httpd,UNKNOWN,"/* these portions extracted from mpack, John G. Myers - jgm+@cmu.edu */",undetermined
2334,httpd,UNKNOWN,"/* (C) Copyright 1993,1994 by Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies
 * and that both that copyright notice and this permission notice
 * appear in supporting documentation, and that the name of Carnegie
 * Mellon University not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  Carnegie Mellon University makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided ""as is"" without express or implied
 * warranty.
 *
 * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
 * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */",undetermined
2335,httpd,UNKNOWN,"/*
 * Copyright (c) 1991 Bell Communications Research, Inc. (Bellcore)
 *
 * Permission to use, copy, modify, and distribute this material
 * for any purpose and without fee is hereby granted, provided
 * that the above copyright notice and this permission notice
 * appear in all copies, and that the name of Bellcore not be
 * used in advertising or publicity pertaining to this
 * material without the specific, prior written permission
 * of an authorized representative of Bellcore.  BELLCORE
 * MAKES NO REPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY
 * OF THIS MATERIAL FOR ANY PURPOSE.  IT IS PROVIDED ""AS IS"",
 * WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
 */",undetermined
2336,httpd,UNKNOWN,/* keep this a multiple of 64 */,undetermined
2337,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2338,httpd,UNKNOWN,"/*
 * util_mutex.c: Useful functions for determining allowable
 *               mutexes and mutex settings
 */",undetermined
2339,httpd,UNKNOWN,/* getpid() */,undetermined
2340,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
2341,httpd,UNKNOWN,/* Split arg into meth and file */,undetermined
2342,httpd,UNKNOWN,"/* APR determines temporary filename unless overridden below,
     * we presume file indicates an mutexfile is a file path
     * unless the method sets mutexfile=file and NULLs file
     */",undetermined
2343,httpd,UNKNOWN,"/* NOTE: previously, 'yes' implied 'sem' */",undetermined
2344,httpd,UNKNOWN,"/* Posix/SysV semaphores aren't file based, use the literal name
         * if provided and fall back on APR's default if not.  Today, APR
         * will ignore it, but once supported it has an absurdly short limit.
         */",undetermined
2345,httpd,UNKNOWN,"/* Unless the method above assumed responsibility for setting up
     * mutexfile and NULLing out file, presume it is a file we
     * are looking to use
     */",undetermined
2346,httpd,UNKNOWN,"/* hash is created the first time a module calls ap_mutex_register(),
 * rather than attempting to be the REALLY_REALLY_FIRST pre-config
 * hook; it is cleaned up when the associated pool goes away; assume
 * pconf is the pool passed to ap_mutex_register()
 */",undetermined
2347,httpd,UNKNOWN,/* initialize default mutex configuration */,undetermined
2348,httpd,UNKNOWN,"/* ""none"" */",undetermined
2349,httpd,UNKNOWN,"/* ""OmitPID"" can appear at the end of the list, so build a list of
     * mutex type names while looking for ""OmitPID"" (anywhere) or the end
     */",undetermined
2350,httpd,UNKNOWN,"/* no mutex type?  assume ""default"" */",undetermined
2351,httpd,UNKNOWN,/* in case that was the default */,undetermined
2352,httpd,UNKNOWN,/* retain mutex default if not configured */,undetermined
2353,httpd,UNKNOWN,/* in case this mod's pre-config ran before core's */,undetermined
2354,httpd,UNKNOWN,/* usually NULL */,undetermined
2355,httpd,UNKNOWN,/* usually APR_LOCK_DEFAULT */,undetermined
2356,httpd,UNKNOWN,"/* MUST exist in table, or wasn't registered */",undetermined
2357,httpd,UNKNOWN,"/* order of precedence:
     * 1. Mutex directive for this mutex
     * 2. Mutex directive for ""default""
     * 3. Defaults for this mutex from ap_mutex_register()
     * 4. Global defaults
     */",undetermined
2358,httpd,UNKNOWN,"/* a file-based mutex mechanism was configured, but
         * without a mutex file directory; go back through
         * the chain to find the directory, store in new
         * mutex cfg structure
         */",undetermined
2359,httpd,UNKNOWN,/* !true if dir not already set: mxcfg->set && defcfg->dir */,undetermined
2360,httpd,UNKNOWN,"/*************************************************
 *      Perl-Compatible Regular Expressions      *
 *************************************************/",undetermined
2361,httpd,UNKNOWN,"/*
This is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language. See
the file Tech.Notes for some information on the internals.

This module is a wrapper that provides a POSIX API to the underlying PCRE
functions.

Written by: Philip Hazel <ph10@cam.ac.uk>

           Copyright (c) 1997-2004 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/",undetermined
2362,httpd,UNKNOWN,"/* Table of error strings corresponding to POSIX error codes; must be
 * kept in synch with include/ap_regex.h's AP_REG_E* definitions.
 */",undetermined
2363,httpd,UNKNOWN,/* Dummy for value 0 */,undetermined
2364,httpd,UNKNOWN,/* AP_REG_ASSERT */,undetermined
2365,httpd,UNKNOWN,/* AP_REG_ESPACE */,undetermined
2366,httpd,UNKNOWN,/* AP_REG_INVARG */,undetermined
2367,httpd,UNKNOWN,/* AP_REG_NOMATCH */,undetermined
2368,httpd,UNKNOWN,"/*************************************************
 *           Free store held by a regex          *
 *************************************************/",undetermined
2369,httpd,UNKNOWN,"/*************************************************
 *            Compile a regular expression       *
 *************************************************/",undetermined
2370,httpd,UNKNOWN,"/*
 * Arguments:
 *  preg        points to a structure for recording the compiled expression
 *  pattern     the pattern to compile
 *  cflags      compilation flags
 *
 * Returns:      0 on success
 *               various non-zero codes on failure
*/",undetermined
2371,httpd,UNKNOWN,"/*
         * There doesn't seem to be constants defined for compile time error
         * codes. 21 is ""failed to get memory"" according to pcreapi(3).
         */",undetermined
2372,httpd,UNKNOWN,"/*************************************************
 *              Match a regular expression       *
 *************************************************/",undetermined
2373,httpd,UNKNOWN,"/* Unfortunately, PCRE requires 3 ints of working space for each captured
 * substring, so we have to get and release working store instead of just using
 * the POSIX structures as was done in earlier releases when PCRE needed only 2
 * ints. However, if the number of possible capturing brackets is small, use a
 * block of store on the stack, to reduce the use of malloc/free. The threshold
 * is in a macro that can be changed at configure time.
 */",undetermined
2374,httpd,UNKNOWN,/* Only has meaning after compile */,undetermined
2375,httpd,UNKNOWN,/* All captured slots were filled in */,undetermined
2376,httpd,UNKNOWN,/* End of pcreposix.c */,undetermined
2377,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2378,httpd,UNKNOWN,"/* perl style patterns
     * add support for more as and when wanted
     * substitute: s/rx/subs/
     * match: m/rx/ or just /rx/
     */",undetermined
2379,httpd,UNKNOWN,"/* allow any nonalnum delimiter as first or second char.
     * If we ever use this with non-string pattern we'll need an extra check
     */",undetermined
2380,httpd,UNKNOWN,/* TODO: support perl's after/before */,undetermined
2381,httpd,UNKNOWN,/* FIXME: fix these simplminded delims */,undetermined
2382,httpd,UNKNOWN,/* we think there's a delimiter.  Allow for it not to be if unmatched */,undetermined
2383,httpd,UNKNOWN,/* there's no delim  or flags */,undetermined
2384,httpd,UNKNOWN,/* We have a delimiter.  Use it to extract the regexp */,undetermined
2385,httpd,UNKNOWN,"/* If it's a substitution, we need the replacement string
     * TODO: possible future enhancement - support other parsing
     * in the replacement string.
     */",undetermined
2386,httpd,UNKNOWN,/* missing replacement string is an error */,undetermined
2387,httpd,UNKNOWN,/* anything after the current delimiter is flags */,undetermined
2388,httpd,UNKNOWN,/* we should probably be stricter here */,undetermined
2389,httpd,UNKNOWN,"/* count size of memory required, starting at 1 for the whole-match
         * Simpleminded should be fine 'cos regcomp already checked syntax
         */",undetermined
2390,httpd,UNKNOWN,/* next char is escaped - skip it */,undetermined
2391,httpd,UNKNOWN,/* unescaped bracket implies memory */,undetermined
2392,httpd,UNKNOWN,/* snrf process_regexp from mod_headers */,undetermined
2393,httpd,UNKNOWN,"/* no match, nothing to do */",undetermined
2394,httpd,UNKNOWN,/* FIXME - should we do more to handle error? */,undetermined
2395,httpd,UNKNOWN,/* recurse to do any further matches */,undetermined
2396,httpd,UNKNOWN,/* a further substitution happened */,undetermined
2397,httpd,UNKNOWN,"/* If this blows up on you, see the notes in the header/apidoc
 * rx->match is a pointer and it's your responsibility to ensure
 * it hasn't gone out-of-scope since the last ap_rxplus_exec
 */",undetermined
2398,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2399,httpd,UNKNOWN,/* for sub_req_lookup_uri() */,undetermined
2400,httpd,UNKNOWN,/* For apr_date_parse_http() */,undetermined
2401,httpd,UNKNOWN,"/*
 * Various utility functions which are common to a whole lot of
 * script-type extensions mechanisms, and might as well be gathered
 * in one place (if only to avoid creating inter-module dependancies
 * where there don't have to be).
 */",undetermined
2402,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
2403,httpd,UNKNOWN,"/* use a temporary apr_table_t which we'll overlap onto
     * r->subprocess_env later
     * (exception: if r->subprocess_env is empty at the start,
     * write directly into it)
     */",undetermined
2404,httpd,UNKNOWN,"/* First, add environment vars from headers... this is as per
     * CGI specs, though other sorts of scripting interfaces see
     * the same vars...
     */",undetermined
2405,httpd,UNKNOWN,"/* A few headers are special cased --- Authorization to prevent
         * rogue scripts from capturing passwords; content-type and -length
         * for no particular reason.
         */",undetermined
2406,httpd,UNKNOWN,"/*
         * You really don't want to disable this check, since it leaves you
         * wide open to CGIs stealing passwords and people viewing them
         * in the environment with ""ps -e"".  But, if you must...
         */",undetermined
2407,httpd,UNKNOWN,"/* HPUX PARISC 2.0W knows both, otherwise redundancy is harmless */",undetermined
2408,httpd,UNKNOWN,/* Some Unix */,undetermined
2409,httpd,UNKNOWN,/* Apache */,undetermined
2410,httpd,UNKNOWN,/* Apache */,undetermined
2411,httpd,UNKNOWN,/* Apache */,undetermined
2412,httpd,UNKNOWN,/* Apache */,undetermined
2413,httpd,UNKNOWN,/* Apache custom error responses. If we have redirected set two new vars */,undetermined
2414,httpd,UNKNOWN,"/* This ""cute"" little function comes about because the path info on
 * filenames and URLs aren't always the same. So we take the two,
 * and find as much of the two that match as possible.
 */",undetermined
2415,httpd,UNKNOWN,"/* Obtain the Request-URI from the original request-line, returning
 * a new string from the request pool containing the URI or """".
 */",undetermined
2416,httpd,UNKNOWN,/* use the request-line */,undetermined
2417,httpd,UNKNOWN,/* skip over the method */,undetermined
2418,httpd,UNKNOWN,/*   and the space(s)   */,undetermined
2419,httpd,UNKNOWN,/* end at next whitespace */,undetermined
2420,httpd,UNKNOWN,"/* Note that the code below special-cases scripts run from includes,
     * because it ""knows"" that the sub_request has been hacked to have the
     * args and path_info of the original request, and not any that may have
     * come with the script URI in the include command.  Ugh.
     */",undetermined
2421,httpd,UNKNOWN,"/*
         * To get PATH_TRANSLATED, treat PATH_INFO as a URI path.
         * Need to re-escape it for this, since the entire URI was
         * un-escaped before we determined where the PATH_INFO began.
         */",undetermined
2422,httpd,UNKNOWN,/* We need to make this a real Windows path name */,undetermined
2423,httpd,UNKNOWN,/* temporary place to hold headers to merge in later */,undetermined
2424,httpd,UNKNOWN,"/* The HTTP specification says that it is legal to merge duplicate
     * headers into one.  Some browsers that support Cookies don't like
     * merged headers and prefer that each Set-Cookie header is sent
     * separately.  Lets humour those browsers by not merging.
     * Oh what a pain it is.
     */",undetermined
2425,httpd,UNKNOWN,/* Delete terminal (CR?)LF */,undetermined
2426,httpd,UNKNOWN,"/* Indeed, the host's '\n':
                '\012' for UNIX; '\015' for MacOS; '\025' for OS/390
                 -- whatever the script generates.
             */",undetermined
2427,httpd,UNKNOWN,"/*
         * If we've finished reading the headers, check to make sure any
         * HTTP/1.1 conditions are met.  If so, we're done; normal processing
         * will handle the script's output.  If not, just return the error.
         * The appropriate thing to do would be to send the script process a
         * SIGPIPE to let it know we're ignoring it, close the channel to the
         * script process, and *then* return the failed-to-meet-condition
         * error.  Otherwise we'd be waiting for the script to finish
         * blithering before telling the client the output was no good.
         * However, we don't have the information to do that, so we have to
         * leave it to an upper layer.
         */",undetermined
2428,httpd,UNKNOWN,"/* PR#38070: This fails because it gets confused when a
             * CGI Status header overrides ap_meets_conditions.
             *
             * We can fix that by dropping ap_meets_conditions when
             * Status has been set.  Since this is the only place
             * cgi_status gets used, let's test it explicitly.
             *
             * The alternative would be to ignore CGI Status when
             * ap_meets_conditions returns anything interesting.
             * That would be safer wrt HTTP, but would break CGI.
             */",undetermined
2429,httpd,UNKNOWN,/* the cookies have already been copied to the cookie_table */,undetermined
2430,httpd,UNKNOWN,/* if we see a bogus header don't ignore it. Shout and scream */,undetermined
2431,httpd,UNKNOWN,"/* Chances are that we received an ASCII header text instead of
             * the expected EBCDIC header lines. Try to auto-detect:
             */",undetermined
2432,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
2433,httpd,UNKNOWN,/* Soak up all the script output - may save an outright kill */,undetermined
2434,httpd,UNKNOWN,/* Nuke trailing whitespace */,undetermined
2435,httpd,UNKNOWN,"/*
         * If the script returned a specific status, that's what
         * we'll use - otherwise we assume 200 OK.
         */",undetermined
2436,httpd,UNKNOWN,"/*
         * If the script gave us a Last-Modified header, we can't just
         * pass it on blindly because of restrictions on future values.
         */",undetermined
2437,httpd,UNKNOWN,/* never reached - we leave this function within the while loop above */,undetermined
2438,httpd,UNKNOWN,/* leave room for terminating null */,undetermined
2439,httpd,UNKNOWN,"/* ap_scan_script_header_err_strs() accepts additional const char* args...
 * each is treated as one or more header lines, and the first non-header
 * character is returned to **arg, **data.  (The first optional arg is
 * counted as 0.)
 */",undetermined
2440,httpd,UNKNOWN,/* Split the string in two */,undetermined
2441,httpd,UNKNOWN,/* Skip passed the = */,undetermined
2442,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2443,httpd,UNKNOWN,"/* Number of characters needed to format the microsecond part of a timestamp.
 * Microseconds have 6 digits plus one separator character makes 7.
 *   */",undetermined
2444,httpd,UNKNOWN,/* Length of ISO 8601 date/time */,undetermined
2445,httpd,UNKNOWN,"/* Cache for exploded values of recent timestamps
 */",undetermined
2446,httpd,UNKNOWN,/* please see comments in cached_explode() */,undetermined
2447,httpd,UNKNOWN,"/* the ""+ 1"" is for the current second: */",undetermined
2448,httpd,UNKNOWN,"/* Note that AP_TIME_RECENT_THRESHOLD is defined to
 * be a power of two minus one in util_time.h, so that
 * we can replace a modulo operation with a bitwise AND
 * when hashing items into a cache of size
 * AP_TIME_RECENT_THRESHOLD+1
 */",undetermined
2449,httpd,UNKNOWN,"/* The cache is implemented as a ring buffer.  Each second,
     * it uses a different element in the buffer.  The timestamp
     * in the element indicates whether the element contains the
     * exploded time for the current second (vs the time
     * 'now - AP_TIME_RECENT_THRESHOLD' seconds ago).  If the
     * cached value is for the current time, we use it.  Otherwise,
     * we compute the apr_time_exp_t and store it in this
     * cache element. Note that the timestamp in the cache
     * element is updated only after the exploded time.  Thus
     * if two threads hit this cache element simultaneously
     * at the start of a new second, they'll both explode the
     * time and store it.  I.e., the writers will collide, but
     * they'll be writing the same value.
     */",undetermined
2450,httpd,UNKNOWN,"/* There is an intentional race condition in this design:
         * in a multithreaded app, one thread might be reading
         * from this cache_element to resolve a timestamp from
         * TIME_CACHE_SIZE seconds ago at the same time that
         * another thread is copying the exploded form of the
         * current time into the same cache_element.  (I.e., the
         * first thread might hit this element of the ring buffer
         * just as the element is being recycled.)  This can
         * also happen at the start of a new second, if a
         * reader accesses the cache_element after a writer
         * has updated cache_element.t but before the writer
         * has finished updating the whole cache_element.
         *
         * Rather than trying to prevent this race condition
         * with locks, we allow it to happen and then detect
         * and correct it.  The detection works like this:
         *   Step 1: Take a ""snapshot"" of the cache element by
         *           copying it into a temporary buffer.
         *   Step 2: Check whether the snapshot contains consistent
         *           data: the timestamps at the start and end of
         *           the cache_element should both match the 'seconds'
         *           value that we computed from the input time.
         *           If these three don't match, then the snapshot
         *           shows the cache_element in the middle of an
         *           update, and its contents are invalid.
         *   Step 3: If the snapshot is valid, use it.  Otherwise,
         *           just give up on the cache and explode the
         *           input time.
         */",undetermined
2451,httpd,UNKNOWN,/* Invalid snapshot */,undetermined
2452,httpd,UNKNOWN,/* Valid snapshot */,undetermined
2453,httpd,UNKNOWN,"/* ### This code is a clone of apr_ctime(), except that it
     * uses ap_explode_recent_localtime() instead of apr_time_exp_lt().
     */",undetermined
2454,httpd,UNKNOWN,/* Calculate the needed buffer length */,undetermined
2455,httpd,UNKNOWN,/* Check the provided buffer length */,undetermined
2456,httpd,UNKNOWN,"/* example without options: ""Wed Jun 30 21:49:08 1993"" */",undetermined
2457,httpd,UNKNOWN,/*                           123456789012345678901234  */,undetermined
2458,httpd,UNKNOWN,"/* example for compact format: ""1993-06-30 21:49:08"" */",undetermined
2459,httpd,UNKNOWN,/*                              1234567890123456789  */,undetermined
2460,httpd,UNKNOWN,"/* ### This code is a clone of apr_rfc822_date(), except that it
     * uses ap_explode_recent_gmt() instead of apr_time_exp_gmt().
     */",undetermined
2461,httpd,UNKNOWN,"/* example: ""Sat, 08 Jan 2000 18:31:41 GMT"" */",undetermined
2462,httpd,UNKNOWN,/*           12345678901234567890123456789  */,undetermined
2463,httpd,UNKNOWN,/* This routine isn't y10k ready. */,undetermined
2464,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2465,httpd,UNKNOWN,/* used for reading input blocks */,undetermined
2466,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
2467,httpd,UNKNOWN,"/* read the body, stuffing it into the parser */",undetermined
2468,httpd,UNKNOWN,/* tell the parser that we're done */,undetermined
2469,httpd,UNKNOWN,/* Some parsers are stupid and return an error on blank documents. */,undetermined
2470,httpd,UNKNOWN,/* FALLTHRU */,undetermined
2471,httpd,UNKNOWN,/* make sure the parser is terminated */,undetermined
2472,httpd,UNKNOWN,"/* Apache will supply a default error, plus the error log above. */",undetermined
2473,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2474,httpd,UNKNOWN,"/**
 * @file  vhost.c
 * @brief functions pertaining to virtual host addresses
 *        (configuration and run-time)
 */",undetermined
2475,httpd,UNKNOWN,/* we know core's module_index is 0 */,undetermined
2476,httpd,UNKNOWN,"/*
 * After all the definitions there's an explanation of how it's all put
 * together.
 */",undetermined
2477,httpd,UNKNOWN,"/* meta-list of name-vhosts.  Each server_rec can be in possibly multiple
 * lists of name-vhosts.
 */",undetermined
2478,httpd,UNKNOWN,"/* the record causing it to be in
                                 * this chain (needed for port comparisons) */",undetermined
2479,httpd,UNKNOWN,/* the server to use on a match */,undetermined
2480,httpd,UNKNOWN,"/* meta-list of ip addresses.  Each server_rec can be in possibly multiple
 * hash chains since it can have multiple ips.
 */",undetermined
2481,httpd,UNKNOWN,"/* the record causing it to be in
                                 * this chain (need for both ip addr and port
                                 * comparisons) */",undetermined
2482,httpd,UNKNOWN,/* the server to use if this matches */,undetermined
2483,httpd,UNKNOWN,"/* if non-NULL then a list of name-vhosts
                                 * sharing this address */",undetermined
2484,httpd,UNKNOWN,"/* no runtime use, temporary storage of first
                                 * NVH'es names */",undetermined
2485,httpd,UNKNOWN,"/* This defines the size of the hash table used for hashing ip addresses
 * of virtual hosts.  It must be a power of two.
 */",undetermined
2486,httpd,UNKNOWN,"/* A (n) bucket hash table, each entry has a pointer to a server rec and
 * a pointer to the other entries in that bucket.  Each individual address,
 * even for virtualhosts with multiple addresses, has an entry in this hash
 * table.  There are extra buckets for _default_, and name-vhost entries.
 *
 * Note that after config time this is constant, so it is thread-safe.
 */",undetermined
2487,httpd,UNKNOWN,/* dump out statistics about the hash function */,undetermined
2488,httpd,UNKNOWN,/* #define IPHASH_STATISTICS */,undetermined
2489,httpd,UNKNOWN,/* list of the _default_ servers */,undetermined
2490,httpd,UNKNOWN,/* whether a config error was seen */,undetermined
2491,httpd,UNKNOWN,/* config check function */,undetermined
2492,httpd,UNKNOWN,"/*
 * How it's used:
 *
 * The ip address determines which chain in iphash_table is interesting, then
 * a comparison is done down that chain to find the first ipaddr_chain whose
 * sar matches the address:port pair.
 *
 * If that ipaddr_chain has names == NULL then you're done, it's an ip-vhost.
 *
 * Otherwise it's a name-vhost list, and the default is the server in the
 * ipaddr_chain record.  We tuck away the ipaddr_chain record in the
 * conn_rec field vhost_lookup_data.  Later on after the headers we get a
 * second chance, and we use the name_chain to figure out what name-vhost
 * matches the headers.
 *
 * If there was no ip address match in the iphash_table then do a lookup
 * in the default_list.
 *
 * How it's put together ... well you should be able to figure that out
 * from how it's used.  Or something like that.
 */",undetermined
2493,httpd,UNKNOWN,/* called at the beginning of the config */,undetermined
2494,httpd,UNKNOWN,"/*
 * Parses a host of the form <address>[:port]
 * paddr is used to create a list in the order of input
 * **paddr is the ->next pointer of the last entry (or s->addrs)
 * *paddr is the variable used to keep track of **paddr between calls
 * port is the default port to assume
 */",undetermined
2495,httpd,UNKNOWN,/* wlen must be > 0 at this point */,undetermined
2496,httpd,UNKNOWN,"/* apr_parse_addr_port() doesn't understand "":*"" so handle that first. */",undetermined
2497,httpd,UNKNOWN,"/* If the string is ""80"", apr_parse_addr_port() will be happy and set
     * host to NULL and port to 80, so watch out for that.
     */",undetermined
2498,httpd,UNKNOWN,/* Remember all addresses for the host */,undetermined
2499,httpd,UNKNOWN,/* parse the <VirtualHost> addresses */,undetermined
2500,httpd,UNKNOWN,/* start the list of addreses */,undetermined
2501,httpd,UNKNOWN,/* terminate the list */,undetermined
2502,httpd,UNKNOWN,/* override the default port which is inherited from main_server */,undetermined
2503,httpd,UNKNOWN,"/* hash table statistics, keep this in here for the beta period so
 * we can find out if the hash function is ok
 */",undetermined
2504,httpd,UNKNOWN,/* don't count the slop buckets in the total */,undetermined
2505,httpd,UNKNOWN,"/* This hashing function is designed to get good distribution in the cases
 * where the server is handling entire ""networks"" of servers.  i.e. a
 * whack of /24s.  This is probably the most common configuration for
 * ISPs with large virtual servers.
 *
 * NOTE: This function is symmetric (i.e. collapses all 4 octets
 * into one), so machine byte order (big/little endianness) does not matter.
 *
 * Hash function provided by David Hankins.
 */",undetermined
2506,httpd,UNKNOWN,"/* The key is the last four bytes of the IP address.
     * For IPv4, this is the entire address, as always.
     * For IPv6, this is usually part of the MAC address.
     */",undetermined
2507,httpd,UNKNOWN,/* scan the hash table for an exact match first */,undetermined
2508,httpd,UNKNOWN,"/* don't break, continue looking for an exact match */",undetermined
2509,httpd,UNKNOWN,/* match! */,undetermined
2510,httpd,UNKNOWN,"/* don't break, continue looking for an exact match */",undetermined
2511,httpd,UNKNOWN,/* non-wildcard servers */,undetermined
2512,httpd,UNKNOWN,/* wildcard servers */,undetermined
2513,httpd,UNKNOWN,"/*
 * When a second or later virtual host maps to the same IP chain,
 * add the relevant server names to the chain.  Special care is taken
 * to avoid adding ic->names until we're sure there are multiple VH'es.
 */",undetermined
2514,httpd,UNKNOWN,"/* iterating backwards, so each one we see becomes the current default server */",undetermined
2515,httpd,UNKNOWN,"/* first pass, set these names aside in case we see another VH.
            * Until then, this looks like an IP-based VH to runtime.
            */",undetermined
2516,httpd,UNKNOWN,"/* second pass through this chain -- this really is an NVH, and we
            * have two sets of names to link in.
            */",undetermined
2517,httpd,UNKNOWN,/* 3rd or more -- just keep stacking the names */,undetermined
2518,httpd,UNKNOWN,/* compile the tables and such we need to do the run-time vhost lookups */,undetermined
2519,httpd,UNKNOWN,/* Main host first */,undetermined
2520,httpd,UNKNOWN,/* initialize the tails */,undetermined
2521,httpd,UNKNOWN,"/* The next things to go into the hash table are the virtual hosts
     * themselves.  They're listed off of main_s->next in the reverse
     * order they occured in the config file, so we insert them at
     * the iphash_table_tail but don't advance the tail.
     */",undetermined
2522,httpd,UNKNOWN,/* big enough to handle IPv4 or IPv6 */,undetermined
2523,httpd,UNKNOWN,"/* No default server, or we found a default server but
                    ** exactly one of us is a wildcard port, which means we want
                    ** two ip-based vhosts not an NVH with two names
                    */",undetermined
2524,httpd,UNKNOWN,/* see if it matches something we've already got */,undetermined
2525,httpd,UNKNOWN,"/* No matching server, or we found a matching server but
                    ** exactly one of us is a wildcard port, which means we want
                    ** two ip-based vhosts not an NVH with two names
                    */",undetermined
2526,httpd,UNKNOWN,"/* Ok now we want to set up a server_hostname if the user was
         * silly enough to forget one.
         * XXX: This is silly we should just crash and burn.
         */",undetermined
2527,httpd,UNKNOWN,"/* what else can we do?  at this point this vhost has
                    no configured name, probably because they used
                    DNS in the VirtualHost statement.  It's disabled
                    anyhow by the host matching code.  -djg */",undetermined
2528,httpd,UNKNOWN,"/* again, what can we do?  They didn't specify a
                       ServerName, and their DNS isn't working. -djg */",undetermined
2529,httpd,UNKNOWN,"/*****************************************************************************
 * run-time vhost matching functions
 */",undetermined
2530,httpd,UNKNOWN,"/* Lowercase and remove any trailing dot and/or :port from the hostname,
 * and check that it is sane.
 *
 * In most configurations the exact syntax of the hostname isn't
 * important so strict sanity checking isn't necessary. However, in
 * mass hosting setups (using mod_vhost_alias or mod_rewrite) where
 * the hostname is interpolated into the filename, we need to be sure
 * that the interpolation doesn't expose parts of the filesystem.
 * We don't do strict RFC 952 / RFC 1123 syntax checking in order
 * to support iDNS and people who erroneously use underscores.
 * Instead we just check for filesystem metacharacters: directory
 * separators / and \ and sequences of more than one dot.
 */",undetermined
2531,httpd,UNKNOWN,"/* According to RFC 2616, Host header field CAN be blank. */",undetermined
2532,httpd,UNKNOWN,"/* apr_parse_addr_port will interpret a bare integer as a port
     * which is incorrect in this context.  So treat it separately.
     */",undetermined
2533,httpd,UNKNOWN,/* pure integer */,undetermined
2534,httpd,UNKNOWN,"/* Don't throw the Host: header's port number away:
           save it in parsed_uri -- ap_get_server_port() needs it! */",undetermined
2535,httpd,UNKNOWN,"/* @@@ XXX there should be a better way to pass the port.
         *         Like r->hostname, there should be a r->portno
         */",undetermined
2536,httpd,UNKNOWN,"/* if the hostname is an IPv6 numeric address string, it was validated
     * already; otherwise, further validation is needed
     */",undetermined
2537,httpd,UNKNOWN,/* leave char unchanged */,undetermined
2538,httpd,UNKNOWN,/* strip trailing gubbins */,undetermined
2539,httpd,UNKNOWN,/* return 1 if host matches ServerName or ServerAliases */,undetermined
2540,httpd,UNKNOWN,/* match ServerName */,undetermined
2541,httpd,UNKNOWN,/* search all the aliases from ServerAlias directive */,undetermined
2542,httpd,UNKNOWN,"/* Suppose a request came in on the same socket as this r, and included
 * a header ""Host: host:port"", would it map to r->server?  It's more
 * than just that though.  When we do the normal matches for each request
 * we don't even bother considering Host: etc on non-namevirtualhosts,
 * we just call it a match.  But here we require the host:port to match
 * the ServerName and/or ServerAliases.
 */",undetermined
2543,httpd,UNKNOWN,/* search all the <VirtualHost> values */,undetermined
2544,httpd,UNKNOWN,"/* XXX: If this is a NameVirtualHost then we may not be doing the Right Thing
     * consider:
     *
     *     NameVirtualHost 10.1.1.1
     *     <VirtualHost 10.1.1.1>
     *     ServerName v1
     *     </VirtualHost>
     *     <VirtualHost 10.1.1.1>
     *     ServerName v2
     *     </VirtualHost>
     *
     * Suppose r->server is v2, and we're asked to match ""10.1.1.1"".  We'll say
     * ""yup it's v2"", when really it isn't... if a request came in for 10.1.1.1
     * it would really go to v1.
     */",undetermined
2545,httpd,UNKNOWN,"/* the Port has to match now, because the rest don't have ports associated
     * with them. */",undetermined
2546,httpd,UNKNOWN,"/*
     * Even if the request has a Host: header containing a port we ignore
     * that port.  We always use the physical port of the socket.  There
     * are a few reasons for this:
     *
     * - the default of 80 or 443 for SSL is easier to handle this way
     * - there is less of a possibility of a security problem
     * - it simplifies the data structure
     * - the client may have no idea that a proxy somewhere along the way
     *   translated the request to another ip:port
     * - except for the addresses from the VirtualHost line, none of the other
     *   names we'll match have ports associated with them
     */",undetermined
2547,httpd,UNKNOWN,"/* Recall that the name_chain is a list of server_addr_recs, some of
     * whose ports may not match.  Also each server may appear more than
     * once in the chain -- specifically, it will appear once for each
     * address from its VirtualHost line which matched.  We only want to
     * do the full ServerName/ServerAlias comparisons once for each
     * server, fortunately we know that all the VirtualHost addresses for
     * a single server are adjacent to each other.
     */",undetermined
2548,httpd,UNKNOWN,"/* We only consider addresses on the name_chain which have a matching
         * port
         */",undetermined
2549,httpd,UNKNOWN,"/* If we still need to do ServerName and ServerAlias checks for this
         * server, do them now.
         */",undetermined
2550,httpd,UNKNOWN,/* does it match any ServerName or ServerAlias directive? */,undetermined
2551,httpd,UNKNOWN,/* Fallback: does it match the virthost from the sar? */,undetermined
2552,httpd,UNKNOWN,/* only the first match is used */,undetermined
2553,httpd,UNKNOWN,"/* If ServerName and ServerAlias check failed, we end up here.  If it
     * matches a VirtualHost, virthost_s is set. Use that as fallback
     */",undetermined
2554,httpd,UNKNOWN,"/* s is the first matching server, we're done */",undetermined
2555,httpd,UNKNOWN,"/*
     * This is in conjunction with the ServerPath code in http_core, so we
     * get the right host attached to a non- Host-sending request.
     *
     * See the comment in check_hostalias about how each vhost can be
     * listed multiple times.
     */",undetermined
2556,httpd,UNKNOWN,"/* We only consider addresses on the name_chain which have a matching
         * port
         */",undetermined
2557,httpd,UNKNOWN,/* must set this for HTTP/1.1 support */,undetermined
2558,httpd,UNKNOWN,/* check if we tucked away a name_chain */,undetermined
2559,httpd,UNKNOWN,"/**
 * For every virtual host on this connection, call func_cb.
 */",undetermined
2560,httpd,UNKNOWN,"/* We only consider addresses on the name_chain which have a
             * matching port.
             */",undetermined
2561,httpd,UNKNOWN,/* we've already done a callback for this vhost. */,undetermined
2562,httpd,UNKNOWN,"/* Called for a new connection which has a known local_addr.  Note that the
 * new connection is assumed to have conn->server == main server.
 */",undetermined
2563,httpd,UNKNOWN,/* scan the hash table for an exact match first */,undetermined
2564,httpd,UNKNOWN,/* save the name_chain for later in case this is a name-vhost */,undetermined
2565,httpd,UNKNOWN,"/* maybe there's a default server or wildcard name-based vhost
     * matching this port
     */",undetermined
2566,httpd,UNKNOWN,"/* otherwise we're stuck with just the main server
     * and no name-based vhosts
     */",undetermined
2567,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2568,httpd,UNKNOWN,/* Clean up any pools in the recycled list */,undetermined
2569,httpd,UNKNOWN,"/* If we have been given a pool to recycle, atomically link
     * it into the queue_info's list of recycled pools
     */",undetermined
2570,httpd,UNKNOWN,"/* Save queue_info->recycled_pool in local variable next because
             * new_recycle->next can be changed after apr_atomic_casptr
             * function call. For gory details see PR 44402.
             */",undetermined
2571,httpd,UNKNOWN,/* Atomically increment the count of idle workers */,undetermined
2572,httpd,UNKNOWN,"/* If this thread just made the idle worker count nonzero,
     * wake up the listener. */",undetermined
2573,httpd,UNKNOWN,/* Block if the count of idle workers is zero */,undetermined
2574,httpd,UNKNOWN,"/* Re-check the idle worker count to guard against a
         * race condition.  Now that we're in the mutex-protected
         * region, one of two things may have happened:
         *   - If the idle worker count is still zero, the
         *     workers are all still busy, so it's safe to
         *     block on a condition variable, BUT
         *     we need to check for idle worker count again
         *     when we are signaled since it can happen that
         *     we are signaled by a worker thread that went idle
         *     but received a context switch before it could
         *     tell us. If it does signal us later once it is on
         *     CPU again there might be no idle worker left.
         *     See
         *     https://issues.apache.org/bugzilla/show_bug.cgi?id=45605#c4
         *   - If the idle worker count is nonzero, then a
         *     worker has become idle since the first check
         *     of queue_info->idlers above.  It's possible
         *     that the worker has also signaled the condition
         *     variable--and if so, the listener missed it
         *     because it wasn't yet blocked on the condition
         *     variable.  But if the idle worker count is
         *     now nonzero, it's safe for this function to
         *     return immediately.
         */",undetermined
2575,httpd,UNKNOWN,/* Atomically decrement the idle worker count */,undetermined
2576,httpd,UNKNOWN,/* Atomically pop a pool from the recycled list */,undetermined
2577,httpd,UNKNOWN,"/* This function is safe only as long as it is single threaded because
     * it reaches into the queue and accesses ""next"" which can change.
     * We are OK today because it is only called from the listener thread.
     * cas-based pushes do not have the same limitation - any number can
     * happen concurrently with a single cas-based pop.
     */",undetermined
2578,httpd,UNKNOWN,"/**
 * Detects when the fd_queue_t is full. This utility function is expected
 * to be called from within critical sections, and is not threadsafe.
 */",undetermined
2579,httpd,UNKNOWN,"/**
 * Detects when the fd_queue_t is empty. This utility function is expected
 * to be called from within critical sections, and is not threadsafe.
 */",undetermined
2580,httpd,UNKNOWN,"/**
 * Callback routine that is called to destroy this
 * fd_queue_t when its pool is destroyed.
 */",undetermined
2581,httpd,UNKNOWN,"/* Ignore errors here, we can't do anything about them anyway.
     * XXX: We should at least try to signal an error here, it is
     * indicative of a programmer error. -aaron */",undetermined
2582,httpd,UNKNOWN,"/**
 * Initialize the fd_queue_t.
 */",undetermined
2583,httpd,UNKNOWN,/* Set all the sockets in the queue to NULL */,undetermined
2584,httpd,UNKNOWN,"/**
 * Push a new socket onto the queue.
 *
 * precondition: ap_queue_info_wait_for_idler has already been called
 *               to reserve an idle worker thread
 */",undetermined
2585,httpd,UNKNOWN,"/**
 * Retrieves the next available socket from the queue. If there are no
 * sockets available, it will block until one becomes available.
 * Once retrieved, the socket is placed into the address specified by
 * 'sd'.
 */",undetermined
2586,httpd,UNKNOWN,/* Keep waiting until we wake up and find that the queue is not empty. */,undetermined
2587,httpd,UNKNOWN,"/* If we wake up and it's still empty, then we were interrupted */",undetermined
2588,httpd,UNKNOWN,/* no more elements ever again */,undetermined
2589,httpd,UNKNOWN,/* AP_DEBUG */,undetermined
2590,httpd,UNKNOWN,"/* we must hold one_big_mutex when setting this... otherwise,
     * we could end up setting it and waking everybody up just after a
     * would-be popper checks it but right before they block
     */",undetermined
2591,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2592,httpd,UNKNOWN,"/**
 * @file  worker/fdqueue.h
 * @brief fd queue declarations
 *
 * @addtogroup APACHE_MPM_WORKER
 * @{
 */",undetermined
2593,httpd,UNKNOWN,/* FDQUEUE_H */,undetermined
2594,httpd,UNKNOWN,/** @} */,undetermined
2595,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2596,httpd,UNKNOWN,"/**
 * @file  worker/mpm_default.h
 * @brief Worker MPM defaults
 *
 * @defgroup APACHE_MPM_WORKER Worker MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
2597,httpd,UNKNOWN,"/* Number of servers to spawn off by default --- also, if fewer than
 * this free when the caretaker checks, it will spawn more.
 */",undetermined
2598,httpd,UNKNOWN,"/* Maximum number of *free* server processes --- more than this, and
 * they will die off.
 */",undetermined
2599,httpd,UNKNOWN,"/* Minimum --- fewer than this, and more will be created */",undetermined
2600,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
2601,httpd,UNKNOWN,/** @} */,undetermined
2602,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2603,httpd,UNKNOWN,"/*
    apr_file_pipe_timeout_set((*pod)->pod_in, 0);
*/",undetermined
2604,httpd,UNKNOWN,/* close these before exec. */,undetermined
2605,httpd,UNKNOWN,"/* we need to surface EINTR so we'll have to grab the
     * native file descriptor and do the OS read() ourselves
     */",undetermined
2606,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2607,httpd,UNKNOWN,"/**
 * @file worker/pod.h
 * @brief Worker MPM Pipe of Death
 *
 * @addtogroup APACHE_MPM_WORKER
 * @{
 */",undetermined
2608,httpd,UNKNOWN,/** @} */,undetermined
2609,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2610,httpd,UNKNOWN,"/* The purpose of this MPM is to fix the design flaws in the threaded
 * model.  Because of the way that pthreads and mutex locks interact,
 * it is basically impossible to cleanly gracefully shutdown a child
 * process if multiple threads are all blocked in accept.  This model
 * fixes those problems.
 */",undetermined
2611,httpd,UNKNOWN,/* for bindprocessor() */,undetermined
2612,httpd,UNKNOWN,/* for read_config */,undetermined
2613,httpd,UNKNOWN,/* for get_remote_host */,undetermined
2614,httpd,UNKNOWN,/* for INT_MAX */,undetermined
2615,httpd,UNKNOWN,"/* Limit on the total --- clients will be locked out if more servers than
 * this are needed.  It is intended solely to keep the server from crashing
 * when things get out of hand.
 *
 * We keep a hard maximum number of servers, for two reasons --- first off,
 * in case something goes seriously wrong, we want to stop the fork bomb
 * short of actually crashing the machine we're running on by filling some
 * kernel table.  Secondly, it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
2616,httpd,UNKNOWN,"/* Admin can't tune ServerLimit beyond MAX_SERVER_LIMIT.  We want
 * some sort of compile-time limit to help catch typos.
 */",undetermined
2617,httpd,UNKNOWN,"/* Limit on the threads per process.  Clients will be locked out if more than
 * this  * server_limit are needed.
 *
 * We keep this for one reason it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
2618,httpd,UNKNOWN,"/* Admin can't tune ThreadLimit beyond MAX_THREAD_LIMIT.  We want
 * some sort of compile-time limit to help catch typos.
 */",undetermined
2619,httpd,UNKNOWN,"/*
 * Actual definitions of config globals
 */",undetermined
2620,httpd,UNKNOWN,/* Worker threads per child */,undetermined
2621,httpd,UNKNOWN,"/* data retained by worker across load/unload of the module
 * allocated on first call to pre-config hook; located on
 * subsequent calls to pre-config hook
 */",undetermined
2622,httpd,UNKNOWN,/* set from signal handler */,undetermined
2623,httpd,UNKNOWN,"/*
     * The max child slot ever assigned, preserved across restarts.  Necessary
     * to deal with MaxRequestWorkers changes across AP_SIG_GRACEFUL restarts.
     * We use this value to optimize routines that have to scan the entire
     * scoreboard.
     */",undetermined
2624,httpd,UNKNOWN,"/*
     * idle_spawn_rate is the number of children that will be spawned on the
     * next maintenance cycle if there aren't enough idle servers.  It is
     * doubled up to MAX_SPAWN_RATE, and reset only when a cycle goes by
     * without the need to spawn.
     */",undetermined
2625,httpd,UNKNOWN,/* The structure used to pass unique initialization info to each thread */,undetermined
2626,httpd,UNKNOWN,"/* Structure used to pass information to the thread responsible for
 * creating the rest of the threads.
 */",undetermined
2627,httpd,UNKNOWN,"/* The worker MPM respects a couple of runtime flags that can aid
 * in debugging. Setting the -DNO_DETACH flag will prevent the root process
 * from detaching from its controlling terminal. Additionally, setting
 * the -DONE_PROCESS flag (which implies -DNO_DETACH) will get you the
 * child_main loop running in the process which originally started up.
 * This gives you a pretty nice debugging environment.  (You'll get a SIGHUP
 * early in standalone_main; just continue through.  This is the server
 * trying to kill off any child processes which it might have lying
 * around --- Apache doesn't keep track of their pids, it just sends
 * SIGHUP to the process group, ignoring it in the root process.
 * Continue through and you'll be fine.).
 */",undetermined
2628,httpd,UNKNOWN,/* Pool for config stuff */,undetermined
2629,httpd,UNKNOWN,/* Pool for httpd child stuff */,undetermined
2630,httpd,UNKNOWN,"/* Linux getpid() doesn't work except in main
                           thread. Use this instead */",undetermined
2631,httpd,UNKNOWN,/* Locks for accept serialization */,undetermined
2632,httpd,UNKNOWN,"/* The LISTENER_SIGNAL signal will be sent from the main thread to the
 * listener thread to wake it up for graceful termination (what a child
 * process from an old generation does when the admin does ""apachectl
 * graceful"").  This signal will be blocked in all threads of a child
 * process except for the listener thread.
 */",undetermined
2633,httpd,UNKNOWN,"/* The WORKER_SIGNAL signal will be sent from the main thread to the
 * worker threads during an ungraceful restart or shutdown.
 * This ensures that on systems (i.e., Linux) where closing the worker
 * socket doesn't awake the worker thread when it is polling on the socket
 * (especially in apr_wait_for_io_or_timeout() when handling
 * Keep-Alive connections), close_worker_sockets() and join_workers()
 * still function in timely manner and allow ungraceful shutdowns to
 * proceed to completion.  Otherwise join_workers() doesn't return
 * before the main process decides the child process is non-responsive
 * and sends a SIGKILL.
 */",undetermined
2634,httpd,UNKNOWN,"/* An array of socket descriptors in use by each thread used to
 * perform a non-graceful (forced) shutdown of the server. */",undetermined
2635,httpd,UNKNOWN,"/* XXX there is an obscure path that this doesn't handle perfectly:
         *     right after listener thread is created but before
         *     listener_os_thread is set, the first worker thread hits an
         *     error and starts graceful termination
         */",undetermined
2636,httpd,UNKNOWN,/* unblock the listener if it's waiting for a worker */,undetermined
2637,httpd,UNKNOWN,"/*
     * we should just be able to ""kill(ap_my_pid, LISTENER_SIGNAL)"" on all
     * platforms and wake up the listener thread since it is the only thread
     * with SIGHUP unblocked, but that doesn't work on Linux
     */",undetermined
2638,httpd,UNKNOWN,"/* in case we weren't called from the listener thread, wake up the
     * listener thread
     */",undetermined
2639,httpd,UNKNOWN,"/* for ungraceful termination, let the workers exit now;
     * for graceful termination, the listener thread will notify the
     * workers to exit once it has stopped accepting new connections
     */",undetermined
2640,httpd,UNKNOWN,/* forcefully kill all current connections */,undetermined
2641,httpd,UNKNOWN,/* child had a scoreboard slot? */,undetermined
2642,httpd,UNKNOWN,"/* Don't forget about this exiting child process, or we
     * won't be able to kill it if it doesn't exit by the
     * time the server is shut down.
     */",undetermined
2643,httpd,UNKNOWN,/* a clean exit from a child with proper cleanup */,undetermined
2644,httpd,UNKNOWN,/* slot */,undetermined
2645,httpd,UNKNOWN,"/*****************************************************************
 * Connection structures and accounting...
 */",undetermined
2646,httpd,UNKNOWN,/* volatile because they're updated from a signal handler */,undetermined
2647,httpd,UNKNOWN,"/*
 * ap_start_shutdown() and ap_start_restart(), below, are a first stab at
 * functions to initiate shutdown or restart without relying on signals.
 * Previously this was initiated in sig_term() and restart() signal handlers,
 * but we want to be able to start a shutdown/restart from other sources --
 * e.g. on Win32, from the service manager. Now the service manager can
 * call ap_start_shutdown() or ap_start_restart() as appropiate.  Note that
 * these functions can also be called by the child processes, since global
 * variables are no longer used to pass on the required action to the parent.
 *
 * These should only be called from the parent process itself, since the
 * parent process will use the shutdown_pending and restart_pending variables
 * to determine whether to shutdown or restart. The child process should
 * call signal_parent() directly to tell the parent to die -- this will
 * cause neither of those variable to be set, which the parent will
 * assume means something serious is wrong (which it will be, for the
 * child to force an exit) and so do an exit anyway.
 */",undetermined
2648,httpd,UNKNOWN,"/* Um, is this _probably_ not an error, if the user has
         * tried to do a shutdown twice quickly, so we won't
         * worry about reporting it.
         */",undetermined
2649,httpd,UNKNOWN,/* do a graceful restart if graceful == 1 */,undetermined
2650,httpd,UNKNOWN,/* Probably not an error - don't bother reporting it */,undetermined
2651,httpd,UNKNOWN,"/* For systems following the LFS standard, ignoring SIGXFSZ allows
     * a write() beyond the 2GB limit to fail gracefully with E2BIG
     * rather than terminate the process. */",undetermined
2652,httpd,UNKNOWN,"/* we want to ignore HUPs and AP_SIG_GRACEFUL while we're busy
     * processing one */",undetermined
2653,httpd,UNKNOWN,/* SIGXCPU */,undetermined
2654,httpd,UNKNOWN,/* SIGXFSZ */,undetermined
2655,httpd,UNKNOWN,/* SIGHUP */,undetermined
2656,httpd,UNKNOWN,/* AP_SIG_GRACEFUL */,undetermined
2657,httpd,UNKNOWN,/* AP_SIG_GRACEFUL_STOP */,undetermined
2658,httpd,UNKNOWN,/* SIGPIPE */,undetermined
2659,httpd,UNKNOWN,"/*****************************************************************
 * Here follows a long bunch of generic server bookkeeping stuff...
 */",undetermined
2660,httpd,UNKNOWN,"/*****************************************************************
 * Child process main loop.
 */",undetermined
2661,httpd,UNKNOWN,"/* requests_this_child has gone to zero or below.  See if the admin coded
   ""MaxConnectionsPerChild 0"", and keep going in that case.  Doing it this way
   simplifies the hot path in worker_thread */",undetermined
2662,httpd,UNKNOWN,/* keep going */,undetermined
2663,httpd,UNKNOWN,"/* XXX If specifying SIG_IGN is guaranteed to unblock a syscall,
     *     then we don't need this goofy function.
     */",undetermined
2664,httpd,UNKNOWN,/* common to get these at restart time */,undetermined
2665,httpd,UNKNOWN,/* Pool for per-transaction stuff */,undetermined
2666,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
2667,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
2668,httpd,UNKNOWN,"/* Unblock the signal used to wake this thread up, and set a handler for
     * it.
     */",undetermined
2669,httpd,UNKNOWN,"/* TODO: Switch to a system where threads reuse the results from earlier
       poll calls - manoj */",undetermined
2670,httpd,UNKNOWN,/* TODO: requests_this_child should be synchronized - aaron */,undetermined
2671,httpd,UNKNOWN,"/* the following pops a recycled ptrans pool off a stack
             * if there is one, in addition to reserving a worker thread
             */",undetermined
2672,httpd,UNKNOWN,/* we've been signaled to die now */,undetermined
2673,httpd,UNKNOWN,"/* We've already decremented the idle worker count inside
         * ap_queue_info_wait_for_idler. */",undetermined
2674,httpd,UNKNOWN,/* skip the lock release */,undetermined
2675,httpd,UNKNOWN,"/* Only one listener, so skip the poll */",undetermined
2676,httpd,UNKNOWN,"/* apr_pollset_poll() will only return errors in catastrophic
                     * circumstances. Let's try exiting gracefully, for now. */",undetermined
2677,httpd,UNKNOWN,"/* We can always use pdesc[0], but sockets at position N
                 * could end up completely starved of attention in a very
                 * busy server. Therefore, we round-robin across the
                 * returned set of descriptors. While it is possible that
                 * the returned set of descriptors might flip around and
                 * continue to starve some sockets, we happen to know the
                 * internal pollset implementation retains ordering
                 * stability of the sockets. Thus, the round-robin should
                 * ensure that a socket will eventually be serviced.
                 */",undetermined
2678,httpd,UNKNOWN,"/* Grab a listener record from the client_data of the poll
                 * descriptor, and advance our saved index to round-robin
                 * the next fetch.
                 *
                 * ### hmm... this descriptor might have POLLERR rather
                 * ### than POLLIN
                 */",undetermined
2679,httpd,UNKNOWN,/* while */,undetermined
2680,httpd,UNKNOWN,/* if/else */,undetermined
2681,httpd,UNKNOWN,"/* we can't use a recycled transaction pool this time.
                 * create a new transaction pool */",undetermined
2682,httpd,UNKNOWN,/* later we trash rv and rely on csd to indicate success/failure */,undetermined
2683,httpd,UNKNOWN,"/* E[NM]FILE, ENOMEM, etc */",undetermined
2684,httpd,UNKNOWN,"/* trash the connection; we couldn't queue the connected
                     * socket to a worker
                     */",undetermined
2685,httpd,UNKNOWN,/* common to get these at restart time */,undetermined
2686,httpd,UNKNOWN,/* wake up the main thread */,undetermined
2687,httpd,UNKNOWN,"/* XXX For ungraceful termination/restart, we definitely don't want to
 *     wait for active connections to finish but we may want to wait
 *     for idle workers to get out of the queue code and release mutexes,
 *     since those mutexes are cleaned up pretty soon and some systems
 *     may not react favorably (i.e., segfault) if operations are attempted
 *     on cleaned-up mutexes.
 */",undetermined
2688,httpd,UNKNOWN,/* Pool for per-transaction stuff */,undetermined
2689,httpd,UNKNOWN,"/* We get APR_EOF during a graceful shutdown once all the connections
             * accepted by this server process have been handled.
             */",undetermined
2690,httpd,UNKNOWN,"/* We get APR_EINTR whenever ap_queue_pop() has been interrupted
             * from an explicit call to ap_queue_interrupt_all(). This allows
             * us to unblock threads stuck in ap_queue_pop() when a shutdown
             * is pending.
             *
             * If workers_may_exit is set and this is ungraceful termination/
             * restart, we are bound to get an error on some systems (e.g.,
             * AIX, which sanity-checks mutex operations) since the queue
             * may have already been cleaned up.  Don't log the ""error"" if
             * workers_may_exit is set.
             */",undetermined
2691,httpd,UNKNOWN,/* We got some other error. */,undetermined
2692,httpd,UNKNOWN,/* listener thread doesn't have a thread slot */,undetermined
2693,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
2694,httpd,UNKNOWN,"/* XXX under some circumstances not understood, children can get stuck
 *     in start_threads forever trying to take over slots which will
 *     never be cleaned up; for now there is an APLOG_DEBUG message issued
 *     every so often when this condition occurs
 */",undetermined
2695,httpd,UNKNOWN,"/* We must create the fd queues before we start up the listener
     * and worker threads. */",undetermined
2696,httpd,UNKNOWN,/* threads_per_child does not include the listener thread */,undetermined
2697,httpd,UNKNOWN,/* We are creating threads right now */,undetermined
2698,httpd,UNKNOWN,"/* We let each thread update its own scoreboard entry.  This is
             * done because it lets us deal with tid better.
             */",undetermined
2699,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
2700,httpd,UNKNOWN,/* Start the listener only when there are workers available */,undetermined
2701,httpd,UNKNOWN,/* wait for previous generation to clean up an entry */,undetermined
2702,httpd,UNKNOWN,/* every couple of minutes */,undetermined
2703,httpd,UNKNOWN,"/* What state should this child_main process be listed as in the
     * scoreboard...?
     *  ap_update_child_status_from_indexes(my_child_num, i, SERVER_STARTING,
     *                                      (request_rec *) NULL);
     *
     *  This state should be listed separately in the scoreboard, in some kind
     *  of process_status, not mixed in with the worker threads' status.
     *  ""life_status"" is almost right, but it's in the worker's structure, and
     *  the name could be clearer.   gla
     */",undetermined
2704,httpd,UNKNOWN,"/* deal with a rare timing window which affects waking up the
         * listener thread...  if the signal sent to the listener thread
         * is delivered between the time it verifies that the
         * listener_may_exit flag is clear and the time it enters a
         * blocking syscall, the signal didn't do any good...  work around
         * that by sleeping briefly and sending it again
         */",undetermined
2705,httpd,UNKNOWN,/* listener not dead yet */,undetermined
2706,httpd,UNKNOWN,/* if we ever created this thread */,undetermined
2707,httpd,UNKNOWN,"/* tell it to give up in case it is still
                                * trying to take over slots from a
                                * previous generation
                                */",undetermined
2708,httpd,UNKNOWN,"/* for benefit of any hooks that run as this
                                   * child initializes
                                   */",undetermined
2709,httpd,UNKNOWN,"/*stuff to do before we switch id's, so we have permissions.*/",undetermined
2710,httpd,UNKNOWN,/* done with init critical section */,undetermined
2711,httpd,UNKNOWN,"/* Just use the standard apr_setup_signal_thread to block all signals
     * from being received.  The child processes no longer use signals for
     * any communication with the parent process.
     */",undetermined
2712,httpd,UNKNOWN,/* coding a value of zero means infinity */,undetermined
2713,httpd,UNKNOWN,/* Setup worker threads */,undetermined
2714,httpd,UNKNOWN,"/* clear the storage; we may not create all our threads immediately,
     * and we want a 0 entry to indicate a thread which was not created
     */",undetermined
2715,httpd,UNKNOWN,/* 0 means PTHREAD_CREATE_JOINABLE */,undetermined
2716,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
2717,httpd,UNKNOWN,"/* If we are only running in one_process mode, we will want to
     * still handle signals. */",undetermined
2718,httpd,UNKNOWN,/* Block until we get a terminating signal. */,undetermined
2719,httpd,UNKNOWN,"/* make sure the start thread has finished; signal_threads()
         * and join_workers() depend on that
         */",undetermined
2720,httpd,UNKNOWN,"/* XXX join_start_thread() won't be awakened if one of our
         *     threads encounters a critical error and attempts to
         *     shutdown this child
         */",undetermined
2721,httpd,UNKNOWN,"/* helps us terminate a little more
                           * quickly than the dispatch of the signal thread
                           * beats the Pipe of Death and the browsers
                           */",undetermined
2722,httpd,UNKNOWN,"/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */",undetermined
2723,httpd,UNKNOWN,/* !one_process */,undetermined
2724,httpd,UNKNOWN,"/* remove SIGTERM from the set of blocked signals...  if one of
         * the other threads in the process needs to take us down
         * (e.g., for MaxConnectionsPerChild) it will send us SIGTERM
         */",undetermined
2725,httpd,UNKNOWN,/* Watch for any messages from the parent over the POD */,undetermined
2726,httpd,UNKNOWN,/* see if termination was triggered while we slept */,undetermined
2727,httpd,UNKNOWN,"/* make sure the start thread has finished;
                 * signal_threads() and join_workers depend on that
                 */",undetermined
2728,httpd,UNKNOWN,"/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */",undetermined
2729,httpd,UNKNOWN,/* NOTREACHED */,undetermined
2730,httpd,UNKNOWN,"/* fork didn't succeed.  There's no need to touch the scoreboard;
         * if we were trying to replace a failed child process, then
         * server_main_loop() marked its workers SERVER_DEAD, and if
         * we were trying to replace a child process that exited normally,
         * its worker_thread()s left SERVER_DEAD or SERVER_GRACEFUL behind.
         */",undetermined
2731,httpd,UNKNOWN,"/* In case system resources are maxxed out, we don't want
           Apache running away with the CPU trying to fork over and
           over and over again. */",undetermined
2732,httpd,UNKNOWN,"/* By default, AIX binds to a single processor.  This bit unbinds
         * children which will then bind to another CPU.
         */",undetermined
2733,httpd,UNKNOWN,/* NOTREACHED */,undetermined
2734,httpd,UNKNOWN,/* else */,undetermined
2735,httpd,UNKNOWN,"/* This new child process is squatting on the scoreboard
         * entry owned by an exiting child process, which cannot
         * exit until all active requests complete.
         */",undetermined
2736,httpd,UNKNOWN,/* start up a bunch of children */,undetermined
2737,httpd,UNKNOWN,/* initialize the free_list */,undetermined
2738,httpd,UNKNOWN,"/* Initialization to satisfy the compiler. It doesn't know
         * that threads_per_child is always > 0 */",undetermined
2739,httpd,UNKNOWN,"/* short cut if all active processes have been examined and
             * enough empty scoreboard slots have been found
             */",undetermined
2740,httpd,UNKNOWN,/* XXX any_dying_threads is probably no longer needed    GLA */,undetermined
2741,httpd,UNKNOWN,"/* We consider a starting server as idle because we started it
             * at least a cycle ago, and if it still hasn't finished starting
             * then we're just going to swamp things worse by forking more.
             * So we hopefully won't need to fork more if we count it.
             * This depends on the ordering of SERVER_READY and SERVER_STARTING.
             */",undetermined
2742,httpd,UNKNOWN,"/* XXX just set all_dead_threads in outer for
                                   loop if no pid?  not much else matters */",undetermined
2743,httpd,UNKNOWN,/* no process in the slot */,undetermined
2744,httpd,UNKNOWN,/* or at least one is going away */,undetermined
2745,httpd,UNKNOWN,"/* great! we prefer these, because the new process can
                 * start more threads sooner.  So prioritize this slot
                 * by putting it ahead of any slots with active threads.
                 *
                 * first, make room by moving a slot that's potentially still
                 * in use to the end of the array
                 */",undetermined
2746,httpd,UNKNOWN,"/* slot is still in use - back of the bus
                 */",undetermined
2747,httpd,UNKNOWN,/* XXX if (!ps->quiescing)     is probably more reliable  GLA */,undetermined
2748,httpd,UNKNOWN,"/* Assume this is a transient error, even though it may not be.  Leave
             * the server up in case it is able to serve some requests or the
             * problem will be resolved.
             */",undetermined
2749,httpd,UNKNOWN,"/* looks like a basket case, as no child ever fully initialized; give up.
             */",undetermined
2750,httpd,UNKNOWN,/* the child already logged the failure details */,undetermined
2751,httpd,UNKNOWN,/* Kill off one child */,undetermined
2752,httpd,UNKNOWN,/* terminate the free list */,undetermined
2753,httpd,UNKNOWN,"/* scoreboard is full, can't fork */",undetermined
2754,httpd,UNKNOWN,"/* no threads are ""inactive"" - starting, stopping, etc. */",undetermined
2755,httpd,UNKNOWN,"/* have we reached MaxRequestWorkers, or just getting close? */",undetermined
2756,httpd,UNKNOWN,/* only report this condition once */,undetermined
2757,httpd,UNKNOWN,"/* the next time around we want to spawn twice as many if this
             * wasn't good enough, but not if we've just done a graceful
             */",undetermined
2758,httpd,UNKNOWN,"/* fix race condition found in PR 39311
                 * A child created at the same time as a graceful happens 
                 * can find the lock missing and create a fatal error.
                 * It is not fatal for the last generation to be in this state.
                 */",undetermined
2759,httpd,UNKNOWN,"/* tell perform_idle_server_maintenance to check into this
                 * on the next timer pop
                 */",undetermined
2760,httpd,UNKNOWN,/* non-fatal death... note that it's gone in the scoreboard. */,undetermined
2761,httpd,UNKNOWN,"/* resource shortage, minimize the fork rate */",undetermined
2762,httpd,UNKNOWN,"/* we're still doing a 1-for-1 replacement of dead
                     * children with new children
                     */",undetermined
2763,httpd,UNKNOWN,/* already out of the scoreboard */,undetermined
2764,httpd,UNKNOWN,"/* resource shortage, minimize the fork rate */",undetermined
2765,httpd,UNKNOWN,/* handled */,undetermined
2766,httpd,UNKNOWN,"/* Great, we've probably just lost a slot in the
                 * scoreboard.  Somehow we don't know about this child.
                 */",undetermined
2767,httpd,UNKNOWN,"/* Don't perform idle maintenance when a child dies,
             * only do it when there's a timeout.  Remember only a
             * finite number of children can die, and it's pretty
             * pathological for a lot to die suddenly.
             */",undetermined
2768,httpd,UNKNOWN,"/* we hit a 1 second timeout in which none of the previous
             * generation of children needed to be reaped... so assume
             * they're all done, and pick up the slack if any is left.
             */",undetermined
2769,httpd,UNKNOWN,"/* In any event we really shouldn't do the code below because
             * few of the servers we just started are in the IDLE state
             * yet, so we'd mistakenly create an extra server.
             */",undetermined
2770,httpd,UNKNOWN,/* Initialize cross-process accept lock */,undetermined
2771,httpd,UNKNOWN,"/* fix the generation number in the global score; we just got a new,
         * cleared scoreboard
         */",undetermined
2772,httpd,UNKNOWN,/* Don't thrash... */,undetermined
2773,httpd,UNKNOWN,"/* If we're doing a graceful_restart then we're going to see a lot
     * of children exiting immediately when we get into the main loop
     * below (because we just sent them AP_SIG_GRACEFUL).  This happens pretty
     * rapidly... and for each one that exits we may start a new one, until
     * there are at least min_spare_threads idle threads, counting across
     * all children.  But we may be permitted to start more children than
     * that, so we'll just keep track of how many we're
     * supposed to start up without the 1 second penalty between each fork.
     */",undetermined
2774,httpd,UNKNOWN,"/* give the system some time to recover before kicking into
            * exponential mode */",undetermined
2775,httpd,UNKNOWN,"/* Time to shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */",undetermined
2776,httpd,UNKNOWN,/* Start with SIGTERM */,undetermined
2777,httpd,UNKNOWN,/* cleanup pid file on normal shutdown */,undetermined
2778,httpd,UNKNOWN,"/* Time to gracefully shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */",undetermined
2779,httpd,UNKNOWN,"/* Close our listeners, and then ask our children to do same */",undetermined
2780,httpd,UNKNOWN,/* cleanup pid file on normal shutdown */,undetermined
2781,httpd,UNKNOWN,/* Don't really exit until each child has finished */,undetermined
2782,httpd,UNKNOWN,/* Pause for a second */,undetermined
2783,httpd,UNKNOWN,/* Relieve any children which have now exited */,undetermined
2784,httpd,UNKNOWN,/* Having just one child is enough to stay around */,undetermined
2785,httpd,UNKNOWN,"/* We might be here because we received SIGTERM, either
         * way, try and make sure that all of our processes are
         * really dead.
         */",undetermined
2786,httpd,UNKNOWN,/* we've been told to restart */,undetermined
2787,httpd,UNKNOWN,/* not worth thinking about */,undetermined
2788,httpd,UNKNOWN,/* advance to the next generation */,undetermined
2789,httpd,UNKNOWN,"/* XXX: we really need to make sure this new generation number isn't in
     * use by any of the children.
     */",undetermined
2790,httpd,UNKNOWN,/* wake up the children...time to die.  But we'll have more soon */,undetermined
2791,httpd,UNKNOWN,"/* This is mostly for debugging... so that we know what is still
         * gracefully dealing with existing request.
         */",undetermined
2792,httpd,UNKNOWN,"/* Kill 'em all.  Since the child acts the same on the parents SIGTERM
         * and a SIGHUP, we may as well use the same signal, because some user
         * pthreads are stealing signals from us left and right.
         */",undetermined
2793,httpd,UNKNOWN,/* Start with SIGTERM */,undetermined
2794,httpd,UNKNOWN,"/* This really should be a post_config hook, but the error log is already
 * redirected by that point, so we need to do this in the open_logs phase.
 */",undetermined
2795,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
2796,httpd,UNKNOWN,"/* sigh, want this only the second time around */",undetermined
2797,httpd,UNKNOWN,"/* before we detach, setup crash handlers to log to errorlog */",undetermined
2798,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
2799,httpd,UNKNOWN,"/* you cannot change ServerLimit across a restart; ignore
     * any such attempts
     */",undetermined
2800,httpd,UNKNOWN,/* don't need a startup console version here */,undetermined
2801,httpd,UNKNOWN,"/* you cannot change ThreadLimit across a restart; ignore
     * any such attempts
     */",undetermined
2802,httpd,UNKNOWN,/* don't need a startup console version here */,undetermined
2803,httpd,UNKNOWN,/* ap_daemons_to_start > ap_daemons_limit checked in worker_run() */,undetermined
2804,httpd,UNKNOWN,"/* max_spare_threads < min_spare_threads + threads_per_child
     * checked in worker_run()
     */",undetermined
2805,httpd,UNKNOWN,"/* Our open_logs hook function must run before the core's, or stderr
     * will be redirected to a file, and the messages won't print to the
     * console.
     */",undetermined
2806,httpd,UNKNOWN,"/* we need to set the MPM state before other pre-config hooks use MPM query
     * to retrieve it, so register as REALLY_FIRST
     */",undetermined
2807,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
2808,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
2809,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
2810,httpd,UNKNOWN,/* create per-server config structure */,undetermined
2811,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
2812,httpd,UNKNOWN,/* command apr_table_t */,undetermined
2813,httpd,UNKNOWN,/* register_hooks */,undetermined
2814,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2815,httpd,UNKNOWN,/* for read_config */,undetermined
2816,httpd,UNKNOWN,/* for get_remote_host */,undetermined
2817,httpd,UNKNOWN,/* for ap_update_vhost_given_ip */,undetermined
2818,httpd,UNKNOWN,"/*
 * The Windows MPM uses a queue of completion contexts that it passes
 * between the accept threads and the worker threads. Declare the
 * functions to access the queue and the structures passed on the
 * queue in the header file to enable modules to access them
 * if necessary. The queue resides in the MPM.
 */",undetermined
2819,httpd,UNKNOWN,"/* Queue for managing the passing of winnt_conn_ctx_t between
 * the accept and worker threads.
 */",undetermined
2820,httpd,UNKNOWN,"/* Recycle the completion context.
     * - clear the ptrans pool
     * - put the context on the queue to be consumed by the accept thread
     * Note:
     * context->accept_socket may be in a disconnected but reusable
     * state so -don't- close it.
     */",undetermined
2821,httpd,UNKNOWN,/* Grab a context off the queue */,undetermined
2822,httpd,UNKNOWN,"/* We failed to grab a context off the queue, consider allocating
             * a new one out of the child pool. There may be up to
             * (ap_threads_per_child + num_listeners) contexts in the system
             * at once.
             */",undetermined
2823,httpd,UNKNOWN,"/* All workers are busy, need to wait for one */",undetermined
2824,httpd,UNKNOWN,"/* Wait for a worker to free a context. Once per second, give
                 * the caller a chance to check for shutdown. If the wait
                 * succeeds, get the context off the queue. It must be
                 * available, since there's only one consumer.
                 */",undetermined
2825,httpd,UNKNOWN,/* somewhat-normal condition where threads are busy */,undetermined
2826,httpd,UNKNOWN,"/* should be the unexpected, generic WAIT_FAILED */",undetermined
2827,httpd,UNKNOWN,"/* Allocate another context.
                 * Note: Multiple failures in the next two steps will cause
                 * the pchild pool to 'leak' storage. I don't think this
                 * is worth fixing...
                 */",undetermined
2828,httpd,UNKNOWN,/* Hopefully this is a temporary condition ... */,undetermined
2829,httpd,UNKNOWN,/* Create the transaction pool */,undetermined
2830,httpd,UNKNOWN,/* Got a context from the queue */,undetermined
2831,httpd,UNKNOWN,"/* Windows NT/2000 specific code...
 * Accept processing for on Windows NT uses a producer/consumer queue
 * model. An accept thread accepts connections off the network then issues
 * PostQueuedCompletionStatus() to awake a thread blocked on the ThreadDispatch
 * IOCompletionPort.
 *
 * winnt_accept()
 *    One or more accept threads run in this function, each of which accepts
 *    connections off the network and calls PostQueuedCompletionStatus() to
 *    queue an io completion packet to the ThreadDispatch IOCompletionPort.
 * winnt_get_connection()
 *    Worker threads block on the ThreadDispatch IOCompletionPort awaiting
 *    connections to service.
 */",undetermined
2832,httpd,UNKNOWN,/* 'data' or 'connect' */,undetermined
2833,httpd,UNKNOWN,"/* first, high priority event is an already accepted connection */",undetermined
2834,httpd,UNKNOWN,"/* accf == 0, 'none' */",undetermined
2835,httpd,UNKNOWN,/* target of data or connect upon too many AcceptEx failures */,undetermined
2836,httpd,UNKNOWN,"/* last, low priority event is a not yet accepted connection */",undetermined
2837,httpd,UNKNOWN,"/* The event needs to be removed from the accepted socket,
         * if not removed from the listen socket prior to accept(),
         */",undetermined
2838,httpd,UNKNOWN,/* Hopefully a temporary condition in the provider? */,undetermined
2839,httpd,UNKNOWN,/* Either 'connect' or 'data' */,undetermined
2840,httpd,UNKNOWN,/* Create and initialize the accept socket */,undetermined
2841,httpd,UNKNOWN,/* 'data' */,undetermined
2842,httpd,UNKNOWN,/* (accf == 1) 'connect' */,undetermined
2843,httpd,UNKNOWN,"/* AcceptEx on the completion context. The completion context will be
             * signaled when a connection is accepted.
             */",undetermined
2844,httpd,UNKNOWN,"/* We can get here when:
                     * 1) the client disconnects early
                     * 2) handshake was incomplete
                     */",undetermined
2845,httpd,UNKNOWN,"/* We can get here when:
                     * 1) TransmitFile does not properly recycle the accept socket (typically
                     *    because the client disconnected)
                     * 2) there is VPN or Firewall software installed with
                     *    buggy WSAAccept or WSADuplicateSocket implementation
                     * 3) the dynamic address / adapter has changed
                     * Give five chances, then fall back on AcceptFilter 'none'
                     */",undetermined
2846,httpd,UNKNOWN,/* exit_event triggered or event handle was closed */,undetermined
2847,httpd,UNKNOWN,/* Potential optimization; consider handing off to the worker */,undetermined
2848,httpd,UNKNOWN,"/* Inherit the listen socket settings. Required for
             * shutdown() to work
             */",undetermined
2849,httpd,UNKNOWN,/* Not a failure condition. Keep running. */,undetermined
2850,httpd,UNKNOWN,"/* Get the local & remote address
             * TODO; error check
             */",undetermined
2851,httpd,UNKNOWN,"/* For 'data', craft a bucket for our data result
             * and pass to worker_main as context->overlapped.Pointer
             */",undetermined
2852,httpd,UNKNOWN,/* Adjust the bucket to refer to the actual bytes read */,undetermined
2853,httpd,UNKNOWN,/* (accf = 0)  e.g. 'none' */,undetermined
2854,httpd,UNKNOWN,/* There is no socket reuse without AcceptEx() */,undetermined
2855,httpd,UNKNOWN,"/* This could be a persistent event per-listener rather than
             * per-accept.  However, the event needs to be removed from
             * the target socket if not removed from the listen socket
             * prior to accept(), or the event select is inherited.
             * and must be removed from the accepted socket.
             */",undetermined
2856,httpd,UNKNOWN,"/* not FD_ACCEPT;
                 * exit_event triggered or event handle was closed
                 */",undetermined
2857,httpd,UNKNOWN,"/* A more serious error than 'retry', log it */",undetermined
2858,httpd,UNKNOWN,/* Hopefully a temporary condition in the provider? */,undetermined
2859,httpd,UNKNOWN,"/* Per MSDN, cancel the inherited association of this socket
             * to the WSAEventSelect API, and restore the state corresponding
             * to apr_os_sock_make's default assumptions (really, a flaw within
             * os_sock_make and os_sock_put that it does not query).
             */",undetermined
2860,httpd,UNKNOWN,"/* Restore the state corresponding to apr_os_sock_make's default
         * assumption of timeout -1 (really, a flaw of os_sock_make and
         * os_sock_put that it does not query to determine ->timeout).
         * XXX: Upon a fix to APR, these three statements should disappear.
         */",undetermined
2861,httpd,UNKNOWN,"/* When a connection is received, send an io completion notification
         * to the ThreadDispatchIOCP.
         */",undetermined
2862,httpd,UNKNOWN,"/* Yow, hit an irrecoverable error! Tell the child to die. */",undetermined
2863,httpd,UNKNOWN,/* seed the brigade with AcceptEx read heap bucket */,undetermined
2864,httpd,UNKNOWN,/* also seed the brigade with the client socket. */,undetermined
2865,httpd,UNKNOWN,"/*
 * worker_main()
 * Main entry point for the worker threads. Worker threads block in
 * win*_get_connection() awaiting a connection to service.
 */",undetermined
2866,httpd,UNKNOWN,/* Grab a connection off the network */,undetermined
2867,httpd,UNKNOWN,/* Time for the thread to exit */,undetermined
2868,httpd,UNKNOWN,/* Have we hit MaxConnectionsPerChild connections? */,undetermined
2869,httpd,UNKNOWN,/* ap_run_create_connection closes the socket on failure */,undetermined
2870,httpd,UNKNOWN,"/* follow ap_process_connection(c, context->sock) logic
         * as it left us no chance to reinject our first data bucket.
         */",undetermined
2871,httpd,UNKNOWN,"/*
 * child_main()
 * Entry point for the main control thread for the child process.
 * This thread creates the accept thread, worker threads and
 * monitors the child process for maintenance and shutdown
 * events.
 */",undetermined
2872,httpd,UNKNOWN,"/* Start an accept thread per listener
     * XXX: Why would we have a NULL sd in our listeners?
     */",undetermined
2873,httpd,UNKNOWN,"/* Number of completion_contexts allowed in the system is
     * (ap_threads_per_child + num_listeners). We need the additional
     * completion contexts to prevent server hangs when ThreadsPerChild
     * is configured to something less than or equal to the number
     * of listeners. This is not a usual case, but people have
     * encountered it.
     */",undetermined
2874,httpd,UNKNOWN,/* Now start a thread per listener */,undetermined
2875,httpd,UNKNOWN,"/* A smaller stack is sufficient.
             * To convert to CreateThread, the returned handle cannot be
             * ignored, it must be closed/joined.
             */",undetermined
2876,httpd,UNKNOWN,/* Initialize the child_events */,undetermined
2877,httpd,UNKNOWN,"/*
     * Wait until we have permission to start accepting connections.
     * start_mutex is used to ensure that only one child ever
     * goes into the listen/accept loop at once.
     */",undetermined
2878,httpd,UNKNOWN,"/*
     * Create the worker thread dispatch IOCompletionPort
     */",undetermined
2879,httpd,UNKNOWN,/* Create the worker thread dispatch IOCP */,undetermined
2880,httpd,UNKNOWN,"/*
     * Create the pool of worker threads
     */",undetermined
2881,httpd,UNKNOWN,"/* Save the score board index in ht keyed to the thread handle.
             * We need this when cleaning up threads down below...
             */",undetermined
2882,httpd,UNKNOWN,/* Start the listener only when workers are available */,undetermined
2883,httpd,UNKNOWN,/* Check to see if the child has been told to exit */,undetermined
2884,httpd,UNKNOWN,"/* wait for previous generation to clean up an entry in the scoreboard
         */",undetermined
2885,httpd,UNKNOWN,"/* Wait for one of three events:
     * exit_event:
     *    The exit_event is signaled by the parent process to notify
     *    the child that it is time to exit.
     *
     * max_requests_per_child_event:
     *    This event is signaled by the worker threads to indicate that
     *    the process has handled MaxConnectionsPerChild connections.
     *
     * TIMEOUT:
     *    To do periodic maintenance on the server (check for thread exits,
     *    number of completion contexts, etc.)
     *
     * XXX: thread exits *aren't* being checked.
     *
     * XXX: other_child - we need the process handles to the other children
     *      in order to map them to apr_proc_other_child_read (which is not
     *      named well, it's more like a_p_o_c_died.)
     *
     * XXX: however - if we get a_p_o_c handle inheritance working, and
     *      the parent process creates other children and passes the pipes
     *      to our worker processes, then we have no business doing such
     *      things in the child_main loop, but should happen in master_main.
     */",undetermined
2886,httpd,UNKNOWN,/* Something serious is wrong */,undetermined
2887,httpd,UNKNOWN,/* Exit event was signaled */,undetermined
2888,httpd,UNKNOWN,"/* MaxConnectionsPerChild event set by the worker threads.
             * Signal the parent to restart
             */",undetermined
2889,httpd,UNKNOWN,"/*
     * Time to shutdown the child process
     */",undetermined
2890,httpd,UNKNOWN,"/* Close the listening sockets. Note, we must close the listeners
     * before closing any accept sockets pending in AcceptEx to prevent
     * memory leaks in the kernel.
     */",undetermined
2891,httpd,UNKNOWN,"/* Shutdown listener threads and pending AcceptEx sockets
     * but allow the worker threads to continue consuming from
     * the queue of accepted connections.
     */",undetermined
2892,httpd,UNKNOWN,/* Tell the worker threads to exit */,undetermined
2893,httpd,UNKNOWN,"/* Release the start_mutex to let the new process (in the restart
     * scenario) a chance to begin accepting and servicing requests
     */",undetermined
2894,httpd,UNKNOWN,"/* Shutdown the worker threads
     * Post worker threads blocked on the ThreadDispatch IOCompletion port
     */",undetermined
2895,httpd,UNKNOWN,/* Empty the accept queue of completion contexts */,undetermined
2896,httpd,UNKNOWN,"/* Give busy threads a chance to service their connections
     * (no more than the global server timeout period which
     * we track in msec remaining).
     */",undetermined
2897,httpd,UNKNOWN,"/* Every time we roll over to wait on the first group
         * of MAXIMUM_WAIT_OBJECTS threads, take a breather,
         * and infrequently update the error log.
         */",undetermined
2898,httpd,UNKNOWN,/* Every 30 seconds give an update */,undetermined
2899,httpd,UNKNOWN,"/* We'll poll from the top, 10 times per second */",undetermined
2900,httpd,UNKNOWN,"/* Fairness, on each iteration we will pick up with the thread
         * after the one we just removed, even if it's a single thread.
         * We don't block here.
         */",undetermined
2901,httpd,UNKNOWN,/* none ready */,undetermined
2902,httpd,UNKNOWN,"/* We just got the ownership of the object, which
             * should happen at most MAXIMUM_WAIT_OBJECTS times.
             * It does NOT mean that the object is signaled.
             */",undetermined
2903,httpd,UNKNOWN,/* Kill remaining threads off the hard way */,undetermined
2904,httpd,UNKNOWN,/* Reset the scoreboard entry for the thread we just whacked */,undetermined
2905,httpd,UNKNOWN,/* def WIN32 */,undetermined
2906,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2907,httpd,UNKNOWN,"/**
 * @file  winnt/mpm_default.h
 * @brief win32 MPM defaults
 *
 * @defgroup APACHE_MPM_WINNT WinNT MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
2908,httpd,UNKNOWN,"/* Default limit on the maximum setting of the ThreadsPerChild configuration
 * directive.  This limit can be overridden with the ThreadLimit directive.
 * This limit directly influences the amount of shared storage that is allocated
 * for the scoreboard. DEFAULT_THREAD_LIMIT represents a good compromise
 * between scoreboard size and the ability of the server to handle the most
 * common installation requirements.
 */",undetermined
2909,httpd,UNKNOWN,"/* The ThreadLimit directive can be used to override the DEFAULT_THREAD_LIMIT.
 * ThreadLimit cannot be tuned larger than MAX_THREAD_LIMIT.
 * This is a sort of compile-time limit to help catch typos.
 */",undetermined
2910,httpd,UNKNOWN,"/* Number of threads started in the child process in the absence
 * of a ThreadsPerChild configuration directive
 */",undetermined
2911,httpd,UNKNOWN,"/* Max number of child processes allowed.
 */",undetermined
2912,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
2913,httpd,UNKNOWN,/** @} */,undetermined
2914,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
2915,httpd,UNKNOWN,/* for read_config */,undetermined
2916,httpd,UNKNOWN,/* for get_remote_host */,undetermined
2917,httpd,UNKNOWN,/* missing on MinGW */,undetermined
2918,httpd,UNKNOWN,"/* Because ap_setup_listeners() is skipped in the child, any merging
 * of [::]:80 and 0.0.0.0:80 for AP_ENABLE_V4_MAPPED in the parent
 * won't have taken place in the child, so the child will expect to
 * read two sockets for ""Listen 80"" but the parent will send only
 * one.
 */",undetermined
2919,httpd,UNKNOWN,"/* scoreboard.c does the heavy lifting; all we do is create the child
 * score by moving a handle down the pipe into the child's stdin.
 */",undetermined
2920,httpd,UNKNOWN,/* my_generation is returned to the scoreboard code */,undetermined
2921,httpd,UNKNOWN,/* Definitions of WINNT MPM specific config globals */,undetermined
2922,httpd,UNKNOWN,/* used to signal the parent to shutdown */,undetermined
2923,httpd,UNKNOWN,/* used to signal the parent to restart */,undetermined
2924,httpd,UNKNOWN,/* VER_PLATFORM_WIN32_NT */,undetermined
2925,httpd,UNKNOWN,/* set by child_main to STACK_SIZE_PARAM_IS_A_RESERVATION for NT >= 5.1 (XP/2003) */,undetermined
2926,httpd,UNKNOWN,/* used by parent to signal the child to start and exit */,undetermined
2927,httpd,UNKNOWN,"/* shared by service.c as global, although
 * perhaps it should be private.
 */",undetermined
2928,httpd,UNKNOWN,"/* Only one of these, the pipe from our parent, meant only for
 * one child worker's consumption (not to be inherited!)
 * XXX: decorate this name for the trunk branch, was left simplified
 *      only to make the 2.2 patch trivial to read.
 */",undetermined
2929,httpd,UNKNOWN,"/*
 * Command processors
 */",undetermined
2930,httpd,UNKNOWN,"/*
 * Signalling Apache on NT.
 *
 * Under Unix, Apache can be told to shutdown or restart by sending various
 * signals (HUP, USR, TERM). On NT we don't have easy access to signals, so
 * we use ""events"" instead. The parent apache process goes into a loop
 * where it waits forever for a set of events. Two of those events are
 * called
 *
 *    apPID_shutdown
 *    apPID_restart
 *
 * (where PID is the PID of the apache parent process). When one of these
 * is signalled, the Apache parent performs the appropriate action. The events
 * can become signalled through internal Apache methods (e.g. if the child
 * finds a fatal error and needs to kill its parent), via the service
 * control manager (the control thread will signal the shutdown event when
 * requested to stop the Apache service), from the -k Apache command line,
 * or from any external program which finds the Apache PID from the
 * httpd.pid file.
 *
 * The signal_parent() function, below, is used to signal one of these events.
 * It can be called by any child or parent process, since it does not
 * rely on global variables.
 *
 * On entry, type gives the event to signal. 0 means shutdown, 1 means
 * graceful restart.
 */",undetermined
2931,httpd,UNKNOWN,"/*
 * Initialise the signal names, in the global variables signal_name_prefix,
 * signal_restart_name and signal_shutdown_name.
 */",undetermined
2932,httpd,UNKNOWN,"/* Long enough for apPID_shutdown, where PID is an int */",undetermined
2933,httpd,UNKNOWN,/* This MPM supports only graceful restarts right now */,undetermined
2934,httpd,UNKNOWN,/* This MPM supports only graceful restarts right now */,undetermined
2935,httpd,UNKNOWN,"/* Um, problem, can't signal the parent, which means we can't
         * signal ourselves to die. Ignore for now...
         */",undetermined
2936,httpd,UNKNOWN,/* Same problem as above */,undetermined
2937,httpd,UNKNOWN,"/*
 * Passed the following handles [in sync with send_handles_to_child()]
 *
 *   ready event [signal the parent immediately, then close]
 *   exit event  [save to poll later]
 *   start mutex [signal from the parent to begin accept()]
 *   scoreboard shm handle [to recreate the ap_scoreboard]
 */",undetermined
2938,httpd,UNKNOWN,"/* *** We now do this way back in winnt_rewrite_args
     * pipe = GetStdHandle(STD_INPUT_HANDLE);
     */",undetermined
2939,httpd,UNKNOWN,"/* We must 'initialize' the scoreboard to relink all the
     * process-local pointer arrays into the shared memory block.
     */",undetermined
2940,httpd,UNKNOWN,"/*
 * get_listeners_from_parent()
 * The listen sockets are opened in the parent. This function, which runs
 * exclusively in the child process, receives them from the parent and
 * makes them availeble in the child.
 */",undetermined
2941,httpd,UNKNOWN,/* Set up a default listener if necessary */,undetermined
2942,httpd,UNKNOWN,"/* Open the pipe to the parent process to receive the inherited socket
     * data. The sockets have been set to listening in the parent process.
     *
     * *** We now do this way back in winnt_rewrite_args
     * pipe = GetStdHandle(STD_INPUT_HANDLE);
     */",undetermined
2943,httpd,UNKNOWN,"/* Run the chain of open sockets. For each socket, duplicate it
     * for the target process then send the WSAPROTOCOL_INFO
     * (returned by dup socket) to the child.
     */",undetermined
2944,httpd,UNKNOWN,"/* These NEVER change for the lifetime of this parent
     */",undetermined
2945,httpd,UNKNOWN,/* see waitlist_e */,undetermined
2946,httpd,UNKNOWN,"/* Build the command line. Should look something like this:
     * C:/apache/bin/httpd.exe -f ap_server_confname
     * First, get the path to the executable...
     */",undetermined
2947,httpd,UNKNOWN,"/* Build the args array, only once since it won't change
         * for the lifetime of this parent process.
         */",undetermined
2948,httpd,UNKNOWN,/* Create a pipe to send handles to the child */,undetermined
2949,httpd,UNKNOWN,/* Create the child_ready_event */,undetermined
2950,httpd,UNKNOWN,/* Create the child_exit_event */,undetermined
2951,httpd,UNKNOWN,/* Build the env array */,undetermined
2952,httpd,UNKNOWN,"/*
         * This error is fatal, mop up the child and move on
         * We toggle the child's exit event to cause this child
         * to quit even as it is attempting to start.
         */",undetermined
2953,httpd,UNKNOWN,"/* Important:
     * Give the child process a chance to run before dup'ing the sockets.
     * We have already set the listening sockets noninheritable, but if
     * WSADuplicateSocket runs before the child process initializes
     * the listeners will be inherited anyway.
     */",undetermined
2954,httpd,UNKNOWN,"/*
         * Outch... that isn't a ready signal. It's dead, Jim!
         */",undetermined
2955,httpd,UNKNOWN,"/*
         * This error is fatal, mop up the child and move on
         * We toggle the child's exit event to cause this child
         * to quit even as it is attempting to start.
         */",undetermined
2956,httpd,UNKNOWN,"/***********************************************************************
 * master_main()
 * master_main() runs in the parent process.  It creates the child
 * process which handles HTTP requests then waits on one of three
 * events:
 *
 * restart_event
 * -------------
 * The restart event causes master_main to start a new child process and
 * tells the old child process to exit (by setting the child_exit_event).
 * The restart event is set as a result of one of the following:
 * 1. An apache -k restart command on the command line
 * 2. A command received from Windows service manager which gets
 *    translated into an ap_signal_parent(SIGNAL_PARENT_RESTART)
 *    call by code in service.c.
 * 3. The child process calling ap_signal_parent(SIGNAL_PARENT_RESTART)
 *    as a result of hitting MaxConnectionsPerChild.
 *
 * shutdown_event
 * --------------
 * The shutdown event causes master_main to tell the child process to
 * exit and that the server is shutting down. The shutdown event is
 * set as a result of one of the following:
 * 1. An apache -k shutdown command on the command line
 * 2. A command received from Windows service manager which gets
 *    translated into an ap_signal_parent(SIGNAL_PARENT_SHUTDOWN)
 *    call by code in service.c.
 *
 * child process handle
 * --------------------
 * The child process handle will be signaled if the child process
 * exits for any reason. In a normal running server, the signaling
 * of this event means that the child process has exited prematurely
 * due to a seg fault or other irrecoverable error. For server
 * robustness, master_main will restart the child process under this
 * condtion.
 *
 * master_main uses the child_exit_event to signal the child process
 * to exit.
 **********************************************************************/",undetermined
2957,httpd,UNKNOWN,/* Create a single child process */,undetermined
2958,httpd,UNKNOWN,"/* Update the scoreboard. Note that there is only a single active
     * child at once.
     */",undetermined
2959,httpd,UNKNOWN,/* slot */,undetermined
2960,httpd,UNKNOWN,/* Wait for shutdown or restart events or for child death */,undetermined
2961,httpd,UNKNOWN,/* Something serious is wrong */,undetermined
2962,httpd,UNKNOWN,"/* Hey, this cannot happen */",undetermined
2963,httpd,UNKNOWN,/* shutdown_event signalled */,undetermined
2964,httpd,UNKNOWN,"/* Received a restart event. Prepare the restart_event to be reused
         * then signal the child process to exit.
         */",undetermined
2965,httpd,UNKNOWN,"/* Don't wait to verify that the child process really exits,
         * just move on with the restart.
         */",undetermined
2966,httpd,UNKNOWN,/* The child process exited prematurely due to a fatal error. */,undetermined
2967,httpd,UNKNOWN,"/* HUH? We did exit, didn't we? */",undetermined
2968,httpd,UNKNOWN,/* slot */,undetermined
2969,httpd,UNKNOWN,/* Timeout is milliseconds */,undetermined
2970,httpd,UNKNOWN,/* Tell the caller we do not want to restart */,undetermined
2971,httpd,UNKNOWN,"/* This shutdown is only marginally graceful. We will give the
         * child a bit of time to exit gracefully. If the time expires,
         * the child will be wacked.
         */",undetermined
2972,httpd,UNKNOWN,/* Signal the child processes to exit */,undetermined
2973,httpd,UNKNOWN,/* Tell the caller we do not want to restart */,undetermined
2974,httpd,UNKNOWN,/* Tell the caller we want a restart */,undetermined
2975,httpd,UNKNOWN,"/* service_nt_main_fn needs to append the StartService() args
 * outside of our call stack and thread as the service starts...
 */",undetermined
2976,httpd,UNKNOWN,"/* Remember service_to_start failures to log and fail in pre_config.
 * Remember inst_argc and inst_argv for installing or starting the
 * service after we preflight the config.
 */",undetermined
2977,httpd,UNKNOWN,"/* Handle the following SCM aspects in this phase:
     *
     *   -k runservice [transition in service context only]
     *   -k install
     *   -k config
     *   -k uninstall
     *   -k stop
     *   -k shutdown (same as -k stop). Maintained for backward compatability.
     *
     * We can't leave this phase until we know our identity
     * and modify the command arguments appropriately.
     *
     * We do not care if the .conf file exists or is parsable when
     * attempting to stop or uninstall a service.
     */",undetermined
2978,httpd,UNKNOWN,"/* We wish this was *always* a reservation, but sadly it wasn't so and
     * we couldn't break a hard limit prior to NT Kernel 5.1
     */",undetermined
2979,httpd,UNKNOWN,/* AP_PARENT_PID is only valid in the child */,undetermined
2980,httpd,UNKNOWN,/* This is the child */,undetermined
2981,httpd,UNKNOWN,/* Prevent holding open the (nonexistant) console */,undetermined
2982,httpd,UNKNOWN,"/* The parent gave us stdin, we need to remember this
         * handle, and no longer inherit it at our children
         * (we can't slurp it up now, we just aren't ready yet).
         * The original handle is closed below, at apr_file_dup2()
         */",undetermined
2983,httpd,UNKNOWN,"/* The parent gave us stdout of the NUL device,
         * and expects us to suck up stdin of all of our
         * shared handles and data from the parent.
         * Don't infect child processes with our stdin
         * handle, use another handle to NUL!
         */",undetermined
2984,httpd,UNKNOWN,"/* This child needs the existing stderr opened for logging,
         * already
         */",undetermined
2985,httpd,UNKNOWN,"/* The parent is responsible for providing the
         * COMPLETE ARGUMENTS REQUIRED to the child.
         *
         * No further argument parsing is needed, but
         * for good measure we will provide a simple
         * signal string for later testing.
         */",undetermined
2986,httpd,UNKNOWN,"/* This is the parent, we have a long way to go :-) */",undetermined
2987,httpd,UNKNOWN,/* This behavior is voided by setting real_exit_code to 0 */,undetermined
2988,httpd,UNKNOWN,"/* Rewrite process->argv[];
     *
     * strip out -k signal into signal_arg
     * strip out -n servicename and set the names
     * add default -d serverroot from the path of this executable
     *
     * The end result will look like:
     *
     * The invocation command (%0)
     *     The -d serverroot default from the running executable
     *         The requested service's (-n) registry ConfigArgs
     *             The WinNT SCM's StartService() args
     */",undetermined
2989,httpd,UNKNOWN,"/* WARNING: There is an implict assumption here that the
     * executable resides in ServerRoot or ServerRoot\bin
     */",undetermined
2990,httpd,UNKNOWN,"/* Use process->pool so that the rewritten argv
     * lasts for the lifetime of the server process,
     * because pconf will be destroyed after the
     * initial pre-flight of the config parser.
     */",undetermined
2991,httpd,UNKNOWN,"/* Shortcuts; include the -w option to hold the window open on error.
         * This must not be toggled once we reset ap_real_exit_code to 0!
         */",undetermined
2992,httpd,UNKNOWN,/* Fall through so the Apache main() handles the 'E' arg */,undetermined
2993,httpd,UNKNOWN,/* back up to capture the bad argument */,undetermined
2994,httpd,UNKNOWN,/* Track the number of args actually entered by the user */,undetermined
2995,httpd,UNKNOWN,/* Provide a default 'run' -k arg to simplify signal_arg tests */,undetermined
2996,httpd,UNKNOWN,"/* Start the NT Service _NOW_ because the WinNT SCM is
         * expecting us to rapidly assume control of our own
         * process, the SCM will tell us our service name, and
         * may have extra StartService() command arguments to
         * add for us.
         *
         * The SCM will generally invoke the executable with
         * the c:\win\system32 default directory.  This is very
         * lethal if folks use ServerRoot /foopath on windows
         * without a drive letter.  Change to the default root
         * (path to apache root, above /bin) for safety.
         */",undetermined
2997,httpd,UNKNOWN,"/* Any other process has a console, so we don't to begin
         * a Win9x service until the configuration is parsed and
         * any command line errors are reported.
         *
         * We hold the return value so that we can die in pre_config
         * after logging begins, and the failure can land in the log.
         */",undetermined
2998,httpd,UNKNOWN,"/* Open a null handle to soak stdout in this process.
         * Windows service processes are missing any file handle
         * usable for stdin/out/err.  This was the cause of later
         * trouble with invocations of apr_file_open_stdout()
         */",undetermined
2999,httpd,UNKNOWN,"/* Get the default for any -k option, except run */",undetermined
3000,httpd,UNKNOWN,/* -k install */,undetermined
3001,httpd,UNKNOWN,"/* Attempt to Uninstall, or stop, before
             * we can read the arguments or .conf files
             */",undetermined
3002,httpd,UNKNOWN,"/* Track the args actually entered by the user.
     * These will be used for the -k install parameters, as well as
     * for the -k start service override arguments.
     */",undetermined
3003,httpd,UNKNOWN,"/* Now, do service install or reconfigure then proceed to
     * post_config to test the installed configuration.
     */",undetermined
3004,httpd,UNKNOWN,/* -k config */,undetermined
3005,httpd,UNKNOWN,/* Reconfigure the service */,undetermined
3006,httpd,UNKNOWN,/* -k install */,undetermined
3007,httpd,UNKNOWN,/* Install the service */,undetermined
3008,httpd,UNKNOWN,"/* Handle the following SCM aspects in this phase:
     *
     *   -k runservice [WinNT errors logged from rewrite_args]
     */",undetermined
3009,httpd,UNKNOWN,"/* Initialize shared static objects.
     * TODO: Put config related statics into an sconf structure.
     */",undetermined
3010,httpd,UNKNOWN,"/* XXX: presume proper privilages; one nice thing would be
     * a loud emit if running as ""LocalSystem""/""SYSTEM"" to indicate
     * they should change to a user with write access to logs/ alone.
     */",undetermined
3011,httpd,UNKNOWN,"/* Open a null handle to soak stdout in this process.
         * We need to emulate apr_proc_detach, unix performs this
         * same check in the pre_config hook (although it is
         * arguably premature).  Services already fixed this.
         */",undetermined
3012,httpd,UNKNOWN,/* We want this only in the parent and only the first time around */,undetermined
3013,httpd,UNKNOWN,"/* You cannot change ThreadLimit across a restart; ignore
     * any such attempts.
     */",undetermined
3014,httpd,UNKNOWN,/* Don't need a startup console version here */,undetermined
3015,httpd,UNKNOWN,"/* Handle the following SCM aspects in this phase:
     *
     *   -k install (catch and exit as install was handled in rewrite_args)
     *   -k config  (catch and exit as config was handled in rewrite_args)
     *   -k start
     *   -k restart
     *   -k runservice [Win95, only once - after we parsed the config]
     *
     * because all of these signals are useful _only_ if there
     * is a valid conf\httpd.conf environment to start.
     *
     * We reached this phase by avoiding errors that would cause
     * these options to fail unexpectedly in another process.
     */",undetermined
3016,httpd,UNKNOWN,"/* Service install happens in the rewrite_args hooks. If we
         * made it this far, the server configuration is clean and the
         * service will successfully start.
         */",undetermined
3017,httpd,UNKNOWN,"/* Service reconfiguration happens in the rewrite_args hooks. If we
         * made it this far, the server configuration is clean and the
         * service will successfully start.
         */",undetermined
3018,httpd,UNKNOWN,/* Close the listening sockets. */,undetermined
3019,httpd,UNKNOWN,"/* This code should be run once in the parent and not run
             * across a restart
             */",undetermined
3020,httpd,UNKNOWN,/* returns NULL if invalid (Win95?) */,undetermined
3021,httpd,UNKNOWN,"/* Create shutdown event, apPID_shutdown, where PID is the parent
             * Apache process ID. Shutdown is signaled by 'apache -k shutdown'.
             */",undetermined
3022,httpd,UNKNOWN,"/* Create restart event, apPID_restart, where PID is the parent
             * Apache process ID. Restart is signaled by 'apache -k restart'.
             */",undetermined
3023,httpd,UNKNOWN,"/* Create the start mutex, as an unnamed object for security.
             * Ths start mutex is used during a restart to prevent more than
             * one child process from entering the accept loop at once.
             */",undetermined
3024,httpd,UNKNOWN,"/* Always reset our console handler to be the first, even on a restart
        *  because some modules (e.g. mod_perl) might have set a console
        *  handler to terminate the process.
        */",undetermined
3025,httpd,UNKNOWN,/* parent_pid != my_pid */,undetermined
3026,httpd,UNKNOWN,"/* This really should be a post_config hook, but the error log is already
 * redirected by that point, so we need to do this in the open_logs phase.
 */",undetermined
3027,httpd,UNKNOWN,"/* Initialize shared static objects.
     */",undetermined
3028,httpd,UNKNOWN,"/* We cannot initialize our listeners if we are restarting
     * (the parent process already has glomed on to them)
     * nor should we do so for service reconfiguration
     * (since the service may already be running.)
     */",undetermined
3029,httpd,UNKNOWN,"/* This is a child process, not in single process mode */",undetermined
3030,httpd,UNKNOWN,/* Set up events and the scoreboard */,undetermined
3031,httpd,UNKNOWN,/* Set up the listeners */,undetermined
3032,httpd,UNKNOWN,"/* Done reading from the parent, close that channel */",undetermined
3033,httpd,UNKNOWN,/* Single process mode - this lock doesn't even need to exist */,undetermined
3034,httpd,UNKNOWN,/* Borrow the shutdown_even as our _child_ loop exit event */,undetermined
3035,httpd,UNKNOWN,"/* Default is ""not a restart"" */",undetermined
3036,httpd,UNKNOWN,"/* ### If non-graceful restarts are ever introduced - we need to rerun
     * the pre_mpm hook on subsequent non-graceful restarts.  But Win32
     * has only graceful style restarts - and we need this hook to act
     * the same on Win32 as on Unix.
     */",undetermined
3037,httpd,UNKNOWN,/* Set up the scoreboard. */,undetermined
3038,httpd,UNKNOWN,"/* The child process or in one_process (debug) mode
         */",undetermined
3039,httpd,UNKNOWN,/* A real-honest to goodness parent */,undetermined
3040,httpd,UNKNOWN,/* Shutting down. Clean up... */,undetermined
3041,httpd,UNKNOWN,/* Restart */,undetermined
3042,httpd,UNKNOWN,"/* Our open_logs hook function must run before the core's, or stderr
     * will be redirected to a file, and the messages won't print to the
     * console.
     */",undetermined
3043,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
3044,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
3045,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
3046,httpd,UNKNOWN,/* create per-server config structure */,undetermined
3047,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
3048,httpd,UNKNOWN,/* command apr_table_t */,undetermined
3049,httpd,UNKNOWN,/* register_hooks */,undetermined
3050,httpd,UNKNOWN,/* def WIN32 */,undetermined
3051,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3052,httpd,UNKNOWN,"/**
 * @file  mpm_winnt.h
 * @brief WinNT MPM specific
 *
 * @addtogroup APACHE_MPM_WINNT
 * @{
 */",undetermined
3053,httpd,UNKNOWN,/* From service.c: */,undetermined
3054,httpd,UNKNOWN,/* From nt_eventlog.c: */,undetermined
3055,httpd,UNKNOWN,/* From mpm_winnt.c: */,undetermined
3056,httpd,UNKNOWN,/* From child.c: */,undetermined
3057,httpd,UNKNOWN,/* APACHE_MPM_WINNT_H */,undetermined
3058,httpd,UNKNOWN,/** @} */,undetermined
3059,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3060,httpd,UNKNOWN,"/* What are we going to do in here, bail on the user?  not. */",undetermined
3061,httpd,UNKNOWN,/* The stock message file */,undetermined
3062,httpd,UNKNOWN,"/* Generic message: '%1 %2 %3 %4 %5 %6 %7 %8 %9'
                 * The event code in netmsg.dll is 3299
                 */",undetermined
3063,httpd,UNKNOWN,"/* Create a pipe to send stderr messages to the system error log.
     *
     * _dup2() duplicates the write handle inheritable for us.
     */",undetermined
3064,httpd,UNKNOWN,"/* The code above _will_ corrupt the StdHandle...
     * and we must do so anyways.  We set this up only
     * after we initialized the posix stderr API.
     */",undetermined
3065,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3066,httpd,UNKNOWN,"/* This module ALONE requires the window message API from user.h
 * and the default APR include of windows.h will omit it, so
 * preload the API symbols now...
 */",undetermined
3067,httpd,UNKNOWN,/* Todo; clear up statics */,undetermined
3068,httpd,UNKNOWN,/* primary thread handle of the apache server */,undetermined
3069,httpd,UNKNOWN,/* thread service/monitor handle */,undetermined
3070,httpd,UNKNOWN,/* thread service/monitor ID */,undetermined
3071,httpd,UNKNOWN,/* controller thread init mutex */,undetermined
3072,httpd,UNKNOWN,/* NT service thread kill signal */,undetermined
3073,httpd,UNKNOWN,"/* exit() for Win32 is macro mapped (horrible, we agree) that allows us
 * to catch the non-zero conditions and inform the console process that
 * the application died, and hang on to the console a bit longer.
 *
 * The macro only maps for http_main.c and other sources that include
 * the service.h header, so we best assume it's an error to exit from
 * _any_ other module.
 *
 * If ap_real_exit_code is reset to 0, it will not be set or trigger this
 * behavior on exit.  All service and child processes are expected to
 * reset this flag to zero to avoid undesireable side effects.
 */",undetermined
3074,httpd,UNKNOWN,"/* 30 or less, so can't overflow int */",undetermined
3075,httpd,UNKNOWN,"/* for Interrupt signals, shut down the server.
             * Tell the system we have dealt with the signal
             * without waiting for Apache to terminate.
             */",undetermined
3076,httpd,UNKNOWN,"/* for Terminate signals, shut down the server.
             * Wait for Apache to terminate, but respond
             * after a reasonable time to tell the system
             * that we did attempt to shut ourself down.
             */",undetermined
3077,httpd,UNKNOWN,"/* We should never get here, but this is (mostly) harmless */",undetermined
3078,httpd,UNKNOWN,"/**********************************
  WinNT service control management
 **********************************/",undetermined
3079,httpd,UNKNOWN,/* An unexpected exit?  Better to error! */,undetermined
3080,httpd,UNKNOWN,"/* Note this works on Win2000 and later due to ChangeServiceConfig2
 * Continue to test its existence, but at least drop the feature
 * of revising service description tags prior to Win2000.
 */",undetermined
3081,httpd,UNKNOWN,/* borrowed from mpm_winnt.c */,undetermined
3082,httpd,UNKNOWN,"/* Nothing to do if we are a console
     */",undetermined
3083,httpd,UNKNOWN,"/* Time to fix up the description, upon each successful restart
     */",undetermined
3084,httpd,UNKNOWN,"/* Cast is necessary, ChangeServiceConfig2 handles multiple
             * object types, some volatile, some not.
             */",undetermined
3085,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3086,httpd,UNKNOWN,/* SERVICE_CONFIG_DESCRIPTION */,undetermined
3087,httpd,UNKNOWN,/* handle the SCM's ControlService() callbacks to our service */,undetermined
3088,httpd,UNKNOWN,"/* SHUTDOWN is offered before STOP, accept the first opportunity */",undetermined
3089,httpd,UNKNOWN,"/* service_nt_main_fn is outside of the call stack and outside of the
 * primary server thread... so now we _really_ need a placeholder!
 * The winnt_rewrite_args has created and shared mpm_new_argv with us.
 */",undetermined
3090,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3091,httpd,UNKNOWN,/* args and service names live in the same pool */,undetermined
3092,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3093,httpd,UNKNOWN,"/* Report status, no errors, and buy 3 more seconds */",undetermined
3094,httpd,UNKNOWN,"/* We need to append all the command arguments passed via StartService()
     * to our running service... which just got here via the SCM...
     * but we hvae no interest in argv[0] for the mpm_new_argv list.
     */",undetermined
3095,httpd,UNKNOWN,/* mpm_new_argv remains first (of lower significance) */,undetermined
3096,httpd,UNKNOWN,/* Service args follow from StartService() invocation */,undetermined
3097,httpd,UNKNOWN,/* The replacement arg list is complete */,undetermined
3098,httpd,UNKNOWN,"/* Let the main thread continue now... but hang on to the
     * signal_monitor event so we can take further action
     */",undetermined
3099,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3100,httpd,UNKNOWN,/* This is a genuine failure of the SCM. */,undetermined
3101,httpd,UNKNOWN,"/* The service configuration's is stored under the following trees:
 *
 * HKLM\System\CurrentControlSet\Services\[service name]
 *
 *     \DisplayName
 *     \ImagePath
 *     \Parameters\ConfigArgs
 */",undetermined
3102,httpd,UNKNOWN,"/* ### Needs improvement, on Win2K the user can _easily_
     * change the display name to a string that doesn't reflect
     * the internal service name + whitespace!
     */",undetermined
3103,httpd,UNKNOWN,/* Take the given literal name if there is no service entry */,undetermined
3104,httpd,UNKNOWN,"/* Now we have the mpm_service_name arg, and the mpm_runservice_nt()
     * call appended the arguments passed by StartService(), so it's
     * time to _prepend_ the default arguments for the server from
     * the service's default arguments (all others override them)...
     */",undetermined
3105,httpd,UNKNOWN,"/* First three args (argv[0], -f, path) remain first */",undetermined
3106,httpd,UNKNOWN,/* Service args follow from service registry array */,undetermined
3107,httpd,UNKNOWN,/* Remaining new args follow  */,undetermined
3108,httpd,UNKNOWN,"/* Still have a thread & window to clean up, so signal now */",undetermined
3109,httpd,UNKNOWN,/* Stop logging to the event log */,undetermined
3110,httpd,UNKNOWN,/* Cause the service_nt_main_fn to complete */,undetermined
3111,httpd,UNKNOWN,/* Prevent holding open the (hidden) console */,undetermined
3112,httpd,UNKNOWN,"/* GetCurrentThread returns a psuedo-handle, we need
      * a real handle for another thread to wait upon.
      */",undetermined
3113,httpd,UNKNOWN,/* Wait for controlling thread init or termination */,undetermined
3114,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3115,httpd,UNKNOWN,"/* local, default database */",undetermined
3116,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3117,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3118,httpd,UNKNOWN,/* !schService aborts configuration below */,undetermined
3119,httpd,UNKNOWN,"/* RPCSS is the Remote Procedure Call (RPC) Locator required
         * for DCOM communication pipes.  I am far from convinced we
         * should add this to the default service dependencies, but
         * be warned that future apache modules or ISAPI dll's may
         * depend on it.
         */",undetermined
3120,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3121,httpd,UNKNOWN,/* SCManager database */,undetermined
3122,httpd,UNKNOWN,/* name of service    */,undetermined
3123,httpd,UNKNOWN,/* name to display    */,undetermined
3124,httpd,UNKNOWN,/* access required    */,undetermined
3125,httpd,UNKNOWN,/* service type */,undetermined
3126,httpd,UNKNOWN,/* start type         */,undetermined
3127,httpd,UNKNOWN,/* error control type */,undetermined
3128,httpd,UNKNOWN,/* service's binary   */,undetermined
3129,httpd,UNKNOWN,/* no load svc group  */,undetermined
3130,httpd,UNKNOWN,/* no tag identifier  */,undetermined
3131,httpd,UNKNOWN,/* dependencies       */,undetermined
3132,httpd,UNKNOWN,/* use SYSTEM account */,undetermined
3133,httpd,UNKNOWN,/* no password        */,undetermined
3134,httpd,UNKNOWN,"/* Store the service ConfigArgs in the registry...
     */",undetermined
3135,httpd,UNKNOWN,"/* local, default database */",undetermined
3136,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3137,httpd,UNKNOWN,"/* assure the service is stopped before continuing
     *
     * This may be out of order... we might not be able to be
     * granted all access if the service is running anyway.
     *
     * And do we want to make it *this easy* for them
     * to uninstall their service unintentionally?
     */",undetermined
3138,httpd,UNKNOWN,"/* ap_stop_service(schService);
     */",undetermined
3139,httpd,UNKNOWN,"/* signal_service_transition is a simple thunk to signal the service
 * and monitor its successful transition.  If the signal passed is 0,
 * then the caller is assumed to already have performed some service
 * operation to be monitored (such as StartService), and no actual
 * ControlService signal is sent.
 */",undetermined
3140,httpd,UNKNOWN,"/* local, default database */",undetermined
3141,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3142,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3143,httpd,UNKNOWN,/* test only */,undetermined
3144,httpd,UNKNOWN,"/* signal is zero to stop, non-zero for restart */",undetermined
3145,httpd,UNKNOWN,/* default machine & database */,undetermined
3146,httpd,UNKNOWN,/* ###: utf-ize */,undetermined
3147,httpd,UNKNOWN,/* Could not open the service */,undetermined
3148,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3149,httpd,UNKNOWN,"/**
 * @file  prefork/mpm_default.h
 * @brief Prefork MPM defaults
 *
 * @defgroup APACHE_MPM_PREFORK Prefork MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
3150,httpd,UNKNOWN,"/* Number of servers to spawn off by default --- also, if fewer than
 * this free when the caretaker checks, it will spawn more.
 */",undetermined
3151,httpd,UNKNOWN,"/* Maximum number of *free* server processes --- more than this, and
 * they will die off.
 */",undetermined
3152,httpd,UNKNOWN,"/* Minimum --- fewer than this, and more will be created */",undetermined
3153,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
3154,httpd,UNKNOWN,/** @} */,undetermined
3155,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3156,httpd,UNKNOWN,/* for get_remote_host */,undetermined
3157,httpd,UNKNOWN,/* for bindprocessor() */,undetermined
3158,httpd,UNKNOWN,"/* Limit on the total --- clients will be locked out if more servers than
 * this are needed.  It is intended solely to keep the server from crashing
 * when things get out of hand.
 *
 * We keep a hard maximum number of servers, for two reasons --- first off,
 * in case something goes seriously wrong, we want to stop the fork bomb
 * short of actually crashing the machine we're running on by filling some
 * kernel table.  Secondly, it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
3159,httpd,UNKNOWN,"/* Admin can't tune ServerLimit beyond MAX_SERVER_LIMIT.  We want
 * some sort of compile-time limit to help catch typos.
 */",undetermined
3160,httpd,UNKNOWN,/* config globals */,undetermined
3161,httpd,UNKNOWN,/* MaxRequestWorkers */,undetermined
3162,httpd,UNKNOWN,"/* data retained by prefork across load/unload of the module
 * allocated on first call to pre-config hook; located on
 * subsequent calls to pre-config hook
 */",undetermined
3163,httpd,UNKNOWN,/* set from signal handler */,undetermined
3164,httpd,UNKNOWN,"/*
     * The max child slot ever assigned, preserved across restarts.  Necessary
     * to deal with MaxRequestWorkers changes across AP_SIG_GRACEFUL restarts.  We
     * use this value to optimize routines that have to scan the entire scoreboard.
     */",undetermined
3165,httpd,UNKNOWN,"/*
     * idle_spawn_rate is the number of children that will be spawned on the
     * next maintenance cycle if there aren't enough idle servers.  It is
     * doubled up to MAX_SPAWN_RATE, and reset only when a cycle goes by
     * without the need to spawn.
     */",undetermined
3166,httpd,UNKNOWN,"/* one_process --- debugging mode variable; can be set from the command line
 * with the -X flag.  If set, this gets you the child_main loop running
 * in the process which originally started up (no detach, no make_child),
 * which is a pretty nice debugging environment.  (You'll get a SIGHUP
 * early in standalone_main; just continue through.  This is the server
 * trying to kill off any child processes which it might have lying
 * around --- Apache doesn't keep track of their pids, it just sends
 * SIGHUP to the process group, ignoring it in the root process.
 * Continue through and you'll be fine.).
 */",undetermined
3167,httpd,UNKNOWN,/* Pool for config stuff */,undetermined
3168,httpd,UNKNOWN,/* Pool for httpd child stuff */,undetermined
3169,httpd,UNKNOWN,/* it seems silly to call getpid all the time */,undetermined
3170,httpd,UNKNOWN,"/*
 * change directory for gprof to plop the gmon.out file
 * configure in httpd.conf:
 * GprofDir $RuntimeDir/   -> $ServerRoot/$RuntimeDir/gmon.out
 * GprofDir $RuntimeDir/%  -> $ServerRoot/$RuntimeDir/gprof.$pid/gmon.out
 */",undetermined
3171,httpd,UNKNOWN,/* no scoreboard squatting with this MPM */,undetermined
3172,httpd,UNKNOWN,/* a clean exit from a child with proper cleanup */,undetermined
3173,httpd,UNKNOWN,/* slot */,undetermined
3174,httpd,UNKNOWN,"/* don't exit here... we have a connection to
             * process, after which point we'll see that the
             * generation changed and we'll exit cleanly
             */",undetermined
3175,httpd,UNKNOWN,"/* On some architectures it's safe to do unserialized accept()s in the single
 * Listen case.  But it's never safe to do it in the case where there's
 * multiple Listen statements.  Define SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 * when it's safe in the single Listen case.
 */",undetermined
3176,httpd,UNKNOWN,"/*****************************************************************
 * Connection structures and accounting...
 */",undetermined
3177,httpd,UNKNOWN,/* volatile because they're updated from a signal handler */,undetermined
3178,httpd,UNKNOWN,"/* For a graceful stop, we want the child to exit when done */",undetermined
3179,httpd,UNKNOWN,"/* Um, is this _probably_ not an error, if the user has
         * tried to do a shutdown twice quickly, so we won't
         * worry about reporting it.
         */",undetermined
3180,httpd,UNKNOWN,"/* restart() is the signal handler for SIGHUP and AP_SIG_GRACEFUL
 * in the parent process, unless running in ONE_PROCESS mode
 */",undetermined
3181,httpd,UNKNOWN,/* Probably not an error - don't bother reporting it */,undetermined
3182,httpd,UNKNOWN,"/* For systems following the LFS standard, ignoring SIGXFSZ allows
     * a write() beyond the 2GB limit to fail gracefully with E2BIG
     * rather than terminate the process. */",undetermined
3183,httpd,UNKNOWN,"/* we want to ignore HUPs and AP_SIG_GRACEFUL while we're busy
     * processing one
     */",undetermined
3184,httpd,UNKNOWN,/* SIGXCPU */,undetermined
3185,httpd,UNKNOWN,/* SIGXFSZ */,undetermined
3186,httpd,UNKNOWN,/* SIGHUP */,undetermined
3187,httpd,UNKNOWN,/* AP_SIG_GRACEFUL */,undetermined
3188,httpd,UNKNOWN,/* AP_SIG_GRACEFUL */,undetermined
3189,httpd,UNKNOWN,/* SIGPIPE */,undetermined
3190,httpd,UNKNOWN,"/*****************************************************************
 * Child process main loop.
 * The following vars are static to avoid getting clobbered by longjmp();
 * they are really private to child_main.
 */",undetermined
3191,httpd,UNKNOWN,"/* for benefit of any hooks that run as this
                                   * child initializes
                                   */",undetermined
3192,httpd,UNKNOWN,"/* Get a sub context for global allocations in this child, so that
     * we can have cleanups occur when the child exits.
     */",undetermined
3193,httpd,UNKNOWN,/* needs to be done before we switch UIDs so we have permissions */,undetermined
3194,httpd,UNKNOWN,/* Set up the pollfd array */,undetermined
3195,httpd,UNKNOWN,/* assume temporary resource issue */,undetermined
3196,httpd,UNKNOWN,"/* If the child processed a SIGWINCH before setting up the
             * pollset, this error path is expected and harmless,
             * since the listener fd was already closed; so don't
             * pollute the logs in that case. */",undetermined
3197,httpd,UNKNOWN,"/* die_now is set when AP_SIG_GRACEFUL is received in the child;
     * shutdown_pending is set when SIGTERM is received when running
     * in single process mode.  */",undetermined
3198,httpd,UNKNOWN,"/*
         * (Re)initialize this child to a pre-connection state.
         */",undetermined
3199,httpd,UNKNOWN,"/*
         * Wait for an acceptable connection to arrive.
         */",undetermined
3200,httpd,UNKNOWN,"/* Lock around ""accept"", if necessary */",undetermined
3201,httpd,UNKNOWN,"/* There is only one listener record, so refer to that one. */",undetermined
3202,httpd,UNKNOWN,/* multiple listening sockets - need to poll */,undetermined
3203,httpd,UNKNOWN,"/* check for termination first so we don't sleep for a while in
                 * poll if already signalled
                 */",undetermined
3204,httpd,UNKNOWN,/* in graceful stop/restart */,undetermined
3205,httpd,UNKNOWN,"/* timeout == 10 seconds to avoid a hang at graceful restart/stop
                 * caused by the closing of sockets by the signal handler
                 */",undetermined
3206,httpd,UNKNOWN,"/* Single Unix documents select as returning errnos
                     * EBADF, EINTR, and EINVAL... and in none of those
                     * cases does it make sense to continue.  In fact
                     * on Linux 2.0.x we seem to end up with EFAULT
                     * occasionally, and we'd loop forever due to it.
                     */",undetermined
3207,httpd,UNKNOWN,"/* We can always use pdesc[0], but sockets at position N
                 * could end up completely starved of attention in a very
                 * busy server. Therefore, we round-robin across the
                 * returned set of descriptors. While it is possible that
                 * the returned set of descriptors might flip around and
                 * continue to starve some sockets, we happen to know the
                 * internal pollset implementation retains ordering
                 * stability of the sockets. Thus, the round-robin should
                 * ensure that a socket will eventually be serviced.
                 */",undetermined
3208,httpd,UNKNOWN,"/* Grab a listener record from the client_data of the poll
                 * descriptor, and advance our saved index to round-robin
                 * the next fetch.
                 *
                 * ### hmm... this descriptor might have POLLERR rather
                 * ### than POLLIN
                 */",undetermined
3209,httpd,UNKNOWN,"/* if we accept() something we don't want to die, so we have to
         * defer the exit
         */",undetermined
3210,httpd,UNKNOWN,"/* unlock after ""accept"" */",undetermined
3211,httpd,UNKNOWN,/* resource shortage or should-not-occur occured */,undetermined
3212,httpd,UNKNOWN,"/*
         * We now have a connection, so set it up with the appropriate
         * socket options, file descriptors, and read/write buffers.
         */",undetermined
3213,httpd,UNKNOWN,"/* Check the pod and the generation number after processing a
         * connection so that we'll go away if a graceful restart occurred
         * while we were processing the connection or we are the lucky
         * idle server process that gets to die.
         */",undetermined
3214,httpd,UNKNOWN,/* selected as idle? */,undetermined
3215,httpd,UNKNOWN,/* restart? */,undetermined
3216,httpd,UNKNOWN,"/* yeah, this could be non-graceful restart, in which case the
             * parent will kill us soon enough, but why bother checking?
             */",undetermined
3217,httpd,UNKNOWN,/* kludge to avoid crash in APR reslist cleanup code */,undetermined
3218,httpd,UNKNOWN,/* Don't catch AP_SIG_GRACEFUL in ONE_PROCESS mode :) */,undetermined
3219,httpd,UNKNOWN,/* NOTREACHED */,undetermined
3220,httpd,UNKNOWN,"/* BS2000 requires a ""special"" version of fork() before a setuid() call */",undetermined
3221,httpd,UNKNOWN,"/* fork didn't succeed. Fix the scoreboard or else
         * it will say SERVER_STARTING forever and ever
         */",undetermined
3222,httpd,UNKNOWN,"/* In case system resources are maxxed out, we don't want
         * Apache running away with the CPU trying to fork over and
         * over and over again.
         */",undetermined
3223,httpd,UNKNOWN,"/* by default AIX binds to a single processor
         * this bit unbinds children which will then bind to another cpu
         */",undetermined
3224,httpd,UNKNOWN,"/* Disable the parent's signal handlers and set up proper handling in
         * the child.
         */",undetermined
3225,httpd,UNKNOWN,"/* The child process just closes listeners on AP_SIG_GRACEFUL.
         * The pod is used for signalling the graceful restart.
         */",undetermined
3226,httpd,UNKNOWN,/* start up a bunch of children */,undetermined
3227,httpd,UNKNOWN,/* initialize the free_list */,undetermined
3228,httpd,UNKNOWN,/* try to keep children numbers as low as possible */,undetermined
3229,httpd,UNKNOWN,"/* We consider a starting server as idle because we started it
             * at least a cycle ago, and if it still hasn't finished starting
             * then we're just going to swamp things worse by forking more.
             * So we hopefully won't need to fork more if we count it.
             * This depends on the ordering of SERVER_READY and SERVER_STARTING.
             */",undetermined
3230,httpd,UNKNOWN,"/* kill off one child... we use the pod because that'll cause it to
         * shut down gracefully, in case it happened to pick up a request
         * while we were counting
         */",undetermined
3231,httpd,UNKNOWN,/* terminate the free list */,undetermined
3232,httpd,UNKNOWN,/* only report this condition once */,undetermined
3233,httpd,UNKNOWN,"/* the next time around we want to spawn twice as many if this
             * wasn't good enough, but not if we've just done a graceful
             */",undetermined
3234,httpd,UNKNOWN,"/*****************************************************************
 * Executive routines.
 */",undetermined
3235,httpd,UNKNOWN,/* Initialize cross-process accept lock */,undetermined
3236,httpd,UNKNOWN,"/* fix the generation number in the global score; we just got a new,
         * cleared scoreboard
         */",undetermined
3237,httpd,UNKNOWN,/* NOTREACHED */,undetermined
3238,httpd,UNKNOWN,/* Don't thrash... */,undetermined
3239,httpd,UNKNOWN,"/* If we're doing a graceful_restart then we're going to see a lot
     * of children exiting immediately when we get into the main loop
     * below (because we just sent them AP_SIG_GRACEFUL).  This happens pretty
     * rapidly... and for each one that exits we'll start a new one until
     * we reach at least daemons_min_free.  But we may be permitted to
     * start more than that, so we'll just keep track of how many we're
     * supposed to start up without the 1 second penalty between each fork.
     */",undetermined
3240,httpd,UNKNOWN,"/* give the system some time to recover before kicking into
         * exponential mode
         */",undetermined
3241,httpd,UNKNOWN,"/* this is a memory leak, but I'll fix it later. */",undetermined
3242,httpd,UNKNOWN,"/* XXX: if it takes longer than 1 second for all our children
         * to start up and get into IDLE state then we may spawn an
         * extra child
         */",undetermined
3243,httpd,UNKNOWN,"/* fix race condition found in PR 39311
                 * A child created at the same time as a graceful happens 
                 * can find the lock missing and create a fatal error.
                 * It is not fatal for the last generation to be in this state.
                 */",undetermined
3244,httpd,UNKNOWN,/* non-fatal death... note that it's gone in the scoreboard. */,undetermined
3245,httpd,UNKNOWN,"/* child detected a resource shortage (E[NM]FILE, ENOBUFS, etc)
                     * cut the fork rate to the minimum
                     */",undetermined
3246,httpd,UNKNOWN,"/* we're still doing a 1-for-1 replacement of dead
                     * children with new children
                     */",undetermined
3247,httpd,UNKNOWN,/* handled */,undetermined
3248,httpd,UNKNOWN,"/* Great, we've probably just lost a slot in the
                 * scoreboard.  Somehow we don't know about this
                 * child.
                 */",undetermined
3249,httpd,UNKNOWN,"/* Don't perform idle maintenance when a child dies,
             * only do it when there's a timeout.  Remember only a
             * finite number of children can die, and it's pretty
             * pathological for a lot to die suddenly.
             */",undetermined
3250,httpd,UNKNOWN,"/* we hit a 1 second timeout in which none of the previous
             * generation of children needed to be reaped... so assume
             * they're all done, and pick up the slack if any is left.
             */",undetermined
3251,httpd,UNKNOWN,"/* In any event we really shouldn't do the code below because
             * few of the servers we just started are in the IDLE state
             * yet, so we'd mistakenly create an extra server.
             */",undetermined
3252,httpd,UNKNOWN,/* one_process */,undetermined
3253,httpd,UNKNOWN,"/* Time to shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */",undetermined
3254,httpd,UNKNOWN,/* Start with SIGTERM */,undetermined
3255,httpd,UNKNOWN,/* cleanup pid file on normal shutdown */,undetermined
3256,httpd,UNKNOWN,"/* Time to perform a graceful shut down:
         * Reap the inactive children, and ask the active ones
         * to close their listeners, then wait until they are
         * all done to exit.
         */",undetermined
3257,httpd,UNKNOWN,/* Stop listening */,undetermined
3258,httpd,UNKNOWN,/* kill off the idle ones */,undetermined
3259,httpd,UNKNOWN,/* Send SIGUSR1 to the active children */,undetermined
3260,httpd,UNKNOWN,/* Ask each child to close its listeners. */,undetermined
3261,httpd,UNKNOWN,/* Allow each child which actually finished to exit */,undetermined
3262,httpd,UNKNOWN,/* cleanup pid file */,undetermined
3263,httpd,UNKNOWN,/* Don't really exit until each child has finished */,undetermined
3264,httpd,UNKNOWN,/* Pause for a second */,undetermined
3265,httpd,UNKNOWN,/* Relieve any children which have now exited */,undetermined
3266,httpd,UNKNOWN,/* Having just one child is enough to stay around */,undetermined
3267,httpd,UNKNOWN,"/* We might be here because we received SIGTERM, either
         * way, try and make sure that all of our processes are
         * really dead.
         */",undetermined
3268,httpd,UNKNOWN,/* we've been told to restart */,undetermined
3269,httpd,UNKNOWN,/* not worth thinking about */,undetermined
3270,httpd,UNKNOWN,/* advance to the next generation */,undetermined
3271,httpd,UNKNOWN,"/* XXX: we really need to make sure this new generation number isn't in
     * use by any of the children.
     */",undetermined
3272,httpd,UNKNOWN,/* kill off the idle ones */,undetermined
3273,httpd,UNKNOWN,"/* This is mostly for debugging... so that we know what is still
         * gracefully dealing with existing request.  This will break
         * in a very nasty way if we ever have the scoreboard totally
         * file-based (no shared memory)
         */",undetermined
3274,httpd,UNKNOWN,"/* Ask each child to close its listeners.
                 *
                 * NOTE: we use the scoreboard, because if we send SIGUSR1
                 * to every process in the group, this may include CGI's,
                 * piped loggers, etc. They almost certainly won't handle
                 * it gracefully.
                 */",undetermined
3275,httpd,UNKNOWN,/* Kill 'em off */,undetermined
3276,httpd,UNKNOWN,/* Not when just starting up */,undetermined
3277,httpd,UNKNOWN,"/* This really should be a post_config hook, but the error log is already
 * redirected by that point, so we need to do this in the open_logs phase.
 */",undetermined
3278,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
3279,httpd,UNKNOWN,"/* sigh, want this only the second time around */",undetermined
3280,httpd,UNKNOWN,"/* before we detach, setup crash handlers to log to errorlog */",undetermined
3281,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
3282,httpd,UNKNOWN,"/* you cannot change ServerLimit across a restart; ignore
     * any such attempts
     */",undetermined
3283,httpd,UNKNOWN,/* don't need a startup console version here */,undetermined
3284,httpd,UNKNOWN,/* ap_daemons_to_start > ap_daemons_limit checked in prefork_run() */,undetermined
3285,httpd,UNKNOWN,/* ap_daemons_max_free < ap_daemons_min_free + 1 checked in prefork_run() */,undetermined
3286,httpd,UNKNOWN,"/* Our open_logs hook function must run before the core's, or stderr
     * will be redirected to a file, and the messages won't print to the
     * console.
     */",undetermined
3287,httpd,UNKNOWN,"/* we need to set the MPM state before other pre-config hooks use MPM query
     * to retrieve it, so register as REALLY_FIRST
     */",undetermined
3288,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
3289,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
3290,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
3291,httpd,UNKNOWN,/* create per-server config structure */,undetermined
3292,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
3293,httpd,UNKNOWN,/* command apr_table_t */,undetermined
3294,httpd,UNKNOWN,/* register hooks */,undetermined
3295,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3296,httpd,UNKNOWN,"/**
 * @file  netware/mpm_default.h
 * @brief Defaults for Netware MPM
 *
 * @defgroup APACHE_MPM_NETWARE Netware MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
3297,httpd,UNKNOWN,"/* Limit on the threads per process.  Clients will be locked out if more than
 * this  * HARD_SERVER_LIMIT are needed.
 *
 * We keep this for one reason it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
3298,httpd,UNKNOWN,"/* Number of threads to spawn off by default --- also, if fewer than
 * this free when the caretaker checks, it will spawn more.
 */",undetermined
3299,httpd,UNKNOWN,"/* Maximum number of *free* threads --- more than this, and
 * they will die off.
 */",undetermined
3300,httpd,UNKNOWN,"/* Minimum --- fewer than this, and more will be created */",undetermined
3301,httpd,UNKNOWN,"/*
 * Interval, in microseconds, between scoreboard maintenance.
 */",undetermined
3302,httpd,UNKNOWN,"/* Default stack size allocated for each worker thread.
 */",undetermined
3303,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
3304,httpd,UNKNOWN,/** @} */,undetermined
3305,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3306,httpd,UNKNOWN,"/*
 * httpd.c: simple http daemon for answering WWW file requests
 *
 *
 * 03-21-93  Rob McCool wrote original code (up to NCSA HTTPd 1.3)
 *
 * 03-06-95  blong
 *  changed server number for child-alone processes to 0 and changed name
 *   of processes
 *
 * 03-10-95  blong
 *      Added numerous speed hacks proposed by Robert S. Thau (rst@ai.mit.edu)
 *      including set group before fork, and call gettime before to fork
 *      to set up libraries.
 *
 * 04-14-95  rst / rh
 *      Brandon's code snarfed from NCSA 1.4, but tinkered to work with the
 *      Apache server, and also to have child processes do accept() directly.
 *
 * April-July '95 rst
 *      Extensive rework for Apache.
 */",undetermined
3307,httpd,UNKNOWN,/* for get_remote_host */,undetermined
3308,httpd,UNKNOWN,"/* Limit on the total --- clients will be locked out if more servers than
 * this are needed.  It is intended solely to keep the server from crashing
 * when things get out of hand.
 *
 * We keep a hard maximum number of servers, for two reasons --- first off,
 * in case something goes seriously wrong, we want to stop the fork bomb
 * short of actually crashing the machine we're running on by filling some
 * kernel table.  Secondly, it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
3309,httpd,UNKNOWN,/* *Non*-shared http_main globals... */,undetermined
3310,httpd,UNKNOWN,/* Worker threads per child */,undetermined
3311,httpd,UNKNOWN,"/*
 * The max child slot ever assigned, preserved across restarts.  Necessary
 * to deal with MaxRequestWorkers changes across SIGWINCH restarts.  We use this
 * value to optimize routines that have to scan the entire scoreboard.
 */",undetermined
3312,httpd,UNKNOWN,/* Indicates whether the screen should be held open */,undetermined
3313,httpd,UNKNOWN,/* Pool for config stuff */,undetermined
3314,httpd,UNKNOWN,/* Pool for httpd child stuff */,undetermined
3315,httpd,UNKNOWN,/* it seems silly to call getpid all the time */,undetermined
3316,httpd,UNKNOWN,/* Keep track of the number of worker threads currently active */,undetermined
3317,httpd,UNKNOWN,/*  Structure used to register/deregister a console handler with the OS */,undetermined
3318,httpd,UNKNOWN,//#define DBINFO_ON,undetermined
3319,httpd,UNKNOWN,//#define DBPRINT_ON,undetermined
3320,httpd,UNKNOWN,/* volatile just in case */,undetermined
3321,httpd,UNKNOWN,/* a clean exit from a child with proper cleanup */,undetermined
3322,httpd,UNKNOWN,/* proper cleanup when returning from ap_mpm_run() */,undetermined
3323,httpd,UNKNOWN,"/*****************************************************************
 * Connection structures and accounting...
 */",undetermined
3324,httpd,UNKNOWN,"/* Um, is this _probably_ not an error, if the user has
         * tried to do a shutdown twice quickly, so we won't
         * worry about reporting it.
         */",undetermined
3325,httpd,UNKNOWN,"/* restart() is the signal handler for SIGHUP and SIGWINCH
 * in the parent process, unless running in ONE_PROCESS mode
 */",undetermined
3326,httpd,UNKNOWN,/* Probably not an error - don't bother reporting it */,undetermined
3327,httpd,UNKNOWN,"/*****************************************************************
 * Child process main loop.
 * The following vars are static to avoid getting clobbered by longjmp();
 * they are really private to child_main.
 */",undetermined
3328,httpd,UNKNOWN,/*static */,undetermined
3329,httpd,UNKNOWN,"/*
        * (Re)initialize this child to a pre-connection state.
        */",undetermined
3330,httpd,UNKNOWN,"/*
        * Wait for an acceptable connection to arrive.
        */",undetermined
3331,httpd,UNKNOWN,/* Check the listen queue on all sockets for requests */,undetermined
3332,httpd,UNKNOWN,"/* remember the last_lr we searched last time around so that
            we don't end up starving any particular listening socket */",undetermined
3333,httpd,UNKNOWN,"/* if we get here, something unexpected happened. Go back
            into the select state and try again.
            */",undetermined
3334,httpd,UNKNOWN,"/* if the error is a wouldblock then maybe we were too
                        quick try to pull the next request from the listen
                        queue.  Try a few more times then return to our idle
                        listen state. */",undetermined
3335,httpd,UNKNOWN,"/* If we got a new socket, set it to non-blocking mode and process
                it.  Otherwise handle the error. */",undetermined
3336,httpd,UNKNOWN,/* We have a socket ready for reading */,undetermined
3337,httpd,UNKNOWN,"/*
                        * When the network layer has been shut down, there
                        * is not much use in simply exiting: the parent
                        * would simply re-create us (and we'd fail again).
                        * Use the CHILDFATAL code to tear the server down.
                        * @@@ Martin's idea for possible improvement:
                        * A different approach would be to define
                        * a new APEXIT_NETDOWN exit code, the reception
                        * of which would make the parent shutdown all
                        * children, then idle-loop until it detected that
                        * the network is up again, and restart the children.
                        * Ben Hyde noted that temporary ENETDOWN situations
                        * occur in mobile IP.
                        */",undetermined
3338,httpd,UNKNOWN,"/*
        * We now have a connection, so set it up with the appropriate
        * socket options, file descriptors, and read/write buffers.
        */",undetermined
3339,httpd,UNKNOWN,"/* create thread didn't succeed. Fix the scoreboard or else
        * it will say SERVER_STARTING forever and ever
        */",undetermined
3340,httpd,UNKNOWN,"/* In case system resources are maxxed out, we don't want
        Apache running away with the CPU trying to fork over and
        over and over again. */",undetermined
3341,httpd,UNKNOWN,/* start up a bunch of worker threads */,undetermined
3342,httpd,UNKNOWN,"/*
 * idle_spawn_rate is the number of children that will be spawned on the
 * next maintenance cycle if there aren't enough idle servers.  It is
 * doubled up to MAX_SPAWN_RATE, and reset only when a cycle goes by
 * without the need to spawn.
 */",undetermined
3343,httpd,UNKNOWN,/* initialize the free_list */,undetermined
3344,httpd,UNKNOWN,/* try to keep children numbers as low as possible */,undetermined
3345,httpd,UNKNOWN,"/* If it is already marked to die, skip it */",undetermined
3346,httpd,UNKNOWN,"/* We consider a starting server as idle because we started it
            * at least a cycle ago, and if it still hasn't finished starting
            * then we're just going to swamp things worse by forking more.
            * So we hopefully won't need to fork more if we count it.
            * This depends on the ordering of SERVER_READY and SERVER_STARTING.
            */",undetermined
3347,httpd,UNKNOWN,"/* kill off one child... we use the pod because that'll cause it to
        * shut down gracefully, in case it happened to pick up a request
        * while we were counting
        */",undetermined
3348,httpd,UNKNOWN,/* terminate the free list */,undetermined
3349,httpd,UNKNOWN,/* only report this condition once */,undetermined
3350,httpd,UNKNOWN,"/* the next time around we want to spawn twice as many if this
            * wasn't good enough, but not if we've just done a graceful
            */",undetermined
3351,httpd,UNKNOWN,/* Display listening ports */,undetermined
3352,httpd,UNKNOWN,/* Display dynamic modules loaded */,undetermined
3353,httpd,UNKNOWN,"/*****************************************************************
 * Executive routines.
 */",undetermined
3354,httpd,UNKNOWN,/* Only set slot 0 since that is all NetWare will ever have. */,undetermined
3355,httpd,UNKNOWN,/* Don't thrash... */,undetermined
3356,httpd,UNKNOWN,"/* Allow the Apache screen to be closed normally on exit() only if it
        has not been explicitly forced to close on exit(). (ie. the -E flag
        was specified at startup) */",undetermined
3357,httpd,UNKNOWN,"/* Shutdown the listen sockets so that we don't get stuck in a blocking call.
    shutdown_listeners();*/",undetermined
3358,httpd,UNKNOWN,/* Got an unload from the console */,undetermined
3359,httpd,UNKNOWN,/* the only other way out is a restart */,undetermined
3360,httpd,UNKNOWN,/* advance to the next generation */,undetermined
3361,httpd,UNKNOWN,"/* XXX: we really need to make sure this new generation number isn't in
         * use by any of the children.
         */",undetermined
3362,httpd,UNKNOWN,/* Wait for all of the threads to terminate before initiating the restart */,undetermined
3363,httpd,UNKNOWN,/* The following call has been moved to the mod_nw_ssl pre-config handler */,undetermined
3364,httpd,UNKNOWN,/* override core's default thread stacksize */,undetermined
3365,httpd,UNKNOWN,/* we want this only the first time around */,undetermined
3366,httpd,UNKNOWN,"/* ap_threads_to_start > ap_threads_limit effectively checked in
     * call to startup_workers(ap_threads_to_start) in ap_mpm_run()
     */",undetermined
3367,httpd,UNKNOWN,/* ap_threads_max_free < ap_threads_min_free + 1 checked in ap_mpm_run() */,undetermined
3368,httpd,UNKNOWN,"/* Run the pre-config hook after core's so that it can override the
     * default setting of ThreadStackSize for NetWare.
     */",undetermined
3369,httpd,UNKNOWN,"//ap_hook_post_config(netware_post_config, NULL, NULL, 0);",undetermined
3370,httpd,UNKNOWN,"//ap_hook_child_init(netware_child_init, NULL, NULL, APR_HOOK_MIDDLE);",undetermined
3371,httpd,UNKNOWN,"//ap_hook_open_logs(netware_open_logs, NULL, aszSucc, APR_HOOK_REALLY_FIRST);",undetermined
3372,httpd,UNKNOWN,/* Make sure to hold the Apache screen open if exit() is called */,undetermined
3373,httpd,UNKNOWN,"/* Rewrite process->argv[];
     *
     * add default -d serverroot from the path of this executable
     *
     * The end result will look like:
     *     The -d serverroot default from the running executable
     */",undetermined
3374,httpd,UNKNOWN,"/* Use process->pool so that the rewritten argv
            * lasts for the lifetime of the server process,
            * because pconf will be destroyed after the
            * initial pre-flight of the config parser.
            */",undetermined
3375,httpd,UNKNOWN,/* Don't need to hold the screen open if the output is going to a file */,undetermined
3376,httpd,UNKNOWN,"/*  All added commands begin with ""APACHE2 "" */",undetermined
3377,httpd,UNKNOWN,"/* If an instance id was not given but the nlm is loaded in
            protected space, then the the command belongs to the
            OS address space instance to pass it on. */",undetermined
3378,httpd,UNKNOWN,"/* If we got an instance id but it doesn't match this
            instance of the nlm, pass it on. */",undetermined
3379,httpd,UNKNOWN,"/* If we have determined that this command belongs to this
            instance of the nlm, then handle it. */",undetermined
3380,httpd,UNKNOWN,/*  Tell NetWare we handled the command */,undetermined
3381,httpd,UNKNOWN,/*  Tell NetWare that the command isn't mine */,undetermined
3382,httpd,UNKNOWN,"/*  Our command line handler interfaces the system operator
    with this NLM */",undetermined
3383,httpd,UNKNOWN,/*  The Remove procedure unregisters the console handler */,undetermined
3384,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
3385,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
3386,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
3387,httpd,UNKNOWN,/* create per-server config structure */,undetermined
3388,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
3389,httpd,UNKNOWN,/* command apr_table_t */,undetermined
3390,httpd,UNKNOWN,/* register hooks */,undetermined
3391,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3392,httpd,UNKNOWN,"/**
 * @file  mpmt_os2/mpm_default.h
 * @brief os2 MPM defaults
 *
 * @defgroup APACHE_MPM_OS2 OS/2 MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
3393,httpd,UNKNOWN,"/* Number of servers processes to spawn off by default
 */",undetermined
3394,httpd,UNKNOWN,"/* Maximum number of *free* server threads --- more than this, and
 * they will die off.
 */",undetermined
3395,httpd,UNKNOWN,"/* Minimum --- fewer than this, and more will be created */",undetermined
3396,httpd,UNKNOWN,"/*
 * Interval, in microseconds, between scoreboard maintenance.
 */",undetermined
3397,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
3398,httpd,UNKNOWN,/** @} */,undetermined
3399,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3400,httpd,UNKNOWN,"/* Multi-process, multi-threaded MPM for OS/2
 *
 * Server consists of
 * - a main, parent process
 * - a small, static number of child processes
 *
 * The parent process's job is to manage the child processes. This involves
 * spawning children as required to ensure there are always ap_daemons_to_start
 * processes accepting connections.
 *
 * Each child process consists of a a pool of worker threads and a
 * main thread that accepts connections & passes them to the workers via
 * a work queue. The worker thread pool is dynamic, managed by a maintanence
 * thread so that the number of idle threads is kept between
 * min_spare_threads & max_spare_threads.
 *
 */",undetermined
3401,httpd,UNKNOWN,"/*
 Todo list
 - Enforce MaxRequestWorkers somehow
*/",undetermined
3402,httpd,UNKNOWN,/* for get_remote_host */,undetermined
3403,httpd,UNKNOWN,"/* We don't need many processes,
 * they're only for redundancy in the event of a crash
 */",undetermined
3404,httpd,UNKNOWN,"/* Limit on the total number of threads per process
 */",undetermined
3405,httpd,UNKNOWN,/* Pool for config stuff */,undetermined
3406,httpd,UNKNOWN,/* Config globals */,undetermined
3407,httpd,UNKNOWN,/* Keep track of a few interesting statistics */,undetermined
3408,httpd,UNKNOWN,/* volatile just in case */,undetermined
3409,httpd,UNKNOWN,/* Used by the scoreboard */,undetermined
3410,httpd,UNKNOWN,"/* An array of these is stored in a shared memory area for passing
 * sockets from the parent to child processes
 */",undetermined
3411,httpd,UNKNOWN,/* Child process */,undetermined
3412,httpd,UNKNOWN,/* Set up a default listener if necessary */,undetermined
3413,httpd,UNKNOWN,/* Do the work */,undetermined
3414,httpd,UNKNOWN,/* Outta here */,undetermined
3415,httpd,UNKNOWN,/* Parent process */,undetermined
3416,httpd,UNKNOWN,/* Parent process */,undetermined
3417,httpd,UNKNOWN,/* Restart */,undetermined
3418,httpd,UNKNOWN,"/* Main processing of the parent process
 * returns TRUE if restarting
 */",undetermined
3419,httpd,UNKNOWN,/* Allocate a shared memory block for the array of listeners */,undetermined
3420,httpd,UNKNOWN,/* Store the listener sockets in the shared memory area for our children to see */,undetermined
3421,httpd,UNKNOWN,"/* Create mutex to prevent multiple child processes from detecting
     * a connection with apr_poll()
     */",undetermined
3422,httpd,UNKNOWN,/* Allocate shared memory for scoreboard */,undetermined
3423,httpd,UNKNOWN,/* Count number of active children */,undetermined
3424,httpd,UNKNOWN,/* Spawn children if needed */,undetermined
3425,httpd,UNKNOWN,"/* A child has terminated, remove its scoreboard entry & terminate if necessary */",undetermined
3426,httpd,UNKNOWN,"/* Child terminated normally, check its exit code and
                     * terminate server if child indicates a fatal error
                     */",undetermined
3427,httpd,UNKNOWN,"/* No child exited, lets sleep for a while.... */",undetermined
3428,httpd,UNKNOWN,"/* Signal children to shut down, either gracefully or immediately */",undetermined
3429,httpd,UNKNOWN,/* Signal handling routines */,undetermined
3430,httpd,UNKNOWN,/* Enquiry functions used get MPM status info */,undetermined
3431,httpd,UNKNOWN,/* Configuration handling stuff */,undetermined
3432,httpd,UNKNOWN,/* we want this only the first time around */,undetermined
3433,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
3434,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
3435,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
3436,httpd,UNKNOWN,/* create per-server config structure */,undetermined
3437,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
3438,httpd,UNKNOWN,/* command apr_table_t */,undetermined
3439,httpd,UNKNOWN,/* register_hooks */,undetermined
3440,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3441,httpd,UNKNOWN,/* for get_remote_host */,undetermined
3442,httpd,UNKNOWN,/* XXXXXX move these to header file private to this MPM */,undetermined
3443,httpd,UNKNOWN,"/* We don't need many processes,
 * they're only for redundancy in the event of a crash
 */",undetermined
3444,httpd,UNKNOWN,"/* Limit on the total number of threads per process
 */",undetermined
3445,httpd,UNKNOWN,/* signaled when this child is shutting down */,undetermined
3446,httpd,UNKNOWN,/* grab some MPM globals */,undetermined
3447,httpd,UNKNOWN,/* Stop Ctrl-C/Ctrl-Break signals going to child processes */,undetermined
3448,httpd,UNKNOWN,/* Create pool for child */,undetermined
3449,httpd,UNKNOWN,/* Create an event semaphore used to trigger other threads to shutdown */,undetermined
3450,httpd,UNKNOWN,/* Gain access to the scoreboard. */,undetermined
3451,httpd,UNKNOWN,/* Gain access to the accpet mutex */,undetermined
3452,httpd,UNKNOWN,/* Find our pid in the scoreboard so we know what slot our parent allocated us */,undetermined
3453,httpd,UNKNOWN,"/* Set up an OS/2 queue for passing connections & termination requests
     * to worker threads
     */",undetermined
3454,httpd,UNKNOWN,/* Create initial pool of worker threads */,undetermined
3455,httpd,UNKNOWN,"//        ap_scoreboard_image->servers[child_slot][c].tid = _beginthread(worker_main, NULL, 128*1024, (void *)c);",undetermined
3456,httpd,UNKNOWN,/* Start maintenance thread */,undetermined
3457,httpd,UNKNOWN,/* Set up poll */,undetermined
3458,httpd,UNKNOWN,/* Main connection accept loop */,undetermined
3459,httpd,UNKNOWN,/* tell our worker threads to exit */,undetermined
3460,httpd,UNKNOWN,/* Find a free thread slot */,undetermined
3461,httpd,UNKNOWN,"/* Shut down process ASAP, it could be quite unhealthy & leaking resources */",undetermined
3462,httpd,UNKNOWN,/* Trap exceptions in this thread so we don't take down the whole process */,undetermined
3463,httpd,UNKNOWN,/* Signal handling routines */,undetermined
3464,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3465,httpd,UNKNOWN,"/**
 * This MPM tries to fix the 'keep alive problem' in HTTP.
 *
 * After a client completes the first request, the client can keep the
 * connection open to send more requests with the same socket.  This can save
 * significant overhead in creating TCP connections.  However, the major
 * disadvantage is that Apache traditionally keeps an entire child
 * process/thread waiting for data from the client.  To solve this problem,
 * this MPM has a dedicated thread for handling both the Listening sockets,
 * and all sockets that are in a Keep Alive status.
 *
 * The MPM assumes the underlying apr_pollset implementation is somewhat
 * threadsafe.  This currently is only compatible with KQueue and EPoll.  This
 * enables the MPM to avoid extra high level locking or having to wake up the
 * listener thread when a keep-alive socket needs to be sent to it.
 *
 * This MPM does not perform well on older platforms that do not have very good
 * threading, like Linux with a 2.4 kernel, but this does not matter, since we
 * require EPoll or KQueue.
 *
 * For FreeBSD, use 5.3.  It is possible to run this MPM on FreeBSD 5.2.1, if
 * you use libkse (see `man libmap.conf`).
 *
 * For NetBSD, use at least 2.0.
 *
 * For Linux, you should use a 2.6 kernel, and make sure your glibc has epoll
 * support compiled in.
 *
 */",undetermined
3466,httpd,UNKNOWN,/* for bindprocessor() */,undetermined
3467,httpd,UNKNOWN,/* for read_config */,undetermined
3468,httpd,UNKNOWN,/* for get_remote_host */,undetermined
3469,httpd,UNKNOWN,/* for INT_MAX */,undetermined
3470,httpd,UNKNOWN,"/* Limit on the total --- clients will be locked out if more servers than
 * this are needed.  It is intended solely to keep the server from crashing
 * when things get out of hand.
 *
 * We keep a hard maximum number of servers, for two reasons --- first off,
 * in case something goes seriously wrong, we want to stop the fork bomb
 * short of actually crashing the machine we're running on by filling some
 * kernel table.  Secondly, it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
3471,httpd,UNKNOWN,"/* Admin can't tune ServerLimit beyond MAX_SERVER_LIMIT.  We want
 * some sort of compile-time limit to help catch typos.
 */",undetermined
3472,httpd,UNKNOWN,"/* Limit on the threads per process.  Clients will be locked out if more than
 * this are needed.
 *
 * We keep this for one reason it keeps the size of the scoreboard file small
 * enough that we can read the whole thing without worrying too much about
 * the overhead.
 */",undetermined
3473,httpd,UNKNOWN,"/* Admin can't tune ThreadLimit beyond MAX_THREAD_LIMIT.  We want
 * some sort of compile-time limit to help catch typos.
 */",undetermined
3474,httpd,UNKNOWN,"/*
 * Actual definitions of config globals
 */",undetermined
3475,httpd,UNKNOWN,/* scale factor to allow fractional values */,undetermined
3476,httpd,UNKNOWN,/* Worker threads per child */,undetermined
3477,httpd,UNKNOWN,"/* MaxConnectionsPerChild, only access
                                               in listener thread */",undetermined
3478,httpd,UNKNOWN,/* Number of open connections */,undetermined
3479,httpd,UNKNOWN,/* Number of connections in lingering close */,undetermined
3480,httpd,UNKNOWN,/* Number of suspended connections */,undetermined
3481,httpd,UNKNOWN,/* Number of threads processing ssl conns */,undetermined
3482,httpd,UNKNOWN,/** APR_RING of expiration timeouts */,undetermined
3483,httpd,UNKNOWN,/** the expiration time of the next keepalive timeout */,undetermined
3484,httpd,UNKNOWN,/** connection record this struct refers to */,undetermined
3485,httpd,UNKNOWN,/** memory pool to allocate from */,undetermined
3486,httpd,UNKNOWN,/** bucket allocator */,undetermined
3487,httpd,UNKNOWN,/** poll file descriptor information */,undetermined
3488,httpd,UNKNOWN,/** public parts of the connection state */,undetermined
3489,httpd,UNKNOWN,"/*
 * Several timeout queues that use different timeouts, so that we always can
 * simply append to the end.
 *   write_completion_q uses TimeOut
 *   keepalive_q        uses KeepAliveTimeOut
 *   linger_q           uses MAX_SECS_TO_LINGER
 *   short_linger_q     uses SECONDS_TO_LINGER
 */",undetermined
3490,httpd,UNKNOWN,"/*
 * Macros for accessing struct timeout_queue.
 * For TO_QUEUE_APPEND and TO_QUEUE_REMOVE, timeout_mutex must be held.
 */",undetermined
3491,httpd,UNKNOWN,"/*
 * The pollset for sockets that are in any of the timeout queues. Currently
 * we use the timeout_mutex to make sure that connections are added/removed
 * atomically to/from both event_pollset and a timeout queue. Otherwise
 * some confusion can happen under high load if timeout queues and pollset
 * get out of sync.
 * XXX: It should be possible to make the lock unnecessary in many or even all
 * XXX: cases.
 */",undetermined
3492,httpd,UNKNOWN,/* The structure used to pass unique initialization info to each thread */,undetermined
3493,httpd,UNKNOWN,"/* Structure used to pass information to the thread responsible for
 * creating the rest of the threads.
 */",undetermined
3494,httpd,UNKNOWN,"/* data retained by event across load/unload of the module
 * allocated on first call to pre-config hook; located on
 * subsequent calls to pre-config hook
 */",undetermined
3495,httpd,UNKNOWN,/* set from signal handler */,undetermined
3496,httpd,UNKNOWN,"/*
     * The max child slot ever assigned, preserved across restarts.  Necessary
     * to deal with MaxRequestWorkers changes across AP_SIG_GRACEFUL restarts.
     * We use this value to optimize routines that have to scan the entire
     * scoreboard.
     */",undetermined
3497,httpd,UNKNOWN,"/*
     * idle_spawn_rate is the number of children that will be spawned on the
     * next maintenance cycle if there aren't enough idle servers.  It is
     * doubled up to MAX_SPAWN_RATE, and reset only when a cycle goes by
     * without the need to spawn.
     */",undetermined
3498,httpd,UNKNOWN,"/* The event MPM respects a couple of runtime flags that can aid
 * in debugging. Setting the -DNO_DETACH flag will prevent the root process
 * from detaching from its controlling terminal. Additionally, setting
 * the -DONE_PROCESS flag (which implies -DNO_DETACH) will get you the
 * child_main loop running in the process which originally started up.
 * This gives you a pretty nice debugging environment.  (You'll get a SIGHUP
 * early in standalone_main; just continue through.  This is the server
 * trying to kill off any child processes which it might have lying
 * around --- Apache doesn't keep track of their pids, it just sends
 * SIGHUP to the process group, ignoring it in the root process.
 * Continue through and you'll be fine.).
 */",undetermined
3499,httpd,UNKNOWN,/* Pool for config stuff */,undetermined
3500,httpd,UNKNOWN,/* Pool for httpd child stuff */,undetermined
3501,httpd,UNKNOWN,"/* Linux getpid() doesn't work except in main
                                   thread. Use this instead */",undetermined
3502,httpd,UNKNOWN,"/* The LISTENER_SIGNAL signal will be sent from the main thread to the
 * listener thread to wake it up for graceful termination (what a child
 * process from an old generation does when the admin does ""apachectl
 * graceful"").  This signal will be blocked in all threads of a child
 * process except for the listener thread.
 */",undetermined
3503,httpd,UNKNOWN,"/* An array of socket descriptors in use by each thread used to
 * perform a non-graceful (forced) shutdown of the server.
 */",undetermined
3504,httpd,UNKNOWN,"/*
     * XXX: This is not yet optimal. If many workers suddenly become available,
     * XXX: the parent may kill some processes off too soon.
     */",undetermined
3505,httpd,UNKNOWN,"/* XXX there is an obscure path that this doesn't handle perfectly:
         *     right after listener thread is created but before
         *     listener_os_thread is set, the first worker thread hits an
         *     error and starts graceful termination
         */",undetermined
3506,httpd,UNKNOWN,/* unblock the listener if it's waiting for a worker */,undetermined
3507,httpd,UNKNOWN,"/*
     * we should just be able to ""kill(ap_my_pid, LISTENER_SIGNAL)"" on all
     * platforms and wake up the listener thread since it is the only thread
     * with SIGHUP unblocked, but that doesn't work on Linux
     */",undetermined
3508,httpd,UNKNOWN,"/* in case we weren't called from the listener thread, wake up the
     * listener thread
     */",undetermined
3509,httpd,UNKNOWN,"/* for ungraceful termination, let the workers exit now;
     * for graceful termination, the listener thread will notify the
     * workers to exit once it has stopped accepting new connections
     */",undetermined
3510,httpd,UNKNOWN,/* forcefully kill all current connections */,undetermined
3511,httpd,UNKNOWN,/* child had a scoreboard slot? */,undetermined
3512,httpd,UNKNOWN,"/* Don't forget about this exiting child process, or we
     * won't be able to kill it if it doesn't exit by the
     * time the server is shut down.
     */",undetermined
3513,httpd,UNKNOWN,/* a clean exit from a child with proper cleanup */,undetermined
3514,httpd,UNKNOWN,/* slot */,undetermined
3515,httpd,UNKNOWN,"/*****************************************************************
 * Connection structures and accounting...
 */",undetermined
3516,httpd,UNKNOWN,/* volatile because they're updated from a signal handler */,undetermined
3517,httpd,UNKNOWN,"/*
 * ap_start_shutdown() and ap_start_restart(), below, are a first stab at
 * functions to initiate shutdown or restart without relying on signals.
 * Previously this was initiated in sig_term() and restart() signal handlers,
 * but we want to be able to start a shutdown/restart from other sources --
 * e.g. on Win32, from the service manager. Now the service manager can
 * call ap_start_shutdown() or ap_start_restart() as appropiate.  Note that
 * these functions can also be called by the child processes, since global
 * variables are no longer used to pass on the required action to the parent.
 *
 * These should only be called from the parent process itself, since the
 * parent process will use the shutdown_pending and restart_pending variables
 * to determine whether to shutdown or restart. The child process should
 * call signal_parent() directly to tell the parent to die -- this will
 * cause neither of those variable to be set, which the parent will
 * assume means something serious is wrong (which it will be, for the
 * child to force an exit) and so do an exit anyway.
 */",undetermined
3518,httpd,UNKNOWN,"/* Um, is this _probably_ not an error, if the user has
         * tried to do a shutdown twice quickly, so we won't
         * worry about reporting it.
         */",undetermined
3519,httpd,UNKNOWN,/* do a graceful restart if graceful == 1 */,undetermined
3520,httpd,UNKNOWN,/* Probably not an error - don't bother reporting it */,undetermined
3521,httpd,UNKNOWN,"/* For systems following the LFS standard, ignoring SIGXFSZ allows
     * a write() beyond the 2GB limit to fail gracefully with E2BIG
     * rather than terminate the process. */",undetermined
3522,httpd,UNKNOWN,"/* we want to ignore HUPs and AP_SIG_GRACEFUL while we're busy
     * processing one */",undetermined
3523,httpd,UNKNOWN,/* SIGXCPU */,undetermined
3524,httpd,UNKNOWN,/* SIGXFSZ */,undetermined
3525,httpd,UNKNOWN,/* SIGHUP */,undetermined
3526,httpd,UNKNOWN,/* AP_SIG_GRACEFUL */,undetermined
3527,httpd,UNKNOWN,/* AP_SIG_GRACEFUL_STOP */,undetermined
3528,httpd,UNKNOWN,/* SIGPIPE */,undetermined
3529,httpd,UNKNOWN,"/*
     * If some module requested a shortened waiting period, only wait for
     * 2s (SECONDS_TO_LINGER). This is useful for mitigating certain
     * DoS attacks.
     */",undetermined
3530,httpd,UNKNOWN,"/*
 * Close our side of the connection, flushing data to the client first.
 * Pre-condition: cs is not in any timeout queue and not in the pollset,
 *                timeout_mutex is not locked
 * return: 0 if connection is fully closed,
 *         1 if connection is lingering
 * May only be called by worker thread.
 */",undetermined
3531,httpd,UNKNOWN,"/*
 * Close our side of the connection, NOT flushing data to the client.
 * This should only be called if there has been an error or if we know
 * that our send buffers are empty.
 * Pre-condition: cs is not in any timeout queue and not in the pollset,
 *                timeout_mutex is not locked
 * return: 0 if connection is fully closed,
 *         1 if connection is lingering
 * may be called by listener thread
 */",undetermined
3532,httpd,UNKNOWN,"/*
 * forcibly close a lingering connection after the lingering period has
 * expired
 * Pre-condition: cs is not in any timeout queue and not in the pollset
 * return: irrelevant (need same prototype as start_lingering_close)
 */",undetermined
3533,httpd,UNKNOWN,"/*
 * process one connection in the worker
 */",undetermined
3534,httpd,UNKNOWN,/* XXX: This will cause unbounded mem usage for long lasting connections */,undetermined
3535,httpd,UNKNOWN,/* This is a new connection */,undetermined
3536,httpd,UNKNOWN,"/**
         * XXX If the platform does not have a usable way of bundling
         * accept() with a socket readability check, like Win32,
         * and there are measurable delays before the
         * socket is readable due to the first data packet arriving,
         * it might be better to create the cs on the listener thread
         * with the state set to CONN_STATE_CHECK_REQUEST_LINE_READABLE
         *
         * FreeBSD users will want to enable the HTTP accept filter
         * module in their kernel for the highest performance
         * When the accept filter is active, sockets are kept in the
         * kernel until a HTTP request is received.
         */",undetermined
3537,httpd,UNKNOWN,"/* Since we have an input filter which 'cloggs' the input stream,
         * like mod_ssl, lets just do the normal read from input filters,
         * like the Worker MPM does.
         */",undetermined
3538,httpd,UNKNOWN,"/* state will be updated upon return
             * fall thru to either wait for readability/timeout or
             * do lingering close
             */",undetermined
3539,httpd,UNKNOWN,"/* Still in WRITE_COMPLETION_STATE:
             * Set a write timeout for this connection, and let the
             * event thread poll for writeability.
             */",undetermined
3540,httpd,UNKNOWN,"/* It greatly simplifies the logic to use a single timeout value here
         * because the new element can just be added to the end of the list and
         * it will stay sorted in expiration time sequence.  If brand new
         * sockets are sent to the event thread for a readability check, this
         * will be a slight behavior change - they use the non-keepalive
         * timeout today.  With a normal client, the socket will be readable in
         * a few milliseconds anyway.
         */",undetermined
3541,httpd,UNKNOWN,/* Add work to pollset. */,undetermined
3542,httpd,UNKNOWN,"/*
     * Prevent this connection from writing to our connection state after it
     * is no longer associated with this thread. This would happen if the EOR
     * bucket is destroyed from the listener thread due to a connection abort
     * or timeout.
     */",undetermined
3543,httpd,UNKNOWN,"/* conns_this_child has gone to zero or below.  See if the admin coded
   ""MaxConnectionsPerChild 0"", and keep going in that case.  Doing it this way
   simplifies the hot path in worker_thread */",undetermined
3544,httpd,UNKNOWN,/* keep going */,undetermined
3545,httpd,UNKNOWN,/* wake up the main thread */,undetermined
3546,httpd,UNKNOWN,"/* XXX If specifying SIG_IGN is guaranteed to unblock a syscall,
     *     then we don't need this goofy function.
     */",undetermined
3547,httpd,UNKNOWN,"/*
 * Pre-condition: pfd->cs is neither in pollset nor timeout queue
 * this function may only be called by the listener
 */",undetermined
3548,httpd,UNKNOWN,"/* trash the connection; we couldn't queue the connected
         * socket to a worker
         */",undetermined
3549,httpd,UNKNOWN,"/* get_worker:
 *     If *have_idle_worker_p == 0, reserve a worker thread, and set
 *     *have_idle_worker_p = 1.
 *     If *have_idle_worker_p is already 1, will do nothing.
 *     If blocking == 1, block if all workers are currently busy.
 *     If no worker was available immediately, will set *all_busy to 1.
 *     XXX: If there are no workers, we should not block immediately but
 *     XXX: close all keep-alive connections first.
 */",undetermined
3550,httpd,UNKNOWN,"/* already reserved a worker thread - must have hit a
         * transient error on a previous pass
         */",undetermined
3551,httpd,UNKNOWN,"/* XXXXXX: Convert to skiplist or other better data structure
 * (yes, this is VERY VERY VERY VERY BAD)
 */",undetermined
3552,httpd,UNKNOWN,/* Structures to reuse */,undetermined
3553,httpd,UNKNOWN,/* Active timers */,undetermined
3554,httpd,UNKNOWN,"/* oh yeah, and make locking smarter/fine grained. */",undetermined
3555,httpd,UNKNOWN,"/* XXXXX: lol, pool allocation without a context from any thread.Yeah. Right. MPMs Suck. */",undetermined
3556,httpd,UNKNOWN,/* XXXXX: optimize */,undetermined
3557,httpd,UNKNOWN,"/* Okay, insert sorted by when.. */",undetermined
3558,httpd,UNKNOWN,"/*
 * Close socket and clean up if remote closed its end while we were in
 * lingering close.
 * Only to be called in the listener thread;
 * Pre-condition: cs is in one of the linger queues and in the pollset
 */",undetermined
3559,httpd,UNKNOWN,/* socket is already in non-blocking state */,undetermined
3560,httpd,UNKNOWN,"/* call 'func' for all elements of 'q' with timeout less than 'timeout_time'.
 * Pre-condition: timeout_mutex must already be locked
 * Post-condition: timeout_mutex will be locked again
 */",undetermined
3561,httpd,UNKNOWN,/* Pool for per-transaction stuff */,undetermined
3562,httpd,UNKNOWN,"/* the following times out events that are really close in the future
     *   to prevent extra poll calls
     *
     * current value is .1 second
     */",undetermined
3563,httpd,UNKNOWN,"/* Unblock the signal used to wake this thread up, and set a handler for
     * it.
     */",undetermined
3564,httpd,UNKNOWN,/* trace log status every second */,undetermined
3565,httpd,UNKNOWN,/* one of the sockets is readable */,undetermined
3566,httpd,UNKNOWN,/* don't wait for a worker for a keepalive request */,undetermined
3567,httpd,UNKNOWN,/* FALL THROUGH */,undetermined
3568,httpd,UNKNOWN,"/*
                     * Some of the pollset backends, like KQueue or Epoll
                     * automagically remove the FD if the socket is closed,
                     * therefore, we can accept _SUCCESS or _NOTFOUND,
                     * and we still want to keep going
                     */",undetermined
3569,httpd,UNKNOWN,"/* If we didn't get a worker immediately for a keep-alive
                     * request, we close the connection, so that the client can
                     * re-connect to a different process.
                     */",undetermined
3570,httpd,UNKNOWN,/* A Listener Socket is ready for an accept() */,undetermined
3571,httpd,UNKNOWN,/* create a new transaction pool for each accepted socket */,undetermined
3572,httpd,UNKNOWN,"/* later we trash rv and rely on csd to indicate
                     * success/failure
                     */",undetermined
3573,httpd,UNKNOWN,"/* E[NM]FILE, ENOMEM, etc */",undetermined
3574,httpd,UNKNOWN,"/* trash the connection; we couldn't queue the connected
                             * socket to a worker
                             */",undetermined
3575,httpd,UNKNOWN,/* if:else on pt->type */,undetermined
3576,httpd,UNKNOWN,/* while for processing poll */,undetermined
3577,httpd,UNKNOWN,"/* XXX possible optimization: stash the current time for use as
         * r->request_time for new requests
         */",undetermined
3578,httpd,UNKNOWN,/* we only do this once per 0.1s (TIMEOUT_FUDGE_FACTOR) */,undetermined
3579,httpd,UNKNOWN,/* handle timed out sockets */,undetermined
3580,httpd,UNKNOWN,/* Step 1: keepalive timeouts */,undetermined
3581,httpd,UNKNOWN,"/* If all workers are busy, we kill older keep-alive connections so that they
             * may connect to another process.
             */",undetermined
3582,httpd,UNKNOWN,/* Step 2: write completion timeouts */,undetermined
3583,httpd,UNKNOWN,/* Step 3: (normal) lingering close completion timeouts */,undetermined
3584,httpd,UNKNOWN,/* Step 4: (short) lingering close completion timeouts */,undetermined
3585,httpd,UNKNOWN,"/*
         * XXX: do we need to set some timeout that re-enables the listensocks
         * XXX: in case no other event occurs?
         */",undetermined
3586,httpd,UNKNOWN,/* listener main loop */,undetermined
3587,httpd,UNKNOWN,"/* XXX For ungraceful termination/restart, we definitely don't want to
 *     wait for active connections to finish but we may want to wait
 *     for idle workers to get out of the queue code and release mutexes,
 *     since those mutexes are cleaned up pretty soon and some systems
 *     may not react favorably (i.e., segfault) if operations are attempted
 *     on cleaned-up mutexes.
 */",undetermined
3588,httpd,UNKNOWN,/* Pool for per-transaction stuff */,undetermined
3589,httpd,UNKNOWN,"/* We get APR_EOF during a graceful shutdown once all the
             * connections accepted by this server process have been handled.
             */",undetermined
3590,httpd,UNKNOWN,"/* We get APR_EINTR whenever ap_queue_pop() has been interrupted
             * from an explicit call to ap_queue_interrupt_all(). This allows
             * us to unblock threads stuck in ap_queue_pop() when a shutdown
             * is pending.
             *
             * If workers_may_exit is set and this is ungraceful termination/
             * restart, we are bound to get an error on some systems (e.g.,
             * AIX, which sanity-checks mutex operations) since the queue
             * may have already been cleaned up.  Don't log the ""error"" if
             * workers_may_exit is set.
             */",undetermined
3591,httpd,UNKNOWN,/* We got some other error. */,undetermined
3592,httpd,UNKNOWN,/* listener thread doesn't have a thread slot */,undetermined
3593,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
3594,httpd,UNKNOWN,"/* XXX under some circumstances not understood, children can get stuck
 *     in start_threads forever trying to take over slots which will
 *     never be cleaned up; for now there is an APLOG_DEBUG message issued
 *     every so often when this condition occurs
 */",undetermined
3595,httpd,UNKNOWN,"/* We must create the fd queues before we start up the listener
     * and worker threads. */",undetermined
3596,httpd,UNKNOWN,"/* If we want to conserve memory, let's not keep an unlimited number of
         * pools & allocators.
         * XXX: This should probably be a separate config directive
         */",undetermined
3597,httpd,UNKNOWN,"/* Create the timeout mutex and main pollset before the listener
     * thread starts.
     */",undetermined
3598,httpd,UNKNOWN,/* Create the main pollset */,undetermined
3599,httpd,UNKNOWN,"/* XXX don't we need more, to handle
                                                * connections in K-A or lingering
                                                * close?
                                                */",undetermined
3600,httpd,UNKNOWN,/* threads_per_child does not include the listener thread */,undetermined
3601,httpd,UNKNOWN,/* We are creating threads right now */,undetermined
3602,httpd,UNKNOWN,"/* We let each thread update its own scoreboard entry.  This is
             * done because it lets us deal with tid better.
             */",undetermined
3603,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
3604,httpd,UNKNOWN,/* Start the listener only when there are workers available */,undetermined
3605,httpd,UNKNOWN,/* wait for previous generation to clean up an entry */,undetermined
3606,httpd,UNKNOWN,/* every couple of minutes */,undetermined
3607,httpd,UNKNOWN,"/* What state should this child_main process be listed as in the
     * scoreboard...?
     *  ap_update_child_status_from_indexes(my_child_num, i, SERVER_STARTING,
     *                                      (request_rec *) NULL);
     *
     *  This state should be listed separately in the scoreboard, in some kind
     *  of process_status, not mixed in with the worker threads' status.
     *  ""life_status"" is almost right, but it's in the worker's structure, and
     *  the name could be clearer.   gla
     */",undetermined
3608,httpd,UNKNOWN,"/* deal with a rare timing window which affects waking up the
         * listener thread...  if the signal sent to the listener thread
         * is delivered between the time it verifies that the
         * listener_may_exit flag is clear and the time it enters a
         * blocking syscall, the signal didn't do any good...  work around
         * that by sleeping briefly and sending it again
         */",undetermined
3609,httpd,UNKNOWN,/* listener has not stopped accepting yet */,undetermined
3610,httpd,UNKNOWN,/* if we ever created this thread */,undetermined
3611,httpd,UNKNOWN,"/* tell it to give up in case it is still
                                 * trying to take over slots from a
                                 * previous generation
                                 */",undetermined
3612,httpd,UNKNOWN,"/* for benefit of any hooks that run as this
                                         * child initializes
                                         */",undetermined
3613,httpd,UNKNOWN,"/*stuff to do before we switch id's, so we have permissions. */",undetermined
3614,httpd,UNKNOWN,/* done with init critical section */,undetermined
3615,httpd,UNKNOWN,"/* Just use the standard apr_setup_signal_thread to block all signals
     * from being received.  The child processes no longer use signals for
     * any communication with the parent process.
     */",undetermined
3616,httpd,UNKNOWN,/* coding a value of zero means infinity */,undetermined
3617,httpd,UNKNOWN,/* Setup worker threads */,undetermined
3618,httpd,UNKNOWN,"/* clear the storage; we may not create all our threads immediately,
     * and we want a 0 entry to indicate a thread which was not created
     */",undetermined
3619,httpd,UNKNOWN,/* 0 means PTHREAD_CREATE_JOINABLE */,undetermined
3620,httpd,UNKNOWN,/* let the parent decide how bad this really is */,undetermined
3621,httpd,UNKNOWN,"/* If we are only running in one_process mode, we will want to
     * still handle signals. */",undetermined
3622,httpd,UNKNOWN,/* Block until we get a terminating signal. */,undetermined
3623,httpd,UNKNOWN,"/* make sure the start thread has finished; signal_threads()
         * and join_workers() depend on that
         */",undetermined
3624,httpd,UNKNOWN,"/* XXX join_start_thread() won't be awakened if one of our
         *     threads encounters a critical error and attempts to
         *     shutdown this child
         */",undetermined
3625,httpd,UNKNOWN,"/* helps us terminate a little more quickly than the dispatch of the
         * signal thread; beats the Pipe of Death and the browsers
         */",undetermined
3626,httpd,UNKNOWN,"/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */",undetermined
3627,httpd,UNKNOWN,/* !one_process */,undetermined
3628,httpd,UNKNOWN,"/* remove SIGTERM from the set of blocked signals...  if one of
         * the other threads in the process needs to take us down
         * (e.g., for MaxConnectionsPerChild) it will send us SIGTERM
         */",undetermined
3629,httpd,UNKNOWN,/* Watch for any messages from the parent over the POD */,undetermined
3630,httpd,UNKNOWN,/* see if termination was triggered while we slept */,undetermined
3631,httpd,UNKNOWN,"/* make sure the start thread has finished;
                 * signal_threads() and join_workers depend on that
                 */",undetermined
3632,httpd,UNKNOWN,"/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */",undetermined
3633,httpd,UNKNOWN,/* NOTREACHED */,undetermined
3634,httpd,UNKNOWN,"/* fork didn't succeed.  There's no need to touch the scoreboard;
         * if we were trying to replace a failed child process, then
         * server_main_loop() marked its workers SERVER_DEAD, and if
         * we were trying to replace a child process that exited normally,
         * its worker_thread()s left SERVER_DEAD or SERVER_GRACEFUL behind.
         */",undetermined
3635,httpd,UNKNOWN,"/* In case system resources are maxxed out, we don't want
           Apache running away with the CPU trying to fork over and
           over and over again. */",undetermined
3636,httpd,UNKNOWN,"/* By default, AIX binds to a single processor.  This bit unbinds
         * children which will then bind to another CPU.
         */",undetermined
3637,httpd,UNKNOWN,/* NOTREACHED */,undetermined
3638,httpd,UNKNOWN,/* else */,undetermined
3639,httpd,UNKNOWN,"/* This new child process is squatting on the scoreboard
         * entry owned by an exiting child process, which cannot
         * exit until all active requests complete.
         */",undetermined
3640,httpd,UNKNOWN,/* start up a bunch of children */,undetermined
3641,httpd,UNKNOWN,/* initialize the free_list */,undetermined
3642,httpd,UNKNOWN,"/* Initialization to satisfy the compiler. It doesn't know
         * that threads_per_child is always > 0 */",undetermined
3643,httpd,UNKNOWN,"/* short cut if all active processes have been examined and
             * enough empty scoreboard slots have been found
             */",undetermined
3644,httpd,UNKNOWN,/* XXX any_dying_threads is probably no longer needed    GLA */,undetermined
3645,httpd,UNKNOWN,"/* We consider a starting server as idle because we started it
             * at least a cycle ago, and if it still hasn't finished starting
             * then we're just going to swamp things worse by forking more.
             * So we hopefully won't need to fork more if we count it.
             * This depends on the ordering of SERVER_READY and SERVER_STARTING.
             */",undetermined
3646,httpd,UNKNOWN,"/* XXX just set all_dead_threads in outer
                                   for loop if no pid?  not much else matters */",undetermined
3647,httpd,UNKNOWN,/* no process in the slot */,undetermined
3648,httpd,UNKNOWN,/* or at least one is going away */,undetermined
3649,httpd,UNKNOWN,"/* great! we prefer these, because the new process can
                 * start more threads sooner.  So prioritize this slot
                 * by putting it ahead of any slots with active threads.
                 *
                 * first, make room by moving a slot that's potentially still
                 * in use to the end of the array
                 */",undetermined
3650,httpd,UNKNOWN,"/* slot is still in use - back of the bus
                 */",undetermined
3651,httpd,UNKNOWN,/* XXX if (!ps->quiescing)     is probably more reliable  GLA */,undetermined
3652,httpd,UNKNOWN,"/* Assume this is a transient error, even though it may not be.  Leave
             * the server up in case it is able to serve some requests or the
             * problem will be resolved.
             */",undetermined
3653,httpd,UNKNOWN,"/* looks like a basket case, as no child ever fully initialized; give up.
             */",undetermined
3654,httpd,UNKNOWN,/* the child already logged the failure details */,undetermined
3655,httpd,UNKNOWN,/* Kill off one child */,undetermined
3656,httpd,UNKNOWN,/* terminate the free list */,undetermined
3657,httpd,UNKNOWN,"/* scoreboard is full, can't fork */",undetermined
3658,httpd,UNKNOWN,/* only report this condition once */,undetermined
3659,httpd,UNKNOWN,"/* the next time around we want to spawn twice as many if this
             * wasn't good enough, but not if we've just done a graceful
             */",undetermined
3660,httpd,UNKNOWN,"/* fix race condition found in PR 39311
                 * A child created at the same time as a graceful happens 
                 * can find the lock missing and create a fatal error.
                 * It is not fatal for the last generation to be in this state.
                 */",undetermined
3661,httpd,UNKNOWN,"/* tell perform_idle_server_maintenance to check into this
                 * on the next timer pop
                 */",undetermined
3662,httpd,UNKNOWN,/* non-fatal death... note that it's gone in the scoreboard. */,undetermined
3663,httpd,UNKNOWN,"/* resource shortage, minimize the fork rate */",undetermined
3664,httpd,UNKNOWN,"/* we're still doing a 1-for-1 replacement of dead
                     * children with new children
                     */",undetermined
3665,httpd,UNKNOWN,/* already out of the scoreboard */,undetermined
3666,httpd,UNKNOWN,"/* resource shortage, minimize the fork rate */",undetermined
3667,httpd,UNKNOWN,/* handled */,undetermined
3668,httpd,UNKNOWN,"/* Great, we've probably just lost a slot in the
                 * scoreboard.  Somehow we don't know about this child.
                 */",undetermined
3669,httpd,UNKNOWN,"/* Don't perform idle maintenance when a child dies,
             * only do it when there's a timeout.  Remember only a
             * finite number of children can die, and it's pretty
             * pathological for a lot to die suddenly.
             */",undetermined
3670,httpd,UNKNOWN,"/* we hit a 1 second timeout in which none of the previous
             * generation of children needed to be reaped... so assume
             * they're all done, and pick up the slack if any is left.
             */",undetermined
3671,httpd,UNKNOWN,"/* In any event we really shouldn't do the code below because
             * few of the servers we just started are in the IDLE state
             * yet, so we'd mistakenly create an extra server.
             */",undetermined
3672,httpd,UNKNOWN,"/* fix the generation number in the global score; we just got a new,
         * cleared scoreboard
         */",undetermined
3673,httpd,UNKNOWN,/* Don't thrash... */,undetermined
3674,httpd,UNKNOWN,"/* If we're doing a graceful_restart then we're going to see a lot
     * of children exiting immediately when we get into the main loop
     * below (because we just sent them AP_SIG_GRACEFUL).  This happens pretty
     * rapidly... and for each one that exits we may start a new one, until
     * there are at least min_spare_threads idle threads, counting across
     * all children.  But we may be permitted to start more children than
     * that, so we'll just keep track of how many we're
     * supposed to start up without the 1 second penalty between each fork.
     */",undetermined
3675,httpd,UNKNOWN,"/* give the system some time to recover before kicking into
         * exponential mode */",undetermined
3676,httpd,UNKNOWN,"/* Time to shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */",undetermined
3677,httpd,UNKNOWN,/* Start with SIGTERM */,undetermined
3678,httpd,UNKNOWN,/* cleanup pid file on normal shutdown */,undetermined
3679,httpd,UNKNOWN,"/* Time to gracefully shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */",undetermined
3680,httpd,UNKNOWN,"/* Close our listeners, and then ask our children to do same */",undetermined
3681,httpd,UNKNOWN,/* cleanup pid file on normal shutdown */,undetermined
3682,httpd,UNKNOWN,/* Don't really exit until each child has finished */,undetermined
3683,httpd,UNKNOWN,/* Pause for a second */,undetermined
3684,httpd,UNKNOWN,/* Relieve any children which have now exited */,undetermined
3685,httpd,UNKNOWN,/* Having just one child is enough to stay around */,undetermined
3686,httpd,UNKNOWN,"/* We might be here because we received SIGTERM, either
         * way, try and make sure that all of our processes are
         * really dead.
         */",undetermined
3687,httpd,UNKNOWN,/* we've been told to restart */,undetermined
3688,httpd,UNKNOWN,/* not worth thinking about */,undetermined
3689,httpd,UNKNOWN,/* advance to the next generation */,undetermined
3690,httpd,UNKNOWN,"/* XXX: we really need to make sure this new generation number isn't in
     * use by any of the children.
     */",undetermined
3691,httpd,UNKNOWN,/* wake up the children...time to die.  But we'll have more soon */,undetermined
3692,httpd,UNKNOWN,"/* This is mostly for debugging... so that we know what is still
         * gracefully dealing with existing request.
         */",undetermined
3693,httpd,UNKNOWN,"/* Kill 'em all.  Since the child acts the same on the parents SIGTERM
         * and a SIGHUP, we may as well use the same signal, because some user
         * pthreads are stealing signals from us left and right.
         */",undetermined
3694,httpd,UNKNOWN,/* Start with SIGTERM */,undetermined
3695,httpd,UNKNOWN,"/* This really should be a post_config hook, but the error log is already
 * redirected by that point, so we need to do this in the open_logs phase.
 */",undetermined
3696,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
3697,httpd,UNKNOWN,"/* sigh, want this only the second time around */",undetermined
3698,httpd,UNKNOWN,"/* before we detach, setup crash handlers to log to errorlog */",undetermined
3699,httpd,UNKNOWN,"/* the reverse of pre_config, we want this only the first time around */",undetermined
3700,httpd,UNKNOWN,"/* you cannot change ServerLimit across a restart; ignore
     * any such attempts
     */",undetermined
3701,httpd,UNKNOWN,/* don't need a startup console version here */,undetermined
3702,httpd,UNKNOWN,"/* you cannot change ThreadLimit across a restart; ignore
     * any such attempts
     */",undetermined
3703,httpd,UNKNOWN,/* don't need a startup console version here */,undetermined
3704,httpd,UNKNOWN,/* ap_daemons_to_start > ap_daemons_limit checked in ap_mpm_run() */,undetermined
3705,httpd,UNKNOWN,"/* max_spare_threads < min_spare_threads + threads_per_child
     * checked in ap_mpm_run()
     */",undetermined
3706,httpd,UNKNOWN,"/* Our open_logs hook function must run before the core's, or stderr
     * will be redirected to a file, and the messages won't print to the
     * console.
     */",undetermined
3707,httpd,UNKNOWN,"/* we need to set the MPM state before other pre-config hooks use MPM query
     * to retrieve it, so register as REALLY_FIRST
     */",undetermined
3708,httpd,UNKNOWN,/* hook to run before apache parses args */,undetermined
3709,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
3710,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
3711,httpd,UNKNOWN,/* create per-server config structure */,undetermined
3712,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
3713,httpd,UNKNOWN,/* command apr_table_t */,undetermined
3714,httpd,UNKNOWN,/* register_hooks */,undetermined
3715,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3716,httpd,UNKNOWN,"/**
                              * 0 or positive: number of idle worker threads
                              * negative: number of threads blocked waiting
                              *           for an idle worker
                              */",undetermined
3717,httpd,UNKNOWN,/* Clean up any pools in the recycled list */,undetermined
3718,httpd,UNKNOWN,/* Atomically increment the count of idle workers */,undetermined
3719,httpd,UNKNOWN,"/*
     * TODO: The atomics expect unsigned whereas we're using signed.
     *       Need to double check that they work as expected or else
     *       rework how we determine blocked.
     */",undetermined
3720,httpd,UNKNOWN,"/* If other threads are waiting on a worker, wake one up */",undetermined
3721,httpd,UNKNOWN,/* back out dec */,undetermined
3722,httpd,UNKNOWN,"/* Atomically decrement the idle worker count, saving the old value */",undetermined
3723,httpd,UNKNOWN,/* See TODO in ap_queue_info_set_idle() */,undetermined
3724,httpd,UNKNOWN,/* Block if there weren't any idle workers */,undetermined
3725,httpd,UNKNOWN,/* See TODO in ap_queue_info_set_idle() */,undetermined
3726,httpd,UNKNOWN,/* back out dec */,undetermined
3727,httpd,UNKNOWN,"/* Re-check the idle worker count to guard against a
         * race condition.  Now that we're in the mutex-protected
         * region, one of two things may have happened:
         *   - If the idle worker count is still negative, the
         *     workers are all still busy, so it's safe to
         *     block on a condition variable.
         *   - If the idle worker count is non-negative, then a
         *     worker has become idle since the first check
         *     of queue_info->idlers above.  It's possible
         *     that the worker has also signaled the condition
         *     variable--and if so, the listener missed it
         *     because it wasn't yet blocked on the condition
         *     variable.  But if the idle worker count is
         *     now non-negative, it's safe for this function to
         *     return immediately.
         *
         *     A negative value in queue_info->idlers tells how many
         *     threads are waiting on an idle worker.
         */",undetermined
3728,httpd,UNKNOWN,"/* If we have been given a pool to recycle, atomically link
     * it into the queue_info's list of recycled pools
     */",undetermined
3729,httpd,UNKNOWN,"/*
         * Save queue_info->recycled_pool in local variable next because
         * new_recycle->next can be changed after apr_atomic_casptr
         * function call. For gory details see PR 44402.
         */",undetermined
3730,httpd,UNKNOWN,/* Atomically pop a pool from the recycled list */,undetermined
3731,httpd,UNKNOWN,"/* This function is safe only as long as it is single threaded because
     * it reaches into the queue and accesses ""next"" which can change.
     * We are OK today because it is only called from the listener thread.
     * cas-based pushes do not have the same limitation - any number can
     * happen concurrently with a single cas-based pop.
     */",undetermined
3732,httpd,UNKNOWN,/* Atomically pop a pool from the recycled list */,undetermined
3733,httpd,UNKNOWN,"/**
 * Detects when the fd_queue_t is full. This utility function is expected
 * to be called from within critical sections, and is not threadsafe.
 */",undetermined
3734,httpd,UNKNOWN,"/**
 * Detects when the fd_queue_t is empty. This utility function is expected
 * to be called from within critical sections, and is not threadsafe.
 */",undetermined
3735,httpd,UNKNOWN,"/**
 * Callback routine that is called to destroy this
 * fd_queue_t when its pool is destroyed.
 */",undetermined
3736,httpd,UNKNOWN,"/* Ignore errors here, we can't do anything about them anyway.
     * XXX: We should at least try to signal an error here, it is
     * indicative of a programmer error. -aaron */",undetermined
3737,httpd,UNKNOWN,"/**
 * Initialize the fd_queue_t.
 */",undetermined
3738,httpd,UNKNOWN,/* Set all the sockets in the queue to NULL */,undetermined
3739,httpd,UNKNOWN,"/**
 * Push a new socket onto the queue.
 *
 * precondition: ap_queue_info_wait_for_idler has already been called
 *               to reserve an idle worker thread
 */",undetermined
3740,httpd,UNKNOWN,"/**
 * Retrieves the next available socket from the queue. If there are no
 * sockets available, it will block until one becomes available.
 * Once retrieved, the socket is placed into the address specified by
 * 'sd'.
 */",undetermined
3741,httpd,UNKNOWN,/* Keep waiting until we wake up and find that the queue is not empty. */,undetermined
3742,httpd,UNKNOWN,"/* If we wake up and it's still empty, then we were interrupted */",undetermined
3743,httpd,UNKNOWN,/* no more elements ever again */,undetermined
3744,httpd,UNKNOWN,/* AP_DEBUG */,undetermined
3745,httpd,UNKNOWN,"/* we must hold one_big_mutex when setting this... otherwise,
     * we could end up setting it and waking everybody up just after a
     * would-be popper checks it but right before they block
     */",undetermined
3746,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3747,httpd,UNKNOWN,"/**
 * @file  event/fdqueue.h
 * @brief fd queue declarations
 *
 * @addtogroup APACHE_MPM_EVENT
 * @{
 */",undetermined
3748,httpd,UNKNOWN,/* FDQUEUE_H */,undetermined
3749,httpd,UNKNOWN,/** @} */,undetermined
3750,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3751,httpd,UNKNOWN,"/**
 * @file  event/mpm_default.h
 * @brief Event MPM defaults
 *
 * @defgroup APACHE_MPM_EVENT Event MPM
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
3752,httpd,UNKNOWN,"/* Number of servers to spawn off by default --- also, if fewer than
 * this free when the caretaker checks, it will spawn more.
 */",undetermined
3753,httpd,UNKNOWN,"/* Maximum number of *free* server processes --- more than this, and
 * they will die off.
 */",undetermined
3754,httpd,UNKNOWN,"/* Minimum --- fewer than this, and more will be created */",undetermined
3755,httpd,UNKNOWN,/* AP_MPM_DEFAULT_H */,undetermined
3756,httpd,UNKNOWN,/** @} */,undetermined
3757,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3758,httpd,UNKNOWN,"/*
    apr_file_pipe_timeout_set((*pod)->pod_in, 0);
*/",undetermined
3759,httpd,UNKNOWN,/* close these before exec. */,undetermined
3760,httpd,UNKNOWN,"/* we need to surface EINTR so we'll have to grab the
     * native file descriptor and do the OS read() ourselves
     */",undetermined
3761,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3762,httpd,UNKNOWN,"/**
 * @file  event/pod.h
 * @brief pod definitions
 *
 * @addtogroup APACHE_MPM_EVENT
 * @{
 */",undetermined
3763,httpd,UNKNOWN,/** @} */,undetermined
3764,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3765,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3766,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3767,httpd,UNKNOWN,"/* We need to determine if subkeys exist on Win9x, to provide
         * consistent behavior with NT, which returns access denied
         * if subkeys exist when attempting to delete a key.
         */",undetermined
3768,httpd,UNKNOWN,"/* Retrieve a registry string value, and explode any envvars
     * that the system has configured (e.g. %SystemRoot%/someapp.exe)
     */",undetermined
3769,httpd,UNKNOWN,/* Read to NULL buffer to determine value size */,undetermined
3770,httpd,UNKNOWN,/* Read value based on size query above */,undetermined
3771,httpd,UNKNOWN,/* The size returned by ExpandEnvironmentStringsW is wchars */,undetermined
3772,httpd,UNKNOWN,"/* count wchars from RegQueryValueExW, rather than bytes */",undetermined
3773,httpd,UNKNOWN,"/* ###: deliberately overallocate all but the trailing null.
         * We could precalculate the exact buffer here instead, the question
         * is a matter of storage v.s. cpu cycles.
         */",undetermined
3774,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3775,httpd,UNKNOWN,/* Read to NULL buffer to determine value size */,undetermined
3776,httpd,UNKNOWN,/* Read value based on size query above */,undetermined
3777,httpd,UNKNOWN,"/* Advise ExpandEnvironmentStrings that we have a zero char
             * buffer to force computation of the required length.
             */",undetermined
3778,httpd,UNKNOWN,"/* Retrieve a registry string value, and explode any envvars
     * that the system has configured (e.g. %SystemRoot%/someapp.exe)
     */",undetermined
3779,httpd,UNKNOWN,"/* The size is the number of wchars consumed by apr_conv_utf8_to_ucs2
         * converted to bytes; the trailing L'\0' continues to be counted.
         */",undetermined
3780,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3781,httpd,UNKNOWN,"/* Retrieve a registry string value, and explode any envvars
     * that the system has configured (e.g. %SystemRoot%/someapp.exe)
     */",undetermined
3782,httpd,UNKNOWN,/* Read to NULL buffer to determine value size */,undetermined
3783,httpd,UNKNOWN,/* Read value based on size query above */,undetermined
3784,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3785,httpd,UNKNOWN,/* Read to NULL buffer to determine value size */,undetermined
3786,httpd,UNKNOWN,/* Read value based on size query above */,undetermined
3787,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3788,httpd,UNKNOWN,"/* Retrieve a registry string value, and explode any envvars
     * that the system has configured (e.g. %SystemRoot%/someapp.exe)
     */",undetermined
3789,httpd,UNKNOWN,"/* ###: deliberately overallocate plus two extra nulls.
         * We could precalculate the exact buffer here instead, the question
         * is a matter of storage v.s. cpu cycles.
         */",undetermined
3790,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3791,httpd,UNKNOWN,"/* Small possiblity the array is either unterminated
         * or single NULL terminated.  Avert.
         */",undetermined
3792,httpd,UNKNOWN,/* Element Count */,undetermined
3793,httpd,UNKNOWN,"/* Retrieve a registry string value, and explode any envvars
     * that the system has configured (e.g. %SystemRoot%/someapp.exe)
     */",undetermined
3794,httpd,UNKNOWN,/* For trailing second null */,undetermined
3795,httpd,UNKNOWN,/* Trailing second null */,undetermined
3796,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3797,httpd,UNKNOWN,/* For trailing second null */,undetermined
3798,httpd,UNKNOWN,/* Trailing second null */,undetermined
3799,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3800,httpd,UNKNOWN,/* defined WIN32 */,undetermined
3801,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3802,httpd,UNKNOWN,"/* modules.c --- major modules compiled into Apache for Win32.
 * Only insert an entry for a module if it must be compiled into
 * the core server
 */",undetermined
3803,httpd,UNKNOWN,/* core must come first */,undetermined
3804,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3805,httpd,UNKNOWN,"/**
 * @file win32/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_WIN32 win32
 * @ingroup  APACHE_OS
 * @{
 */",undetermined
3806,httpd,UNKNOWN,"/* Delegate windows include to the apr.h header, if USER or GDI declarations
 * are required (for a window rather than console application), include
 * windows.h prior to any other Apache header files.
 */",undetermined
3807,httpd,UNKNOWN,"/* Define command-line rewriting for this platform, handled by core.
 * For Windows, this is currently handled inside the WinNT MPM.
 * XXX To support a choice of MPMs, extract common platform behavior
 * into a function specified here.
 */",undetermined
3808,httpd,UNKNOWN,/* going away shortly... */,undetermined
3809,httpd,UNKNOWN,/* for exit() */,undetermined
3810,httpd,UNKNOWN,"/* BIG RED WARNING: exit() is mapped to allow us to capture the exit
 * status.  This header must only be included from modules linked into
 * the ApacheCore.dll - since it's a horrible behavior to exit() from
 * any module outside the main() block, and we -will- assume it's a
 * fatal error.
 */",undetermined
3811,httpd,UNKNOWN,"/* Defined in util_win32.c and available only to the core module for
 * win32 MPM design.
 */",undetermined
3812,httpd,UNKNOWN,/* kernel32 From WinBase.h      */,undetermined
3813,httpd,UNKNOWN,/* advapi32 From WinBase.h      */,undetermined
3814,httpd,UNKNOWN,/* mswsock  From WinSock.h      */,undetermined
3815,httpd,UNKNOWN,/* ws2_32   From WinSock2.h     */,undetermined
3816,httpd,UNKNOWN,/* must define as last idx_ + 1 */,undetermined
3817,httpd,UNKNOWN,/* Win2K kernel only */,undetermined
3818,httpd,UNKNOWN,/* WinNT kernel only */,undetermined
3819,httpd,UNKNOWN,/* Win9x kernel only */,undetermined
3820,httpd,UNKNOWN,/* def AP_DECLARE_EXPORT */,undetermined
3821,httpd,UNKNOWN,/* ndef AP_OS_H */,undetermined
3822,httpd,UNKNOWN,/* def WIN32 */,undetermined
3823,httpd,UNKNOWN,/** @} */,undetermined
3824,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3825,httpd,UNKNOWN,/* APR_HAS_UNICODE_FS */,undetermined
3826,httpd,UNKNOWN,/* share the same scratch buffer */,undetermined
3827,httpd,UNKNOWN,"/* This code is stolen from misc/win32/misc.c and apr_private.h
 * This helper code resolves late bound entry points
 * missing from one or more releases of the Win32 API...
 * but it sure would be nice if we didn't duplicate this code
 * from the APR ;-)
 */",undetermined
3828,httpd,UNKNOWN,"/* To share the semaphores with other processes, we need a NULL ACL
 * Code from MS KB Q106387
 */",undetermined
3829,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3830,httpd,UNKNOWN,"/**
 * @file win32/win32_config_layout.h
 * @brief This provides layout definitions for non-autoconf-based Windows
 * builds, and is copied to include/ap_config_layout.h during the build.
 */",undetermined
3831,httpd,UNKNOWN,/* Check for definition of DEFAULT_REL_RUNTIMEDIR */,undetermined
3832,httpd,UNKNOWN,/* AP_CONFIG_LAYOUT_H */,undetermined
3833,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3834,httpd,UNKNOWN,"/**
 * @file unix/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_UNIX unix
 * @ingroup  APACHE_OS
 * @{
 */",undetermined
3835,httpd,UNKNOWN,"/* On platforms where AP_NEED_SET_MUTEX_PERMS is defined, modules
 * should call unixd_set_*_mutex_perms on mutexes created in the
 * parent process. */",undetermined
3836,httpd,UNKNOWN,"/* Define command-line rewriting for this platform, handled by core.
 */",undetermined
3837,httpd,UNKNOWN,/* !APACHE_OS_H */,undetermined
3838,httpd,UNKNOWN,/** @} */,undetermined
3839,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3840,httpd,UNKNOWN,/* XXX */,undetermined
3841,httpd,UNKNOWN,/* If your platform doesn't define rlim_t then typedef it in ap_config.h */,undetermined
3842,httpd,UNKNOWN,"/* if we aren't running as root, cannot increase max */",undetermined
3843,httpd,UNKNOWN,"/* Allow suexec's ""/"" check to succeed */",undetermined
3844,httpd,UNKNOWN,"/* allocate space for 4 new args, the input args, and a null terminator */",undetermined
3845,httpd,UNKNOWN,"/*
    ** using a shell to execute suexec makes no sense thus
    ** we force everything to be APR_PROGRAM, and never
    ** APR_SHELLCMD
    */",undetermined
3846,httpd,UNKNOWN,/* XXX move to APR and externalize (but implement differently :) ) */,undetermined
3847,httpd,UNKNOWN,/* no gid change */,undetermined
3848,httpd,UNKNOWN,/* do nothing */,undetermined
3849,httpd,UNKNOWN,/* APR_PROC_MUTEX_IS_GLOBAL */,undetermined
3850,httpd,UNKNOWN,"/* In this case, apr_proc_mutex_t and apr_global_mutex_t are the same. */",undetermined
3851,httpd,UNKNOWN,/* APR_PROC_MUTEX_IS_GLOBAL */,undetermined
3852,httpd,UNKNOWN,"/* Our old behaviour here was to continue after accept()
     * errors.  But this leads us into lots of troubles
     * because most of the errors are quite fatal.  For
     * example, EMFILE can be caused by slow descriptor
     * leaks (say in a 3rd party module, or libc).  It's
     * foolish for us to continue after an EMFILE.  We also
     * seem to tickle kernel bugs on some platforms which
     * lead to never-ending loops here.  So it seems best
     * to just exit in most cases.
     */",undetermined
3853,httpd,UNKNOWN,"/* On HPUX 11.x, the 'ENOBUFS, No buffer space available'
         * error occurs because the accept() cannot complete.
         * You will not see ENOBUFS with 10.20 because the kernel
         * hides any occurrence from being returned to user space.
         * ENOBUFS with 11.x's TCP/IP stack is possible, and could
         * occur intermittently. As a work-around, we are going to
         * ignore ENOBUFS.
         */",undetermined
3854,httpd,UNKNOWN,"/* EPROTO on certain older kernels really means
         * ECONNABORTED, so we need to ignore it for them.
         * See discussion in new-httpd archives nh.9701
         * search for EPROTO.
         *
         * Also see nh.9603, search for EPROTO:
         * There is potentially a bug in Solaris 2.x x<6,
         * and other boxes that implement tcp sockets in
         * userland (i.e. on top of STREAMS).  On these
         * systems, EPROTO can actually result in a fatal
         * loop.  See PR#981 for example.  It's hard to
         * handle both uses of EPROTO.
         */",undetermined
3855,httpd,UNKNOWN,"/* Linux generates the rest of these, other tcp
         * stacks (i.e. bsd) tend to hide them behind
         * getsockopt() interfaces.  They occur when
         * the net goes sour or the client disconnects
         * after the three-way handshake has been done
         * in the kernel but before userland has picked
         * up the socket.
         */",undetermined
3856,httpd,UNKNOWN,"/* EAGAIN/EWOULDBLOCK can be returned on BSD-derived
         * TCP stacks when the connection is aborted before
         * we call connect, but only because our listener
         * sockets are non-blocking (AP_NONBLOCK_WHEN_MULTI_LISTEN)
         */",undetermined
3857,httpd,UNKNOWN,"/*
             * When the network layer has been shut down, there
             * is not much use in simply exiting: the parent
             * would simply re-create us (and we'd fail again).
             * Use the CHILDFATAL code to tear the server down.
             * @@@ Martin's idea for possible improvement:
             * A different approach would be to define
             * a new APEXIT_NETDOWN exit code, the reception
             * of which would make the parent shutdown all
             * children, then idle-loop until it detected that
             * the network is up again, and restart the children.
             * Ben Hyde noted that temporary ENETDOWN situations
             * occur in mobile IP.
             */",undetermined
3858,httpd,UNKNOWN,/*ENETDOWN*/,undetermined
3859,httpd,UNKNOWN,"/* If the socket has been closed in ap_close_listeners()
             * by the restart/stop action, we may get EBADF.
             * Do not print an error in this case.
             */",undetermined
3860,httpd,UNKNOWN,/* not initialized yet. */,undetermined
3861,httpd,UNKNOWN,/* no fork() because -X flag was specified */,undetermined
3862,httpd,UNKNOWN,/* only fork() because uid != 0 */,undetermined
3863,httpd,UNKNOWN,"/* Normally, ufork() is used to switch identities. */",undetermined
3864,httpd,UNKNOWN,"/* Determine the method for forking off a child in such a way as to
 * set both the POSIX and BS2000 user id's to the unprivileged user.
 */",undetermined
3865,httpd,UNKNOWN,"/* have we checked the OS version before? If yes return the previous
     * result - the OS release isn't going to change suddenly!
     */",undetermined
3866,httpd,UNKNOWN,/* not initialized yet */,undetermined
3867,httpd,UNKNOWN,/* No fork if the one_process option was set */,undetermined
3868,httpd,UNKNOWN,"/* If the user is unprivileged, use the normal fork() only. */",undetermined
3869,httpd,UNKNOWN,"/* This routine complements the setuid() call: it causes the BS2000 job
 * environment to be switched to the target user's user id.
 * That is important if CGI scripts try to execute native BS2000 commands.
 */",undetermined
3870,httpd,UNKNOWN,"/* We can be sure that no change to uid==0 is possible because of
     * the checks in http_core.c:set_user()
     */",undetermined
3871,httpd,UNKNOWN,"/* BS2000 requires a ""special"" version of fork() before a setuid() call */",undetermined
3872,httpd,UNKNOWN,/* Make user name all upper case - for some versions of ufork() */,undetermined
3873,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
3874,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3875,httpd,UNKNOWN,"/**
 * @file  unixd.h
 * @brief common stuff that unix MPMs will want
 *
 * @addtogroup APACHE_OS_UNIX
 * @{
 */",undetermined
3876,httpd,UNKNOWN,"/* Default user name and group name. These may be specified as numbers by
 * placing a # before a number */",undetermined
3877,httpd,UNKNOWN,/* suitable msg if !suexec_enabled */,undetermined
3878,httpd,UNKNOWN,"/**
 * One of the functions to set mutex permissions should be called in
 * the parent process on platforms that switch identity when the
 * server is started as root.
 * If the child init logic is performed before switching identity
 * (e.g., MPM setup for an accept mutex), it should only be called
 * for SysV semaphores.  Otherwise, it is safe to call it for all
 * mutex types.
 */",undetermined
3879,httpd,UNKNOWN,/* HAVE_KILLPG */,undetermined
3880,httpd,UNKNOWN,/* HAVE_KILLPG */,undetermined
3881,httpd,UNKNOWN,/** @} */,undetermined
3882,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3883,httpd,UNKNOWN,"/**
 * @file os2/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_OS2 os2
 * @ingroup  APACHE_OS
 * @{
 */",undetermined
3884,httpd,UNKNOWN,/* going away shortly... */,undetermined
3885,httpd,UNKNOWN,/* ! APACHE_OS_H */,undetermined
3886,httpd,UNKNOWN,/** @} */,undetermined
3887,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3888,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3889,httpd,UNKNOWN,"/* modules.c --- major modules compiled into Apache for NetWare.
 * Only insert an entry for a module if it must be compiled into
 * the core server
 */",undetermined
3890,httpd,UNKNOWN,/* core must come first */,undetermined
3891,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3892,httpd,UNKNOWN,"/**
 * @file netware/netware_config_layout.h
 * @brief This provides layout definitions for non-autoconf-based NetWare
 * builds, and is copied to include/ap_config_layout.h during the build.
 */",undetermined
3893,httpd,UNKNOWN,/* Check for definition of DEFAULT_REL_RUNTIMEDIR */,undetermined
3894,httpd,UNKNOWN,/* AP_CONFIG_LAYOUT_H */,undetermined
3895,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3896,httpd,UNKNOWN,"/**
 * @file netware/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_NETWARE netware
 * @ingroup  APACHE_OS
 * @{
 */",undetermined
3897,httpd,UNKNOWN,"/* Define command-line rewriting for this platform, handled by core.
 * For Netware, this is currently handled inside the Netware MPM.
 * XXX To support a choice of MPMs, extract common platform behavior
 * into a function specified here.
 */",undetermined
3898,httpd,UNKNOWN,/* Indicates whether the screen should be held open on exit*/,undetermined
3899,httpd,UNKNOWN,"/* Hold the screen open if there is an exit code and the hold_screen_on_exit flag >= 0 or the
   hold_screen_on_exit > 0.  If the hold_screen_on_exit flag is < 0 then close the screen no
   matter what the exit code is. */",undetermined
3900,httpd,UNKNOWN,/* ! APACHE_OS_H */,undetermined
3901,httpd,UNKNOWN,/** @} */,undetermined
3902,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3903,httpd,UNKNOWN,"/**
 * @file  pre_nw.h
 * @brief Definitions for Netware systems
 *
 * @addtogroup APACHE_OS_NETWARE
 * @{
 */",undetermined
3904,httpd,UNKNOWN,/* hint for MSL C++ that we're on NetWare platform */,undetermined
3905,httpd,UNKNOWN,"/* the FAR keyword has no meaning in a 32-bit environment
   but is used in the SDK headers so we take it out */",undetermined
3906,httpd,UNKNOWN,"/* no-op for Codewarrior C compiler; a functions are cdecl
   by default */",undetermined
3907,httpd,UNKNOWN,"/* if we have wchar_t enabled in C++, predefine this type to avoid
   a conflict in Novell's header files */",undetermined
3908,httpd,UNKNOWN,/* C9X defintion used by MSL C++ library */,undetermined
3909,httpd,UNKNOWN,/* some code may want to use the MS convention for long long */,undetermined
3910,httpd,UNKNOWN,/* Restrict the number of nested includes */,undetermined
3911,httpd,UNKNOWN,/** @} */,undetermined
3912,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3913,httpd,UNKNOWN,/* down server event callback */,undetermined
3914,httpd,UNKNOWN,/* Required place holder event callback */,undetermined
3915,httpd,UNKNOWN,/* destroy callback resources */,undetermined
3916,httpd,UNKNOWN,/* cleanup down event notification */,undetermined
3917,httpd,UNKNOWN,/* register for down server event */,undetermined
3918,httpd,UNKNOWN,/* clean-up */,undetermined
3919,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
3920,httpd,UNKNOWN,"/*
           Initial Port for  Apache-1.3 by <Martin.Kraemer Mch.SNI.De>

""BS2000 OSD"" is a POSIX on a main frame. It is made by Siemens AG, Germany.
Within the POSIX subsystem, the same character set was chosen as in
""native BS2000"", namely EBCDIC.

EBCDIC Table. (Yes, in EBCDIC, the letters 'a'..'z' are not contiguous!)
This apr_table_t is bijective, i.e. there are no ambigous or duplicate characters
00    00 01 02 03 85 09 86 7f  87 8d 8e 0b 0c 0d 0e 0f  *................*
10    10 11 12 13 8f 0a 08 97  18 19 9c 9d 1c 1d 1e 1f  *................*
20    80 81 82 83 84 92 17 1b  88 89 8a 8b 8c 05 06 07  *................*
30    90 91 16 93 94 95 96 04  98 99 9a 9b 14 15 9e 1a  *................*
40    20 a0 e2 e4 e0 e1 e3 e5  e7 f1 60 2e 3c 28 2b 7c  * .........`.<(+|*
50    26 e9 ea eb e8 ed ee ef  ec df 21 24 2a 29 3b 9f  *&.........!$*);.*
60    2d 2f c2 c4 c0 c1 c3 c5  c7 d1 5e 2c 25 5f 3e 3f  *-/........^,%_>?*
70    f8 c9 ca cb c8 cd ce cf  cc a8 3a 23 40 27 3d 22  *..........:#@'=""*
80    d8 61 62 63 64 65 66 67  68 69 ab bb f0 fd fe b1  *.abcdefghi......*
90    b0 6a 6b 6c 6d 6e 6f 70  71 72 aa ba e6 b8 c6 a4  *.jklmnopqr......*
a0    b5 af 73 74 75 76 77 78  79 7a a1 bf d0 dd de ae  *..stuvwxyz......*
b0    a2 a3 a5 b7 a9 a7 b6 bc  bd be ac 5b 5c 5d b4 d7  *...........[\]..*
c0    f9 41 42 43 44 45 46 47  48 49 ad f4 f6 f2 f3 f5  *.ABCDEFGHI......*
d0    a6 4a 4b 4c 4d 4e 4f 50  51 52 b9 fb fc db fa ff  *.JKLMNOPQR......*
e0    d9 f7 53 54 55 56 57 58  59 5a b2 d4 d6 d2 d3 d5  *..STUVWXYZ......*
f0    30 31 32 33 34 35 36 37  38 39 b3 7b dc 7d da 7e  *0123456789.{.}.~*
*/",undetermined
3921,httpd,UNKNOWN,/* The bijective ebcdic-to-ascii table: */,undetermined
3922,httpd,UNKNOWN,/*00*/,undetermined
3923,httpd,UNKNOWN,/*................*/,undetermined
3924,httpd,UNKNOWN,/*10*/,undetermined
3925,httpd,UNKNOWN,/*................*/,undetermined
3926,httpd,UNKNOWN,/*20*/,undetermined
3927,httpd,UNKNOWN,/*................*/,undetermined
3928,httpd,UNKNOWN,/*30*/,undetermined
3929,httpd,UNKNOWN,/*................*/,undetermined
3930,httpd,UNKNOWN,/*40*/,undetermined
3931,httpd,UNKNOWN,/* .........`.<(+|*/,undetermined
3932,httpd,UNKNOWN,/*50*/,undetermined
3933,httpd,UNKNOWN,/*&.........!$*);.*/,undetermined
3934,httpd,UNKNOWN,/*60*/,undetermined
3935,httpd,UNKNOWN,"/*-/........^,%_>?*/",undetermined
3936,httpd,UNKNOWN,/*70*/,undetermined
3937,httpd,UNKNOWN,"/*..........:#@'=""*/",undetermined
3938,httpd,UNKNOWN,/*80*/,undetermined
3939,httpd,UNKNOWN,/*.abcdefghi......*/,undetermined
3940,httpd,UNKNOWN,/*90*/,undetermined
3941,httpd,UNKNOWN,/*.jklmnopqr......*/,undetermined
3942,httpd,UNKNOWN,/*a0*/,undetermined
3943,httpd,UNKNOWN,/*..stuvwxyz......*/,undetermined
3944,httpd,UNKNOWN,/*b0*/,undetermined
3945,httpd,UNKNOWN,/*...........[\]..*/,undetermined
3946,httpd,UNKNOWN,/*c0*/,undetermined
3947,httpd,UNKNOWN,/*.ABCDEFGHI......*/,undetermined
3948,httpd,UNKNOWN,/*d0*/,undetermined
3949,httpd,UNKNOWN,/*.JKLMNOPQR......*/,undetermined
3950,httpd,UNKNOWN,/*e0*/,undetermined
3951,httpd,UNKNOWN,/*..STUVWXYZ......*/,undetermined
3952,httpd,UNKNOWN,/*f0*/,undetermined
3953,httpd,UNKNOWN,/*0123456789.{.}.~*/,undetermined
3954,httpd,UNKNOWN,"/* This apr_table_t is (almost) identical to the previous one. The only difference
 * is the fact that it maps every EBCDIC *except 0x0A* to its ASCII
 * equivalent. The reason for this apr_table_t is simple: Throughout the
 * server, protocol strings are used in the form
 *  ""Content-Type: text/plain\015\012"". Now all the characters in the string
 * are stored as EBCDIC, only the semantics of \012 is completely
 * different from LF (look it up in the apr_table_t above). \015 happens to be
 * mapped to \015 anyway, so there's no special case for it.
 *
 * In THIS table, EBCDIC-\012 is mapped to ASCII-\012.
 * This apr_table_t is therefore used wherever an EBCDIC to ASCII conversion is
 * needed in the server.
 */",undetermined
3955,httpd,UNKNOWN,/* ebcdic-to-ascii with \012 mapped to ASCII-\n */,undetermined
3956,httpd,UNKNOWN,/*00*/,undetermined
3957,httpd,UNKNOWN,/*................*/,undetermined
3958,httpd,UNKNOWN,/*10*/,undetermined
3959,httpd,UNKNOWN,/*................*/,undetermined
3960,httpd,UNKNOWN,/*20*/,undetermined
3961,httpd,UNKNOWN,/*................*/,undetermined
3962,httpd,UNKNOWN,/*30*/,undetermined
3963,httpd,UNKNOWN,/*................*/,undetermined
3964,httpd,UNKNOWN,/*40*/,undetermined
3965,httpd,UNKNOWN,/* .........`.<(+|*/,undetermined
3966,httpd,UNKNOWN,/*50*/,undetermined
3967,httpd,UNKNOWN,/*&.........!$*);.*/,undetermined
3968,httpd,UNKNOWN,/*60*/,undetermined
3969,httpd,UNKNOWN,"/*-/........^,%_>?*/",undetermined
3970,httpd,UNKNOWN,/*70*/,undetermined
3971,httpd,UNKNOWN,"/*..........:#@'=""*/",undetermined
3972,httpd,UNKNOWN,/*80*/,undetermined
3973,httpd,UNKNOWN,/*.abcdefghi......*/,undetermined
3974,httpd,UNKNOWN,/*90*/,undetermined
3975,httpd,UNKNOWN,/*.jklmnopqr......*/,undetermined
3976,httpd,UNKNOWN,/*a0*/,undetermined
3977,httpd,UNKNOWN,/*..stuvwxyz......*/,undetermined
3978,httpd,UNKNOWN,/*b0*/,undetermined
3979,httpd,UNKNOWN,/*...........[\]..*/,undetermined
3980,httpd,UNKNOWN,/*c0*/,undetermined
3981,httpd,UNKNOWN,/*.ABCDEFGHI......*/,undetermined
3982,httpd,UNKNOWN,/*d0*/,undetermined
3983,httpd,UNKNOWN,/*.JKLMNOPQR......*/,undetermined
3984,httpd,UNKNOWN,/*e0*/,undetermined
3985,httpd,UNKNOWN,/*..STUVWXYZ......*/,undetermined
3986,httpd,UNKNOWN,/*f0*/,undetermined
3987,httpd,UNKNOWN,/*0123456789.{.}.~*/,undetermined
3988,httpd,UNKNOWN,"/* The ascii-to-ebcdic table:
00    00 01 02 03 37 2d 2e 2f  16 05 15 0b 0c 0d 0e 0f  *................*
10    10 11 12 13 3c 3d 32 26  18 19 3f 27 1c 1d 1e 1f  *................*
20    40 5a 7f 7b 5b 6c 50 7d  4d 5d 5c 4e 6b 60 4b 61  * !""#$%&'()*+,-./
30    f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 7a 5e 4c 7e 6e 6f  *0123456789:;<=>?*
40    7c c1 c2 c3 c4 c5 c6 c7  c8 c9 d1 d2 d3 d4 d5 d6  *@ABCDEFGHIJKLMNO*
50    d7 d8 d9 e2 e3 e4 e5 e6  e7 e8 e9 bb bc bd 6a 6d  *PQRSTUVWXYZ[\]^_*
60    4a 81 82 83 84 85 86 87  88 89 91 92 93 94 95 96  *`abcdefghijklmno*
70    97 98 99 a2 a3 a4 a5 a6  a7 a8 a9 fb 4f fd ff 07  *pqrstuvwxyz{|}~.*
80    20 21 22 23 24 04 06 08  28 29 2a 2b 2c 09 0a 14  *................*
90    30 31 25 33 34 35 36 17  38 39 3a 3b 1a 1b 3e 5f  *................*
a0    41 aa b0 b1 9f b2 d0 b5  79 b4 9a 8a ba ca af a1  *................*
b0    90 8f ea fa be a0 b6 b3  9d da 9b 8b b7 b8 b9 ab  *................*
c0    64 65 62 66 63 67 9e 68  74 71 72 73 78 75 76 77  *................*
d0    ac 69 ed ee eb ef ec bf  80 e0 fe dd fc ad ae 59  *................*
e0    44 45 42 46 43 47 9c 48  54 51 52 53 58 55 56 57  *................*
f0    8c 49 cd ce cb cf cc e1  70 c0 de db dc 8d 8e df  *................*
*/",undetermined
3989,httpd,UNKNOWN,/*00*/,undetermined
3990,httpd,UNKNOWN,/*................*/,undetermined
3991,httpd,UNKNOWN,/*10*/,undetermined
3992,httpd,UNKNOWN,/*................*/,undetermined
3993,httpd,UNKNOWN,/*20*/,undetermined
3994,httpd,UNKNOWN,"/* !""#$%&'()*+,-./ */",undetermined
3995,httpd,UNKNOWN,/*30*/,undetermined
3996,httpd,UNKNOWN,/*0123456789:;<=>?*/,undetermined
3997,httpd,UNKNOWN,/*40*/,undetermined
3998,httpd,UNKNOWN,/*@ABCDEFGHIJKLMNO*/,undetermined
3999,httpd,UNKNOWN,/*50*/,undetermined
4000,httpd,UNKNOWN,/*PQRSTUVWXYZ[\]^_*/,undetermined
4001,httpd,UNKNOWN,/*60*/,undetermined
4002,httpd,UNKNOWN,/*`abcdefghijklmno*/,undetermined
4003,httpd,UNKNOWN,/*70*/,undetermined
4004,httpd,UNKNOWN,/*pqrstuvwxyz{|}~.*/,undetermined
4005,httpd,UNKNOWN,/*80*/,undetermined
4006,httpd,UNKNOWN,/*................*/,undetermined
4007,httpd,UNKNOWN,/*90*/,undetermined
4008,httpd,UNKNOWN,/*................*/,undetermined
4009,httpd,UNKNOWN,/*a0*/,undetermined
4010,httpd,UNKNOWN,/*................*/,undetermined
4011,httpd,UNKNOWN,/*b0*/,undetermined
4012,httpd,UNKNOWN,/*................*/,undetermined
4013,httpd,UNKNOWN,/*c0*/,undetermined
4014,httpd,UNKNOWN,/*................*/,undetermined
4015,httpd,UNKNOWN,/*d0*/,undetermined
4016,httpd,UNKNOWN,/*................*/,undetermined
4017,httpd,UNKNOWN,/*e0*/,undetermined
4018,httpd,UNKNOWN,/*................*/,undetermined
4019,httpd,UNKNOWN,/*f0*/,undetermined
4020,httpd,UNKNOWN,/*................*/,undetermined
4021,httpd,UNKNOWN,"/* Translate a memory block from EBCDIC (host charset) to ASCII (net charset)
 * dest and srce may be identical, or separate memory blocks, but
 * should not overlap.
 */",undetermined
4022,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
4023,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4024,httpd,UNKNOWN,"/**
 * @file  bs2000/ebcdic.h
 * @brief EBCDIC/ASCII converson function declarations
 *
 * @addtogroup APACHE_OS_BS2000
 * @{
 */",undetermined
4025,httpd,UNKNOWN,/** @} */,undetermined
4026,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4027,httpd,UNKNOWN,"/*
 * This file will include OS specific functions which are not inlineable.
 * Any inlineable functions should be defined in os-inline.c instead.
 */",undetermined
4028,httpd,UNKNOWN,/* not initialized yet. */,undetermined
4029,httpd,UNKNOWN,/* no fork() because -X flag was specified */,undetermined
4030,httpd,UNKNOWN,/* only fork() because uid != 0 */,undetermined
4031,httpd,UNKNOWN,"/* Normally, ufork() is used to switch identities. */",undetermined
4032,httpd,UNKNOWN,"/* Determine the method for forking off a child in such a way as to
 * set both the POSIX and BS2000 user id's to the unprivileged user.
 */",undetermined
4033,httpd,UNKNOWN,"/* have we checked the OS version before? If yes return the previous
     * result - the OS release isn't going to change suddenly!
     */",undetermined
4034,httpd,UNKNOWN,/* not initialized yet */,undetermined
4035,httpd,UNKNOWN,/* No fork if the one_process option was set */,undetermined
4036,httpd,UNKNOWN,"/* If the user is unprivileged, use the normal fork() only. */",undetermined
4037,httpd,UNKNOWN,"/* This routine complements the setuid() call: it causes the BS2000 job
 * environment to be switched to the target user's user id.
 * That is important if CGI scripts try to execute native BS2000 commands.
 */",undetermined
4038,httpd,UNKNOWN,"/* We can be sure that no change to uid==0 is possible because of
     * the checks in http_core.c:set_user()
     */",undetermined
4039,httpd,UNKNOWN,"/* BS2000 requires a ""special"" version of fork() before a setuid() call */",undetermined
4040,httpd,UNKNOWN,/* Make user name all upper case - for some versions of ufork() */,undetermined
4041,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
4042,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
4043,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4044,httpd,UNKNOWN,"/**
 * @file bs2000/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_BS2000 bs2000
 * @ingroup  APACHE_OS
 * @{
 */",undetermined
4045,httpd,UNKNOWN,/* Other ap_os_ routines not used by this platform */,undetermined
4046,httpd,UNKNOWN,/* APACHE_OS_BS2000_H */,undetermined
4047,httpd,UNKNOWN,/** @} */,undetermined
4048,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4049,httpd,UNKNOWN,/* XXXXXX: Log me. */,undetermined
4050,httpd,UNKNOWN,"/* See core.c, default handler for all of the cases we just decline. */",undetermined
4051,httpd,UNKNOWN,/* copied from default handler: */,undetermined
4052,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4053,httpd,UNKNOWN,"/* The alert will note a strange mirror-image style resemblance to
 * mod_optional_hook_import.c. Yes, I _did_ mean import. Think about it.
 */",undetermined
4054,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4055,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4056,httpd,UNKNOWN,"/* The alert will note a strange mirror-image style resemblance to
 * mod_optional_hook_export.c. Yes, I _did_ mean export. Think about it.
 */",undetermined
4057,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4058,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4059,httpd,UNKNOWN,/* def MOD_OPTIONAL_HOOK_EXPORT_H */,undetermined
4060,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4061,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4062,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  mod_ssl.c
 *  Apache API interface structures
 */",undetermined
4063,httpd,UNKNOWN,"/*
 *  the table of configuration directives we provide
 */",undetermined
4064,httpd,UNKNOWN,"/*
     * Global (main-server) context configuration directives
     */",undetermined
4065,httpd,UNKNOWN,"/*
     * Per-server context configuration directives
     */",undetermined
4066,httpd,UNKNOWN,"/*
     * Proxy configuration for remote SSL connections
     */",undetermined
4067,httpd,UNKNOWN,"/*
     * Per-directory context configuration directives
     */",undetermined
4068,httpd,UNKNOWN,"/*
     * OCSP Stapling options
     */",undetermined
4069,httpd,UNKNOWN,/* Deprecated directives. */,undetermined
4070,httpd,UNKNOWN,"/*
 *  the various processing hooks
 */",undetermined
4071,httpd,UNKNOWN,"/*
     * Try to kill the internals of the SSL library.
     */",undetermined
4072,httpd,UNKNOWN,"/* Corresponds to OPENSSL_load_builtin_modules():
     * XXX: borrowed from apps.h, but why not CONF_modules_free()
     * which also invokes CONF_modules_finish()?
     */",undetermined
4073,httpd,UNKNOWN,/* Corresponds to SSL_library_init: */,undetermined
4074,httpd,UNKNOWN,"/* Don't call ERR_free_strings here; ERR_load_*_strings only
     * actually load the error strings once per process due to static
     * variable abuse in OpenSSL. */",undetermined
4075,httpd,UNKNOWN,"/* Also don't call CRYPTO_cleanup_all_ex_data here; any registered
     * ex_data indices may have been cached in static variables in
     * OpenSSL; removing them may cause havoc.  Notably, with OpenSSL
     * versions >= 0.9.8f, COMP_CTX cleanups would not be run, which
     * could result in a per-connection memory leak (!). */",undetermined
4076,httpd,UNKNOWN,"/*
     * TODO: determine somewhere we can safely shove out diagnostics
     *       (when enabled) at this late stage in the game:
     * CRYPTO_mem_leaks_fp(stderr);
     */",undetermined
4077,httpd,UNKNOWN,"/* We must register the library in full, to ensure our configuration
     * code can successfully test the SSL environment.
     */",undetermined
4078,httpd,UNKNOWN,"/*
     * Let us cleanup the ssl library when the module is unloaded
     */",undetermined
4079,httpd,UNKNOWN,/* Register us to handle mod_log_config %c/%x variables */,undetermined
4080,httpd,UNKNOWN,/* Register to handle mod_status status page generation */,undetermined
4081,httpd,UNKNOWN,/* Register mutex type names so they can be configured with Mutex */,undetermined
4082,httpd,UNKNOWN,"/*
     * Seed the Pseudo Random Number Generator (PRNG)
     */",undetermined
4083,httpd,UNKNOWN,"/*
     * Create a new SSL connection with the configured server SSL context and
     * attach this to the socket. Additionally we register this attachment
     * so we can detach later.
     */",undetermined
4084,httpd,UNKNOWN,/* XXX */,undetermined
4085,httpd,UNKNOWN,/* XXX */,undetermined
4086,httpd,UNKNOWN,/* will be request_rec */,undetermined
4087,httpd,UNKNOWN,"/*
     *  Configure callbacks for SSL connection
     */",undetermined
4088,httpd,UNKNOWN,"/*
     * Immediately stop processing if SSL is disabled for this connection
     */",undetermined
4089,httpd,UNKNOWN,"/*
     * Create SSL context
     */",undetermined
4090,httpd,UNKNOWN,"/*
     * Remember the connection information for
     * later access inside callback functions
     */",undetermined
4091,httpd,UNKNOWN,"/*
 *  the module registration phase
 */",undetermined
4092,httpd,UNKNOWN,"/* ssl_hook_ReadReq needs to use the BrowserMatch settings so must
     * run after mod_setenvif's post_read_request hook. */",undetermined
4093,httpd,UNKNOWN,/* create per-dir    config structures */,undetermined
4094,httpd,UNKNOWN,/* merge  per-dir    config structures */,undetermined
4095,httpd,UNKNOWN,/* create per-server config structures */,undetermined
4096,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
4097,httpd,UNKNOWN,/* table of configuration directives   */,undetermined
4098,httpd,UNKNOWN,/* register hooks */,undetermined
4099,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4100,httpd,UNKNOWN,"/**
 * @file mod_ssl.h
 * @brief SSL extension module for Apache
 *
 * @defgroup MOD_SSL mod_ssl
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
4101,httpd,UNKNOWN,"/** The ssl_var_lookup() optional function retrieves SSL environment
 * variables. */",undetermined
4102,httpd,UNKNOWN,"/** The ssl_ext_list() optional function attempts to build an array
 * of all the values contained in the named X.509 extension. The
 * returned array will be created in the supplied pool.
 * The client certificate is used if peer is non-zero; the server
 * certificate is used otherwise.
 * Extension specifies the extensions to use as a string. This can be
 * one of the ""known"" long or short names, or a numeric OID,
 * e.g. ""1.2.3.4"", 'nsComment' and 'DN' are all valid.
 * A pointer to an apr_array_header_t structure is returned if at
 * least one matching extension is found, NULL otherwise.
 */",undetermined
4103,httpd,UNKNOWN,"/** An optional function which returns non-zero if the given connection
 * is using SSL/TLS. */",undetermined
4104,httpd,UNKNOWN,"/** The ssl_proxy_enable() and ssl_engine_disable() optional functions
 * are used by mod_proxy to enable use of SSL for outgoing
 * connections. */",undetermined
4105,httpd,UNKNOWN,/* __MOD_SSL_H__ */,undetermined
4106,httpd,UNKNOWN,/** @} */,undetermined
4107,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4108,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_config.c
 *  Apache Configuration Directives
 */",undetermined
4109,httpd,UNKNOWN,"/* ``Damned if you do,
                                           damned if you don't.''
                                               -- Unknown        */",undetermined
4110,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Support for Global Configuration
**  _________________________________________________________________
*/",undetermined
4111,httpd,UNKNOWN,/* reused for lifetime of the server */,undetermined
4112,httpd,UNKNOWN,"/*
     * allocate an own subpool which survives server restarts
     */",undetermined
4113,httpd,UNKNOWN,"/*
     * initialize per-module configuration
     */",undetermined
4114,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Configuration handling
**  _________________________________________________________________
*/",undetermined
4115,httpd,UNKNOWN,/* set during module init */,undetermined
4116,httpd,UNKNOWN,/* set during module init */,undetermined
4117,httpd,UNKNOWN,/* mctx->pks->... certs/keys are set during module init */,undetermined
4118,httpd,UNKNOWN,/* set during module init */,undetermined
4119,httpd,UNKNOWN,/* set during module init */,undetermined
4120,httpd,UNKNOWN,"/*
 *  Create per-server SSL configuration
 */",undetermined
4121,httpd,UNKNOWN,"/*
 *  Merge per-server SSL configurations
 */",undetermined
4122,httpd,UNKNOWN,"/*
 *  Create per-directory SSL configuration
 */",undetermined
4123,httpd,UNKNOWN,"/*
 *  Merge per-directory SSL configurations
 */",undetermined
4124,httpd,UNKNOWN,"/*
 *  Configuration functions for particular directives
 */",undetermined
4125,httpd,UNKNOWN,"/* Iterate; this call implicitly decrements the refcount
             * on the 'old' e, per the docs in engine.h. */",undetermined
4126,httpd,UNKNOWN,/* read whole file */,undetermined
4127,httpd,UNKNOWN,/*SSLDirConfigRec *dc = (SSLDirConfigRec *)dcfg;*/,undetermined
4128,httpd,UNKNOWN,/* XXX: bring back per-dir */,undetermined
4129,httpd,UNKNOWN,/*SSLDirConfigRec *dc = (SSLDirConfigRec *)dcfg;*/,undetermined
4130,httpd,UNKNOWN,/* XXX: bring back per-dir */,undetermined
4131,httpd,UNKNOWN,"/* The OpenSSL session cache mode must have both the flags
     * SSL_SESS_CACHE_SERVER and SSL_SESS_CACHE_NO_INTERNAL set if a
     * session cache is configured; NO_INTERNAL prevents the
     * OpenSSL-internal session cache being used in addition to the
     * ""external"" (mod_ssl-provided) cache, which otherwise causes
     * additional memory consumption. */",undetermined
4132,httpd,UNKNOWN,/* Nothing to do; session cache will be off. */,undetermined
4133,httpd,UNKNOWN,"/* ### Having a separate mode for this seems logically
         * unnecessary; the stated purpose of sending non-empty
         * session IDs would be better fixed in OpenSSL or simply
         * doing it by default if ""none"" is used. */",undetermined
4134,httpd,UNKNOWN,/* Argument is of form 'name:args' or just 'name'. */,undetermined
4135,httpd,UNKNOWN,/* Find the provider of given name. */,undetermined
4136,httpd,UNKNOWN,"/* Cache found; create it, passing anything beyond the colon. */",undetermined
4137,httpd,UNKNOWN,"/* Build a comma-separated list of all registered provider
             * names: */",undetermined
4138,httpd,UNKNOWN,/* Argument is of form 'name:args' or just 'name'. */,undetermined
4139,httpd,UNKNOWN,/* Find the provider of given name. */,undetermined
4140,httpd,UNKNOWN,"/* Cache found; create it, passing anything beyond the colon. */",undetermined
4141,httpd,UNKNOWN,"/* Build a comma-separated list of all registered provider
         * names: */",undetermined
4142,httpd,UNKNOWN,/* HAVE_OCSP_STAPLING */,undetermined
4143,httpd,UNKNOWN,"/* SRP_VBASE_init takes char*, not const char*  */",undetermined
4144,httpd,UNKNOWN,"/* SRP_VBASE_new takes char*, not const char*  */",undetermined
4145,httpd,UNKNOWN,/* OPENSSL_NO_SRP */,undetermined
4146,httpd,UNKNOWN,"/* Dump the filenames of all configured server certificates to
     * stdout. */",undetermined
4147,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4148,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 * ssl_engine_dh.c
 * Diffie-Hellman Built-in Temporary Parameters
 */",undetermined
4149,httpd,UNKNOWN,/* ----BEGIN GENERATED SECTION-------- */,undetermined
4150,httpd,UNKNOWN,"/*
** Diffie-Hellman-Parameters: (512 bit)
**     prime:
**         00:9f:db:8b:8a:00:45:44:f0:04:5f:17:37:d0:ba:
**         2e:0b:27:4c:df:1a:9f:58:82:18:fb:43:53:16:a1:
**         6e:37:41:71:fd:19:d8:d8:f3:7c:39:bf:86:3f:d6:
**         0e:3e:30:06:80:a3:03:0c:6e:4c:37:57:d0:8f:70:
**         e6:aa:87:10:33
**     generator: 2 (0x2)
** Diffie-Hellman-Parameters: (1024 bit)
**     prime:
**         00:d6:7d:e4:40:cb:bb:dc:19:36:d6:93:d3:4a:fd:
**         0a:d5:0c:84:d2:39:a4:5f:52:0b:b8:81:74:cb:98:
**         bc:e9:51:84:9f:91:2e:63:9c:72:fb:13:b4:b4:d7:
**         17:7e:16:d5:5a:c1:79:ba:42:0b:2a:29:fe:32:4a:
**         46:7a:63:5e:81:ff:59:01:37:7b:ed:dc:fd:33:16:
**         8a:46:1a:ad:3b:72:da:e8:86:00:78:04:5b:07:a7:
**         db:ca:78:74:08:7d:15:10:ea:9f:cc:9d:dd:33:05:
**         07:dd:62:db:88:ae:aa:74:7d:e0:f4:d6:e2:bd:68:
**         b0:e7:39:3e:0f:24:21:8e:b3
**     generator: 2 (0x2)
*/",undetermined
4151,httpd,UNKNOWN,/* ----END GENERATED SECTION---------- */,undetermined
4152,httpd,UNKNOWN,"/*
=cut
##
##  Embedded Perl script for generating the temporary DH parameters
##

require 5.003;
use strict;

#   configuration
my $file  = $0;
my $begin = '----BEGIN GENERATED SECTION--------';
my $end   = '----END GENERATED SECTION----------';

#   read ourself and keep a backup
open(FP, ""<$file"") || die;
my $source = '';
$source .= $_ while (<FP>);
close(FP);
open(FP, "">$file.bak"") || die;
print FP $source;
close(FP);

#   generate the DH parameters
print ""1. Generate 512 and 1024 bit Diffie-Hellman parameters (p, g)\n"";
my $rand = '';
foreach $file (qw(/var/log/messages /var/adm/messages
                  /kernel /vmunix /vmlinuz /etc/hosts /etc/resolv.conf)) {
    if (-f $file) {
        $rand = $file     if ($rand eq '');
        $rand .= "":$file"" if ($rand ne '');
    }
}
$rand = ""-rand $rand"" if ($rand ne '');
system(""openssl gendh $rand -out dh512.pem 512"");
system(""openssl gendh $rand -out dh1024.pem 1024"");

#   generate DH param info
my $dhinfo = '';
open(FP, ""openssl dh -noout -text -in dh512.pem |"") || die;
$dhinfo .= $_ while (<FP>);
close(FP);
open(FP, ""openssl dh -noout -text -in dh1024.pem |"") || die;
$dhinfo .= $_ while (<FP>);
close(FP);
$dhinfo =~ s|^|** |mg;
$dhinfo = ""\n\/\*\n$dhinfo\*\/\n\n"";

my $indent_args = ""-i4 -npsl -di0 -br -nce -d0 -cli0 -npcs -nfc1"";

#   generate C source from DH params
my $dhsource = '';
open(FP, ""openssl dh -noout -C -in dh512.pem | indent $indent_args | expand |"") || die;
$dhsource .= $_ while (<FP>);
close(FP);
open(FP, ""openssl dh -noout -C -in dh1024.pem | indent $indent_args | expand |"") || die;
$dhsource .= $_ while (<FP>);
close(FP);
$dhsource =~ s|(DH\s+\*get_dh)(\d+)[^}]*\n}|static $1$2(void)
{
    DH *dh;

    if (!(dh = DH_new())) {
        return NULL;
    }

    dh->p = BN_bin2bn(dh$2_p, sizeof(dh$2_p), NULL);
    dh->g = BN_bin2bn(dh$2_g, sizeof(dh$2_g), NULL);
    if (!(dh->p && dh->g)) {
        DH_free(dh);
        return NULL;
    }

    return dh;
}
|sg;

#   generate output
my $o = $dhinfo . $dhsource;

#   insert the generated code at the target location
$source =~ s|(\/\* $begin.+?\n).*\n(.*?\/\* $end)|$1$o$2|s;

#   and update the source on disk
print ""Updating file `$file'\n"";
open(FP, "">$file"") || die;
print FP $source;
close(FP);

#   cleanup
unlink(""dh512.pem"");
unlink(""dh1024.pem"");

=pod
*/",undetermined
4153,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4154,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_init.c
 *  Initialization of Servers
 */",undetermined
4155,httpd,UNKNOWN,"/* ``Recursive, adj.;
                                  see Recursive.''
                                        -- Unknown   */",undetermined
4156,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Module Initialization
**  _________________________________________________________________
*/",undetermined
4157,httpd,UNKNOWN,"/*
 * Handle the Temporary RSA Keys and DH Params
 */",undetermined
4158,httpd,UNKNOWN,/* XXX: Are there any FIPS constraints we should enforce? */,undetermined
4159,httpd,UNKNOWN,"/*
 *  Per-module initialization
 */",undetermined
4160,httpd,UNKNOWN,"/* We initialize mc->pid per-process in the child init,
     * but it should be initialized for startup before we
     * call ssl_rand_seed() below.
     */",undetermined
4161,httpd,UNKNOWN,"/*
     * Let us cleanup on restarts and exits
     */",undetermined
4162,httpd,UNKNOWN,"/*
     * Any init round fixes the global config
     */",undetermined
4163,httpd,UNKNOWN,/* just to avoid problems */,undetermined
4164,httpd,UNKNOWN,"/*
     *  try to fix the configuration and open the dedicated SSL
     *  logfile as early as possible
     */",undetermined
4165,httpd,UNKNOWN,"/*
         * Create the server host:port string because we need it a lot
         */",undetermined
4166,httpd,UNKNOWN,"/* If sc->enabled is UNSET, then SSL is optional on this vhost  */",undetermined
4167,httpd,UNKNOWN,/* Fix up stuff that may not have been set */,undetermined
4168,httpd,UNKNOWN,"/*
     * SSL external crypto device (""engine"") support
     */",undetermined
4169,httpd,UNKNOWN,"/*
     * Seed the Pseudo Random Number Generator (PRNG)
     * only need ptemp here; nothing inside allocated from the pool
     * needs to live once we return from ssl_rand_seed().
     */",undetermined
4170,httpd,UNKNOWN,"/*
     * read server private keys/public certs into memory.
     * decrypting any encrypted keys via configured SSLPassPhraseDialogs
     * anything that needs to live longer than ptemp needs to also survive
     * restarts, in which case they'll live inside s->process->pool.
     */",undetermined
4171,httpd,UNKNOWN,"/*
     * initialize the mutex handling
     */",undetermined
4172,httpd,UNKNOWN,"/*
     * initialize session caching
     */",undetermined
4173,httpd,UNKNOWN,"/*
     *  initialize servers
     */",undetermined
4174,httpd,UNKNOWN,"/*
         * Either now skip this server when SSL is disabled for
         * it or give out some information about what we're
         * configuring.
         */",undetermined
4175,httpd,UNKNOWN,"/*
         * Read the server certificate and key
         */",undetermined
4176,httpd,UNKNOWN,"/*
     * Configuration consistency checks
     */",undetermined
4177,httpd,UNKNOWN,"/*
     *  Announce mod_ssl and SSL library in HTTP Server field
     *  as ``mod_ssl/X.X.X OpenSSL/X.X.X''
     */",undetermined
4178,httpd,UNKNOWN,/* for SSL_get_app_data2() at request time */,undetermined
4179,httpd,UNKNOWN,"/*
 * Support for external a Crypto Device (""engine""), usually
 * a hardware accellerator card for crypto operations.
 */",undetermined
4180,httpd,UNKNOWN,"/*
     * check for important parameters and the
     * possibility that the user forgot to set them.
     */",undetermined
4181,httpd,UNKNOWN,"/*
     *  Check for problematic re-initializations
     */",undetermined
4182,httpd,UNKNOWN,"/*
     * Configure TLS extensions support
     */",undetermined
4183,httpd,UNKNOWN,"/*
     * Server name indication (SNI)
     */",undetermined
4184,httpd,UNKNOWN,"/*
     * OCSP Stapling support, status_request extension
     */",undetermined
4185,httpd,UNKNOWN,"/*
     * TLS-SRP support
     */",undetermined
4186,httpd,UNKNOWN,"/*
     *  Create the new per-server SSL context
     */",undetermined
4187,httpd,UNKNOWN,/* proxy */,undetermined
4188,httpd,UNKNOWN,/* server */,undetermined
4189,httpd,UNKNOWN,/* proxy */,undetermined
4190,httpd,UNKNOWN,/* server */,undetermined
4191,httpd,UNKNOWN,/* proxy */,undetermined
4192,httpd,UNKNOWN,/* server */,undetermined
4193,httpd,UNKNOWN,/* proxy */,undetermined
4194,httpd,UNKNOWN,/* server */,undetermined
4195,httpd,UNKNOWN,"/* For multiple protocols, we need a flexible method */",undetermined
4196,httpd,UNKNOWN,/* proxy */,undetermined
4197,httpd,UNKNOWN,/* server */,undetermined
4198,httpd,UNKNOWN,"/* always disable SSLv2, as per RFC 6176 */",undetermined
4199,httpd,UNKNOWN,/* OpenSSL >= 1.0 only */,undetermined
4200,httpd,UNKNOWN,"/*
     * Configure additional context ingredients
     */",undetermined
4201,httpd,UNKNOWN,"/*
     * Disallow a session from being resumed during a renegotiation,
     * so that an acceptable cipher suite can be negotiated.
     */",undetermined
4202,httpd,UNKNOWN,"/* If httpd is configured to reduce mem usage, ask openssl to do so, too */",undetermined
4203,httpd,UNKNOWN,"/*
     *  Configure callbacks for SSL context
     */",undetermined
4204,httpd,UNKNOWN,"/*
     * Configure Client Authentication details
     */",undetermined
4205,httpd,UNKNOWN,"/*
     * Give a warning when no CAs were configured but client authentication
     * should take place. This cannot work.
     */",undetermined
4206,httpd,UNKNOWN,"/*
     *  Configure SSL Cipher Suite
     */",undetermined
4207,httpd,UNKNOWN,"/*
     * Configure Certificate Revocation List (CRL) Details
     */",undetermined
4208,httpd,UNKNOWN,"/*
     * Optionally configure extra server certificate chain certificates.
     * This is usually done by OpenSSL automatically when one of the
     * server cert issuers are found under SSLCACertificatePath or in
     * SSLCACertificateFile. But because these are intended for client
     * authentication it can conflict. For instance when you use a
     * Global ID server certificate you've to send out the intermediate
     * CA certificate, too. When you would just configure this with
     * SSLCACertificateFile and also use client authentication mod_ssl
     * would accept all clients also issued by this CA. Obviously this
     * isn't what we want in this situation. So this feature here exists
     * to allow one to explicity configure CA certificates which are
     * used only for the server certificate chain.
     */",undetermined
4209,httpd,UNKNOWN,/* XXX: proxy support? */,undetermined
4210,httpd,UNKNOWN,"/*
     * XXX: wonder if this is still needed, this is old todo doc.
     * (see http://www.psy.uq.edu.au/~ftp/Crypto/ssleay/TODO.html)
     */",undetermined
4211,httpd,UNKNOWN,"/*
     * Some information about the certificate(s)
     */",undetermined
4212,httpd,UNKNOWN,"/* Check that all client certs have got certificates and private
     * keys. */",undetermined
4213,httpd,UNKNOWN,"/* If SSLProxyMachineCertificateChainFile is configured, load all
     * the CA certs and have OpenSSL attempt to construct a full chain
     * from each configured end-entity cert up to a root.  This will
     * allow selection of the correct cert given a list of root CA
     * names in the certificate request from the server.  */",undetermined
4214,httpd,UNKNOWN,/* Attempt to verify the client cert */,undetermined
4215,httpd,UNKNOWN,/* Clear X509_verify_cert errors */,undetermined
4216,httpd,UNKNOWN,/* Obtain a copy of the verified chain */,undetermined
4217,httpd,UNKNOWN,/* Discard end entity cert from the chain */,undetermined
4218,httpd,UNKNOWN,/* Store the chain for later use */,undetermined
4219,httpd,UNKNOWN,/* Discard empty chain */,undetermined
4220,httpd,UNKNOWN,/* get ready for next X509_STORE_CTX_init */,undetermined
4221,httpd,UNKNOWN,"/*
 * Configure a particular server
 */",undetermined
4222,httpd,UNKNOWN,"/* Initialize the server if SSL is enabled or optional.
     */",undetermined
4223,httpd,UNKNOWN,"/*
     * Give out warnings when a server has HTTPS configured
     * for the HTTP port or vice versa
     */",undetermined
4224,httpd,UNKNOWN,"/*
     * Give out warnings when more than one SSL-aware virtual server uses the
     * same IP:port. This doesn't work because mod_ssl then will always use
     * just the certificate/keys of one virtual host (which one cannot be said
     * easily - but that doesn't matter here).
     */",undetermined
4225,httpd,UNKNOWN,"/*
         * note that SSL_load_client_CA_file() checks for duplicates,
         * but since we call it multiple times when reading a directory
         * we must also check for duplicates ourselves.
         */",undetermined
4226,httpd,UNKNOWN,/* this will be freed when ca_list is */,undetermined
4227,httpd,UNKNOWN,"/* need to free this ourselves, else it will leak */",undetermined
4228,httpd,UNKNOWN,"/*
     * Start with a empty stack/list where new
     * entries get added in sorted order.
     */",undetermined
4229,httpd,UNKNOWN,"/*
     * Process CA certificate bundle file
     */",undetermined
4230,httpd,UNKNOWN,"/*
         * If ca_list is still empty after trying to load ca_file
         * then the file failed to load, and users should hear about that.
         */",undetermined
4231,httpd,UNKNOWN,"/*
     * Process CA certificate path files
     */",undetermined
4232,httpd,UNKNOWN,/* don't try to load directories */,undetermined
4233,httpd,UNKNOWN,"/*
     * Cleanup
     */",undetermined
4234,httpd,UNKNOWN,/* only call getpid() once per-process */,undetermined
4235,httpd,UNKNOWN,/* XXX: there should be an ap_srand() function */,undetermined
4236,httpd,UNKNOWN,/* open the mutex lockfile */,undetermined
4237,httpd,UNKNOWN,"/*
     * Drop the session cache and mutex
     */",undetermined
4238,httpd,UNKNOWN,"/*
     * Destroy the temporary keys and params
     */",undetermined
4239,httpd,UNKNOWN,"/*
     * Free the non-pool allocated structures
     * in the per-server configurations
     */",undetermined
4240,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4241,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_io.c
 *  I/O Functions
 */",undetermined
4242,httpd,UNKNOWN,"/* ``MY HACK: This universe.
                                  Just one little problem:
                                  core keeps dumping.''
                                            -- Unknown    */",undetermined
4243,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  I/O Hooks
**  _________________________________________________________________
*/",undetermined
4244,httpd,UNKNOWN,"/* This file is designed to be the bridge between OpenSSL and httpd.
 * However, we really don't expect anyone (let alone ourselves) to
 * remember what is in this file.  So, first, a quick overview.
 *
 * In this file, you will find:
 * - ssl_io_filter_input    (Apache input filter)
 * - ssl_io_filter_output   (Apache output filter)
 *
 * - bio_filter_in_*        (OpenSSL input filter)
 * - bio_filter_out_*       (OpenSSL output filter)
 *
 * The input chain is roughly:
 *
 * ssl_io_filter_input->ssl_io_input_read->SSL_read->...
 * ...->bio_filter_in_read->ap_get_brigade/next-httpd-filter
 *
 * In mortal terminology, we do the following:
 * - Receive a request for data to the SSL input filter
 * - Call a helper function once we know we should perform a read
 * - Call OpenSSL's SSL_read()
 * - SSL_read() will then call bio_filter_in_read
 * - bio_filter_in_read will then try to fetch data from the next httpd filter
 * - bio_filter_in_read will flatten that data and return it to SSL_read
 * - SSL_read will then decrypt the data
 * - ssl_io_input_read will then receive decrypted data as a char* and
 *   ensure that there were no read errors
 * - The char* is placed in a brigade and returned
 *
 * Since connection-level input filters in httpd need to be able to
 * handle AP_MODE_GETLINE calls (namely identifying LF-terminated strings),
 * ssl_io_input_getline which will handle this special case.
 *
 * Due to AP_MODE_GETLINE and AP_MODE_SPECULATIVE, we may sometimes have
 * 'leftover' decoded data which must be setaside for the next read.  That
 * is currently handled by the char_buffer_{read|write} functions.  So,
 * ssl_io_input_read may be able to fulfill reads without invoking
 * SSL_read().
 *
 * Note that the filter context of ssl_io_filter_input and bio_filter_in_*
 * are shared as bio_filter_in_ctx_t.
 *
 * Note that the filter is by choice limited to reading at most
 * AP_IOBUFSIZE (8192 bytes) per call.
 *
 */",undetermined
4245,httpd,UNKNOWN,"/* this custom BIO allows us to hook SSL_write directly into
 * an apr_bucket_brigade and use transient buckets with the SSL
 * malloc-ed buffer, rather than copying into a mem BIO.
 * also allows us to pass the brigade as data is being written
 * rather than buffering up the entire response in the mem BIO.
 *
 * when SSL needs to flush (e.g. SSL_accept()), it will call BIO_flush()
 * which will trigger a call to bio_filter_out_ctrl() -> bio_filter_out_flush().
 * so we only need to flush the output ourselves if we receive an
 * EOS or FLUSH bucket. this was not possible with the mem BIO where we
 * had to flush all over the place not really knowing when it was required
 * to do so.
 */",undetermined
4246,httpd,UNKNOWN,/* Brigade used as a buffer. */,undetermined
4247,httpd,UNKNOWN,"/* Pass an output brigade down the filter stack; returns 1 on success
 * or -1 on failure. */",undetermined
4248,httpd,UNKNOWN,/* Fail if the connection was reset: */,undetermined
4249,httpd,UNKNOWN,"/* Send a FLUSH bucket down the output filter stack; returns 1 on
 * success, -1 on failure. */",undetermined
4250,httpd,UNKNOWN,"/* nothing to free here.
     * apache will destroy the bucket brigade for us
     */",undetermined
4251,httpd,UNKNOWN,/* this is never called */,undetermined
4252,httpd,UNKNOWN,/* Abort early if the client has initiated a renegotiation. */,undetermined
4253,httpd,UNKNOWN,"/* when handshaking we'll have a small number of bytes.
     * max size SSL will pass us here is about 16k.
     * (16413 bytes to be exact)
     */",undetermined
4254,httpd,UNKNOWN,"/* Use a transient bucket for the output data - any downstream
     * filter must setaside if necessary. */",undetermined
4255,httpd,UNKNOWN,/* N/A */,undetermined
4256,httpd,UNKNOWN,/* we don't care */,undetermined
4257,httpd,UNKNOWN,/* this is never called */,undetermined
4258,httpd,UNKNOWN,/* this is never called */,undetermined
4259,httpd,UNKNOWN,/* read is never called */,undetermined
4260,httpd,UNKNOWN,/* puts is never called */,undetermined
4261,httpd,UNKNOWN,/* gets is never called */,undetermined
4262,httpd,UNKNOWN,"/*
 * this char_buffer api might seem silly, but we don't need to copy
 * any of this data and we need to remember the length.
 */",undetermined
4263,httpd,UNKNOWN,"/* Copy up to INL bytes from the char_buffer BUFFER into IN.  Note
 * that due to the strange way this API is designed/used, the
 * char_buffer object is used to cache a segment of inctx->buffer, and
 * then this function called to copy (part of) that segment to the
 * beginning of inctx->buffer.  So the segments to copy cannot be
 * presumed to be non-overlapping, and memmove must be used. */",undetermined
4264,httpd,UNKNOWN,/* we have have enough to fill the caller's buffer */,undetermined
4265,httpd,UNKNOWN,/* swallow remainder of the buffer */,undetermined
4266,httpd,UNKNOWN,"/* This function will read from a brigade and discard the read buckets as it
 * proceeds.  It will read at most *len bytes.
 */",undetermined
4267,httpd,UNKNOWN,"/* Justin points out this is an http-ism that might
         * not fit if brigade_consume is added to APR.  Perhaps
         * apr_bucket_read(eos_bucket) should return APR_EOF?
         * Then this becomes mainline instead of a one-off.
         */",undetermined
4268,httpd,UNKNOWN,"/* The reason I'm not offering brigade_consume yet
         * across to apr-util is that the following call
         * illustrates how borked that API really is.  For
         * this sort of case (caller provided buffer) it
         * would be much more trivial for apr_bucket_consume
         * to do all the work that follows, based on the
         * particular characteristics of the bucket we are
         * consuming here.
         */",undetermined
4269,httpd,UNKNOWN,/* This stream bucket was consumed */,undetermined
4270,httpd,UNKNOWN,/* Do not block once some data has been consumed */,undetermined
4271,httpd,UNKNOWN,/* Assure we don't overflow. */,undetermined
4272,httpd,UNKNOWN,/* This physical bucket was consumed */,undetermined
4273,httpd,UNKNOWN,/* Only part of this physical bucket was consumed */,undetermined
4274,httpd,UNKNOWN,"/* This could probably be actual == *len, but be safe from stray
         * photons. */",undetermined
4275,httpd,UNKNOWN,"/*
 * this is the function called by SSL_read()
 */",undetermined
4276,httpd,UNKNOWN,"/* OpenSSL catches this case, so should we. */",undetermined
4277,httpd,UNKNOWN,/* Abort early if the client has initiated a renegotiation. */,undetermined
4278,httpd,UNKNOWN,"/* In theory, OpenSSL should flush as necessary, but it is known
     * not to do so correctly in some cases; see PR 46952.
     *
     * Historically, this flush call was performed only for an SSLv2
     * connection or for a proxy connection.  Calling _out_flush
     * should be very cheap in cases where it is unnecessary (and no
     * output is buffered) so the performance impact of doing it
     * unconditionally should be minimal.
     */",undetermined
4279,httpd,UNKNOWN,"/* If the read returns EAGAIN or success with an empty
         * brigade, return an error after setting the retry flag;
         * SSL_read() will then return -1, and SSL_get_error() will
         * indicate SSL_ERROR_WANT_READ. */",undetermined
4280,httpd,UNKNOWN,/* Unexpected errors discard the brigade */,undetermined
4281,httpd,UNKNOWN,"/* Unexpected errors and APR_EOF clean out the brigade.
     * Subsequent calls will return APR_EOF.
     */",undetermined
4282,httpd,UNKNOWN,"/* Provide the results of this read pass,
         * without resetting the BIO retry_read flag
         */",undetermined
4283,httpd,UNKNOWN,/* write is never called */,undetermined
4284,httpd,UNKNOWN,/* puts is never called */,undetermined
4285,httpd,UNKNOWN,/* gets is never called */,undetermined
4286,httpd,UNKNOWN,/* ctrl is never called */,undetermined
4287,httpd,UNKNOWN,"/* If we have something leftover from last time, try that first. */",undetermined
4288,httpd,UNKNOWN,/* We want to rollback this read. */,undetermined
4289,httpd,UNKNOWN,"/* This could probably be *len == wanted, but be safe from stray
         * photons.
         */",undetermined
4290,httpd,UNKNOWN,"/* Down to a nonblock pattern as we have some data already
             */",undetermined
4291,httpd,UNKNOWN,/* Ensure a non-zero error code is returned */,undetermined
4292,httpd,UNKNOWN,"/* SSL_read may not read because we haven't taken enough data
         * from the stack.  This is where we want to consider all of
         * the blocking and SPECULATIVE semantics
         */",undetermined
4293,httpd,UNKNOWN,/* We want to rollback this read. */,undetermined
4294,httpd,UNKNOWN,"/* If EAGAIN, we will loop given a blocking read,
             * otherwise consider ourselves at EOF.
             */",undetermined
4295,httpd,UNKNOWN,"/* Already read something, return APR_SUCCESS instead.
                 * On win32 in particular, but perhaps on other kernels,
                 * a blocking call isn't 'always' blocking.
                 */",undetermined
4296,httpd,UNKNOWN,/* (rc < 0) */,undetermined
4297,httpd,UNKNOWN,"/*
                 * If OpenSSL wants to read more, and we were nonblocking,
                 * report as an EAGAIN.  Otherwise loop, pulling more
                 * data from network filter.
                 *
                 * (This is usually the case when the client forces an SSL
                 * renegotiation which is handled implicitly by OpenSSL.)
                 */",undetermined
4298,httpd,UNKNOWN,/* Blocking and nothing yet?  Try again. */,undetermined
4299,httpd,UNKNOWN,"/* Already read something, return APR_SUCCESS instead. */",undetermined
4300,httpd,UNKNOWN,/* Blocking and nothing yet?  Try again. */,undetermined
4301,httpd,UNKNOWN,/* if (ssl_err == SSL_ERROR_SSL) */,undetermined
4302,httpd,UNKNOWN,"/*
                 * Log SSL errors and any unexpected conditions.
                 */",undetermined
4303,httpd,UNKNOWN,"/* Read a line of input from the SSL input layer into buffer BUF of
 * length *LEN; updating *len to reflect the length of the line
 * including the LF character. */",undetermined
4304,httpd,UNKNOWN,"/*
     * in most cases we get all the headers on the first SSL_read.
     * however, in certain cases SSL_read will only get a partial
     * chunk of the headers, so we try to read until LF is seen.
     */",undetermined
4305,httpd,UNKNOWN,/* Save the part of the line we already got */,undetermined
4306,httpd,UNKNOWN,/* write SSL */,undetermined
4307,httpd,UNKNOWN,"/*
             * If OpenSSL wants to write more, and we were nonblocking,
             * report as an EAGAIN.  Otherwise loop, pushing more
             * data at the network filter.
             *
             * (This is usually the case when the client forces an SSL
             * renegotiation which is handled implicitly by OpenSSL.)
             */",undetermined
4308,httpd,UNKNOWN,/* if (ssl_err == SSL_ERROR_SSL) */,undetermined
4309,httpd,UNKNOWN,"/*
             * Log SSL errors
             */",undetermined
4310,httpd,UNKNOWN,/* XXX: probably a better way to determine this */,undetermined
4311,httpd,UNKNOWN,"/* Just use a simple request.  Any request will work for this, because
 * we use a flag in the conn_rec->conn_vector now.  The fake request just
 * gets the request back to the Apache core so that a response can be sent.
 * Since we use an HTTP/1.x request, we also have to inject the empty line
 * that terminates the headers, or the core will read more data from the
 * socket.
 */",undetermined
4312,httpd,UNKNOWN,"/* Custom apr_status_t error code, used when a plain HTTP request is
 * recevied on an SSL port. */",undetermined
4313,httpd,UNKNOWN,"/* Custom apr_status_t error code, used when the proxy cannot
 * establish an outgoing SSL connection. */",undetermined
4314,httpd,UNKNOWN,/* log the situation */,undetermined
4315,httpd,UNKNOWN,/* fake the request line */,undetermined
4316,httpd,UNKNOWN,"/*
 *  Close the SSL part of the socket connection
 *  (called immediately _before_ the socket is closed)
 *  or called with
 */",undetermined
4317,httpd,UNKNOWN,"/*
     * Now close the SSL layer of the connection. We've to take
     * the TLSv1 standard into account here:
     *
     * | 7.2.1. Closure alerts
     * |
     * | The client and the server must share knowledge that the connection is
     * | ending in order to avoid a truncation attack. Either party may
     * | initiate the exchange of closing messages.
     * |
     * | close_notify
     * |     This message notifies the recipient that the sender will not send
     * |     any more messages on this connection. The session becomes
     * |     unresumable if any connection is terminated without proper
     * |     close_notify messages with level equal to warning.
     * |
     * | Either party may initiate a close by sending a close_notify alert.
     * | Any data received after a closure alert is ignored.
     * |
     * | Each party is required to send a close_notify alert before closing
     * | the write side of the connection. It is required that the other party
     * | respond with a close_notify alert of its own and close down the
     * | connection immediately, discarding any pending writes. It is not
     * | required for the initiator of the close to wait for the responding
     * | close_notify alert before closing the read side of the connection.
     *
     * This means we've to send a close notify message, but haven't to wait
     * for the close notify of the client. Actually we cannot wait for the
     * close notify of the client because some clients (including Netscape
     * 4.x) don't send one, so we would hang.
     */",undetermined
4318,httpd,UNKNOWN,"/*
     * exchange close notify messages, but allow the user
     * to force the type of handshake via SetEnvIf directive
     */",undetermined
4319,httpd,UNKNOWN,"/* perform no close notify handshake at all
           (violates the SSL/TLS standard!) */",undetermined
4320,httpd,UNKNOWN,"/* send close notify and wait for clients close notify
           (standard compliant, but usually causes connection hangs) */",undetermined
4321,httpd,UNKNOWN,"/*
         * case SSL_SHUTDOWN_TYPE_UNSET:
         * case SSL_SHUTDOWN_TYPE_STANDARD:
         */",undetermined
4322,httpd,UNKNOWN,"/* send close notify, but don't wait for clients close notify
           (standard compliant and safe, so it's the DEFAULT!) */",undetermined
4323,httpd,UNKNOWN,/* and finally log the fact that we've closed the connection */,undetermined
4324,httpd,UNKNOWN,/* deallocate the SSL connection */,undetermined
4325,httpd,UNKNOWN,/* so filters know we've been shutdown */,undetermined
4326,httpd,UNKNOWN,/* prevent any further I/O */,undetermined
4327,httpd,UNKNOWN,"/*
 * The hook is NOT registered with ap_hook_process_connection. Instead, it is
 * called manually from the churn () before it tries to read any data.
 * There is some problem if I accept conn_rec *. Still investigating..
 * Adv. if conn_rec * can be accepted is we can hook this function using the
 * ap_hook_process_connection hook.
 */",undetermined
4328,httpd,UNKNOWN,"/* Perform the SSL handshake (whether in client or server mode), if
 * necessary, for the given connection. */",undetermined
4329,httpd,UNKNOWN,"/*
         * Enable SNI for backend requests. Make sure we don't do it for
         * pure SSLv3 connections, and also prevent IP addresses
         * from being included in the SNI extension. (OpenSSL would simply
         * pass them on, but RFC 6066 is quite clear on this: ""Literal
         * IPv4 and IPv6 addresses are not permitted"".)
         */",undetermined
4330,httpd,UNKNOWN,"/* ensure that the SSL structures etc are freed, etc: */",undetermined
4331,httpd,UNKNOWN,"/* Do string match or simplest wildcard match if that
             * fails. */",undetermined
4332,httpd,UNKNOWN,"/* ensure that the SSL structures etc are freed, etc: */",undetermined
4333,httpd,UNKNOWN,"/*
             * The case where the connection was closed before any data
             * was transferred. That's not a real error and can occur
             * sporadically with some clients.
             */",undetermined
4334,httpd,UNKNOWN,"/*
             * This is in addition to what was present earlier. It is
             * borrowed from openssl_state_machine.c [mod_tls].
             * TBD.
             */",undetermined
4335,httpd,UNKNOWN,"/*
             * The case where OpenSSL has recognized a HTTP request:
             * This means the client speaks plain HTTP on our HTTPS port.
             * ssl_io_filter_error will disable the ssl filters when it
             * sees this status code.
             */",undetermined
4336,httpd,UNKNOWN,/* if (ssl_err == SSL_ERROR_SSL) */,undetermined
4337,httpd,UNKNOWN,"/*
             * Log SSL errors and any unexpected conditions.
             */",undetermined
4338,httpd,UNKNOWN,"/*
     * Check for failed client authentication
     */",undetermined
4339,httpd,UNKNOWN,"/* leaving this log message as an error for the moment,
             * according to the mod_ssl docs:
             * ""level optional_no_ca is actually against the idea
             *  of authentication (but can be used to establish
             * SSL test pages, etc.)""
             * optional_no_ca doesn't appear to work as advertised
             * in 1.x
             */",undetermined
4340,httpd,UNKNOWN,"/*
     * Remember the peer certificate's DN
     */",undetermined
4341,httpd,UNKNOWN,"/*
     * Make really sure that when a peer certificate
     * is required we really got one... (be paranoid)
     */",undetermined
4342,httpd,UNKNOWN,/* start of block to return */,undetermined
4343,httpd,UNKNOWN,/* length of block to return */,undetermined
4344,httpd,UNKNOWN,"/* XXX: Ok, if we aborted, we ARE at the EOS.  We also have
         * aborted.  This 'double protection' is probably redundant,
         * but also effective against just about anything.
         */",undetermined
4345,httpd,UNKNOWN,/* XXX: we don't currently support anything other than these modes. */,undetermined
4346,httpd,UNKNOWN,"/* XXX: we could actually move ssl_io_filter_handshake to an
     * ap_hook_process_connection but would still need to call it for
     * AP_MODE_INIT for protocols that may upgrade the connection
     * rather than have SSLEngine On configured.
     */",undetermined
4347,httpd,UNKNOWN,"/* protocol module needs to handshake before sending
         * data to client (e.g. NNTP or FTP)
         */",undetermined
4348,httpd,UNKNOWN,"/* Protected from truncation, readbytes < MAX_SIZE_T
         * FIXME: No, it's *not* protected.  -- jre */",undetermined
4349,httpd,UNKNOWN,"/* Satisfy the read directly out of the buffer if possible;
         * invoking ssl_io_input_getline will mean the entire buffer
         * is copied once (unnecessarily) for each GETLINE call. */",undetermined
4350,httpd,UNKNOWN,/* +1 to include LF */,undetermined
4351,httpd,UNKNOWN,/* Buffer contents now consumed. */,undetermined
4352,httpd,UNKNOWN,/* Otherwise fall back to the hard way. */,undetermined
4353,httpd,UNKNOWN,"/* We have no idea what you are talking about, so return an error. */",undetermined
4354,httpd,UNKNOWN,"/* It is possible for mod_ssl's BIO to be used outside of the
     * direct control of mod_ssl's input or output filter -- notably,
     * when mod_ssl initiates a renegotiation.  Switching the BIO mode
     * back to ""blocking"" here ensures such operations don't fail with
     * SSL_ERROR_WANT_READ. */",undetermined
4355,httpd,UNKNOWN,/* Handle custom errors. */,undetermined
4356,httpd,UNKNOWN,/* Create a transient bucket out of the decrypted data. */,undetermined
4357,httpd,UNKNOWN,"/* ssl_io_filter_output() produces one SSL/TLS message per bucket
 * passed down the output filter stack.  This results in a high
 * overhead (network packets) for any output comprising many small
 * buckets.  SSI page applied through the HTTP chunk filter, for
 * example, may produce many brigades containing small buckets -
 * [chunk-size CRLF] [chunk-data] [CRLF].
 *
 * The coalescing filter merges many small buckets into larger buckets
 * where possible, allowing the SSL I/O output filter to handle them
 * more efficiently. */",undetermined
4358,httpd,UNKNOWN,/* number of bytes of buffer used. */,undetermined
4359,httpd,UNKNOWN,"/* The brigade consists of zero-or-more small data buckets which
     * can be coalesced (the prefix), followed by the remainder of the
     * brigade.
     *
     * Find the last bucket - if any - of that prefix.  count gives
     * the number of buckets in the prefix.  The ""prefix"" must contain
     * only data buckets with known length, and must be of a total
     * size which fits into the buffer.
     *
     * N.B.: The process here could be repeated throughout the brigade
     * (coalesce any run of consecutive data buckets) but this would
     * add significant complexity, particularly to memory
     * management. */",undetermined
4360,httpd,UNKNOWN,/* don't count zero-length buckets */,undetermined
4361,httpd,UNKNOWN,"/* Coalesce the prefix, if:
     * a) more than one bucket is found to coalesce, or
     * b) the brigade contains only a single data bucket, or
     * c)
     */",undetermined
4362,httpd,UNKNOWN,"/* If coalescing some bytes, ensure a context has been
         * created. */",undetermined
4363,httpd,UNKNOWN,"/* Iterate through the prefix segment.  For non-fatal errors
         * in this loop it is safe to break out and fall back to the
         * normal path of sending the buffer + remaining buckets in
         * brigade.  */",undetermined
4364,httpd,UNKNOWN,/* non-fatal error; break out */,undetermined
4365,httpd,UNKNOWN,"/* A blocking read should be fine here for a
                 * known-length data bucket, rather than the usual
                 * non-block/flush/block.  */",undetermined
4366,httpd,UNKNOWN,/* Be paranoid. */,undetermined
4367,httpd,UNKNOWN,/* non-fatal error; break out */,undetermined
4368,httpd,UNKNOWN,"/* If the brigade is now empty, our work here is done. */",undetermined
4369,httpd,UNKNOWN,"/* If anything remains in the brigade, it must now be passed down
     * the filter stack, first prepending anything that has been
     * coalesced. */",undetermined
4370,httpd,UNKNOWN,/* buffer now emptied. */,undetermined
4371,httpd,UNKNOWN,/* ssl_filter_io_shutdown was called */,undetermined
4372,httpd,UNKNOWN,"/* When we are the writer, we must initialize the inctx
     * mode so that we block for any required ssl input, because
     * output filtering is always nonblocking.
     */",undetermined
4373,httpd,UNKNOWN,"/* If it is a flush or EOS, we need to pass this down.
         * These types do not require translation by OpenSSL.
         */",undetermined
4374,httpd,UNKNOWN,"/*
                 * By definition, nothing can come after EOS.
                 * which also means we can pass the rest of this brigade
                 * without creating a new one since it only contains the
                 * EOS bucket.
                 */",undetermined
4375,httpd,UNKNOWN,"/* bio_filter_out_flush() already passed down a flush bucket
                 * if there was any data to be flushed.
                 */",undetermined
4376,httpd,UNKNOWN,"/* The EOC bucket indicates connection closure, so SSL
             * shutdown must now be performed.  */",undetermined
4377,httpd,UNKNOWN,/* filter output */,undetermined
4378,httpd,UNKNOWN,/* No data available: flush... */,undetermined
4379,httpd,UNKNOWN,/* and try again with a blocking read. */,undetermined
4380,httpd,UNKNOWN,/* total length buffered */,undetermined
4381,httpd,UNKNOWN,/* non-zero once EOS is seen */,undetermined
4382,httpd,UNKNOWN,"/* Create the context which will be passed to the input filter;
     * containing a setaside pool and a brigade which constrain the
     * lifetime of the buffered data. */",undetermined
4383,httpd,UNKNOWN,/* ... and a temporary brigade. */,undetermined
4384,httpd,UNKNOWN,"/* The request body is read from the protocol-level input
         * filters; the buffering filter will reinject it from that
         * level, allowing content/resource filters to run later, if
         * necessary. */",undetermined
4385,httpd,UNKNOWN,"/* Iterate through the returned brigade: setaside each bucket
         * into the context's pool and move it into the brigade. */",undetermined
4386,httpd,UNKNOWN,/* Fail if this exceeds the maximum buffer size. */,undetermined
4387,httpd,UNKNOWN,"/* After consuming all protocol-level input, remove all protocol-level
     * filters.  It should strictly only be necessary to remove filters
     * at exactly ftype == AP_FTYPE_PROTOCOL, since this filter will
     * precede all > AP_FTYPE_PROTOCOL anyway. */",undetermined
4388,httpd,UNKNOWN,/* Insert the filter which will supply the buffered content. */,undetermined
4389,httpd,UNKNOWN,"/* This input filter supplies the buffered request body to the caller
 * from the brigade stored in f->ctx.  Note that the placement of this
 * filter in the filter stack is important; it must be the first
 * r->proto_input_filter; lower-typed filters will not be preserved
 * across internal redirects (see PR 43738).  */",undetermined
4390,httpd,UNKNOWN,"/* Suprisingly (and perhaps, wrongly), the request body can be
         * pulled from the input filter stack more than once; a
         * handler may read it, and ap_discard_request_body() will
         * attempt to do so again after *every* request.  So input
         * filters must be prepared to give up an EOS if invoked after
         * initially reading the request. The HTTP_IN filter does this
         * with its ->eos_sent flag. */",undetermined
4391,httpd,UNKNOWN,/* Partition the buffered brigade. */,undetermined
4392,httpd,UNKNOWN,"/* If the buffered brigade contains less then the requested
         * length, just pass it all back. */",undetermined
4393,httpd,UNKNOWN,"/* Unsplice the partitioned segment and move it into the
             * passed-in brigade; no convenient way to do this with
             * the APR_BRIGADE_* macros. */",undetermined
4394,httpd,UNKNOWN,/* Split a line into the passed-in brigade. */,undetermined
4395,httpd,UNKNOWN,"/* Ensure that the brigade is terminated by an EOS if the
         * buffered request body has been entirely consumed. */",undetermined
4396,httpd,UNKNOWN,"/* Note that the filter must *not* be removed here; it may be
         * invoked again, see comment above. */",undetermined
4397,httpd,UNKNOWN,"/* The request_rec pointer is passed in here only to ensure that the
 * filter chain is modified correctly when doing a TLS upgrade.  It
 * must *not* be used otherwise. */",undetermined
4398,httpd,UNKNOWN,"/* The request_rec pointer is passed in here only to ensure that the
 * filter chain is modified correctly when doing a TLS upgrade.  It
 * must *not* be used otherwise. */",undetermined
4399,httpd,UNKNOWN,/* We insert a clogging input filter. Let the core know. */,undetermined
4400,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  I/O Data Debugging
**  _________________________________________________________________
*/",undetermined
4401,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
4402,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
4403,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
4404,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4405,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_kernel.c
 *  The SSL engine kernel
 */",undetermined
4406,httpd,UNKNOWN,"/* ``It took me fifteen years to discover
                                  I had no talent for programming, but
                                  I couldn't give it up because by that
                                  time I was too famous.''
                                            -- Unknown                */",undetermined
4407,httpd,UNKNOWN,"/* Perform an upgrade-to-TLS for the given request, per RFC 2817. */",undetermined
4408,httpd,UNKNOWN,/* Perform initial SSL handshake. */,undetermined
4409,httpd,UNKNOWN,"/* Perform a speculative (and non-blocking) read from the connection
 * filters for the given request, to determine whether there is any
 * pending data to read.  Return non-zero if there is, else zero. */",undetermined
4410,httpd,UNKNOWN,"/*
 *  Post Read Request Handler
 */",undetermined
4411,httpd,UNKNOWN,"/* Perform TLS upgrade here if ""SSLEngine optional"" is configured,
     * SSL is not already set up for this connection, and the client
     * has sent a suitable Upgrade header. */",undetermined
4412,httpd,UNKNOWN,"/* Now that we have caught this error, forget it. we are done
         * with using SSL on this request.
         */",undetermined
4413,httpd,UNKNOWN,"/*
     * Get the SSL connection structure and perform the
     * delayed interlinking from SSL back to request_rec
     */",undetermined
4414,httpd,UNKNOWN,"/*
         * The SNI extension supplied a hostname. So don't accept requests
         * with either no hostname or a different hostname.
         */",undetermined
4415,httpd,UNKNOWN,"/*
         * We are using a name based configuration here, but no hostname was
         * provided via SNI. Don't allow that if are requested to do strict
         * checking. Check wether this strict checking was setup either in the
         * server config we used for handshaking or in our current server.
         * This should avoid insecure configuration by accident.
         */",undetermined
4416,httpd,UNKNOWN,"/*
     * Log information about incoming HTTPS requests
     */",undetermined
4417,httpd,UNKNOWN,"/* SetEnvIf ssl-*-shutdown flags can only be per-server,
     * so they won't change across keepalive requests
     */",undetermined
4418,httpd,UNKNOWN,"/*
 * Move SetEnvIf information from request_rec to conn_rec/BUFF
 * to allow the close connection handler to use them.
 */",undetermined
4419,httpd,UNKNOWN,"/* being case-sensitive here.
             * and not checking for the -shutdown since these are the only
             * SetEnvIf ""flags"" we support
             */",undetermined
4420,httpd,UNKNOWN,/* should only ever be one ssl-*-shutdown */,undetermined
4421,httpd,UNKNOWN,"/*
 *  Access Handler
 */",undetermined
4422,httpd,UNKNOWN,"/*
     * Support for SSLRequireSSL directive
     */",undetermined
4423,httpd,UNKNOWN,"/* This vhost was configured for optional SSL, just tell the
             * client that we need to upgrade.
             */",undetermined
4424,httpd,UNKNOWN,/* remember forbidden access for strict require option */,undetermined
4425,httpd,UNKNOWN,"/*
     * Check to see whether SSL is in use; if it's not, then no
     * further access control checks are relevant.  (the test for
     * sc->enabled is probably strictly unnecessary)
     */",undetermined
4426,httpd,UNKNOWN,"/*
     * Support for per-directory reconfigured SSL connection parameters
     *
     * We do not force any renegotiation if the user is already authenticated
     * via SRP.
     *
     */",undetermined
4427,httpd,UNKNOWN,"/*
     * Support for per-directory reconfigured SSL connection parameters.
     *
     * This is implemented by forcing an SSL renegotiation with the
     * reconfigured parameter suite. But Apache's internal API processing
     * makes our life very hard here, because when internal sub-requests occur
     * we nevertheless should avoid multiple unnecessary SSL handshakes (they
     * require extra network I/O and especially time to perform).
     *
     * But the optimization for filtering out the unnecessary handshakes isn't
     * obvious and trivial.  Especially because while Apache is in its
     * sub-request processing the client could force additional handshakes,
     * too. And these take place perhaps without our notice. So the only
     * possibility is to explicitly _ask_ OpenSSL whether the renegotiation
     * has to be performed or not. It has to performed when some parameters
     * which were previously known (by us) are not those we've now
     * reconfigured (as known by OpenSSL) or (in optimized way) at least when
     * the reconfigured parameter suite is stronger (more restrictions) than
     * the currently active one.
     */",undetermined
4428,httpd,UNKNOWN,"/*
     * Override of SSLCipherSuite
     *
     * We provide two options here:
     *
     * o The paranoid and default approach where we force a renegotiation when
     *   the cipher suite changed in _any_ way (which is straight-forward but
     *   often forces renegotiations too often and is perhaps not what the
     *   user actually wanted).
     *
     * o The optimized and still secure way where we force a renegotiation
     *   only if the currently active cipher is no longer contained in the
     *   reconfigured/new cipher suite. Any other changes are not important
     *   because it's the servers choice to select a cipher from the ones the
     *   client supports. So as long as the current cipher is still in the new
     *   cipher suite we're happy. Because we can assume we would have
     *   selected it again even when other (better) ciphers exists now in the
     *   new cipher suite. This approach is fine because the user explicitly
     *   has to enable this via ``SSLOptions +OptRenegotiate''. So we do no
     *   implicit optimizations.
     */",undetermined
4429,httpd,UNKNOWN,/* remember old state */,undetermined
4430,httpd,UNKNOWN,/* configure new state */,undetermined
4431,httpd,UNKNOWN,/* determine whether a renegotiation has to be forced */,undetermined
4432,httpd,UNKNOWN,/* optimized way */,undetermined
4433,httpd,UNKNOWN,/* paranoid way */,undetermined
4434,httpd,UNKNOWN,/* cleanup */,undetermined
4435,httpd,UNKNOWN,/* tracing */,undetermined
4436,httpd,UNKNOWN,"/*
     * override of SSLVerifyDepth
     *
     * The depth checks are handled by us manually inside the verify callback
     * function and not by OpenSSL internally (and our function is aware of
     * both the per-server and per-directory contexts). So we cannot ask
     * OpenSSL about the currently verify depth. Instead we remember it in our
     * SSLConnRec attached to the SSL* of OpenSSL.  We've to force the
     * renegotiation if the reconfigured/new verify depth is less than the
     * currently active/remembered verify depth (because this means more
     * restriction on the certificate chain).
     */",undetermined
4437,httpd,UNKNOWN,/* determine the new depth */,undetermined
4438,httpd,UNKNOWN,"/*
     * override of SSLVerifyClient
     *
     * We force a renegotiation if the reconfigured/new verify type is
     * stronger than the currently active verify type.
     *
     * The order is: none << optional_no_ca << optional << require
     *
     * Additionally the following optimization is possible here: When the
     * currently active verify type is ""none"" but a client certificate is
     * already known/present, it's enough to manually force a client
     * verification but at least skip the I/O-intensive renegotiation
     * handshake.
     */",undetermined
4439,httpd,UNKNOWN,/* remember old state */,undetermined
4440,httpd,UNKNOWN,/* configure new state */,undetermined
4441,httpd,UNKNOWN,/* determine whether we've to force a renegotiation */,undetermined
4442,httpd,UNKNOWN,/* optimization */,undetermined
4443,httpd,UNKNOWN,"/* If we're handling a request for a vhost other than the default one,
         * then we need to make sure that client authentication is properly
         * enforced. For clients supplying an SNI extension, the peer
         * certificate verification has happened in the handshake already
         * (and r->server == handshakeserver). For non-SNI requests,
         * an additional check is needed here. If client authentication
         * is configured as mandatory, then we can only proceed if the
         * CA list doesn't have to be changed (OpenSSL doesn't provide
         * an option to change the list for an existing session).
         */",undetermined
4444,httpd,UNKNOWN,"/* let it pass, possibly with an ""incorrect"" peer cert,
                     * so make sure the SSL_CLIENT_VERIFY environment variable
                     * will indicate partial success only, later on.
                     */",undetermined
4445,httpd,UNKNOWN,"/* If a renegotiation is now required for this location, and the
     * request includes a message body (and the client has not
     * requested a ""100 Continue"" response), then the client will be
     * streaming the request body over the wire already.  In that
     * case, it is not possible to stop and perform a new SSL
     * handshake immediately; once the SSL library moves to the
     * ""accept"" state, it will reject the SSL packets which the client
     * is sending for the request body.
     *
     * To allow authentication to complete in this auth hook, the
     * solution used here is to fill a (bounded) buffer with the
     * request body, and then to reinject that request body later.
     */",undetermined
4446,httpd,UNKNOWN,/* Fill the I/O buffer with the request body if possible. */,undetermined
4447,httpd,UNKNOWN,"/* If the reneg buffer size is set to zero, just fail. */",undetermined
4448,httpd,UNKNOWN,"/*
     * now do the renegotiation if anything was actually reconfigured
     */",undetermined
4449,httpd,UNKNOWN,"/*
         * Now we force the SSL renegotiation by sending the Hello Request
         * message to the client. Here we have to do a workaround: Actually
         * OpenSSL returns immediately after sending the Hello Request (the
         * intent AFAIK is because the SSL/TLS protocol says it's not a must
         * that the client replies to a Hello Request). But because we insist
         * on a reply (anything else is an error for us) we have to go to the
         * ACCEPT state manually. Using SSL_set_accept_state() doesn't work
         * here because it resets too much of the connection.  So we set the
         * state explicitly and continue the handshake manually.
         */",undetermined
4450,httpd,UNKNOWN,/* perform just a manual re-verification of the peer */,undetermined
4451,httpd,UNKNOWN,"/* client cert is in the session cache, but there is
                 * no chain, since ssl3_get_client_certificate()
                 * sk_X509_shift-ed the peer cert out of the chain.
                 * we put it back here for the purpose of quick_renegotiation.
                 */",undetermined
4452,httpd,UNKNOWN,"/* we created this ourselves, so free it */",undetermined
4453,httpd,UNKNOWN,"/* Additional mitigation for CVE-2009-3555: At this point,
             * before renegotiating, an (entire) request has been read
             * from the connection.  An attacker may have sent further
             * data to ""prefix"" any subsequent request by the victim's
             * client after the renegotiation; this data may already
             * have been read and buffered.  Forcing a connection
             * closure after the response ensures such data will be
             * discarded.  Legimately pipelined HTTP requests will be
             * retried anyway with this approach. */",undetermined
4454,httpd,UNKNOWN,/* Perform a full renegotiation. */,undetermined
4455,httpd,UNKNOWN,"/* Toggle the renegotiation state to allow the new
             * handshake to proceed. */",undetermined
4456,httpd,UNKNOWN,"/* XXX: Should replace setting state with SSL_renegotiate(ssl);
             * However, this causes failures in perl-framework currently,
             * perhaps pre-test if we have already negotiated?
             */",undetermined
4457,httpd,UNKNOWN,"/*
         * Remember the peer certificate's DN
         */",undetermined
4458,httpd,UNKNOWN,"/*
         * Finally check for acceptable renegotiation results
         */",undetermined
4459,httpd,UNKNOWN,"/*
         * Also check that SSLCipherSuite has been enforced as expected.
         */",undetermined
4460,httpd,UNKNOWN,"/* If we're trying to have the user name set from a client
     * certificate then we need to set it here. This should be safe as
     * the user name probably isn't important from an auth checking point
     * of view as the certificate supplied acts in that capacity.
     * However, if FakeAuth is being used then this isn't the case so
     * we need to postpone setting the username until later.
     */",undetermined
4461,httpd,UNKNOWN,"/*
     * Check SSLRequire boolean expressions
     */",undetermined
4462,httpd,UNKNOWN,/* remember forbidden access for strict require option */,undetermined
4463,httpd,UNKNOWN,/* remember forbidden access for strict require option */,undetermined
4464,httpd,UNKNOWN,"/*
     * Else access is granted from our point of view (except vendor
     * handlers override). But we have to return DECLINED here instead
     * of OK, because mod_auth and other modules still might want to
     * deny access.
     */",undetermined
4465,httpd,UNKNOWN,"/*
 *  Authentication Handler:
 *  Fake a Basic authentication from the X509 client certificate.
 *
 *  This must be run fairly early on to prevent a real authentication from
 *  occuring, in particular it must be run before anything else that
 *  authenticates a user.  This means that the Module statement for this
 *  module should be LAST in the Configuration file.
 */",undetermined
4466,httpd,UNKNOWN,"/*
     * Additionally forbid access (again)
     * when strict require option is used.
     */",undetermined
4467,httpd,UNKNOWN,"/*
     * We decline when we are in a subrequest.  The Authorization header
     * would already be present if it was added in the main request.
     */",undetermined
4468,httpd,UNKNOWN,"/*
     * Make sure the user is not able to fake the client certificate
     * based authentication by just entering an X.509 Subject DN
     * (""/XX=YYY/XX=YYY/.."") as the username and ""password"" as the
     * password.
     */",undetermined
4469,httpd,UNKNOWN,"/*
     * We decline operation in various situations...
     * - SSLOptions +FakeBasicAuth not configured
     * - r->user already authenticated
     * - ssl not enabled
     * - client did not present a certificate
     */",undetermined
4470,httpd,UNKNOWN,"/*
     * Fake a password - which one would be immaterial, as, it seems, an empty
     * password in the users file would match ALL incoming passwords, if only
     * we were using the standard crypt library routine. Unfortunately, OpenSSL
     * ""fixes"" a ""bug"" in crypt and thus prevents blank passwords from
     * working.  (IMHO what they really fix is a bug in the users of the code
     * - failing to program correctly for shadow passwords).  We need,
     * therefore, to provide a password. This password can be matched by
     * adding the string ""xxj31ZMTZzkVA"" as the password in the user file.
     * This is just the crypted variant of the word ""password"" ;-)
     */",undetermined
4471,httpd,UNKNOWN,/* authorization phase */,undetermined
4472,httpd,UNKNOWN,"/*
     * Additionally forbid access (again)
     * when strict require option is used.
     */",undetermined
4473,httpd,UNKNOWN,"/*
 *   Fixup Handler
 */",undetermined
4474,httpd,UNKNOWN,"/* If ""SSLEngine optional"" is configured, this is not an SSL
     * connection, and this isn't a subrequest, send an Upgrade
     * response header. */",undetermined
4475,httpd,UNKNOWN,"/*
     * Check to see if SSL is on
     */",undetermined
4476,httpd,UNKNOWN,"/*
     * Annotate the SSI/CGI environment with standard SSL information
     */",undetermined
4477,httpd,UNKNOWN,/* the always present HTTPS (=HTTP over SSL) flag! */,undetermined
4478,httpd,UNKNOWN,/* add content of SNI TLS extension (if supplied with ClientHello) */,undetermined
4479,httpd,UNKNOWN,/* standard SSL environment variables */,undetermined
4480,httpd,UNKNOWN,"/*
     * On-demand bloat up the SSI/CGI environment with certificate data
     */",undetermined
4481,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Authz providers for use with mod_authz_core
**  _________________________________________________________________
*/",undetermined
4482,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  OpenSSL Callback Functions
**  _________________________________________________________________
*/",undetermined
4483,httpd,UNKNOWN,"/*
 * Handle out temporary RSA private keys on demand
 *
 * The background of this as the TLSv1 standard explains it:
 *
 * | D.1. Temporary RSA keys
 * |
 * |    US Export restrictions limit RSA keys used for encryption to 512
 * |    bits, but do not place any limit on lengths of RSA keys used for
 * |    signing operations. Certificates often need to be larger than 512
 * |    bits, since 512-bit RSA keys are not secure enough for high-value
 * |    transactions or for applications requiring long-term security. Some
 * |    certificates are also designated signing-only, in which case they
 * |    cannot be used for key exchange.
 * |
 * |    When the public key in the certificate cannot be used for encryption,
 * |    the server signs a temporary RSA key, which is then exchanged. In
 * |    exportable applications, the temporary RSA key should be the maximum
 * |    allowable length (i.e., 512 bits). Because 512-bit RSA keys are
 * |    relatively insecure, they should be changed often. For typical
 * |    electronic commerce applications, it is suggested that keys be
 * |    changed daily or every 500 transactions, and more often if possible.
 * |    Note that while it is acceptable to use the same temporary key for
 * |    multiple transactions, it must be signed each time it is used.
 * |
 * |    RSA key generation is a time-consuming process. In many cases, a
 * |    low-priority process can be assigned the task of key generation.
 * |    Whenever a new key is completed, the existing temporary key can be
 * |    replaced with the new one.
 *
 * XXX: base on comment above, if thread support is enabled,
 * we should spawn a low-priority thread to generate new keys
 * on the fly.
 *
 * So we generated 512 and 1024 bit temporary keys on startup
 * which we now just hand out on demand....
 */",undetermined
4484,httpd,UNKNOWN,"/* doesn't matter if export flag is on,
     * we won't be asked for keylen > 512 in that case.
     * if we are asked for a keylen > 1024, it is too expensive
     * to generate on the fly.
     * XXX: any reason not to generate 2048 bit keys at startup?
     */",undetermined
4485,httpd,UNKNOWN,"/*
 * Hand out the already generated DH parameters...
 */",undetermined
4486,httpd,UNKNOWN,/* XXX Uses 256-bit key for now. TODO: support other sizes. */,undetermined
4487,httpd,UNKNOWN,"/*
 * This OpenSSL callback function is called when OpenSSL
 * does client authentication and verifies the certificate chain.
 */",undetermined
4488,httpd,UNKNOWN,/* Get Apache context back through OpenSSL context */,undetermined
4489,httpd,UNKNOWN,/* Get verify ingredients */,undetermined
4490,httpd,UNKNOWN,"/*
     * Log verification information
     */",undetermined
4491,httpd,UNKNOWN,"/*
     * Check for optionally acceptable non-verifiable issuer situation
     */",undetermined
4492,httpd,UNKNOWN,"/*
         * SSLProxyVerify is either not configured or set to ""none"".
         * (this callback doesn't happen in the server context if SSLVerify
         *  is not configured or set to ""none"")
         */",undetermined
4493,httpd,UNKNOWN,"/*
     * Expired certificates vs. ""expired"" CRLs: by default, OpenSSL
     * turns X509_V_ERR_CRL_HAS_EXPIRED into a ""certificate_expired(45)""
     * SSL alert, but that's not really the message we should convey to the
     * peer (at the very least, it's confusing, and in many cases, it's also
     * inaccurate, as the certificate itself may very well not have expired
     * yet). We set the X509_STORE_CTX error to something which OpenSSL's
     * s3_both.c:ssl_verify_alarm_type() maps to SSL_AD_CERTIFICATE_UNKNOWN,
     * i.e. the peer will receive a ""certificate_unknown(46)"" alert.
     * We do not touch errnum, though, so that later on we will still log
     * the ""real"" error, as returned by OpenSSL.
     */",undetermined
4494,httpd,UNKNOWN,"/*
     * Perform OCSP-based revocation checks
     */",undetermined
4495,httpd,UNKNOWN,"/* If there was an optional verification error, it's not
         * possible to perform OCSP validation since the issuer may be
         * missing/untrusted.  Fail in that case. */",undetermined
4496,httpd,UNKNOWN,"/*
     * If we already know it's not ok, log the real reason
     */",undetermined
4497,httpd,UNKNOWN,"/*
     * Finally check the depth of the certificate verification
     */",undetermined
4498,httpd,UNKNOWN,"/*
     * And finally signal OpenSSL the (perhaps changed) state
     */",undetermined
4499,httpd,UNKNOWN,"/*
 * caller will decrement the cert and key reference
 * so we need to increment here to prevent them from
 * being freed.
 */",undetermined
4500,httpd,UNKNOWN,"/*
         * downstream server didn't send us a list of acceptable CA certs,
         * so we send the first client cert in the list.
         */",undetermined
4501,httpd,UNKNOWN,/* Search certs (by issuer name) one by one*/,undetermined
4502,httpd,UNKNOWN,"/*
                 * Failed to find direct issuer - search intermediates
                 * (by issuer name), if provided.
                 */",undetermined
4503,httpd,UNKNOWN,/* end loop through chained certs */,undetermined
4504,httpd,UNKNOWN,/* end loop through available certs */,undetermined
4505,httpd,UNKNOWN,"/*
 *  This callback function is executed by OpenSSL whenever a new SSL_SESSION is
 *  added to the internal OpenSSL session cache. We use this hook to spread the
 *  SSL_SESSION also to the inter-process disk-cache to make share it with our
 *  other Apache pre-forked server processes.
 */",undetermined
4506,httpd,UNKNOWN,/* Get Apache context back through OpenSSL context */,undetermined
4507,httpd,UNKNOWN,"/*
     * Set the timeout also for the internal OpenSSL cache, because this way
     * our inter-process cache is consulted only when it's really necessary.
     */",undetermined
4508,httpd,UNKNOWN,"/*
     * Store the SSL_SESSION in the inter-process cache with the
     * same expire time, so it expires automatically there, too.
     */",undetermined
4509,httpd,UNKNOWN,"/*
     * return 0 which means to OpenSSL that the session is still
     * valid and was not freed by us with SSL_SESSION_free().
     */",undetermined
4510,httpd,UNKNOWN,"/*
 *  This callback function is executed by OpenSSL whenever a
 *  SSL_SESSION is looked up in the internal OpenSSL cache and it
 *  was not found. We use this to lookup the SSL_SESSION in the
 *  inter-process disk-cache where it was perhaps stored by one
 *  of our other Apache pre-forked server processes.
 */",undetermined
4511,httpd,UNKNOWN,/* Get Apache context back through OpenSSL context */,undetermined
4512,httpd,UNKNOWN,"/*
     * Try to retrieve the SSL_SESSION from the inter-process cache
     */",undetermined
4513,httpd,UNKNOWN,"/*
     * Return NULL or the retrieved SSL_SESSION. But indicate (by
     * setting do_copy to 0) that the reference count on the
     * SSL_SESSION should not be incremented by the SSL library,
     * because we will no longer hold a reference to it ourself.
     */",undetermined
4514,httpd,UNKNOWN,"/*
 *  This callback function is executed by OpenSSL whenever a
 *  SSL_SESSION is removed from the the internal OpenSSL cache.
 *  We use this to remove the SSL_SESSION in the inter-process
 *  disk-cache, too.
 */",undetermined
4515,httpd,UNKNOWN,"/*
     * Get Apache context back through OpenSSL context
     */",undetermined
4516,httpd,UNKNOWN,/* on server shutdown Apache is already gone */,undetermined
4517,httpd,UNKNOWN,"/*
     * Remove the SSL_SESSION from the inter-process cache
     */",undetermined
4518,httpd,UNKNOWN,"/* TODO: Do we need a temp pool here, or are we always shutting down? */",undetermined
4519,httpd,UNKNOWN,/* Dump debugginfo trace to the log file. */,undetermined
4520,httpd,UNKNOWN,"/*
     * create the various trace messages
     */",undetermined
4521,httpd,UNKNOWN,"/*
     * Because SSL renegotiations can happen at any time (not only after
     * SSL_accept()), the best way to log the current connection details is
     * right after a finished handshake.
     */",undetermined
4522,httpd,UNKNOWN,"/*
 * This callback function is executed while OpenSSL processes the SSL
 * handshake and does SSL record layer stuff.  It's used to trap
 * client-initiated renegotiations, and for dumping everything to the
 * log.
 */",undetermined
4523,httpd,UNKNOWN,/* Retrieve the conn_rec and the associated SSLConnRec. */,undetermined
4524,httpd,UNKNOWN,"/* If the reneg state is to reject renegotiations, check the SSL
     * state machine and move to ABORT if a Client Hello is being
     * read. */",undetermined
4525,httpd,UNKNOWN,"/* If the first handshake is complete, change state to reject any
     * subsequent client-initated renegotiation. */",undetermined
4526,httpd,UNKNOWN,"/*
 * This callback function is executed when OpenSSL encounters an extended
 * client hello with a server name indication extension (""SNI"", cf. RFC 4366).
 */",undetermined
4527,httpd,UNKNOWN,"/*
 * Find a (name-based) SSL virtual host where either the ServerName
 * or one of the ServerAliases matches the supplied name (to be used
 * with ap_vhost_iterate_given_conn())
 */",undetermined
4528,httpd,UNKNOWN,/* check ServerName */,undetermined
4529,httpd,UNKNOWN,"/*
     * if not matched yet, check ServerAlias entries
     * (adapted from vhost.c:matches_aliases())
     */",undetermined
4530,httpd,UNKNOWN,"/* if still no match, check ServerAlias entries with wildcards */",undetermined
4531,httpd,UNKNOWN,/* set SSL_CTX (if matched) */,undetermined
4532,httpd,UNKNOWN,"/*
         * SSL_set_SSL_CTX() only deals with the server cert,
         * so we need to duplicate a few additional settings
         * from the ctx by hand
         */",undetermined
4533,httpd,UNKNOWN,"/*
            * Only initialize the verification settings from the ctx
            * if they are not yet set, or if we're called when a new
            * SSL connection is set up (num_renegotiations == 0).
            * Otherwise, we would possibly reset a per-directory
            * configuration which was put into effect by ssl_hook_Access.
            */",undetermined
4534,httpd,UNKNOWN,"/*
         * Adjust the session id context. ssl_init_ssl_connection()
         * always picks the configuration of the first vhost when
         * calling SSL_new(), but we want to tie the session to the
         * vhost we have just switched to. Again, we have to make sure
         * that we're not overwriting a session id context which was
         * possibly set in ssl_hook_Access(), before triggering
         * a renegotation.
         */",undetermined
4535,httpd,UNKNOWN,"/*
         * Save the found server into our SSLConnRec for later
         * retrieval
         */",undetermined
4536,httpd,UNKNOWN,"/*
         * There is one special filter callback, which is set
         * very early depending on the base_server's log level.
         * If this is not the first vhost we're now selecting
         * (and the first vhost doesn't use APLOG_TRACE4), then
         * we need to set that callback here.
         */",undetermined
4537,httpd,UNKNOWN,/* OPENSSL_NO_TLSEXT */,undetermined
4538,httpd,UNKNOWN,"/*
 * This callback function is executed when OpenSSL needs a key for encrypting/
 * decrypting a TLS session ticket (RFC 5077) and a ticket key file has been
 * configured through SSLSessionTicketKeyFile.
 */",undetermined
4539,httpd,UNKNOWN,"/* 
         * OpenSSL is asking for a key for encrypting a ticket,
         * see s3_srvr.c:ssl3_send_newsession_ticket()
         */",undetermined
4540,httpd,UNKNOWN,"/* should never happen, but better safe than sorry */",undetermined
4541,httpd,UNKNOWN,"/* 
         * OpenSSL is asking for the decryption key,
         * see t1_lib.c:tls_decrypt_ticket()
         */",undetermined
4542,httpd,UNKNOWN,/* check key name */,undetermined
4543,httpd,UNKNOWN,/* OpenSSL is not expected to call us with modes other than 1 or 0 */,undetermined
4544,httpd,UNKNOWN,/* HAVE_TLS_SESSION_TICKETS */,undetermined
4545,httpd,UNKNOWN,/* reset all other options */,undetermined
4546,httpd,UNKNOWN,/* OPENSSL_NO_SRP */,undetermined
4547,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4548,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_log.c
 *  Logging Facility
 */",undetermined
4549,httpd,UNKNOWN,"/* ``The difference between a computer
                                  industry job and open-source software
                                  hacking is about 30 hours a week.''
                                         -- Ralf S. Engelschall     */",undetermined
4550,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Logfile Support
**  _________________________________________________________________
*/",undetermined
4551,httpd,UNKNOWN,"/*
     * This is used for fatal errors and here
     * it is common module practice to really
     * exit from the complete program.
     * XXX: The config hooks should return errors instead of calling exit().
     */",undetermined
4552,httpd,UNKNOWN,"/*
 * Prints the SSL library error information.
 */",undetermined
4553,httpd,UNKNOWN,/* %s */,undetermined
4554,httpd,UNKNOWN,/* %s%s%s */,undetermined
4555,httpd,UNKNOWN,/* %s%s */,undetermined
4556,httpd,UNKNOWN,/* Pop the error off the stack: */,undetermined
4557,httpd,UNKNOWN,"/*
             * Limit the maximum length of the subject and issuer DN strings
             * in the log message. 300 characters should always be sufficient
             * for holding both the timestamp, module name, pid etc. stuff
             * at the beginning of the line and the trailing information about
             * serial, notbefore and notafter.
             */",undetermined
4558,httpd,UNKNOWN,"/*
 * Wrappers for ap_log_error/ap_log_cerror/ap_log_rerror which log additional
 * details of the X509 cert. For ssl_log_xerror, a pool needs to be passed in
 * as well (for temporary allocation of the cert's subject/issuer name strings,
 * in the other cases we use the connection and request pool, respectively).
 */",undetermined
4559,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4560,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_mutex.c
 *  Semaphore for Mutual Exclusion
 */",undetermined
4561,httpd,UNKNOWN,"/* ``Real programmers confuse
                                  Christmas and Halloween
                                  because DEC 25 = OCT 31.''
                                             -- Unknown     */",undetermined
4562,httpd,UNKNOWN,"/* A mutex is only needed if a session cache is configured, and
     * the provider used is not internally multi-process/thread
     * safe. */",undetermined
4563,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4564,httpd,UNKNOWN,"/* Return the responder URI specified in the given certificate, or
 * NULL if none specified. */",undetermined
4565,httpd,UNKNOWN,"/* Name found in extension, and is a URI: */",undetermined
4566,httpd,UNKNOWN,"/* Return the responder URI object which should be used in the given
 * configuration for the given certificate, or NULL if none can be
 * determined. */",undetermined
4567,httpd,UNKNOWN,"/* Use default responder URL if forced by configuration, else use
     * certificate-specified responder, falling back to default if
     * necessary and possible. */",undetermined
4568,httpd,UNKNOWN,"/* Create an OCSP request for the given certificate; returning the
 * certificate ID in *certid and *issuer on success.  Returns the
 * request object on success, or NULL on error. */",undetermined
4569,httpd,UNKNOWN,"/* Verify the OCSP status of given certificate.  Returns
 * V_OCSP_CERTSTATUS_* result code. */",undetermined
4570,httpd,UNKNOWN,/* TODO: allow flags configuration. */,undetermined
4571,httpd,UNKNOWN,"/* Check whether the response is inside the defined validity
         * period; otherwise fail.  */",undetermined
4572,httpd,UNKNOWN,"/* oscp_resp_maxage can be passed verbatim - UNSET (-1) means
             * that responses can be of any age as long as nextup is in the
             * future. */",undetermined
4573,httpd,UNKNOWN,/* certID is freed when the request is freed */,undetermined
4574,httpd,UNKNOWN,"/* starting with OpenSSL 1.0, X509_STORE_CTX_get_current_cert()
         * may yield NULL. Return early, but leave the ctx error as is. */",undetermined
4575,httpd,UNKNOWN,/* don't do OCSP checking for valid self-issued certs */,undetermined
4576,httpd,UNKNOWN,"/* Create a temporary pool to constrain memory use (the passed-in
     * pool may be e.g. a connection pool). */",undetermined
4577,httpd,UNKNOWN,"/* Propagate the verification status back to the passed-in
     * context. */",undetermined
4578,httpd,UNKNOWN,/* correct error code for application errors? */,undetermined
4579,httpd,UNKNOWN,/* HAVE_OCSP */,undetermined
4580,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4581,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_pphrase.c
 *  Pass Phrase Dialog
 */",undetermined
4582,httpd,UNKNOWN,"/* ``Treat your password like your
                                  toothbrush. Don't let anybody
                                  else use it, and get a new one
                                  every six months.''
                                           -- Clifford Stoll     */",undetermined
4583,httpd,UNKNOWN,"/*
 * Return true if the named file exists and is readable
 */",undetermined
4584,httpd,UNKNOWN,"/*
 * reuse vhost keys for asn1 tables where keys are allocated out
 * of s->process->pool to prevent ""leaking"" each time we format
 * a vhost key.  since the key is stored in a table with lifetime
 * of s->process->pool, the key needs to have the same lifetime.
 *
 * XXX: probably seems silly to use a hash table with keys and values
 * being the same, but it is easier than doing a linear search
 * and will make it easier to remove keys if needed in the future.
 * also have the problem with apr_array_header_t that if we
 * underestimate the number of vhost keys when we apr_array_make(),
 * the array will get resized when we push past the initial number
 * of elts.  this resizing in the s->process->pool means ""leaking""
 * since apr_array_push() will apr_alloc arr->nalloc * 2 elts,
 * leaving the original arr->elts to waste.
 */",undetermined
4585,httpd,UNKNOWN,/* 'p' pool used here is cleared on restarts (or sooner) */,undetermined
4586,httpd,UNKNOWN,/* make a copy out of s->process->pool */,undetermined
4587,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Pass Phrase and Private Key Handling
**  _________________________________________________________________
*/",undetermined
4588,httpd,UNKNOWN,"/*
 * sslc has a nasty flaw where its
 * PEM_read_bio_PrivateKey does not take a callback arg.
 */",undetermined
4589,httpd,UNKNOWN,"/* Abandon all hope, ye who read this code.  Don't believe the name:
 * ""passphrase handling"" is really a peripheral (if complex) concern;
 * the core purpose of this function to load into memory all
 * configured certs and key from files.  The private key handling in
 * here should be split out into a separate function for improved
 * readability.  The myCtxVarGet abomination can be thrown away with
 * SSLC support, vastly simplifying the code. */",undetermined
4590,httpd,UNKNOWN,"/*
     * Start with a fresh pass phrase array
     */",undetermined
4591,httpd,UNKNOWN,"/*
     * Walk through all configured servers
     */",undetermined
4592,httpd,UNKNOWN,"/*
         * Read in server certificate(s): This is the easy part
         * because this file isn't encrypted in any way.
         */",undetermined
4593,httpd,UNKNOWN,"/* Bitmasks for all key algorithms configured for this server;
         * initialize to zero. */",undetermined
4594,httpd,UNKNOWN,"/* Iterate through configured certificate files for this
         * server. */",undetermined
4595,httpd,UNKNOWN,"/*
             * check algorithm type of certificate and make
             * sure only one certificate per type is used.
             */",undetermined
4596,httpd,UNKNOWN,"/* Determine the hash key used for this (vhost, algo-type)
             * pair used to index both the mc->tPrivateKey and
             * mc->tPublicCert tables: */",undetermined
4597,httpd,UNKNOWN,"/*
             * Insert the certificate into global module configuration to let it
             * survive the processing between the 1st Apache API init round (where
             * we operate here) and the 2nd Apache init round (where the
             * certificate is actually used to configure mod_ssl's per-server
             * configuration structures).
             */",undetermined
4598,httpd,UNKNOWN,/* 2nd arg increments */,undetermined
4599,httpd,UNKNOWN,"/*
             * Free the X509 structure
             */",undetermined
4600,httpd,UNKNOWN,"/*
             * Read in the private key: This is the non-trivial part, because the
             * key is typically encrypted, so a pass phrase dialog has to be used
             * to request it from the user (or it has to be alternatively gathered
             * from a dialog program). The important point here is that ISPs
             * usually have hundrets of virtual servers configured and a lot of
             * them use SSL, so really we have to minimize the pass phrase
             * dialogs.
             *
             * The idea is this: When N virtual hosts are configured and all of
             * them use encrypted private keys with different pass phrases, we
             * have no chance and have to pop up N pass phrase dialogs. But
             * usually the admin is clever enough and uses the same pass phrase
             * for more private key files (typically he even uses one single pass
             * phrase for all). When this is the case we can minimize the dialogs
             * by trying to re-use already known/entered pass phrases.
             */",undetermined
4601,httpd,UNKNOWN,"/*
             * Try to read the private key file with the help of
             * the callback function which serves the pass
             * phrases to OpenSSL
             */",undetermined
4602,httpd,UNKNOWN,"/*
                 * Try to read the private key file with the help of
                 * the callback function which serves the pass
                 * phrases to OpenSSL
                 */",undetermined
4603,httpd,UNKNOWN,"/*
                 * if the private key is encrypted and SSLPassPhraseDialog
                 * is configured to ""builtin"" it isn't possible to prompt for
                 * a password after httpd has detached from the tty.
                 * in this case if we already have a private key and the
                 * file name/mtime hasn't changed, then reuse the existing key.
                 * we also reuse existing private keys that were encrypted for
                 * exec: and pipe: dialogs to minimize chances to snoop the
                 * password.  that and pipe: dialogs might prompt the user
                 * for password, which on win32 for example could happen 4
                 * times at startup.  twice for each child and twice within
                 * each since apache ""restarts itself"" on startup.
                 * of course this will not work for the builtin dialog if
                 * the server was started without LoadModule ssl_module
                 * configured, then restarted with it configured.
                 * but we fall through with a chance of success if the key
                 * is not encrypted or can be handled via exec or pipe dialog.
                 * and in the case of fallthrough, pkey_mtime and isatty()
                 * are used to give a better idea as to what failed.
                 */",undetermined
4604,httpd,UNKNOWN,/* to make up for sslc flaw */,undetermined
4605,httpd,UNKNOWN,"/* Ensure that the error stack is empty; some SSL
                 * functions will fail spuriously if the error stack
                 * is not empty. */",undetermined
4606,httpd,UNKNOWN,"/*
                 * when the private key file now was readable,
                 * it's fine and we go out of the loop
                 */",undetermined
4607,httpd,UNKNOWN,"/*
                 * when we have more remembered pass phrases
                 * try to reuse these first.
                 */",undetermined
4608,httpd,UNKNOWN,"/*
                 * else it's not readable and we have no more
                 * remembered pass phrases. Then this has to mean
                 * that the callback function popped up the dialog
                 * but a wrong pass phrase was entered.  We give the
                 * user (but not the dialog program) a few more
                 * chances...
                 */",undetermined
4609,httpd,UNKNOWN,/* WIN32 */,undetermined
4610,httpd,UNKNOWN,"/*
                 * Ok, anything else now means a fatal error.
                 */",undetermined
4611,httpd,UNKNOWN,/* XXX: apr_isatty() */,undetermined
4612,httpd,UNKNOWN,"/* If a cached private key was found, nothing more to do
             * here; loop through to the next configured cert for this
             * vhost. */",undetermined
4613,httpd,UNKNOWN,"/*
             * check algorithm type of private key and make
             * sure only one private key per type is used.
             */",undetermined
4614,httpd,UNKNOWN,"/*
             * Log the type of reading
             */",undetermined
4615,httpd,UNKNOWN,"/*
             * Ok, when we have one more pass phrase store it
             */",undetermined
4616,httpd,UNKNOWN,"/*
             * Insert private key into the global module configuration
             * (we convert it to a stand-alone DER byte sequence
             * because the SSL library uses static variables inside a
             * RSA structure which do not survive DSO reloads!)
             */",undetermined
4617,httpd,UNKNOWN,/* 2nd arg increments */,undetermined
4618,httpd,UNKNOWN,/* remember mtime of encrypted keys */,undetermined
4619,httpd,UNKNOWN,"/*
             * Free the private key structure
             */",undetermined
4620,httpd,UNKNOWN,"/*
     * Let the user know when we're successful.
     */",undetermined
4621,httpd,UNKNOWN,"/*
     * Wipe out the used memory from the
     * pass phrase array and then deallocate it
     */",undetermined
4622,httpd,UNKNOWN,"/* Close the pipes if they were opened
     */",undetermined
4623,httpd,UNKNOWN,"/* Child process code for 'ErrorLog ""|...""';
     * may want a common framework for this, since I expect it will
     * be common for other foo-loggers to want this sort of thing...
     */",undetermined
4624,httpd,UNKNOWN,"/* XXX: not sure if we aught to...
             * apr_pool_note_subprocess(p, procnew, APR_KILL_AFTER_TIMEOUT);
             */",undetermined
4625,httpd,UNKNOWN,/* failure */,undetermined
4626,httpd,UNKNOWN,/* XXX: apr_sometest */,undetermined
4627,httpd,UNKNOWN,"/*
     * Reconnect to the context of ssl_phrase_Handle()
     */",undetermined
4628,httpd,UNKNOWN,"/*
     * When remembered pass phrases are available use them...
     */",undetermined
4629,httpd,UNKNOWN,"/*
     * Builtin or Pipe dialog
     */",undetermined
4630,httpd,UNKNOWN,/* sc->server->pphrase_dialog_type == SSL_PPTYPE_BUILTIN */,undetermined
4631,httpd,UNKNOWN,"/*
             * stderr has already been redirected to the error_log.
             * rather than attempting to temporarily rehook it to the terminal,
             * we print the prompt to stdout before EVP_read_pw_string turns
             * off tty echo
             */",undetermined
4632,httpd,UNKNOWN,"/*
         * The first time display a header to inform the user about what
         * program he actually speaks to, which module is responsible for
         * this terminal dialog and why to the hell he has to enter
         * something...
         */",undetermined
4633,httpd,UNKNOWN,"/*
         * Emulate the OpenSSL internal pass phrase dialog
         * (see crypto/pem/pem_lib.c:def_callback() for details)
         */",undetermined
4634,httpd,UNKNOWN,/* sc->server->pphrase_dialog_type == SSL_PPTYPE_BUILTIN */,undetermined
4635,httpd,UNKNOWN,"/*
     * Filter program
     */",undetermined
4636,httpd,UNKNOWN,"/*
     * Ok, we now have the pass phrase, so give it back
     */",undetermined
4637,httpd,UNKNOWN,"/*
     * And return its length to OpenSSL...
     */",undetermined
4638,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4639,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_rand.c
 *  Random Number Generator Seeding
 */",undetermined
4640,httpd,UNKNOWN,"/* ``The generation of random
                                  numbers is too important
                                  to be left to chance.'' */",undetermined
4641,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Support for better seeding of SSL library's RNG
**  _________________________________________________________________
*/",undetermined
4642,httpd,UNKNOWN,"/*
                 * seed in contents of an external file
                 */",undetermined
4643,httpd,UNKNOWN,"/*
                 * seed in contents generated by an external program
                 */",undetermined
4644,httpd,UNKNOWN,"/*
                 * seed in contents provided by the external
                 * Entropy Gathering Daemon (EGD)
                 */",undetermined
4645,httpd,UNKNOWN,"/*
                 * seed in the current time (usually just 4 bytes)
                 */",undetermined
4646,httpd,UNKNOWN,"/*
                 * seed in the current process id (usually just 4 bytes)
                 */",undetermined
4647,httpd,UNKNOWN,"/*
                 * seed in some current state of the run-time stack (128 bytes)
                 */",undetermined
4648,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4649,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_vars.c
 *  Variable Lookup Facility
 */",undetermined
4650,httpd,UNKNOWN,"/* ``Those of you who think they
                                  know everything are very annoying
                                  to those of us who do.''
                                                  -- Unknown       */",undetermined
4651,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Variable Lookup
**  _________________________________________________________________
*/",undetermined
4652,httpd,UNKNOWN,"/* for now, we just handle everything that starts with SSL_, but
         * register our hook as APR_HOOK_LAST
         * XXX: This can be optimized
         */",undetermined
4653,httpd,UNKNOWN,/* Perform once-per-process library version determination: */,undetermined
4654,httpd,UNKNOWN,/* This function must remain safe to use for a non-SSL connection. */,undetermined
4655,httpd,UNKNOWN,"/*
     * When no pool is given try to find one
     */",undetermined
4656,httpd,UNKNOWN,"/*
     * Request dependent stuff
     */",undetermined
4657,httpd,UNKNOWN,/* all other headers from which we are still not know about */,undetermined
4658,httpd,UNKNOWN,/* shortcut common case */,undetermined
4659,httpd,UNKNOWN,"/*
     * Connection stuff
     */",undetermined
4660,httpd,UNKNOWN,"/*
     * Totally independent stuff
     */",undetermined
4661,httpd,UNKNOWN,/* all other env-variables from the parent Apache process */,undetermined
4662,httpd,UNKNOWN,"/* SSL_get_certificate is different from SSL_get_peer_certificate.
             * No need to X509_free(xs).
             */",undetermined
4663,httpd,UNKNOWN,"/* In this table, .extract is non-zero if RDNs using the NID should be
 * extracted to for the SSL_{CLIENT,SERVER}_{I,S}_DN_* environment
 * variables. */",undetermined
4664,httpd,UNKNOWN,/* officially    (RFC2156) */,undetermined
4665,httpd,UNKNOWN,/* compatibility (SSLeay)  */,undetermined
4666,httpd,UNKNOWN,"/* if an _N suffix is used, find the Nth attribute of given name */",undetermined
4667,httpd,UNKNOWN,"/* Return a string giving the number of days remaining until 'tm', or
 * ""0"" if this can't be determined. */",undetermined
4668,httpd,UNKNOWN,"/* Fail if the time isn't a valid ASN.1 TIME; RFC3280 mandates
     * that the seconds digits are present even though ASN.1
     * doesn't. */",undetermined
4669,httpd,UNKNOWN,/* no client verification done at all */,undetermined
4670,httpd,UNKNOWN,/* client verification done successful */,undetermined
4671,httpd,UNKNOWN,/* client verification done in generous way */,undetermined
4672,httpd,UNKNOWN,/* client verification failed */,undetermined
4673,httpd,UNKNOWN,"/* Add each RDN in 'xn' to the table 't' where the NID is present in
 * 'nids', using key prefix 'pfx'.  */",undetermined
4674,httpd,UNKNOWN,"/* Hash of (int) NID -> (int *) counter to count each time an RDN
     * with the given NID has been seen. */",undetermined
4675,httpd,UNKNOWN,/* For each RDN... */,undetermined
4676,httpd,UNKNOWN,"/* Retrieve the nid, and check whether this is one of the nids
          * which are to be extracted. */",undetermined
4677,httpd,UNKNOWN,"/* Check whether a variable with this nid was already
              * been used; if so, use the foo_N=bar syntax. */",undetermined
4678,httpd,UNKNOWN,"/* Otherwise, use the plain foo=bar syntax. */",undetermined
4679,httpd,UNKNOWN,"/* Build up a hash table of (int *)NID->(char *)short-name for all
     * the tags which are to be extracted: */",undetermined
4680,httpd,UNKNOWN,"/* Extract the server cert DNS -- note that the refcount does NOT
     * increase: */",undetermined
4681,httpd,UNKNOWN,"/* Extract the client cert DNs -- note that the refcount DOES
     * increase: */",undetermined
4682,httpd,UNKNOWN,"/* For an extension type which OpenSSL does not recognize, attempt to
 * parse the extension type as a primitive string.  This will fail for
 * any structured extension type per the docs.  Returns non-zero on
 * success and writes the string to the given bio. */",undetermined
4683,httpd,UNKNOWN,"/* This allows UTF8String, IA5String, VisibleString, or BMPString;
     * conversion to UTF-8 is forced. */",undetermined
4684,httpd,UNKNOWN,"/* We accept the ""extension"" string to be converted as
     * a long name (nsComment), short name (DN) or
     * numeric OID (1.2.3.4).
     */",undetermined
4685,httpd,UNKNOWN,"/* Create an array large enough to accomodate every extension. This is
     * likely overkill, but safe.
     */",undetermined
4686,httpd,UNKNOWN,"/* We want to obtain a string representation of the extensions
             * value and add it to the array we're building.
             * X509V3_EXT_print() doesn't know about all the possible
             * data types, but the value is stored as an ASN1_OCTET_STRING
             * allowing us a fallback in case of X509V3_EXT_print
             * not knowing how to handle the data.
             */",undetermined
4687,httpd,UNKNOWN,/* only SSL_get_peer_certificate raises the refcount */,undetermined
4688,httpd,UNKNOWN,"/* default ""NULL"" already set */",undetermined
4689,httpd,UNKNOWN,"/* Defined by RFC 3749, deflate is coded by ""1"" */",undetermined
4690,httpd,UNKNOWN,/* IANA assigned compression number for LZS */,undetermined
4691,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  SSL Extension to mod_log_config
**  _________________________________________________________________
*/",undetermined
4692,httpd,UNKNOWN,"/*
 * register us for the mod_log_config function registering phase
 * to establish %{...}c and to be able to expand %{...}x variables.
 */",undetermined
4693,httpd,UNKNOWN,"/*
 * implement the %{..}c log function
 * (we are the only function)
 */",undetermined
4694,httpd,UNKNOWN,"/*
 * extend the implementation of the %{..}x log function
 * (there can be more functions)
 */",undetermined
4695,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4696,httpd,UNKNOWN,"/**
 * @file  ssl_private.h
 * @brief Internal interfaces private to mod_ssl.
 *
 * @defgroup MOD_SSL_PRIVATE Private
 * @ingroup MOD_SSL
 * @{
 */",undetermined
4697,httpd,UNKNOWN,/** Apache headers */,undetermined
4698,httpd,UNKNOWN,"/* The #ifdef macros are only defined AFTER including the above
 * therefore we cannot include these system files at the top  :-(
 */",undetermined
4699,httpd,UNKNOWN,"/* needed for STDIN_FILENO et.al., at least on FreeBSD */",undetermined
4700,httpd,UNKNOWN,/* OpenSSL headers */,undetermined
4701,httpd,UNKNOWN,/* must be defined before including ssl.h */,undetermined
4702,httpd,UNKNOWN,"/* Avoid tripping over an engine build installed globally and detected
 * when the user points at an explicit non-engine flavor of OpenSSL
 */",undetermined
4703,httpd,UNKNOWN,/* ...shifting sands of OpenSSL... */,undetermined
4704,httpd,UNKNOWN,/* ECC support came along in OpenSSL 1.0.0 */,undetermined
4705,httpd,UNKNOWN,/** In OpenSSL 0.9.8 PEM_F_DEF_CALLBACK was renamed */,undetermined
4706,httpd,UNKNOWN,/* SRP support came in OpenSSL 1.0.1 */,undetermined
4707,httpd,UNKNOWN,/* mod_ssl headers */,undetermined
4708,httpd,UNKNOWN,"/*
 * Provide reasonable default for some defines
 */",undetermined
4709,httpd,UNKNOWN,"/**
 * Provide reasonable defines for some types
 */",undetermined
4710,httpd,UNKNOWN,"/**
 * Provide useful shorthands
 */",undetermined
4711,httpd,UNKNOWN,"/**
 * Defaults for the configuration
 */",undetermined
4712,httpd,UNKNOWN,/* Default setting for per-dir reneg buffer. */,undetermined
4713,httpd,UNKNOWN,/* Default for OCSP response validity */,undetermined
4714,httpd,UNKNOWN,/* Default timeout for OCSP queries */,undetermined
4715,httpd,UNKNOWN,"/**
 * Define the certificate algorithm types
 */",undetermined
4716,httpd,UNKNOWN,"/**
 * Define IDs for the temporary RSA keys and DH params
 */",undetermined
4717,httpd,UNKNOWN,"/**
 * Define the SSL options
 */",undetermined
4718,httpd,UNKNOWN,"/**
 * Define the SSL Protocol options
 */",undetermined
4719,httpd,UNKNOWN,"/**
 * Define the SSL verify levels
 */",undetermined
4720,httpd,UNKNOWN,"/**
  * CRL checking modes
  */",undetermined
4721,httpd,UNKNOWN,"/**
 * Define the SSL pass phrase dialog types
 */",undetermined
4722,httpd,UNKNOWN,"/**
 * Define the Path Checking modes
 */",undetermined
4723,httpd,UNKNOWN,"/**
 * Define the SSL enabled state
 */",undetermined
4724,httpd,UNKNOWN,"/**
 * Define the SSL requirement structure
 */",undetermined
4725,httpd,UNKNOWN,"/**
 * Define the SSL random number generator seeding source
 */",undetermined
4726,httpd,UNKNOWN,"/**
 * Define the structure of an ASN.1 anything
 */",undetermined
4727,httpd,UNKNOWN,"/**
 * Define the mod_ssl per-module configuration structure
 * (i.e. the global configuration for each httpd process)
 */",undetermined
4728,httpd,UNKNOWN,"/* is SSL request, or error handling completed */",undetermined
4729,httpd,UNKNOWN,/* Need to send the header separator */,undetermined
4730,httpd,UNKNOWN,/* Need to set the error message */,undetermined
4731,httpd,UNKNOWN,"/* Track the handshake/renegotiation state for the connection so
     * that all client-initiated renegotiations can be rejected, as a
     * partial fix for CVE-2009-3555. */",undetermined
4732,httpd,UNKNOWN,/* Before initial handshake */,undetermined
4733,httpd,UNKNOWN,"/* After initial handshake; any client-initiated
                       * renegotiation should be rejected */",undetermined
4734,httpd,UNKNOWN,"/* A server-initated renegotiation is taking
                      * place (as dictated by configuration) */",undetermined
4735,httpd,UNKNOWN,"/* Renegotiation initiated by client, abort the
                     * connection */",undetermined
4736,httpd,UNKNOWN,"/* BIG FAT WARNING: SSLModConfigRec has unusual memory lifetime: it is
 * allocated out of the ""process"" pool and only a single such
 * structure is created and used for the lifetime of the process.
 * (The process pool is s->process->pool and is stored in the .pPool
 * field.)  Most members of this structure are likewise allocated out
 * of the process pool, but notably sesscache and sesscache_context
 * are not.
 *
 * The structure is treated as mostly immutable after a single config
 * parse has completed; the post_config hook (ssl_init_Module) flips
 * the bFixed flag to true and subsequent invocations of the config
 * callbacks hence do nothing.
 *
 * This odd lifetime strategy is used so that encrypted private keys
 * can be decrypted once at startup and continue to be used across
 * subsequent server reloads where the interactive password prompt is
 * not possible.

 * It is really an ABI nightmare waiting to happen since DSOs are
 * reloaded across restarts, and nothing prevents the struct type
 * changing across such reloads, yet the cached structure will be
 * assumed to match regardless.
 *
 * This should really be fixed using a smaller structure which only
 * stores that which is absolutely necessary (the private keys, maybe
 * the random seed), and have that structure be strictly ABI-versioned
 * for safety.
 */",undetermined
4737,httpd,UNKNOWN,/* OpenSSL SSL_SESS_CACHE_* flags: */,undetermined
4738,httpd,UNKNOWN,"/* The configured provider, and associated private data
     * structure. */",undetermined
4739,httpd,UNKNOWN,"/* Two hash tables of pointers to ssl_asn1_t structures.  The
     * structures are used to store certificates and private keys
     * respectively, in raw DER format (serialized OpenSSL X509 and
     * PrivateKey structures).  The tables are indexed by (vhost-id,
     * algorithm type) using the function ssl_asn1_table_keyfmt(); for
     * example the string ""vhost.example.com:443:RSA"". */",undetermined
4740,httpd,UNKNOWN,"/** Structure representing configured filenames for certs and keys for
 * a given vhost, and the corresponding in-memory structures once the
 * files are parsed.  */",undetermined
4741,httpd,UNKNOWN,"/* Lists of configured certs and keys for this server; from index
     * 0 up to SSL_AIDX_MAX-1 or the first NULL pointer.  Note that
     * these arrays are NOT indexed by algorithm type, they are simply
     * unordered lists. */",undetermined
4742,httpd,UNKNOWN,"/* Loaded certs and keys; these arrays ARE indexed by the
     * algorithm type, i.e.  keys[SSL_AIDX_RSA] maps to the RSA
     * private key. */",undetermined
4743,httpd,UNKNOWN,"/** Certificates which specify the set of CA names which should be
     * sent in the CertificateRequest message: */",undetermined
4744,httpd,UNKNOWN,/** proxy can have any number of cert/key pairs */,undetermined
4745,httpd,UNKNOWN,/* Contains End Entity certs */,undetermined
4746,httpd,UNKNOWN,"/* Contains ONLY chain certs for
                                * each item in certs.
                                * (ptr to array of ptrs) */",undetermined
4747,httpd,UNKNOWN,/** stuff related to authentication that can also be per-dir */,undetermined
4748,httpd,UNKNOWN,/** known/trusted CAs */,undetermined
4749,httpd,UNKNOWN,/** for client or downstream server authentication */,undetermined
4750,httpd,UNKNOWN,/** pointer back to server config */,undetermined
4751,httpd,UNKNOWN,/** we are one or the other */,undetermined
4752,httpd,UNKNOWN,/** config for handling encrypted keys */,undetermined
4753,httpd,UNKNOWN,/** certificate revocation list */,undetermined
4754,httpd,UNKNOWN,/** OCSP stapling options */,undetermined
4755,httpd,UNKNOWN,/* true if OCSP verification enabled */,undetermined
4756,httpd,UNKNOWN,"/* true if the default responder URL is
                              * used regardless of per-cert URL */",undetermined
4757,httpd,UNKNOWN,/* default responder URL */,undetermined
4758,httpd,UNKNOWN,"/**
 * Define the mod_ssl per-directory configuration structure
 * (i.e. the local configuration for all &lt;Directory>
 *  and .htaccess contexts)
 */",undetermined
4759,httpd,UNKNOWN,"/**
 *  function prototypes
 */",undetermined
4760,httpd,UNKNOWN,/**  API glue structures  */,undetermined
4761,httpd,UNKNOWN,/**  configuration handling   */,undetermined
4762,httpd,UNKNOWN,/**  module initialization  */,undetermined
4763,httpd,UNKNOWN,/**  Apache API hooks  */,undetermined
4764,httpd,UNKNOWN,/** Apache authz provisders */,undetermined
4765,httpd,UNKNOWN,/**  OpenSSL callbacks */,undetermined
4766,httpd,UNKNOWN,/**  Session Cache Support  */,undetermined
4767,httpd,UNKNOWN,/** Proxy Support */,undetermined
4768,httpd,UNKNOWN,/** OCSP Stapling Support */,undetermined
4769,httpd,UNKNOWN,/**  I/O  */,undetermined
4770,httpd,UNKNOWN,"/* ssl_io_buffer_fill fills the setaside buffering of the HTTP request
 * to allow an SSL renegotiation to take place. */",undetermined
4771,httpd,UNKNOWN,/**  PRNG  */,undetermined
4772,httpd,UNKNOWN,/**  Utility Functions  */,undetermined
4773,httpd,UNKNOWN,/**  Pass Phrase Support  */,undetermined
4774,httpd,UNKNOWN,/**  Diffie-Hellman Parameter Support  */,undetermined
4775,httpd,UNKNOWN,/**  Mutex Support  */,undetermined
4776,httpd,UNKNOWN,/* mutex type names for Mutex directive */,undetermined
4777,httpd,UNKNOWN,/**  Logfile Support  */,undetermined
4778,httpd,UNKNOWN,"/* ssl_log_xerror, ssl_log_cxerror and ssl_log_rxerror are wrappers for the
 * respective ap_log_*error functions and take a certificate as an
 * additional argument (whose details are appended to the log message).
 * The other arguments are interpreted exactly as with their ap_log_*error
 * counterparts. */",undetermined
4779,httpd,UNKNOWN,/**  Variables  */,undetermined
4780,httpd,UNKNOWN,/* Register variables for the lifetime of the process pool 'p'. */,undetermined
4781,httpd,UNKNOWN,"/* Extract SSL_*_DN_* variables into table 't' from SSL object 'ssl',
 * allocating from 'p': */",undetermined
4782,httpd,UNKNOWN,"/* Perform OCSP validation of the current cert in the given context.
 * Returns non-zero on success or zero on failure.  On failure, the
 * context error code is set. */",undetermined
4783,httpd,UNKNOWN,"/* OCSP helper interface; dispatches the given OCSP request to the
 * responder at the given URI.  Returns the decoded OCSP response
 * object, or NULL on error (in which case, errors will have been
 * logged).  Pool 'p' is used for temporary allocations. */",undetermined
4784,httpd,UNKNOWN,/* SSL_PRIVATE_H */,undetermined
4785,httpd,UNKNOWN,/** @} */,undetermined
4786,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4787,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_scache.c
 *  Session Cache Abstraction
 */",undetermined
4788,httpd,UNKNOWN,"/* ``Open-Source Software: generous
                                  programmers from around the world all
                                  join forces to help you shoot
                                  yourself in the foot for free.''
                                                 -- Unknown         */",undetermined
4789,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Session Cache: Common Abstraction Layer
**  _________________________________________________________________
*/",undetermined
4790,httpd,UNKNOWN,"/* The very first invocation of this function will be the
     * post_config invocation during server startup; do nothing for
     * this first (and only the first) time through, since the pool
     * will be immediately cleared anyway.  For every subsequent
     * invocation, initialize the configured cache. */",undetermined
4791,httpd,UNKNOWN,"/*
     * Warn the user that he should use the session cache.
     * But we can operate without it, of course.
     */",undetermined
4792,httpd,UNKNOWN,/* Serialise the session. */,undetermined
4793,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  SSL Extension to mod_status
**  _________________________________________________________________
*/",undetermined
4794,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4795,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_util.c
 *  Utility Functions
 */",undetermined
4796,httpd,UNKNOWN,"/* ``Every day of my life
                                  I am forced to add another
                                  name to the list of people
                                  who piss me off!''
                                            -- Calvin          */",undetermined
4797,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Utility Functions
**  _________________________________________________________________
*/",undetermined
4798,httpd,UNKNOWN,"/*
 * Run a filter program and read the first line of its stdout output
 */",undetermined
4799,httpd,UNKNOWN,/* XXX: we are reading 1 byte at a time here */,undetermined
4800,httpd,UNKNOWN,"/*
 * certain key and cert data needs to survive restarts,
 * which are stored in the user data table of s->process->pool.
 * to prevent ""leaking"" of this data, we use malloc/free
 * rather than apr_palloc and these wrappers to help make sure
 * we do not leak the malloc-ed data.
 */",undetermined
4801,httpd,UNKNOWN,"/*
     * if a value for this key already exists,
     * reuse as much of the already malloc-ed data
     * as possible.
     */",undetermined
4802,httpd,UNKNOWN,/* XXX: realloc? */,undetermined
4803,httpd,UNKNOWN,/* used as a note for encrypted private keys */,undetermined
4804,httpd,UNKNOWN,/* caller will assign a value to this */,undetermined
4805,httpd,UNKNOWN,"/*
 * To ensure thread-safetyness in OpenSSL - work in progress
 */",undetermined
4806,httpd,UNKNOWN,/* Dynamic lock structure */,undetermined
4807,httpd,UNKNOWN,/* Global reference to the pool passed into ssl_util_thread_setup() */,undetermined
4808,httpd,UNKNOWN,"/*
 * Dynamic lock creation callback
 */",undetermined
4809,httpd,UNKNOWN,"/*
     * We need a pool to allocate our mutex.  Since we can't clear
     * allocated memory from a pool, create a subpool that we can blow
     * away in the destruction callback.
     */",undetermined
4810,httpd,UNKNOWN,"/* Keep our own copy of the place from which we were created,
       using our own pool. */",undetermined
4811,httpd,UNKNOWN,"/*
 * Dynamic locking and unlocking function
 */",undetermined
4812,httpd,UNKNOWN,"/*
 * Dynamic lock destruction callback
 */",undetermined
4813,httpd,UNKNOWN,"/* Trust that whomever owned the CRYPTO_dynlock_value we were
     * passed has no future use for it...
     */",undetermined
4814,httpd,UNKNOWN,"/* OpenSSL needs this to return an unsigned long.  On OS/390, the pthread
     * id is a structure twice that big.  Use the TCB pointer instead as a
     * unique unsigned long.
     */",undetermined
4815,httpd,UNKNOWN,"/* Let the registered mutex cleanups do their own thing
     */",undetermined
4816,httpd,UNKNOWN,"/* Set up dynamic locking scaffolding for OpenSSL to use at its
     * convenience.
     */",undetermined
4817,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4818,httpd,UNKNOWN,"/* This file implements an OCSP client including a toy HTTP/1.0
 * client.  Once httpd depends on a real HTTP client library, most of
 * this can be thrown away. */",undetermined
4819,httpd,UNKNOWN,"/* Serialize an OCSP request which will be sent to the responder at
 * given URI to a memory BIO object, which is returned. */",undetermined
4820,httpd,UNKNOWN,"/* Send the OCSP request serialized into BIO 'request' to the
 * responder at given server given by URI.  Returns socket object or
 * NULL on error. */",undetermined
4821,httpd,UNKNOWN,/* establish a connection to the OCSP responder */,undetermined
4822,httpd,UNKNOWN,/* Cycle through address until a connect() succeeds. */,undetermined
4823,httpd,UNKNOWN,/* send the request and get a response */,undetermined
4824,httpd,UNKNOWN,"/* Return a pool-allocated NUL-terminated line, with CRLF stripped,
 * read from brigade 'bbin' using 'bbout' as temporary storage. */",undetermined
4825,httpd,UNKNOWN,/* Maximum values to prevent eating RAM forever. */,undetermined
4826,httpd,UNKNOWN,"/* Read the OCSP response from the socket 'sd', using temporary memory
 * BIO 'bio', and return the decoded OCSP response object, or NULL on
 * error. */",undetermined
4827,httpd,UNKNOWN,"/* Using brigades for response parsing is much simpler than using
     * apr_socket_* directly. */",undetermined
4828,httpd,UNKNOWN,"/* Read till end of headers; don't have to even bother parsing the
     * Content-Length since the server is obliged to close the
     * connection after the response anyway for HTTP/1.0. */",undetermined
4829,httpd,UNKNOWN,/* Read the response body into the memory BIO. */,undetermined
4830,httpd,UNKNOWN,"/* Ignore zero-length buckets (possible side-effect of
             * line splitting). */",undetermined
4831,httpd,UNKNOWN,"/* Finally decode the OCSP response from what's stored in the
     * bio. */",undetermined
4832,httpd,UNKNOWN,/* Errors already logged. */,undetermined
4833,httpd,UNKNOWN,"/* Clear the BIO contents, ready for the response. */",undetermined
4834,httpd,UNKNOWN,/* HAVE_OCSP */,undetermined
4835,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4836,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_util_ssl.c
 *  Additional Utility Functions for OpenSSL
 */",undetermined
4837,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Additional High-Level Functions for OpenSSL
**  _________________________________________________________________
*/",undetermined
4838,httpd,UNKNOWN,"/* we initialize this index at startup time
 * and never write to it at request time,
 * so this static is thread safe.
 * also note that OpenSSL increments at static variable when
 * SSL_get_ex_new_index() is called, so we _must_ do this at startup.
 */",undetermined
4839,httpd,UNKNOWN,/* we _do_ need to call this twice */,undetermined
4840,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  High-Level Certificate / Private Key Loading
**  _________________________________________________________________
*/",undetermined
4841,httpd,UNKNOWN,/* 1. try PEM (= DER+Base64+headers) */,undetermined
4842,httpd,UNKNOWN,/* 2. try DER+Base64 */,undetermined
4843,httpd,UNKNOWN,/* 3. try plain DER */,undetermined
4844,httpd,UNKNOWN,/* 1. try PEM (= DER+Base64+headers) */,undetermined
4845,httpd,UNKNOWN,/* 2. try DER+Base64 */,undetermined
4846,httpd,UNKNOWN,/* 3. try plain DER */,undetermined
4847,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Smart shutdown
**  _________________________________________________________________
*/",undetermined
4848,httpd,UNKNOWN,"/*
     * Repeat the calls, because SSL_shutdown internally dispatches through a
     * little state machine. Usually only one or two interation should be
     * needed, so we restrict the total number of restrictions in order to
     * avoid process hangs in case the client played bad with the socket
     * connection and OpenSSL cannot recognize it.
     */",undetermined
4849,httpd,UNKNOWN,/* max 2x pending + 2x data = 4 */,undetermined
4850,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Certificate Checks
**  _________________________________________________________________
*/",undetermined
4851,httpd,UNKNOWN,/* check whether cert contains extended key usage with a SGC tag */,undetermined
4852,httpd,UNKNOWN,/* retrieve basic constraints ingredients */,undetermined
4853,httpd,UNKNOWN,/* unlimited */,undetermined
4854,httpd,UNKNOWN,/* convert a NAME_ENTRY to UTF8 string */,undetermined
4855,httpd,UNKNOWN,"/*
 * convert an X509_NAME to an RFC 2253 formatted string, optionally truncated
 * to maxlen characters (specify a maxlen of 0 for no length limit)
 */",undetermined
4856,httpd,UNKNOWN,/* insert trailing ellipsis if there's enough space */,undetermined
4857,httpd,UNKNOWN,/* return an array of (RFC 6125 coined) DNS-IDs and CN-IDs in a certificate */,undetermined
4858,httpd,UNKNOWN,"/* First, the DNS-IDs (dNSName entries in the subjectAltName extension) */",undetermined
4859,httpd,UNKNOWN,"/* Second, the CN-IDs (commonName attributes in the subject DN) */",undetermined
4860,httpd,UNKNOWN,"/* 
 * Check if a certificate matches for a particular name, by iterating over its
 * DNS-IDs and CN-IDs (RFC 6125), optionally with basic wildcard matching.
 * If server_rec is non-NULL, some (debug/trace) logging is enabled.
 */",undetermined
4861,httpd,UNKNOWN,"/*
     * At some day in the future, this might be replaced with X509_check_host()
     * (available in OpenSSL 1.0.2 and later), but two points should be noted:
     * 1) wildcard matching in X509_check_host() might yield different
     *    results (by default, it supports a broader set of patterns, e.g.
     *    wildcards in non-initial positions);
     * 2) we lose the option of logging each DNS- and CN-ID (until a match
     *    is found).
     */",undetermined
4862,httpd,UNKNOWN,"/*
             * Determine if it is a wildcard ID - we're restrictive
             * in the sense that we require the wildcard character to be
             * THE left-most label (i.e., the ID must start with ""*."")
             */",undetermined
4863,httpd,UNKNOWN,"/*
             * If the ID includes a wildcard character (and the caller is
             * allowing wildcards), check if it matches for the left-most
             * DNS label - i.e., the wildcard character is not allowed
             * to match a dot. Otherwise, try a simple string compare.
             */",undetermined
4864,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Low-Level CA Certificate Loading
**  _________________________________________________________________
*/",undetermined
4865,httpd,UNKNOWN,"/* XXX: this dir read code is exactly the same as that in
     * ssl_engine_init.c, only the call to handle the fullname is different,
     * should fold the duplication.
     */",undetermined
4866,httpd,UNKNOWN,/* don't try to load directories */,undetermined
4867,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Extra Server Certificate Chain Support
**  _________________________________________________________________
*/",undetermined
4868,httpd,UNKNOWN,"/*
 * Read a file that optionally contains the server certificate in PEM
 * format, possibly followed by a sequence of CA certificates that
 * should be sent to the peer in the SSL Certificate message.
 */",undetermined
4869,httpd,UNKNOWN,/* optionally skip a leading server certificate */,undetermined
4870,httpd,UNKNOWN,/* free a perhaps already configured extra chain */,undetermined
4871,httpd,UNKNOWN,/* create new extra chain by loading the certs */,undetermined
4872,httpd,UNKNOWN,/* Make sure that only the error is just an EOF */,undetermined
4873,httpd,UNKNOWN,"/*  _________________________________________________________________
**
**  Session Stuff
**  _________________________________________________________________
*/",undetermined
4874,httpd,UNKNOWN,"/* We must ensure not to process more than what would fit in the
     * destination buffer, including terminating NULL */",undetermined
4875,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4876,httpd,UNKNOWN,"/**
 * @verbatim
                        _             _
    _ __ ___   ___   __| |    ___ ___| |  mod_ssl
   | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
   | | | | | | (_) | (_| |   \__ \__ \ |
   |_| |_| |_|\___/ \__,_|___|___/___/_|
                        |_____|
   @endverbatim
 * @file  ssl_util_ssl.h
 * @brief Additional Utility Functions for OpenSSL
 *
 * @defgroup MOD_SSL_UTIL Utilities
 * @ingroup MOD_SSL
 * @{
 */",undetermined
4877,httpd,UNKNOWN,"/**
 * SSL library version number
 */",undetermined
4878,httpd,UNKNOWN,"/**
 *  Maximum length of a DER encoded session.
 *  FIXME: There is no define in OpenSSL, but OpenSSL uses 1024*10,
 *         so this value should be ok. Although we have no warm feeling.
 */",undetermined
4879,httpd,UNKNOWN,/** max length for SSL_SESSION_id2sz */,undetermined
4880,httpd,UNKNOWN,"/**
 *  Additional Functions
 */",undetermined
4881,httpd,UNKNOWN,/* __SSL_UTIL_SSL_H__ */,undetermined
4882,httpd,UNKNOWN,/** @} */,undetermined
4883,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4884,httpd,UNKNOWN,"/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_stapling.c
 *  OCSP Stapling Support
 */",undetermined
4885,httpd,UNKNOWN,"/* ``Where's the spoons?
                                  Where's the spoons?
                                  Where's the bloody spoons?''
                                            -- Alexei Sayle          */",undetermined
4886,httpd,UNKNOWN,"/**
 * Maxiumum OCSP stapling response size. This should be the response for a
 * single certificate and will typically include the responder certificate chain
 * so 10K should be more than enough.
 *
 */",undetermined
4887,httpd,UNKNOWN,/* Cached info stored in certificate ex_info. */,undetermined
4888,httpd,UNKNOWN,/* Index in session cache SHA1 hash of certificate */,undetermined
4889,httpd,UNKNOWN,/* Certificate ID for OCSP requests or NULL if ID cannot be determined */,undetermined
4890,httpd,UNKNOWN,/* Responder details */,undetermined
4891,httpd,UNKNOWN,"/*
 * OCSP response caching code. The response is preceded by a flag value
 * which indicates whether the response was invalid when it was stored.
 * the purpose of this flag is to avoid repeated queries to a server
 * which has given an invalid response while allowing a response which
 * has subsequently become invalid to be retried immediately.
 *
 * The key for the cache is the hash of the certificate the response
 * is for.
 */",undetermined
4892,httpd,UNKNOWN,/* TODO: potential optimization; _timeout members as apr_interval_time_t */,undetermined
4893,httpd,UNKNOWN,"/* Check to see if response is an error. If so we automatically accept
     * it because it would have expired from the cache if it was time to
     * retry.
     */",undetermined
4894,httpd,UNKNOWN,/* If we can't parse response just pass it to client */,undetermined
4895,httpd,UNKNOWN,/* If ID not present just pass back to client */,undetermined
4896,httpd,UNKNOWN,"/* If pok is not NULL response was direct from a responder and
             * the times should be valide. If pok is NULL the response was
             * retrieved from cache and it is expected to subsequently expire
             */",undetermined
4897,httpd,UNKNOWN,/* Build up OCSP query from server certificate info */,undetermined
4898,httpd,UNKNOWN,/* Add any extensions to the request */,undetermined
4899,httpd,UNKNOWN,/* Create a temporary pool to constrain memory use */,undetermined
4900,httpd,UNKNOWN,"/*
 * SSLStaplingMutex operations. Similar to SSL mutex except a mutex is
 * mandatory if stapling is enabled.
 */",undetermined
4901,httpd,UNKNOWN,"/* Certificate Status callback. This is called when a client includes a
 * certificate status request extension.
 *
 * Check for cached responses in session cache. If valid send back to
 * client.  If absent or no longer valid query responder and update
 * cache. */",undetermined
4902,httpd,UNKNOWN,/* Check to see if we already have a response for this certificate */,undetermined
4903,httpd,UNKNOWN,/* see if response is acceptable */,undetermined
4904,httpd,UNKNOWN,"/* Error in response. If this error was not present when it was
             * stored (i.e. response no longer valid) then it can be
             * renewed straight away.
             *
             * If the error *was* present at the time it was stored then we
             * don't renew the response straight away we just wait for the
             * cached response to expire.
             */",undetermined
4905,httpd,UNKNOWN,/* Set some default values for parameters if they are not set */,undetermined
4906,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4907,httpd,UNKNOWN,"/* Memory handler for a plain memory divided in slot.
 * This one uses plain memory.
 */",undetermined
4908,httpd,UNKNOWN,/* per segment name */,undetermined
4909,httpd,UNKNOWN,/* data set start */,undetermined
4910,httpd,UNKNOWN,/* size of each memory slot */,undetermined
4911,httpd,UNKNOWN,/* number of mem slots */,undetermined
4912,httpd,UNKNOWN,/* per segment global pool */,undetermined
4913,httpd,UNKNOWN,/* in-use flag table*/,undetermined
4914,httpd,UNKNOWN,/* type-specific flags */,undetermined
4915,httpd,UNKNOWN,/* location of next allocated segment */,undetermined
4916,httpd,UNKNOWN,/* global pool and list of slotmem we are handling */,undetermined
4917,httpd,UNKNOWN,/* first try to attach to existing slotmem */,undetermined
4918,httpd,UNKNOWN,/* we already have it */,undetermined
4919,httpd,UNKNOWN,/* create the memory using the gpool */,undetermined
4920,httpd,UNKNOWN,/* For the chained slotmem stuff */,undetermined
4921,httpd,UNKNOWN,/* first try to attach to existing slotmem */,undetermined
4922,httpd,UNKNOWN,/* we already have it */,undetermined
4923,httpd,UNKNOWN,/* bounds check? */,undetermined
4924,httpd,UNKNOWN,/* bounds check? */,undetermined
4925,httpd,UNKNOWN,"/*
 * XXXX: if !AP_SLOTMEM_IS_PREGRAB, then still worry about
 *       inuse for grab and return?
 */",undetermined
4926,httpd,UNKNOWN,"/* XXX: static const char * const prePos[] = { ""mod_slotmem.c"", NULL }; */",undetermined
4927,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
4928,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
4929,httpd,UNKNOWN,/* create per-server config structure */,undetermined
4930,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
4931,httpd,UNKNOWN,/* command apr_table_t */,undetermined
4932,httpd,UNKNOWN,/* register hooks */,undetermined
4933,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4934,httpd,UNKNOWN,"/* Memory handler for a shared memory divided in slot.
 * This one uses shared memory.
 *
 * Shared memory is cleaned-up for each restart, graceful or
 * otherwise.
 */",undetermined
4935,httpd,UNKNOWN,/* for getpid() */,undetermined
4936,httpd,UNKNOWN,/* The description of the slots to reuse the slotmem */,undetermined
4937,httpd,UNKNOWN,/* size of each memory slot */,undetermined
4938,httpd,UNKNOWN,/* number of mem slots */,undetermined
4939,httpd,UNKNOWN,/* type-specific flags */,undetermined
4940,httpd,UNKNOWN,/* per segment name */,undetermined
4941,httpd,UNKNOWN,/* filebased? */,undetermined
4942,httpd,UNKNOWN,/* ptr to memory segment (apr_shm_t *) */,undetermined
4943,httpd,UNKNOWN,/* data set start */,undetermined
4944,httpd,UNKNOWN,/* per segment global pool */,undetermined
4945,httpd,UNKNOWN,/* in-use flag table*/,undetermined
4946,httpd,UNKNOWN,/* slot free count for this instance */,undetermined
4947,httpd,UNKNOWN,/* persist dataset start */,undetermined
4948,httpd,UNKNOWN,/* per slot desc */,undetermined
4949,httpd,UNKNOWN,/* location of next allocated segment */,undetermined
4950,httpd,UNKNOWN,"/*
 * Memory layout:
 *     sharedslotdesc_t | num_free | slots | isuse array |
 *                      ^          ^
 *                      |          . base
 *                      . persist (also num_free)
 */",undetermined
4951,httpd,UNKNOWN,/* global pool and list of slotmem we are handling */,undetermined
4952,httpd,UNKNOWN,/* apr:shmem/unix/shm.c */,undetermined
4953,httpd,UNKNOWN,"/*
 * Persist the slotmem in a file
 * slotmem name and file name.
 * none      : no persistent data
 * rel_name  : $server_root/rel_name
 * /abs_name : $abs_name
 *
 */",undetermined
4954,httpd,UNKNOWN,/* XXX: Error handling */,undetermined
4955,httpd,UNKNOWN,/* should be apr_status_t really */,undetermined
4956,httpd,UNKNOWN,/* apr_pool_destroy(gpool); */,undetermined
4957,httpd,UNKNOWN,/*    void *slotmem = NULL; */,undetermined
4958,httpd,UNKNOWN,/* first try to attach to existing slotmem */,undetermined
4959,httpd,UNKNOWN,/* we already have it */,undetermined
4960,httpd,UNKNOWN,/* first try to attach to existing shared memory */,undetermined
4961,httpd,UNKNOWN,/* check size */,undetermined
4962,httpd,UNKNOWN,"/* Set permissions to shared memory
             * so it can be attached by child process
             * having different user credentials
             *
             * See apr:shmem/unix/shm.c
             */",undetermined
4963,httpd,UNKNOWN,"/*
         * TODO: Error check the below... What error makes
         * sense if the restore fails? Any?
         */",undetermined
4964,httpd,UNKNOWN,/* For the chained slotmem stuff */,undetermined
4965,httpd,UNKNOWN,/*    void *slotmem = NULL; */,undetermined
4966,httpd,UNKNOWN,/* first try to attach to existing slotmem */,undetermined
4967,httpd,UNKNOWN,/* we already have it */,undetermined
4968,httpd,UNKNOWN,/* next try to attach to existing shared memory */,undetermined
4969,httpd,UNKNOWN,/* Read the description of the slotmem */,undetermined
4970,httpd,UNKNOWN,/* For the chained slotmem stuff */,undetermined
4971,httpd,UNKNOWN,/* bounds check? */,undetermined
4972,httpd,UNKNOWN,/* bounds check? */,undetermined
4973,httpd,UNKNOWN,/* make the storage usuable from outside */,undetermined
4974,httpd,UNKNOWN,/* initialise the global pool */,undetermined
4975,httpd,UNKNOWN,/* Add the pool_clean routine */,undetermined
4976,httpd,UNKNOWN,"/*
 * Make sure the shared memory is cleaned
 */",undetermined
4977,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
4978,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
4979,httpd,UNKNOWN,/* create per-server config structure */,undetermined
4980,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
4981,httpd,UNKNOWN,/* command apr_table_t */,undetermined
4982,httpd,UNKNOWN,/* register hooks */,undetermined
4983,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
4984,httpd,UNKNOWN,"/**
 * Should the session be included within this URL.
 *
 * This function tests whether a session is valid for this URL. It uses the
 * include and exclude arrays to determine whether they should be included.
 */",undetermined
4985,httpd,UNKNOWN,/* defaults to included */,undetermined
4986,httpd,UNKNOWN,"/**
 * Load the session.
 *
 * If the session doesn't exist, a blank one will be created.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
4987,httpd,UNKNOWN,/* is the session enabled? */,undetermined
4988,httpd,UNKNOWN,/* should the session be loaded at all? */,undetermined
4989,httpd,UNKNOWN,/* load the session from the session hook */,undetermined
4990,httpd,UNKNOWN,/* found a session that hasn't expired? */,undetermined
4991,httpd,UNKNOWN,"/* no luck, create a blank session */",undetermined
4992,httpd,UNKNOWN,"/* make sure the expiry is set, if present */",undetermined
4993,httpd,UNKNOWN,"/**
 * Save the session.
 *
 * In most implementations the session is only saved if the dirty flag is
 * true. This prevents the session being saved unnecessarily.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
4994,httpd,UNKNOWN,"/* sanity checks, should we try save at all? */",undetermined
4995,httpd,UNKNOWN,"/* reset the expiry back to maxage, if the expiry is present */",undetermined
4996,httpd,UNKNOWN,/* encode the session */,undetermined
4997,httpd,UNKNOWN,/* try the save */,undetermined
4998,httpd,UNKNOWN,"/**
 * Get a particular value from the session.
 * @param r The current request.
 * @param z The current session. If this value is NULL, the session will be
 * looked up in the request, created if necessary, and saved to the request
 * notes.
 * @param key The key to get.
 * @param value The buffer to write the value to.
 */",undetermined
4999,httpd,UNKNOWN,"/**
 * Set a particular value to the session.
 *
 * Using this method ensures that the dirty flag is set correctly, so that
 * the session can be saved efficiently.
 * @param r The current request.
 * @param z The current session. If this value is NULL, the session will be
 * looked up in the request, created if necessary, and saved to the request
 * notes.
 * @param key The key to set. The existing key value will be replaced.
 * @param value The value to set.
 */",undetermined
5000,httpd,UNKNOWN,"/**
 * Default identity encoding for the session.
 *
 * By default, the name value pairs in the session are URLEncoded, separated
 * by equals, and then in turn separated by ampersand, in the format of an
 * html form.
 *
 * This was chosen to make it easy for external code to unpack a session,
 * should there be a need to do so.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5001,httpd,UNKNOWN,"/**
 * Default identity decoding for the session.
 *
 * By default, the name value pairs in the session are URLEncoded, separated
 * by equals, and then in turn separated by ampersand, in the format of an
 * html form.
 *
 * This was chosen to make it easy for external code to unpack a session,
 * should there be a need to do so.
 *
 * This function reverses that process, and populates the session table.
 *
 * Name / value pairs that are not encoded properly are ignored.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5002,httpd,UNKNOWN,/* sanity check - anything to decode? */,undetermined
5003,httpd,UNKNOWN,/* decode what we have */,undetermined
5004,httpd,UNKNOWN,"/**
 * Ensure any changes to the session are committed.
 *
 * This is done in an output filter so that our options for where to
 * store the session can include storing the session within a cookie:
 * As an HTTP header, the cookie must be set before the output is
 * written, but after the handler is run.
 *
 * NOTE: It is possible for internal redirects to cause more than one
 * request to be present, and each request might have a session
 * defined. We need to go through each session in turn, and save each
 * one.
 *
 * The same session might appear in more than one request. The first
 * attempt to save the session will be called
 */",undetermined
5005,httpd,UNKNOWN,/* save all the sessions in all the requests */,undetermined
5006,httpd,UNKNOWN,"/* load the session, or create one if necessary */",undetermined
5007,httpd,UNKNOWN,"/* when unset or on error, z will be NULL */",undetermined
5008,httpd,UNKNOWN,"/* if a header was specified, insert the new values from the header */",undetermined
5009,httpd,UNKNOWN,"/* save away the session, and we're done */",undetermined
5010,httpd,UNKNOWN,"/* when unset or on error, we've complained to the log */",undetermined
5011,httpd,UNKNOWN,/* remove ourselves from the filter chain */,undetermined
5012,httpd,UNKNOWN,/* send the data up the stack */,undetermined
5013,httpd,UNKNOWN,"/**
 * Insert the output filter.
 */",undetermined
5014,httpd,UNKNOWN,"/**
 * Fixups hook.
 *
 * Load the session within a fixup - this ensures that the session is
 * properly loaded prior to the handler being called.
 *
 * The fixup is also responsible for injecting the session into the CGI
 * environment, should the admin have configured it so.
 *
 * @param r The request
 */",undetermined
5015,httpd,UNKNOWN,"/* if an error occurs or no session has been configured, we ignore
     * the broken session and allow it to be recreated from scratch on save
     * if necessary.
     */",undetermined
5016,httpd,UNKNOWN,/* dir config creater */,undetermined
5017,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
5018,httpd,UNKNOWN,/* server config */,undetermined
5019,httpd,UNKNOWN,/* merge server config */,undetermined
5020,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5021,httpd,UNKNOWN,/* register hooks */,undetermined
5022,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5023,httpd,UNKNOWN,"/* Create a set of SESSION_DECLARE(type), SESSION_DECLARE_NONSTD(type) and
 * SESSION_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
5024,httpd,UNKNOWN,"/**
 * @file  mod_session.h
 * @brief Session Module for Apache
 *
 * @defgroup MOD_SESSION mod_session
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
5025,httpd,UNKNOWN,"/**
 * Define the name of a username stored in the session, so that modules interested
 * in the username can find it in a standard place.
 */",undetermined
5026,httpd,UNKNOWN,"/**
 * Define the name of a password stored in the session, so that modules interested
 * in the password can find it in a standard place.
 */",undetermined
5027,httpd,UNKNOWN,"/**
 * A session structure.
 *
 * At the core of the session is a set of name value pairs making up the
 * session.
 *
 * The session might be uniquely identified by an anonymous uuid, or
 * a remote_user value, or both.
 */",undetermined
5028,httpd,UNKNOWN,/* pool to be used for this session */,undetermined
5029,httpd,UNKNOWN,/* anonymous uuid of this particular session */,undetermined
5030,httpd,UNKNOWN,/* user who owns this particular session */,undetermined
5031,httpd,UNKNOWN,/* key value pairs */,undetermined
5032,httpd,UNKNOWN,/* the encoded version of the key value pairs */,undetermined
5033,httpd,UNKNOWN,"/* if > 0, the time of expiry of this session */",undetermined
5034,httpd,UNKNOWN,"/* if > 0, the maxage of the session, from
                                   * which expiry is calculated */",undetermined
5035,httpd,UNKNOWN,/* dirty flag */,undetermined
5036,httpd,UNKNOWN,"/* true if this session was loaded from a
                                   * cache of some kind */",undetermined
5037,httpd,UNKNOWN,"/* true if this session has already been
                                   * written */",undetermined
5038,httpd,UNKNOWN,"/**
 * Structure to carry the per-dir session config.
 */",undetermined
5039,httpd,UNKNOWN,"/* whether the session has been enabled for
                                   * this directory */",undetermined
5040,httpd,UNKNOWN,/* seconds until session expiry */,undetermined
5041,httpd,UNKNOWN,/* header to inject session */,undetermined
5042,httpd,UNKNOWN,"/* whether the session has been enabled for
                                   * this directory */",undetermined
5043,httpd,UNKNOWN,"/* URL prefixes to be included. All
                                   * URLs included if empty */",undetermined
5044,httpd,UNKNOWN,"/* URL prefixes to be excluded. No
                                   * URLs excluded if empty */",undetermined
5045,httpd,UNKNOWN,"/**
 * Hook to load the session.
 *
 * If the session doesn't exist, a blank one will be created.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
5046,httpd,UNKNOWN,"/**
 * Hook to save the session.
 *
 * In most implementations the session is only saved if the dirty flag is
 * true. This prevents the session being saved unnecessarily.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
5047,httpd,UNKNOWN,"/**
 * Hook to encode the session.
 *
 * In the default implementation, the key value pairs are encoded using
 * key value pairs separated by equals, in turn separated by ampersand,
 * like a web form.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
5048,httpd,UNKNOWN,"/**
 * Hook to decode the session.
 *
 * In the default implementation, the key value pairs are encoded using
 * key value pairs separated by equals, in turn separated by ampersand,
 * like a web form.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */",undetermined
5049,httpd,UNKNOWN,"/**
 * The name of the module.
 */",undetermined
5050,httpd,UNKNOWN,/* MOD_SESSION_H */,undetermined
5051,httpd,UNKNOWN,/** @} */,undetermined
5052,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5053,httpd,UNKNOWN,"/**
 * Structure to carry the per-dir session config.
 */",undetermined
5054,httpd,UNKNOWN,"/**
 * Set the cookie and embed the session within it.
 *
 * This function adds an RFC2109 compliant Set-Cookie header for
 * the cookie specified in SessionCookieName, and an RFC2965 compliant
 * Set-Cookie2 header for the cookie specified in SessionCookieName2.
 *
 * If specified, the optional cookie attributes will be added to
 * each cookie. If defaults are not specified, DEFAULT_ATTRS
 * will be used.
 *
 * On success, this method will return APR_SUCCESS.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5055,httpd,UNKNOWN,/* don't cache auth protected pages */,undetermined
5056,httpd,UNKNOWN,/* create RFC2109 compliant cookie */,undetermined
5057,httpd,UNKNOWN,/* create RFC2965 compliant cookie */,undetermined
5058,httpd,UNKNOWN,"/**
 * Isolate the cookie with the name ""name"", and if present, extract
 * the payload from the cookie.
 *
 * If the cookie is found, the cookie and any other cookies with the
 * same name are removed from the cookies passed in the request, so
 * that credentials are not leaked to a backend server or process.
 *
 * A missing or malformed cookie will cause this function to return
 * APR_EGENERAL.
 *
 * On success, this returns APR_SUCCESS.
 */",undetermined
5059,httpd,UNKNOWN,/* find the first redirect */,undetermined
5060,httpd,UNKNOWN,/* find the main request */,undetermined
5061,httpd,UNKNOWN,/* is our session in a cookie? */,undetermined
5062,httpd,UNKNOWN,/* first look in the notes */,undetermined
5063,httpd,UNKNOWN,"/* otherwise, try parse the cookie */",undetermined
5064,httpd,UNKNOWN,/* create a new session and return it */,undetermined
5065,httpd,UNKNOWN,/* put the session in the notes so we don't have to parse it again */,undetermined
5066,httpd,UNKNOWN,"/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain special characters.
 */",undetermined
5067,httpd,UNKNOWN,/* dir config creater */,undetermined
5068,httpd,UNKNOWN,"/* dir merger --- default is to
                                       * override */",undetermined
5069,httpd,UNKNOWN,/* server config */,undetermined
5070,httpd,UNKNOWN,/* merge server config */,undetermined
5071,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5072,httpd,UNKNOWN,/* register hooks */,undetermined
5073,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5074,httpd,UNKNOWN,/* for apr_base64_decode et al */,undetermined
5075,httpd,UNKNOWN,/* for apr_*_crypt et al */,undetermined
5076,httpd,UNKNOWN,"/**
 * Structure to carry the per-dir session config.
 */",undetermined
5077,httpd,UNKNOWN,"/**
 * Structure to carry the server wide session config.
 */",undetermined
5078,httpd,UNKNOWN,"/**
 * Initialise the encryption as per the current config.
 *
 * Returns APR_SUCCESS if successful.
 */",undetermined
5079,httpd,UNKNOWN,"/**
 * Encrypt the string given as per the current config.
 *
 * Returns APR_SUCCESS if successful.
 */",undetermined
5080,httpd,UNKNOWN,"/* by default, return an empty string */",undetermined
5081,httpd,UNKNOWN,"/* don't attempt to encrypt an empty string, trying to do so causes a segfault */",undetermined
5082,httpd,UNKNOWN,"/* use a uuid as a salt value, and prepend it to our result */",undetermined
5083,httpd,UNKNOWN,/* encrypt using the first passphrase in the list */,undetermined
5084,httpd,UNKNOWN,/* encrypt the given string */,undetermined
5085,httpd,UNKNOWN,/* prepend the salt and the iv to the result */,undetermined
5086,httpd,UNKNOWN,/* base64 encode the result */,undetermined
5087,httpd,UNKNOWN,"/**
 * Decrypt the string given as per the current config.
 *
 * Returns APR_SUCCESS if successful.
 */",undetermined
5088,httpd,UNKNOWN,/* strip base64 from the string */,undetermined
5089,httpd,UNKNOWN,/* try each passphrase in turn */,undetermined
5090,httpd,UNKNOWN,/* encrypt using the first passphrase in the list */,undetermined
5091,httpd,UNKNOWN,/* sanity check - decoded too short? */,undetermined
5092,httpd,UNKNOWN,/* bypass the salt at the start of the decoded block */,undetermined
5093,httpd,UNKNOWN,/* bypass the iv at the start of the decoded block */,undetermined
5094,httpd,UNKNOWN,/* decrypt the given string */,undetermined
5095,httpd,UNKNOWN,"/**
 * Crypto encoding for the session.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5096,httpd,UNKNOWN,"/**
 * Crypto decoding for the session.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5097,httpd,UNKNOWN,"/**
 * Initialise the SSL in the post_config hook.
 */",undetermined
5098,httpd,UNKNOWN,"/* session_crypto_init() will be called twice. Don't bother
     * going through all of the initialization on the first call
     * because it will just be thrown away.*/",undetermined
5099,httpd,UNKNOWN,"/* if no library has been configured, set the recommended library
     * as a sensible default.
     */",undetermined
5100,httpd,UNKNOWN,/* default cipher AES256-SHA */,undetermined
5101,httpd,UNKNOWN,/* dir config creater */,undetermined
5102,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
5103,httpd,UNKNOWN,/* server config */,undetermined
5104,httpd,UNKNOWN,/* merge server config */,undetermined
5105,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5106,httpd,UNKNOWN,/* register hooks */,undetermined
5107,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5108,httpd,UNKNOWN,"/**
 * Structure to carry the per-dir session config.
 */",undetermined
5109,httpd,UNKNOWN,/* optional function - look it up once in post_config */,undetermined
5110,httpd,UNKNOWN,"/**
 * Initialise the database.
 *
 * If the mod_dbd module is missing, this method will return APR_EGENERAL.
 */",undetermined
5111,httpd,UNKNOWN,"/**
 * Load the session by the key specified.
 */",undetermined
5112,httpd,UNKNOWN,/* we can't break out here or row won't get cleaned up */,undetermined
5113,httpd,UNKNOWN,"/**
 * Load the session by firing off a dbd query.
 *
 * If the session is anonymous, the session key will be extracted from
 * the cookie specified. Failing that, the session key will be extracted
 * from the GET parameters.
 *
 * If the session is keyed by the username, the session will be extracted
 * by that.
 *
 * If no session is found, an empty session will be created.
 *
 * On success, this returns OK.
 */",undetermined
5114,httpd,UNKNOWN,/* is our session in a cookie? */,undetermined
5115,httpd,UNKNOWN,/* first look in the notes */,undetermined
5116,httpd,UNKNOWN,/* load anonymous sessions */,undetermined
5117,httpd,UNKNOWN,/* load an RFC2109 or RFC2965 compliant cookie */,undetermined
5118,httpd,UNKNOWN,/* load named session */,undetermined
5119,httpd,UNKNOWN,/* otherwise not for us */,undetermined
5120,httpd,UNKNOWN,/* create a new session and return it */,undetermined
5121,httpd,UNKNOWN,/* put the session in the notes so we don't have to parse it again */,undetermined
5122,httpd,UNKNOWN,"/**
 * Save the session by the key specified.
 */",undetermined
5123,httpd,UNKNOWN,"/*
         * if some rows were updated it means a session existed and was updated,
         * so we are done.
         */",undetermined
5124,httpd,UNKNOWN,"/*
     * if some rows were inserted it means a session was inserted, so we are
     * done.
     */",undetermined
5125,httpd,UNKNOWN,"/**
 * Remove the session by the key specified.
 */",undetermined
5126,httpd,UNKNOWN,"/* No need to do additional error logging here, it has already
           been done in dbd_init if needed */",undetermined
5127,httpd,UNKNOWN,"/**
 * Clean out expired sessions.
 *
 * TODO: We need to figure out a way to clean out expired sessions from the database.
 * The monitor hook doesn't help us that much, as we have no handle into the
 * server, and so we need to come up with a way to do this safely.
 */",undetermined
5128,httpd,UNKNOWN,"/**
 * Save the session by firing off a dbd query.
 *
 * If the session is anonymous, save the session and write a cookie
 * containing the uuid.
 *
 * If the session is keyed to the username, save the session using
 * the username as a key.
 *
 * On success, this method will return APR_SUCCESS.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */",undetermined
5129,httpd,UNKNOWN,/* support anonymous sessions */,undetermined
5130,httpd,UNKNOWN,/* don't cache pages with a session */,undetermined
5131,httpd,UNKNOWN,"/* if the session is new or changed, make a new session ID */",undetermined
5132,httpd,UNKNOWN,/* save the session with the uuid as key */,undetermined
5133,httpd,UNKNOWN,/* create RFC2109 compliant cookie */,undetermined
5134,httpd,UNKNOWN,/* create RFC2965 compliant cookie */,undetermined
5135,httpd,UNKNOWN,/* save named session */,undetermined
5136,httpd,UNKNOWN,/* don't cache pages with a session */,undetermined
5137,httpd,UNKNOWN,"/**
 * This function performs housekeeping on the database, deleting expired
 * sessions.
 */",undetermined
5138,httpd,UNKNOWN,/* TODO handle housekeeping */,undetermined
5139,httpd,UNKNOWN,"/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain special characters.
 */",undetermined
5140,httpd,UNKNOWN,/* dir config creater */,undetermined
5141,httpd,UNKNOWN,"/* dir merger --- default is to
                                    * override */",undetermined
5142,httpd,UNKNOWN,/* server config */,undetermined
5143,httpd,UNKNOWN,/* merge server config */,undetermined
5144,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5145,httpd,UNKNOWN,/* register hooks */,undetermined
5146,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5147,httpd,UNKNOWN,"/**
 * @file ajp.h
 * @brief Apache Jserv Protocol
 *
 * @defgroup AJP_defines mod_proxy AJP definitions
 * @ingroup  APACHE_INTERNAL
 * @{
 */",undetermined
5148,httpd,UNKNOWN,/* default to 9009 since 8009 is used by OS */,undetermined
5149,httpd,UNKNOWN,/* The following environment variables match mod_ssl! */,undetermined
5150,httpd,UNKNOWN,"/** AJP Specific error codes
 */",undetermined
5151,httpd,UNKNOWN,/** Buffer overflow exception */,undetermined
5152,httpd,UNKNOWN,/** Destination Buffer is to small */,undetermined
5153,httpd,UNKNOWN,/** Invalid input parameters */,undetermined
5154,httpd,UNKNOWN,/** Bad message signature */,undetermined
5155,httpd,UNKNOWN,/** Incoming message too bg */,undetermined
5156,httpd,UNKNOWN,/** Missing message header */,undetermined
5157,httpd,UNKNOWN,/** Bad message header */,undetermined
5158,httpd,UNKNOWN,/** Bad message */,undetermined
5159,httpd,UNKNOWN,/** Cant log via AJP14 */,undetermined
5160,httpd,UNKNOWN,/** Bad request method */,undetermined
5161,httpd,UNKNOWN,/** A structure that represents ajp message */,undetermined
5162,httpd,UNKNOWN,/** A structure that represents ajp message */,undetermined
5163,httpd,UNKNOWN,/** The buffer holding a AJP message */,undetermined
5164,httpd,UNKNOWN,/** The length of AJP message header (defaults to AJP_HEADER_LEN) */,undetermined
5165,httpd,UNKNOWN,/** The length of AJP message */,undetermined
5166,httpd,UNKNOWN,/** The current read position */,undetermined
5167,httpd,UNKNOWN,/** Flag indicating the origing of the message */,undetermined
5168,httpd,UNKNOWN,/** The size of the buffer */,undetermined
5169,httpd,UNKNOWN,"/**
 * Signature for the messages sent from Apache to tomcat
 */",undetermined
5170,httpd,UNKNOWN,/** Send a request from web server to container*/,undetermined
5171,httpd,UNKNOWN,/** Write a body chunk from the servlet container to the web server */,undetermined
5172,httpd,UNKNOWN,/** Send response headers from the servlet container to the web server. */,undetermined
5173,httpd,UNKNOWN,/** Marks the end of response. */,undetermined
5174,httpd,UNKNOWN,/** Get further data from the web server if it hasn't all been transferred yet. */,undetermined
5175,httpd,UNKNOWN,/** The web server asks the container to shut itself down. */,undetermined
5176,httpd,UNKNOWN,/** Webserver ask container to take control (logon phase) */,undetermined
5177,httpd,UNKNOWN,/** Container response to cping request */,undetermined
5178,httpd,UNKNOWN,"/** Webserver check if container is alive, since container should respond by cpong */",undetermined
5179,httpd,UNKNOWN,/** @} */,undetermined
5180,httpd,UNKNOWN,"/**
 * @defgroup AJP_api AJP API functions
 * @ingroup  MOD_PROXY
 * @{
 */",undetermined
5181,httpd,UNKNOWN,"/**
 * Check a new AJP Message by looking at signature and return its size
 *
 * @param msg       AJP Message to check
 * @param len       Pointer to returned len
 * @return          APR_SUCCESS or error
 */",undetermined
5182,httpd,UNKNOWN,"/**
 * Reset an AJP Message
 *
 * @param msg       AJP Message to reset
 * @return          APR_SUCCESS or error
 */",undetermined
5183,httpd,UNKNOWN,"/**
 * Reuse an AJP Message
 *
 * @param msg       AJP Message to reuse
 * @return          APR_SUCCESS or error
 */",undetermined
5184,httpd,UNKNOWN,"/**
 * Mark the end of an AJP Message
 *
 * @param msg       AJP Message to end
 * @return          APR_SUCCESS or error
 */",undetermined
5185,httpd,UNKNOWN,"/**
 * Add an unsigned 32bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5186,httpd,UNKNOWN,"/**
 * Add an unsigned 16bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5187,httpd,UNKNOWN,"/**
 * Add an unsigned 8bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5188,httpd,UNKNOWN,"/**
 *  Add a String in AJP message, and transform the String in ASCII
 *  if convert is set and we're on an EBCDIC machine
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to String
 * @param convert   When set told to convert String to ASCII
 * @return          APR_SUCCESS or error
 */",undetermined
5189,httpd,UNKNOWN,"/**
 *  Add a String in AJP message, and transform
 *  the String in ASCII if we're on an EBCDIC machine
 */",undetermined
5190,httpd,UNKNOWN,"/**
 *  Add a String in AJP message.
 */",undetermined
5191,httpd,UNKNOWN,"/**
 * Add a Byte array to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to Byte array
 * @param valuelen  Byte array len
 * @return          APR_SUCCESS or error
 */",undetermined
5192,httpd,UNKNOWN,"/**
 * Get a 32bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5193,httpd,UNKNOWN,"/**
 * Get a 16bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5194,httpd,UNKNOWN,"/**
 * Peek a 16bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5195,httpd,UNKNOWN,"/**
 * Get a 8bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5196,httpd,UNKNOWN,"/**
 * Peek a 8bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5197,httpd,UNKNOWN,"/**
 * Get a String value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5198,httpd,UNKNOWN,"/**
 * Get a Byte array from AJP Message
 *
 * @param msg        AJP Message to get value from
 * @param rvalue     Pointer where value will be returned
 * @param rvalue_len Pointer where Byte array len will be returned
 * @return           APR_SUCCESS or error
 */",undetermined
5199,httpd,UNKNOWN,"/**
 * Create an AJP Message from pool
 *
 * @param pool      memory pool to allocate AJP message from
 * @param size      size of the buffer to create
 * @param rmsg      Pointer to newly created AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5200,httpd,UNKNOWN,"/**
 * Recopy an AJP Message to another
 *
 * @param smsg      source AJP message
 * @param dmsg      destination AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5201,httpd,UNKNOWN,"/**
 * Serialize in an AJP Message a PING command
 *
 * +-----------------------+
 * | PING CMD (1 byte)     |
 * +-----------------------+
 *
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5202,httpd,UNKNOWN,"/**
 * Serialize in an AJP Message a CPING command
 *
 * +-----------------------+
 * | CPING CMD (1 byte)    |
 * +-----------------------+
 *
 * @param msg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5203,httpd,UNKNOWN,"/**
 * Dump up to the first 1024 bytes on an AJP Message
 *
 * @param pool      pool to allocate from
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @param count     the number of bytes to dump
 * @param buf       buffer pointer for dump message
 * @return          APR_SUCCESS or error
 */",undetermined
5204,httpd,UNKNOWN,"/**
 * Log an AJP message
 *
 * @param request   The current request
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @return          APR_SUCCESS or error
 */",undetermined
5205,httpd,UNKNOWN,"/**
 * Send an AJP message to backend
 *
 * @param sock      backend socket
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5206,httpd,UNKNOWN,"/**
 * Receive an AJP message from backend
 *
 * @param sock      backend socket
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5207,httpd,UNKNOWN,"/**
 * Build the ajp header message and send it
 * @param sock      backend socket
 * @param r         current request
 * @param buffsize  max size of the AJP packet.
 * @param uri       requested uri
 * @return          APR_SUCCESS or error
 */",undetermined
5208,httpd,UNKNOWN,"/**
 * Read the ajp message and return the type of the message.
 * @param sock      backend socket
 * @param r         current request
 * @param buffsize  size of the buffer.
 * @param msg       returned AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5209,httpd,UNKNOWN,"/**
 * Allocate a msg to send data
 * @param pool      pool to allocate from
 * @param ptr       data buffer
 * @param len       the length of allocated data buffer
 * @param msg       returned AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5210,httpd,UNKNOWN,"/**
 * Send the data message
 * @param sock      backend socket
 * @param msg       AJP message to send
 * @param len       AJP message length
 * @return          APR_SUCCESS or error
 */",undetermined
5211,httpd,UNKNOWN,"/**
 * Parse the message type
 * @param r         current request
 * @param msg       AJP message
 * @return          AJP message type.
 */",undetermined
5212,httpd,UNKNOWN,"/**
 * Parse the header message from container
 * @param r         current request
 * @param conf      proxy config
 * @param msg       AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5213,httpd,UNKNOWN,"/**
 * Parse the message body and return data address and length
 * @param r         current request
 * @param msg       AJP message
 * @param len       returned AJP message length
 * @param ptr       returned data
 * @return          APR_SUCCESS or error
 */",undetermined
5214,httpd,UNKNOWN,"/**
 * Check the reuse flag in CMD_AJP13_END_RESPONSE
 * @param r         current request
 * @param msg       AJP message
 * @param reuse     returned reuse flag
 * @return          APR_SUCCESS or error
 */",undetermined
5215,httpd,UNKNOWN,"/**
 * Handle the CPING/CPONG messages
 * @param sock      backend socket
 * @param r         current request
 * @param timeout   time window for receiving cpong reply
 * @return          APR_SUCCESS or error
 */",undetermined
5216,httpd,UNKNOWN,"/**
 * Convert numeric message type into string
 * @param type      AJP message type
 * @return          AJP message type as a string
 */",undetermined
5217,httpd,UNKNOWN,/** @} */,undetermined
5218,httpd,UNKNOWN,/* AJP_H */,undetermined
5219,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5220,httpd,UNKNOWN,"/* ACCEPT-LANGUAGE is the longest header
     * that is of interest.
     */",undetermined
5221,httpd,UNKNOWN,/* NOTREACHED */,undetermined
5222,httpd,UNKNOWN,/* Apache method number to SC methods transform table */,undetermined
5223,httpd,UNKNOWN,/* M_CONNECT */,undetermined
5224,httpd,UNKNOWN,/* M_PATCH  */,undetermined
5225,httpd,UNKNOWN,/* M_INVALID */,undetermined
5226,httpd,UNKNOWN,"/*
 * Message structure
 *
 *
AJPV13_REQUEST/AJPV14_REQUEST=
    request_prefix (1) (byte)
    method         (byte)
    protocol       (string)
    req_uri        (string)
    remote_addr    (string)
    remote_host    (string)
    server_name    (string)
    server_port    (short)
    is_ssl         (boolean)
    num_headers    (short)
    num_headers*(req_header_name header_value)

    ?context       (byte)(string)
    ?servlet_path  (byte)(string)
    ?remote_user   (byte)(string)
    ?auth_type     (byte)(string)
    ?query_string  (byte)(string)
    ?jvm_route     (byte)(string)
    ?ssl_cert      (byte)(string)
    ?ssl_cipher    (byte)(string)
    ?ssl_session   (byte)(string)
    ?ssl_key_size  (byte)(int)      via JkOptions +ForwardKeySize
    request_terminator (byte)
    ?body          content_length*(var binary)

 */",undetermined
5227,httpd,UNKNOWN,"/* XXXX need to figure out how to do this
    if (s->secret) {
        if (ajp_msg_append_uint8(msg, SC_A_SECRET) ||
            ajp_msg_append_string(msg, s->secret)) {
            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,
                   ""Error ajp_marshal_into_msgb - ""
                   ""Error appending secret"");
            return APR_EGENERAL;
        }
    }
 */",undetermined
5228,httpd,UNKNOWN,/* XXXX  ebcdic (args converted?) */,undetermined
5229,httpd,UNKNOWN,"/* XXX: Is the subprocess_env a right place?
 * <Location /examples>
 *   ProxyPass ajp://remote:8009/servlets-examples
 *   SetEnv SSL_SESSION_ID CUSTOM_SSL_SESSION_ID
 * </Location>
 */",undetermined
5230,httpd,UNKNOWN,"/*
     * Only lookup SSL variables if we are currently running HTTPS.
     * Furthermore ensure that only variables get set in the AJP message
     * that are not NULL and not empty.
     */",undetermined
5231,httpd,UNKNOWN,/* ssl_key_size is required by Servlet 2.3 API */,undetermined
5232,httpd,UNKNOWN,"/* If the method was unrecognized, encode it as an attribute */",undetermined
5233,httpd,UNKNOWN,"/* Forward the remote port information, which was forgotten
     * from the builtin data of the AJP 13 protocol.
     * Since the servlet spec allows to retrieve it via getRemotePort(),
     * we provide the port to the Tomcat connector as a request
     * attribute. Modern Tomcat versions know how to retrieve
     * the remote port from this attribute.
     */",undetermined
5234,httpd,UNKNOWN,"/* Use the environment vars prefixed with AJP_
     * and pass it to the header striping that prefix.
     */",undetermined
5235,httpd,UNKNOWN,"/*
AJPV13_RESPONSE/AJPV14_RESPONSE:=
    response_prefix (2)
    status          (short)
    status_msg      (short)
    num_headers     (short)
    num_headers*(res_header_name header_value)
    *body_chunk
    terminator      boolean <! -- recycle connection or not  -->

req_header_name :=
    sc_req_header_name | (string)

res_header_name :=
    sc_res_header_name | (string)

header_value :=
    (string)

body_chunk :=
    length  (short)
    body    length*(var binary)

 */",undetermined
5236,httpd,UNKNOWN,/* copy only if we have to */,undetermined
5237,httpd,UNKNOWN,"/* First, tuck away all already existing cookies */",undetermined
5238,httpd,UNKNOWN,"/*
         * Could optimize here, but just in case we want to
         * also save other headers, keep this logic.
         */",undetermined
5239,httpd,UNKNOWN,/* Set-Cookie need additional processing */,undetermined
5240,httpd,UNKNOWN,"/* Location, Content-Location, URI and Destination need additional
         * processing */",undetermined
5241,httpd,UNKNOWN,/* Content-type needs an additional handling */,undetermined
5242,httpd,UNKNOWN,/* add corresponding filter */,undetermined
5243,httpd,UNKNOWN,"/*
 * Build the ajp header message and send it
 */",undetermined
5244,httpd,UNKNOWN,"/*
 * Read the ajp message and return the type of the message.
 */",undetermined
5245,httpd,UNKNOWN,/* parse the msg to read the type */,undetermined
5246,httpd,UNKNOWN,/* parse the header */,undetermined
5247,httpd,UNKNOWN,/* parse the body and return data address and length */,undetermined
5248,httpd,UNKNOWN,"/*
     * msg->len contains the complete length of the message including all
     * headers. So the expected length for a CMD_AJP13_SEND_BODY_CHUNK is
     * msg->len minus the sum of
     * AJP_HEADER_LEN    : The length of the header to every AJP message.
     * AJP_HEADER_SZ_LEN : The header giving the size of the chunk.
     * 1                 : The CMD_AJP13_SEND_BODY_CHUNK indicator byte (0x03).
     * 1                 : The last byte of this message always seems to be
     *                     0x00 and is not part of the chunk.
     */",undetermined
5249,httpd,UNKNOWN,/* Check the reuse flag in CMD_AJP13_END_RESPONSE */,undetermined
5250,httpd,UNKNOWN,"/*
 * Allocate a msg to send data
 */",undetermined
5251,httpd,UNKNOWN,"/*
 * Send the data message
 */",undetermined
5252,httpd,UNKNOWN,/* + 1 XXXX where is '\0' */,undetermined
5253,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5254,httpd,UNKNOWN,"/**
 * @file ajp_header.h
 * @brief AJP defines
 *
 * @addtogroup AJP_defines
 * @{
 */",undetermined
5255,httpd,UNKNOWN,"/*
 * Conditional request attributes
 *
 */",undetermined
5256,httpd,UNKNOWN,/* only in if JkOptions +ForwardKeySize */,undetermined
5257,httpd,UNKNOWN,"/*
 * AJP private request attributes
 *
 * The following request attribute is recognized by Tomcat
 * to contain the forwarded remote port.
 */",undetermined
5258,httpd,UNKNOWN,"/*
 * Request methods, coded as numbers instead of strings.
 * The list of methods was taken from Section 5.1.1 of RFC 2616,
 * RFC 2518, the ACL IETF draft, and the DeltaV IESG Proposed Standard.
 *          Method        = ""OPTIONS""
 *                        | ""GET""
 *                        | ""HEAD""
 *                        | ""POST""
 *                        | ""PUT""
 *                        | ""DELETE""
 *                        | ""TRACE""
 *                        | ""PROPFIND""
 *                        | ""PROPPATCH""
 *                        | ""MKCOL""
 *                        | ""COPY""
 *                        | ""MOVE""
 *                        | ""LOCK""
 *                        | ""UNLOCK""
 *                        | ""ACL""
 *                        | ""REPORT""
 *                        | ""VERSION-CONTROL""
 *                        | ""CHECKIN""
 *                        | ""CHECKOUT""
 *                        | ""UNCHECKOUT""
 *                        | ""SEARCH""
 *                        | ""MKWORKSPACE""
 *                        | ""UPDATE""
 *                        | ""LABEL""
 *                        | ""MERGE""
 *                        | ""BASELINE-CONTROL""
 *                        | ""MKACTIVITY""
 *
 */",undetermined
5259,httpd,UNKNOWN,"/*
 * Frequent request headers, these headers are coded as numbers
 * instead of strings.
 *
 * Accept
 * Accept-Charset
 * Accept-Encoding
 * Accept-Language
 * Authorization
 * Connection
 * Content-Type
 * Content-Length
 * Cookie
 * Cookie2
 * Host
 * Pragma
 * Referer
 * User-Agent
 *
 */",undetermined
5260,httpd,UNKNOWN,"/*
 * Frequent response headers, these headers are coded as numbers
 * instead of strings.
 *
 * Content-Type
 * Content-Language
 * Content-Length
 * Date
 * Last-Modified
 * Location
 * Set-Cookie
 * Servlet-Engine
 * Status
 * WWW-Authenticate
 *
 */",undetermined
5261,httpd,UNKNOWN,/* AJP_HEADER_H */,undetermined
5262,httpd,UNKNOWN,/** @} */,undetermined
5263,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5264,httpd,UNKNOWN,/* socket closed. */,undetermined
5265,httpd,UNKNOWN,/* any error. */,undetermined
5266,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5267,httpd,UNKNOWN,/* 2 hex digits plus space plus one char per dumped byte */,undetermined
5268,httpd,UNKNOWN,/* plus prefix plus separator plus '\0' */,undetermined
5269,httpd,UNKNOWN,"/**
 * Dump the given number of bytes on an AJP Message
 *
 * @param pool      pool to allocate from
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @param count     the number of bytes to dump
 * @param buf       buffer pointer for dump message
 * @return          APR_SUCCESS or error
 */",undetermined
5270,httpd,UNKNOWN,"/* Display only first ""count"" bytes */",undetermined
5271,httpd,UNKNOWN,/* First the space needed for the first line */,undetermined
5272,httpd,UNKNOWN,/* Now for the data lines */,undetermined
5273,httpd,UNKNOWN,/* Safety check: do we have enough buffer for another line? */,undetermined
5274,httpd,UNKNOWN,"/**
 * Log an AJP message
 *
 * @param request   The current request
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @return          APR_SUCCESS or error
 */",undetermined
5275,httpd,UNKNOWN,"/**
 * Check a new AJP Message by looking at signature and return its size
 *
 * @param msg       AJP Message to check
 * @param len       Pointer to returned len
 * @return          APR_SUCCESS or error
 */",undetermined
5276,httpd,UNKNOWN,"/**
 * Reset an AJP Message
 *
 * @param msg       AJP Message to reset
 * @return          APR_SUCCESS or error
 */",undetermined
5277,httpd,UNKNOWN,"/**
 * Reuse an AJP Message
 *
 * @param msg       AJP Message to reuse
 * @return          APR_SUCCESS or error
 */",undetermined
5278,httpd,UNKNOWN,"/**
 * Mark the end of an AJP Message
 *
 * @param msg       AJP Message to end
 * @return          APR_SUCCESS or error
 */",undetermined
5279,httpd,UNKNOWN,"/**
 * Add an unsigned 32bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5280,httpd,UNKNOWN,"/**
 * Add an unsigned 16bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5281,httpd,UNKNOWN,"/**
 * Add an unsigned 8bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */",undetermined
5282,httpd,UNKNOWN,"/**
 *  Add a String in AJP message, and transform the String in ASCII
 *  if convert is set and we're on an EBCDIC machine
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to String
 * @param convert   When set told to convert String to ASCII
 * @return          APR_SUCCESS or error
 */",undetermined
5283,httpd,UNKNOWN,/* ignore error - we checked once */,undetermined
5284,httpd,UNKNOWN,/* We checked for space !!  */,undetermined
5285,httpd,UNKNOWN,/* including \0 */,undetermined
5286,httpd,UNKNOWN,/* convert from EBCDIC if needed */,undetermined
5287,httpd,UNKNOWN,"/**
 * Add a Byte array to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to Byte array
 * @param valuelen  Byte array len
 * @return          APR_SUCCESS or error
 */",undetermined
5288,httpd,UNKNOWN,/* Shouldn't we indicate an error ? */,undetermined
5289,httpd,UNKNOWN,/* We checked for space !!  */,undetermined
5290,httpd,UNKNOWN,"/**
 * Get a 32bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5291,httpd,UNKNOWN,"/**
 * Get a 16bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5292,httpd,UNKNOWN,"/**
 * Peek a 16bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5293,httpd,UNKNOWN,"/**
 * Peek a 8bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5294,httpd,UNKNOWN,"/**
 * Get a 8bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5295,httpd,UNKNOWN,"/**
 * Get a String value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5296,httpd,UNKNOWN,/* a String in AJP is NULL terminated */,undetermined
5297,httpd,UNKNOWN,"/**
 * Get a Byte array from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @param rvalueLen Pointer where Byte array len will be returned
 * @return          APR_SUCCESS or error
 */",undetermined
5298,httpd,UNKNOWN,/* save the current position */,undetermined
5299,httpd,UNKNOWN,"/* only bytes, no trailer */",undetermined
5300,httpd,UNKNOWN,"/**
 * Create an AJP Message from pool
 *
 * @param pool      memory pool to allocate AJP message from
 * @param size      size of the buffer to create
 * @param rmsg      Pointer to newly created AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5301,httpd,UNKNOWN,"/**
 * Recopy an AJP Message to another
 *
 * @param smsg      source AJP message
 * @param dmsg      destination AJP message
 * @return          APR_SUCCESS or error
 */",undetermined
5302,httpd,UNKNOWN,"/**
 * Serialize in an AJP Message a PING command
 *
 * +-----------------------+
 * | PING CMD (1 byte)     |
 * +-----------------------+
 *
 * @param smsg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5303,httpd,UNKNOWN,"/**
 * Serialize in an AJP Message a CPING command
 *
 * +-----------------------+
 * | CPING CMD (1 byte)    |
 * +-----------------------+
 *
 * @param smsg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */",undetermined
5304,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5305,httpd,UNKNOWN,"/*
 * Handle the CPING/CPONG
 */",undetermined
5306,httpd,UNKNOWN,/* Set CPING/CPONG response timeout */,undetermined
5307,httpd,UNKNOWN,/* Read CPONG reply */,undetermined
5308,httpd,UNKNOWN,/* Restore original socket timeout */,undetermined
5309,httpd,UNKNOWN,"/**
 * Convert numeric message type into string
 * @param type      AJP message type
 * @return          AJP message type as a string
 */",undetermined
5310,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5311,httpd,UNKNOWN,"/**
 * @file fcgi_protocol.h
 * @brief FastCGI protocol defines
 *
 * @defgroup FCGI_defines FastCGI protocol definition
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
5312,httpd,UNKNOWN,"/*
 * Number of bytes in a fcgi_header.  Future versions of the protocol
 * will not reduce this number.
 */",undetermined
5313,httpd,UNKNOWN,"/*
 * Mask for flags component of FCGI_BeginRequestBody
 */",undetermined
5314,httpd,UNKNOWN,"/*
 * Values for role component of FCGI_BeginRequestBody
 */",undetermined
5315,httpd,UNKNOWN,"/*
 * Maximum size of the allowed environment.
 */",undetermined
5316,httpd,UNKNOWN,/* #define FCGI_DUMP_ENV_VARS */,undetermined
5317,httpd,UNKNOWN,/* FCGI_PROTOCOL_H */,undetermined
5318,httpd,UNKNOWN,/** @} */,undetermined
5319,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5320,httpd,UNKNOWN,"/*
 * A Web proxy module. Stages:
 *
 *  translate_name: set filename to proxy:<URL>
 *  map_to_storage: run proxy_walk (rather than directory_walk/file_walk)
 *                  can't trust directory_walk/file_walk since these are
 *                  not in our filesystem.  Prevents mod_http from serving
 *                  the TRACE request we will set aside to handle later.
 *  fix_ups:        convert the URL stored in the filename to the
 *                  canonical form.
 *  handler:        handle proxy requests
 */",undetermined
5321,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
5322,httpd,UNKNOWN,/* Translate the URL into a 'filename' */,undetermined
5323,httpd,UNKNOWN,"/* Normalized load factor. Used with BalancerMamber,
         * it is a number between 1 and 100.
         */",undetermined
5324,httpd,UNKNOWN,"/* If set it will give the retry timeout for the worker
         * The default value is 60 seconds, meaning that if
         * in error state, it will be retried after that timeout.
         */",undetermined
5325,httpd,UNKNOWN,"/* Time in seconds that will destroy all the connections
         * that exceed the smax
         */",undetermined
5326,httpd,UNKNOWN,"/* Initial number of connections to remote
         */",undetermined
5327,httpd,UNKNOWN,"/* Maximum number of connections to remote
         */",undetermined
5328,httpd,UNKNOWN,/* XXX: More inteligent naming needed */,undetermined
5329,httpd,UNKNOWN,"/* Maximum number of connections to remote that
         * will not be destroyed
         */",undetermined
5330,httpd,UNKNOWN,"/* Acquire timeout in given unit (default is milliseconds).
         * If set this will be the maximum time to
         * wait for a free connection.
         */",undetermined
5331,httpd,UNKNOWN,"/* Connection timeout in seconds.
         * Defaults to server timeout.
         */",undetermined
5332,httpd,UNKNOWN,"/* Worker route.
         */",undetermined
5333,httpd,UNKNOWN,"/* Worker redirection route.
         */",undetermined
5334,httpd,UNKNOWN,"/* Worker status.
         */",undetermined
5335,httpd,UNKNOWN,/* change to microseconds */,undetermined
5336,httpd,UNKNOWN,"/* Ping/Pong timeout in given unit (default is second).
         */",undetermined
5337,httpd,UNKNOWN,"/* Request timeout in given unit (default is second).
         * Defaults to connection timeout
         */",undetermined
5338,httpd,UNKNOWN,"/* Balancer sticky session name.
         * Set to something like JSESSIONID or
         * PHPSESSIONID, etc..,
         */",undetermined
5339,httpd,UNKNOWN,"/* separator/delimiter for sessionid and route,
         * normally '.'
         */",undetermined
5340,httpd,UNKNOWN,"/* If set to 'on' the session will break
         * if the worker is in error state or
         * disabled.
         */",undetermined
5341,httpd,UNKNOWN,"/* Balancer timeout in seconds.
         * If set this will be the maximum time to
         * wait for a free worker.
         * Default is not to wait.
         */",undetermined
5342,httpd,UNKNOWN,"/* Maximum number of failover attempts before
         * giving up.
         */",undetermined
5343,httpd,UNKNOWN,"/* If set to 'on' then ';' will also be
         * used as a session path separator/delim (ala
         * mod_jk)
         */",undetermined
5344,httpd,UNKNOWN,/* arbitrary limit here */,undetermined
5345,httpd,UNKNOWN,"/* any number of '/' in the alias matches any number in
             * the supplied URI, but there must be at least one...
             */",undetermined
5346,httpd,UNKNOWN,/* Other characters are compared literally */,undetermined
5347,httpd,UNKNOWN,/* fixup badly encoded stuff (e.g. % as last character) */,undetermined
5348,httpd,UNKNOWN,"/* We reach the end of the uri before the end of ""alias_fakename""
    * for example uri is ""/"" and alias_fakename ""/examples""
    */",undetermined
5349,httpd,UNKNOWN,/* Check last alias path component matched all the way */,undetermined
5350,httpd,UNKNOWN,"/* Return number of characters from URI which matched (may be
     * greater than length of alias, since we may have matched
     * doubled slashes)
     */",undetermined
5351,httpd,UNKNOWN,"/* Detect if an absoluteURI should be proxied or not.  Note that we
 * have to do this during this phase because later phases are
 * ""short-circuiting""... i.e. translate_names will end when the first
 * module returns OK.  So for example, if the request is something like:
 *
 * GET http://othervhost/cgi-bin/printenv HTTP/1.0
 *
 * mod_alias will notice the /cgi-bin part and ScriptAlias it and
 * short-circuit the proxy... just because of the ordering in the
 * configuration file.
 */",undetermined
5352,httpd,UNKNOWN,/* Ick... msvc (perhaps others) promotes ternary short results to int */,undetermined
5353,httpd,UNKNOWN,/* but it might be something vhosted */,undetermined
5354,httpd,UNKNOWN,/* We need special treatment for CONNECT proxying: it has no scheme part */,undetermined
5355,httpd,UNKNOWN,"/* Interpolate an env str in a configuration string
     * Syntax ${var} --> value_of(var)
     * Method: replace one var, and recurse on remainder of string
     * Nothing clever here, and crap like nested vars may do silly things
     * but we'll at least avoid sending the unwary into a loop
     */",undetermined
5356,httpd,UNKNOWN,"/* OK, this is syntax we want to interpolate.  Is there such a var ? */",undetermined
5357,httpd,UNKNOWN,/* test that we haven't reduced the URI */,undetermined
5358,httpd,UNKNOWN,"/* Note: The strcmp() below catches cases where there
             * was no regex substitution. This is so cases like:
             *
             *    ProxyPassMatch \.gif balancer://foo
             *
             * will work ""as expected"". The upshot is that the 2
             * directives below act the exact same way (ie: $1 is implied):
             *
             *    ProxyPassMatch ^(/.*\.gif)$ balancer://foo
             *    ProxyPassMatch ^(/.*\.gif)$ balancer://foo$1
             *
             * which may be confusing.
             */",undetermined
5359,httpd,UNKNOWN,"/* We made a reducing transformation, so we can't safely use
         * unparsed_uri.  Safe fallback is to ignore nocanon.
         */",undetermined
5360,httpd,UNKNOWN,/* mod_proxy_http needs to be told.  Different module. */,undetermined
5361,httpd,UNKNOWN,"/* someone has already set up the proxy, it was possibly ourselves
         * in proxy_detect
         */",undetermined
5362,httpd,UNKNOWN,"/* XXX: since r->uri has been manipulated already we're not really
     * compliant with RFC1945 at this point.  But this probably isn't
     * an issue because this is a hybrid proxy/origin server.
     */",undetermined
5363,httpd,UNKNOWN,/* short way - this location is reverse proxied? */,undetermined
5364,httpd,UNKNOWN,"/* long way - walk the list of aliases, find a match */",undetermined
5365,httpd,UNKNOWN,"/* XXX: shouldn't we use URI here?  Canonicalize it first?
     * Pass over ""proxy:"" prefix
     */",undetermined
5366,httpd,UNKNOWN,"/* XXX: What about case insensitive matching ???
         * Compare regex, fnmatch or string as appropriate
         * If the entry doesn't relate, then continue
         */",undetermined
5367,httpd,UNKNOWN,"/* Don't let the core or mod_http map_to_storage hooks handle this,
     * We don't need directory/file_walk, and we want to TRACE on our own.
     */",undetermined
5368,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
5369,httpd,UNKNOWN,/* Fixup the filename */,undetermined
5370,httpd,UNKNOWN,"/*
 * Canonicalise the URL
 */",undetermined
5371,httpd,UNKNOWN,/* XXX: Shouldn't we try this before we run the proxy_walk? */,undetermined
5372,httpd,UNKNOWN,"/* create per-request copy of reverse proxy conf,
         * and interpolate vars in it
         */",undetermined
5373,httpd,UNKNOWN,/* canonicalise each specific scheme */,undetermined
5374,httpd,UNKNOWN,/* otherwise; we've done the best we can */,undetermined
5375,httpd,UNKNOWN,/* Send a redirection if the request contains a hostname which is not */,undetermined
5376,httpd,UNKNOWN,"/* fully qualified, i.e. doesn't have a domain name appended. Some proxy */",undetermined
5377,httpd,UNKNOWN,/* servers like Netscape's allow this and access hosts from the local */,undetermined
5378,httpd,UNKNOWN,"/* domain in this case. I think it is better to redirect to a FQDN, since */",undetermined
5379,httpd,UNKNOWN,/* these will later be found in the bookmarks files. */,undetermined
5380,httpd,UNKNOWN,"/* The ""ProxyDomain"" directive determines what domain will be appended */",undetermined
5381,httpd,UNKNOWN,/* We only want to worry about GETs */,undetermined
5382,httpd,UNKNOWN,"/* If host does contain a dot already, or it is ""localhost"", decline */",undetermined
5383,httpd,UNKNOWN,"/* has domain, or IPv4 literal */",undetermined
5384,httpd,UNKNOWN,/* IPv6 literal */,undetermined
5385,httpd,UNKNOWN,/* host name has a dot already */,undetermined
5386,httpd,UNKNOWN,"/* Reassemble the request, but insert the domain after the host name */",undetermined
5387,httpd,UNKNOWN,/* Note that the domain name always starts with a dot */,undetermined
5388,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
5389,httpd,UNKNOWN,/* Invoke handler */,undetermined
5390,httpd,UNKNOWN,/* is this for us? */,undetermined
5391,httpd,UNKNOWN,/* handle max-forwards / OPTIONS / TRACE */,undetermined
5392,httpd,UNKNOWN,/* set configured max-forwards */,undetermined
5393,httpd,UNKNOWN,"/* Allow ""error-notes"" string to be printed by ap_send_error_response()
             * Note; this goes nowhere, canned error response need an overhaul.
             */",undetermined
5394,httpd,UNKNOWN,"/* Can't test ap_should_client_block, we aren't ready to send
         * the client a 100 Continue response till the connection has
         * been established
         */",undetermined
5395,httpd,UNKNOWN,"/* Allow ""error-notes"" string to be printed by ap_send_error_response()
             * Note; this goes nowhere, canned error response need an overhaul.
             */",undetermined
5396,httpd,UNKNOWN,"/* If the host doesn't have a domain name, add one and redirect. */",undetermined
5397,httpd,UNKNOWN,/* Check URI's destination host against NoProxy hosts */,undetermined
5398,httpd,UNKNOWN,/* Bypass ProxyRemote server lookup if configured as NoProxy */,undetermined
5399,httpd,UNKNOWN,/* Try to obtain the most suitable worker */,undetermined
5400,httpd,UNKNOWN,"/*
             * Only return if access_status is not HTTP_SERVICE_UNAVAILABLE
             * This gives other modules the chance to hook into the
             * request_status hook and decide what to do in this situation.
             */",undetermined
5401,httpd,UNKNOWN,"/*
             * Ensure that balancer is NULL if worker is NULL to prevent
             * potential problems in the post_request hook.
             */",undetermined
5402,httpd,UNKNOWN,"/* Initialise worker if needed, note the shared area must be initialized by the balancer logic */",undetermined
5403,httpd,UNKNOWN,"/* firstly, try a proxy, unless a NoProxy directive is active */",undetermined
5404,httpd,UNKNOWN,/* is it a partial URL? */,undetermined
5405,httpd,UNKNOWN,/* handle the scheme */,undetermined
5406,httpd,UNKNOWN,/* Did the scheme handler process the request? */,undetermined
5407,httpd,UNKNOWN,"/*
                         * An fatal error or success, so no point in
                         * retrying with a direct connection.
                         */",undetermined
5408,httpd,UNKNOWN,"/*
                             * The request body is of length > 0. We cannot
                             * retry with a direct connection since we already
                             * sent (parts of) the request body to the proxy
                             * and do not have any longer.
                             */",undetermined
5409,httpd,UNKNOWN,"/*
                         * Transfer-Encoding was set as input header, so we had
                         * a request body. We cannot retry with a direct
                         * connection for the same reason as above.
                         */",undetermined
5410,httpd,UNKNOWN,"/* otherwise, try it direct */",undetermined
5411,httpd,UNKNOWN,"/* N.B. what if we're behind a firewall, where we must use a proxy or
        * give up??
        */",undetermined
5412,httpd,UNKNOWN,/* handle the scheme */,undetermined
5413,httpd,UNKNOWN,"/* Unrecoverable server error.
             * We can not failover to another worker.
             * Mark the worker as unusable if member of load balancer
             */",undetermined
5414,httpd,UNKNOWN,"/* Recoverable server error.
             * We can failover to another worker
             * Mark the worker as unusable if member of load balancer
             */",undetermined
5415,httpd,UNKNOWN,"/* Unrecoverable error.
             * Return the origin status code to the client.
             */",undetermined
5416,httpd,UNKNOWN,"/* Try again if the worker is unusable and the service is
         * unavailable.
         */",undetermined
5417,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
5418,httpd,UNKNOWN,/* Setup configurable data */,undetermined
5419,httpd,UNKNOWN,/* simply for storage size */,undetermined
5420,httpd,UNKNOWN,/* initially backward compatible with 1.3.1 */,undetermined
5421,httpd,UNKNOWN,/* 0 means default */,undetermined
5422,httpd,UNKNOWN,/* this default was left unset for some reason */,undetermined
5423,httpd,UNKNOWN,"/* Filled in by proxysection, when applicable */",undetermined
5424,httpd,UNKNOWN,/* Put these in the dir config so they work inside <Location> */,undetermined
5425,httpd,UNKNOWN,/* unset */,undetermined
5426,httpd,UNKNOWN,/* Put these in the dir config so they work inside <Location> */,undetermined
5427,httpd,UNKNOWN,/* lowercase scheme */,undetermined
5428,httpd,UNKNOWN,/* lowercase hostname */,undetermined
5429,httpd,UNKNOWN,"/* if per directory, save away the single alias */",undetermined
5430,httpd,UNKNOWN,"/* if per server, add to the alias array */",undetermined
5431,httpd,UNKNOWN,/* Distinguish the balancer from worker */,undetermined
5432,httpd,UNKNOWN,/* Don't duplicate entries */,undetermined
5433,httpd,UNKNOWN,/* ignore case for host names */,undetermined
5434,httpd,UNKNOWN,"/* Similar to set_proxy_exclude(), but defining directly connected hosts,
 * which should never be accessed via the configured ProxyRemote servers
 */",undetermined
5435,httpd,UNKNOWN,/* Don't duplicate entries */,undetermined
5436,httpd,UNKNOWN,/* XXX: Should this be NOT_IN_DIRECTORY|NOT_IN_FILES? */,undetermined
5437,httpd,UNKNOWN,/* lowercase scheme://hostname */,undetermined
5438,httpd,UNKNOWN,/* Try to find the balancer */,undetermined
5439,httpd,UNKNOWN,/* Try to find existing worker */,undetermined
5440,httpd,UNKNOWN,/* XXX: Should this be NOT_IN_DIRECTORY|NOT_IN_FILES? */,undetermined
5441,httpd,UNKNOWN,"/* Directive inside <Proxy section
         * Parent directive arg is the worker/balancer name.
         */",undetermined
5442,httpd,UNKNOWN,"/* Standard set directive with worker/balancer
         * name as first param.
         */",undetermined
5443,httpd,UNKNOWN,"/* XXX Ignore case?  What if we proxy a case-insensitive server?!?
     * While we are at it, shouldn't we also canonicalize the entire
     * scheme?  See proxy_fixup()
     */",undetermined
5444,httpd,UNKNOWN,/* <ProxyMatch> */,undetermined
5445,httpd,UNKNOWN,/* initialize our config and fetch it */,undetermined
5446,httpd,UNKNOWN,"/*
     * if c == NULL just check if the optional function was imported
     * else run the optional function so ssl filters are inserted
     */",undetermined
5447,httpd,UNKNOWN,/* XXX Perhaps the casting useless */,undetermined
5448,httpd,UNKNOWN,"/*
 *  proxy Extension to mod_status
 */",undetermined
5449,httpd,UNKNOWN,/* TODO: Add the rest of dynamic worker data */,undetermined
5450,httpd,UNKNOWN,"/* Ugly, but what else? */",undetermined
5451,httpd,UNKNOWN,/* TODO */,undetermined
5452,httpd,UNKNOWN,"/*
         * NOTE: non-balancer members don't use shm at all...
         *       after all, why should they?
         */",undetermined
5453,httpd,UNKNOWN,/* Create and initialize forward worker if defined */,undetermined
5454,httpd,UNKNOWN,/* Do not disable worker in case of errors */,undetermined
5455,httpd,UNKNOWN,/* Disable address cache for generic forward worker */,undetermined
5456,httpd,UNKNOWN,/* Do not disable worker in case of errors */,undetermined
5457,httpd,UNKNOWN,/* Disable address cache for generic reverse worker */,undetermined
5458,httpd,UNKNOWN,"/*
 * This routine is called before the server processes the configuration
 * files.
 */",undetermined
5459,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
5460,httpd,UNKNOWN,/* Reset workers count on gracefull restart */,undetermined
5461,httpd,UNKNOWN,"/* fixup before mod_rewrite, so that the proxied url will not
     * escaped accidentally by our fixup.
     */",undetermined
5462,httpd,UNKNOWN,"/* Only the mpm_winnt has child init hook handler.
     * make sure that we are called after the mpm
     * initializes.
     */",undetermined
5463,httpd,UNKNOWN,/* handler */,undetermined
5464,httpd,UNKNOWN,/* filename-to-URI translation */,undetermined
5465,httpd,UNKNOWN,/* walk <Proxy > entries and suppress default TRACE behavior */,undetermined
5466,httpd,UNKNOWN,/* fixups */,undetermined
5467,httpd,UNKNOWN,/* post read_request handling */,undetermined
5468,httpd,UNKNOWN,/* pre config handling */,undetermined
5469,httpd,UNKNOWN,/* post config handling */,undetermined
5470,httpd,UNKNOWN,/* child init handling */,undetermined
5471,httpd,UNKNOWN,/* register optional functions within proxy_util.c */,undetermined
5472,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5473,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5474,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5475,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5476,httpd,UNKNOWN,/* command table */,undetermined
5477,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5478,httpd,UNKNOWN,"/**
 * @file  mod_proxy.h
 * @brief Proxy Extension Module for Apache
 *
 * @defgroup MOD_PROXY mod_proxy
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
5479,httpd,UNKNOWN,/* for proxy_canonenc() */,undetermined
5480,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
5481,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
5482,httpd,UNKNOWN,/* default Max-Forwards header setting */,undetermined
5483,httpd,UNKNOWN,"/* Set this to -1, which complies with RFC2616 by not setting
 * max-forwards if the client didn't send it to us.
 */",undetermined
5484,httpd,UNKNOWN,/* static information about a remote proxy */,undetermined
5485,httpd,UNKNOWN,"/* the schemes handled by this proxy, or '*' */",undetermined
5486,httpd,UNKNOWN,/* the scheme used to talk to this proxy */,undetermined
5487,httpd,UNKNOWN,/* the hostname of this proxy */,undetermined
5488,httpd,UNKNOWN,/* compiled regex (if any) for the remote */,undetermined
5489,httpd,UNKNOWN,/* simple boolean. True if we have a regex pattern */,undetermined
5490,httpd,UNKNOWN,/* the port for this proxy */,undetermined
5491,httpd,UNKNOWN,/* only valid for reverse-proxys */,undetermined
5492,httpd,UNKNOWN,"/* non-balancer workers, eg ProxyPass http://example.com */",undetermined
5493,httpd,UNKNOWN,/* list of balancers @ config time */,undetermined
5494,httpd,UNKNOWN,/* forward proxy worker */,undetermined
5495,httpd,UNKNOWN,"/* reverse ""module-driven"" proxy worker */",undetermined
5496,httpd,UNKNOWN,/* domain name to use in absence of a domain name in the request */,undetermined
5497,httpd,UNKNOWN,/* Pool used for allocating this struct */,undetermined
5498,httpd,UNKNOWN,/* true if proxy requests are enabled */,undetermined
5499,httpd,UNKNOWN,/* maximum number of allowed balancers */,undetermined
5500,httpd,UNKNOWN,/* number of post-config balancers can added */,undetermined
5501,httpd,UNKNOWN,/* how to deal with proxy Via: headers */,undetermined
5502,httpd,UNKNOWN,/* how to deal with bad headers */,undetermined
5503,httpd,UNKNOWN,/* Status display options */,undetermined
5504,httpd,UNKNOWN,"/* global lock, for pool, etc */",undetermined
5505,httpd,UNKNOWN,/* balancers shm data - runtime */,undetermined
5506,httpd,UNKNOWN,/* The path */,undetermined
5507,httpd,UNKNOWN,/* Is this a regex? */,undetermined
5508,httpd,UNKNOWN,"/* FIXME
 * ProxyPassReverse and friends are documented as working inside
 * <Location>.  But in fact they never have done in the case of
 * more than one <Location>, because the server_conf can't see it.
 * We need to move them to the per-dir config.
 * Discussed in February 2005:
 * http://marc.theaimsgroup.com/?l=apache-httpd-dev&m=110726027118798&w=2
 */",undetermined
5509,httpd,UNKNOWN,/* Is the path an fnmatch candidate? */,undetermined
5510,httpd,UNKNOWN,"/**
     * the following setting masks the error page
     * returned from the 'proxied server' and just
     * forwards the status code upwards.
     * This allows the main server (us) to generate
     * the error page, (so it will look like a error
     * returned from the rest of the system
     */",undetermined
5511,httpd,UNKNOWN,"/* if we interpolate env vars per-request, we'll need a per-request
 * copy of the reverse proxy config
 */",undetermined
5512,httpd,UNKNOWN,"/* Request record of the backend request
                                * that is used over the backend connection. */",undetermined
5513,httpd,UNKNOWN,/* Connection pool this connection belongs to */,undetermined
5514,httpd,UNKNOWN,/* Subpool for hostname and addr data */,undetermined
5515,httpd,UNKNOWN,/* Preparsed remote address info */,undetermined
5516,httpd,UNKNOWN,/* Subpool used for socket and connection data */,undetermined
5517,httpd,UNKNOWN,/* Connection socket */,undetermined
5518,httpd,UNKNOWN,/* per scheme connection data */,undetermined
5519,httpd,UNKNOWN,/* opaque forward proxy data */,undetermined
5520,httpd,UNKNOWN,/* Connection flags */,undetermined
5521,httpd,UNKNOWN,/* Close 'this' connection */,undetermined
5522,httpd,UNKNOWN,"/* Flag to decide whether we need to flush the
                                * filter chain or not */",undetermined
5523,httpd,UNKNOWN,/* connection in apr_reslist? */,undetermined
5524,httpd,UNKNOWN,/* completion percentage */,undetermined
5525,httpd,UNKNOWN,/* length of the content */,undetermined
5526,httpd,UNKNOWN,/* Connection pool */,undetermined
5527,httpd,UNKNOWN,/* The pool used in constructor and destructor calls */,undetermined
5528,httpd,UNKNOWN,/* Preparsed remote address info */,undetermined
5529,httpd,UNKNOWN,/* Connection resource list */,undetermined
5530,httpd,UNKNOWN,/* Single connection for prefork mpm */,undetermined
5531,httpd,UNKNOWN,/* Keep below in sync with proxy_util.c! */,undetermined
5532,httpd,UNKNOWN,/* worker status bits */,undetermined
5533,httpd,UNKNOWN,/* worker status flags */,undetermined
5534,httpd,UNKNOWN,/* NOTE: these check the shared status */,undetermined
5535,httpd,UNKNOWN,/* default worker retry timeout in seconds */,undetermined
5536,httpd,UNKNOWN,"/* Some max char string sizes, for shm fields */",undetermined
5537,httpd,UNKNOWN,/* use 2 hashes */,undetermined
5538,httpd,UNKNOWN,/* Runtime worker status informations. Shared in scoreboard */,undetermined
5539,httpd,UNKNOWN,/* scheme to use ajp|http|https */,undetermined
5540,httpd,UNKNOWN,/* remote backend address */,undetermined
5541,httpd,UNKNOWN,/* balancing route */,undetermined
5542,httpd,UNKNOWN,/* temporary balancing redirection route */,undetermined
5543,httpd,UNKNOWN,/* flush provider used by mod_proxy_fdpass */,undetermined
5544,httpd,UNKNOWN,/* load balancer cluster set */,undetermined
5545,httpd,UNKNOWN,/* number of retries on this worker */,undetermined
5546,httpd,UNKNOWN,/* Current lbstatus */,undetermined
5547,httpd,UNKNOWN,/* dynamic lbfactor */,undetermined
5548,httpd,UNKNOWN,/* Desired minimum number of available connections */,undetermined
5549,httpd,UNKNOWN,/* Soft maximum on the total number of connections */,undetermined
5550,httpd,UNKNOWN,/* Hard maximum on the total number of connections */,undetermined
5551,httpd,UNKNOWN,/* poll wait time in microseconds if flush_auto */,undetermined
5552,httpd,UNKNOWN,/* shm array index */,undetermined
5553,httpd,UNKNOWN,/* hash of worker name */,undetermined
5554,httpd,UNKNOWN,/* worker status bitfield */,undetermined
5555,httpd,UNKNOWN,/* control AJP flushing */,undetermined
5556,httpd,UNKNOWN,/* timestamp of last update */,undetermined
5557,httpd,UNKNOWN,/* time of the last error */,undetermined
5558,httpd,UNKNOWN,"/* maximum amount of time in seconds a connection
                                 * may be available while exceeding the soft limit */",undetermined
5559,httpd,UNKNOWN,/* retry interval */,undetermined
5560,httpd,UNKNOWN,/* connection timeout */,undetermined
5561,httpd,UNKNOWN,/* acquire timeout when the maximum number of connections is exceeded */,undetermined
5562,httpd,UNKNOWN,/* Number of times the worker was elected */,undetermined
5563,httpd,UNKNOWN,/* busyness factor */,undetermined
5564,httpd,UNKNOWN,/* Number of bytes transferred to remote */,undetermined
5565,httpd,UNKNOWN,/* Number of bytes read from remote */,undetermined
5566,httpd,UNKNOWN,/* general purpose storage */,undetermined
5567,httpd,UNKNOWN,/* Worker configuration */,undetermined
5568,httpd,UNKNOWN,/* hash of worker name */,undetermined
5569,httpd,UNKNOWN,/* status of per-process worker */,undetermined
5570,httpd,UNKNOWN,/* Connection pool to use */,undetermined
5571,httpd,UNKNOWN,/* Shared data */,undetermined
5572,httpd,UNKNOWN,/* which balancer am I in? */,undetermined
5573,httpd,UNKNOWN,/* Thread lock for updating address cache */,undetermined
5574,httpd,UNKNOWN,/* general purpose storage */,undetermined
5575,httpd,UNKNOWN,"/*
 * Time to wait (in microseconds) to find out if more data is currently
 * available at the backend.
 */",undetermined
5576,httpd,UNKNOWN,/* URL sticky session identifier */,undetermined
5577,httpd,UNKNOWN,/* sticky session identifier */,undetermined
5578,httpd,UNKNOWN,/* lbmethod provider name */,undetermined
5579,httpd,UNKNOWN,/* Timeout for waiting on free connection */,undetermined
5580,httpd,UNKNOWN,/* timestamp of last change to workers list */,undetermined
5581,httpd,UNKNOWN,/* Number of attempts before failing */,undetermined
5582,httpd,UNKNOWN,/* shm array index */,undetermined
5583,httpd,UNKNOWN,/* Disable failover for sticky sessions */,undetermined
5584,httpd,UNKNOWN,/* true if ';' seps sticky session paths */,undetermined
5585,httpd,UNKNOWN,/* separator for sessionid/route */,undetermined
5586,httpd,UNKNOWN,/* initially configured workers */,undetermined
5587,httpd,UNKNOWN,/* statuses to force members into error */,undetermined
5588,httpd,UNKNOWN,/* worker shm data - runtime */,undetermined
5589,httpd,UNKNOWN,/* number of post-config workers can added */,undetermined
5590,httpd,UNKNOWN,/* maximum number of allowed workers */,undetermined
5591,httpd,UNKNOWN,/* timestamp of last change to workers list */,undetermined
5592,httpd,UNKNOWN,/* global lock for updating list of workers */,undetermined
5593,httpd,UNKNOWN,/* Thread lock for updating shm */,undetermined
5594,httpd,UNKNOWN,/* general purpose storage */,undetermined
5595,httpd,UNKNOWN,/* Shared data */,undetermined
5596,httpd,UNKNOWN,/* Whether to mark a member in Err if IO timeout occurs */,undetermined
5597,httpd,UNKNOWN,/* name of the load balancer method*/,undetermined
5598,httpd,UNKNOWN,/* general purpose storage */,undetermined
5599,httpd,UNKNOWN,/* hooks */,undetermined
5600,httpd,UNKNOWN,"/* Create a set of PROXY_DECLARE(type), PROXY_DECLARE_NONSTD(type) and
 * PROXY_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
5601,httpd,UNKNOWN,"/**
 * pre request hook.
 * It will return the most suitable worker at the moment
 * and coresponding balancer.
 * The url is rewritten from balancer://cluster/uri to scheme://host:port/uri
 * and then the scheme_handler is called.
 *
 */",undetermined
5602,httpd,UNKNOWN,"/**
 * post request hook.
 * It is called after request for updating runtime balancer status.
 */",undetermined
5603,httpd,UNKNOWN,"/**
 * request status hook
 * It is called after all proxy processing has been done.  This gives other
 * modules a chance to create default content on failure, for example
 */",undetermined
5604,httpd,UNKNOWN,/* proxy_util.c */,undetermined
5605,httpd,UNKNOWN,"/** Test whether the hostname/address of the request are blocked by the ProxyBlock
 * configuration.
 * @param r         request
 * @param conf      server configuration
 * @param hostname  hostname from request URI
 * @param addr      resolved address of hostname, or NULL if not known
 * @return OK on success, or else an errro
 */",undetermined
5606,httpd,UNKNOWN,/* DEPRECATED (will be replaced with ap_proxy_connect_backend */,undetermined
5607,httpd,UNKNOWN,"/* Header mapping functions, and a typedef of their signature */",undetermined
5608,httpd,UNKNOWN,/* Connection pool API */,undetermined
5609,httpd,UNKNOWN,"/**
 * Get the worker from proxy configuration
 * @param p        memory pool used for finding worker
 * @param balancer the balancer that the worker belongs to
 * @param conf     current proxy server configuration
 * @param url      url to find the worker from
 * @return         proxy_worker or NULL if not found
 */",undetermined
5610,httpd,UNKNOWN,"/**
 * Define and Allocate space for the worker to proxy configuration
 * @param p         memory pool to allocate worker from
 * @param worker    the new worker
 * @param balancer  the balancer that the worker belongs to
 * @param conf      current proxy server configuration
 * @param url       url containing worker name
 * @param do_malloc true if shared struct should be malloced
 * @return          error message or NULL if successful (*worker is new worker)
 */",undetermined
5611,httpd,UNKNOWN,"/**
 * Share a defined proxy worker via shm
 * @param worker  worker to be shared
 * @param shm     location of shared info
 * @param i       index into shm
 * @return        APR_SUCCESS or error code
 */",undetermined
5612,httpd,UNKNOWN,"/**
 * Initialize the worker by setting up worker connection pool and mutex
 * @param worker worker to initialize
 * @param s      current server record
 * @param p      memory pool used for mutex and connection pool
 * @return       APR_SUCCESS or error code
 */",undetermined
5613,httpd,UNKNOWN,"/**
 * Verifies valid balancer name (eg: balancer://foo)
 * @param name  name to test
 * @param i     number of chars to test; 0 for all.
 * @return      true/false
 */",undetermined
5614,httpd,UNKNOWN,"/**
 * Get the balancer from proxy configuration
 * @param p     memory pool used for temporary storage while finding balancer
 * @param conf  current proxy server configuration
 * @param url   url to find the worker from; must have balancer:// prefix
 * @param careactive true if we care if the balancer is active or not
 * @return      proxy_balancer or NULL if not found
 */",undetermined
5615,httpd,UNKNOWN,"/**
 * Update the balancer's vhost related fields
 * @param p     memory pool used for temporary storage while finding balancer
 * @param balancer  balancer to be updated
 * @param url   url to find vhost info
 * @return      error string or NULL if OK
 */",undetermined
5616,httpd,UNKNOWN,"/**
 * Define and Allocate space for the balancer to proxy configuration
 * @param p      memory pool to allocate balancer from
 * @param balancer the new balancer
 * @param conf   current proxy server configuration
 * @param url    url containing balancer name
 * @param alias  alias/fake-path to this balancer
 * @param do_malloc true if shared struct should be malloced
 * @return       error message or NULL if successfull
 */",undetermined
5617,httpd,UNKNOWN,"/**
 * Share a defined proxy balancer via shm
 * @param balancer  balancer to be shared
 * @param shm       location of shared info
 * @param i         index into shm
 * @return          APR_SUCCESS or error code
 */",undetermined
5618,httpd,UNKNOWN,"/**
 * Initialize the balancer as needed
 * @param balancer balancer to initialize
 * @param s        current server record
 * @param p        memory pool used for mutex and connection pool
 * @return         APR_SUCCESS or error code
 */",undetermined
5619,httpd,UNKNOWN,"/**
 * Find the shm of the worker as needed
 * @param storage slotmem provider
 * @param slot    slotmem instance
 * @param worker  worker to find
 * @param index   pointer to index within slotmem of worker
 * @return        pointer to shm of worker, or NULL
 */",undetermined
5620,httpd,UNKNOWN,"/**
 * Find the shm of the balancer as needed
 * @param storage slotmem provider
 * @param slot    slotmem instance
 * @param worker  worker to find
 * @param index   pointer to index within slotmem of balancer
 * @return        pointer to shm of balancer, or NULL
 */",undetermined
5621,httpd,UNKNOWN,"/**
 * Get the most suitable worker and/or balancer for the request
 * @param worker   worker used for processing request
 * @param balancer balancer used for processing request
 * @param r        current request
 * @param conf     current proxy server configuration
 * @param url      request url that balancer can rewrite.
 * @return         OK or  HTTP_XXX error
 * @note It calls balancer pre_request hook if the url starts with balancer://
 * The balancer then rewrites the url to particular worker, like http://host:port
 */",undetermined
5622,httpd,UNKNOWN,"/**
 * Post request worker and balancer cleanup
 * @param worker   worker used for processing request
 * @param balancer balancer used for processing request
 * @param r        current request
 * @param conf     current proxy server configuration
 * @return         OK or  HTTP_XXX error
 * @note Whenever the pre_request is called, the post_request has to be
 * called too.
 */",undetermined
5623,httpd,UNKNOWN,"/**
 * Determine backend hostname and port
 * @param p       memory pool used for processing
 * @param r       current request
 * @param conf    current proxy server configuration
 * @param worker  worker used for processing request
 * @param conn    proxy connection struct
 * @param uri     processed uri
 * @param url     request url
 * @param proxyname are we connecting directly or via a proxy
 * @param proxyport proxy host port
 * @param server_portstr Via headers server port
 * @param server_portstr_size size of the server_portstr buffer
 * @return         OK or HTTP_XXX error
 */",undetermined
5624,httpd,UNKNOWN,"/**
 * Mark a worker for retry
 * @param proxy_function calling proxy scheme (http, ajp, ...)
 * @param worker  worker used for retrying
 * @param s       current server record
 * @return        OK if marked for retry, DECLINED otherwise
 * @note The error status of the worker will cleared if the retry interval has
 * elapsed since the last error.
 */",undetermined
5625,httpd,UNKNOWN,"/**
 * Acquire a connection from worker connection pool
 * @param proxy_function calling proxy scheme (http, ajp, ...)
 * @param conn    acquired connection
 * @param worker  worker used for obtaining connection
 * @param s       current server record
 * @return        OK or HTTP_XXX error
 * @note If the connection limit has been reached, the function will
 * block until a connection becomes available or the timeout has
 * elapsed.
 */",undetermined
5626,httpd,UNKNOWN,"/**
 * Release a connection back to worker connection pool
 * @param proxy_function calling proxy scheme (http, ajp, ...)
 * @param conn    acquired connection
 * @param s       current server record
 * @return        OK or HTTP_XXX error
 * @note The connection will be closed if conn->close_on_release is set
 */",undetermined
5627,httpd,UNKNOWN,"/**
 * Make a connection to the backend
 * @param proxy_function calling proxy scheme (http, ajp, ...)
 * @param conn    acquired connection
 * @param worker  connection worker
 * @param s       current server record
 * @return        OK or HTTP_XXX error
 * @note In case the socket already exists for conn, just check the link
 * status.
 */",undetermined
5628,httpd,UNKNOWN,"/**
 * Make a connection record for backend connection
 * @param proxy_function calling proxy scheme (http, ajp, ...)
 * @param conn    acquired connection
 * @param c       client connection record
 * @param s       current server record
 * @return        OK or HTTP_XXX error
 * @note The function will return immediately if conn->connection
 * is already set,
 */",undetermined
5629,httpd,UNKNOWN,"/**
 * Signal the upstream chain that the connection to the backend broke in the
 * middle of the response. This is done by sending an error bucket with
 * status HTTP_BAD_GATEWAY and an EOS bucket up the filter chain.
 * @param r       current request record of client request
 * @param brigade The brigade that is sent through the output filter chain
 */",undetermined
5630,httpd,UNKNOWN,"/**
 * Return a hash based on the passed string
 * @param str     string to produce hash from
 * @param method  hashing method to use
 * @return        hash as unsigned int
 */",undetermined
5631,httpd,UNKNOWN,"/**
 * Set/unset the worker status bitfield depending on flag
 * @param c    flag
 * @param set  set or unset bit
 * @param w    worker to use
 * @return     APR_SUCCESS if valid flag
 */",undetermined
5632,httpd,UNKNOWN,"/**
 * Create readable representation of worker status bitfield
 * @param p  pool
 * @param w  worker to use
 * @return   string representation of status
 */",undetermined
5633,httpd,UNKNOWN,"/**
 * Sync balancer and workers based on any updates w/i shm
 * @param b  balancer to check/update member list of
 * @param s  server rec
 * @param conf config
 * @return   APR_SUCCESS if all goes well
 */",undetermined
5634,httpd,UNKNOWN,"/**
 * Find the matched alias for this request and setup for proxy handler
 * @param r     request
 * @param ent   proxy_alias record
 * @param dconf per-dir config or NULL
 * @return      DECLINED, DONE or OK if matched
 */",undetermined
5635,httpd,UNKNOWN,"/**
 * Create a HTTP request header brigade,  old_cl_val and old_te_val as required.
 * @parama p              pool
 * @param header_brigade  header brigade to use/fill
 * @param r               request
 * @param p_conn          proxy connection rec
 * @param worker          selected worker
 * @param conf            per-server proxy config
 * @param uri             uri
 * @param url             url
 * @param server_portstr  port as string
 * @param old_cl_val      stored old content-len val
 * @param old_te_val      stored old TE val
 * @return                OK or HTTP_EXPECTATION_FAILED
 */",undetermined
5636,httpd,UNKNOWN,"/**
 * @param bucket_alloc  bucket allocator
 * @param r             request
 * @param p_conn        proxy connection
 * @param origin        connection rec of origin
 * @param  bb           brigade to send to origin
 * @param  flush        flush
 * @return              status (OK)
 */",undetermined
5637,httpd,UNKNOWN,"/**
 * Clear the headers referenced by the Connection header from the given
 * table, and remove the Connection header.
 * @param r request
 * @param headers table of headers to clear
 * @return 1 if ""close"" was present, 0 otherwise.
 */",undetermined
5638,httpd,UNKNOWN,"/* The number of dynamic workers that can be added when reconfiguring.
 * If this limit is reached you must stop and restart the server.
 */",undetermined
5639,httpd,UNKNOWN,"/**
 * Calculate maximum number of workers in scoreboard.
 * @return  number of workers to allocate in the scoreboard
 */",undetermined
5640,httpd,UNKNOWN,/*MOD_PROXY_H*/,undetermined
5641,httpd,UNKNOWN,/** @} */,undetermined
5642,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5643,httpd,UNKNOWN,/* AJP routines for Apache proxy */,undetermined
5644,httpd,UNKNOWN,"/*
 * Canonicalise http-like URLs.
 * scheme is the scheme for the URL
 * url is the URL starting with the first '/'
 * def_port is the default port for this scheme.
 */",undetermined
5645,httpd,UNKNOWN,/* ap_port_of_scheme() */,undetermined
5646,httpd,UNKNOWN,"/*
     * do syntactic check.
     * We break the URL into host, port, path, search
     */",undetermined
5647,httpd,UNKNOWN,"/*
     * now parse path/search args, according to rfc1738:
     * process the path. With proxy-nocanon set (by
     * mod_proxy) we use the raw, unparsed uri
     */",undetermined
5648,httpd,UNKNOWN,/* this is the raw path */,undetermined
5649,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
5650,httpd,UNKNOWN,"/*
     * RFC2616 (9.1.2): GET, HEAD, PUT, DELETE, OPTIONS, TRACE are considered
     * idempotent. Hint: HEAD requests use M_GET as method number as well.
     */",undetermined
5651,httpd,UNKNOWN,"/*
             * If the request has arguments it might have side-effects and thus
             * it might be undesirable to resend it to a backend again
             * automatically.
             */",undetermined
5652,httpd,UNKNOWN,/* Everything else is not considered idempotent. */,undetermined
5653,httpd,UNKNOWN,/* parse error */,undetermined
5654,httpd,UNKNOWN,"/*
 * XXX: AJP Auto Flushing
 *
 * When processing CMD_AJP13_SEND_BODY_CHUNK AJP messages we will do a poll
 * with FLUSH_WAIT miliseconds timeout to determine if more data is currently
 * available at the backend. If there is no more data available, we flush
 * the data to the client by adding a flush bucket to the brigade we pass
 * up the filter chain.
 * This is only a bandaid to fix the AJP/1.3 protocol shortcoming of not
 * sending (actually not having defined) a flush message, when the data
 * should be flushed to the client. As soon as this protocol shortcoming is
 * fixed this code should be removed.
 *
 * For further discussion see PR37100.
 * http://issues.apache.org/bugzilla/show_bug.cgi?id=37100
 */",undetermined
5655,httpd,UNKNOWN,"/*
 * process the request and write the response.
 */",undetermined
5656,httpd,UNKNOWN,"/*
     * Send the AJP request to the remote server
     */",undetermined
5657,httpd,UNKNOWN,/* send request headers */,undetermined
5658,httpd,UNKNOWN,"/*
             * This is only non fatal when the method is idempotent. In this
             * case we can dare to retry it with a different worker if we are
             * a balancer member.
             */",undetermined
5659,httpd,UNKNOWN,/* allocate an AJP message to store the data of the buckets */,undetermined
5660,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5661,httpd,UNKNOWN,/* read the first bloc of data */,undetermined
5662,httpd,UNKNOWN,/* The AJP protocol does not want body data yet */,undetermined
5663,httpd,UNKNOWN,/* Get client provided Content-Length header */,undetermined
5664,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5665,httpd,UNKNOWN,/* have something */,undetermined
5666,httpd,UNKNOWN,/* Try to send something */,undetermined
5667,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5668,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5669,httpd,UNKNOWN,"/*
                 * It is fatal when we failed to send a (part) of the request
                 * body.
                 */",undetermined
5670,httpd,UNKNOWN,"/*
             * We can only get here if the client closed the connection
             * to us without sending the body.
             * Now the connection is in the wrong state on the backend.
             * Sending an empty data msg doesn't help either as it does
             * not move this connection to the correct state on the backend
             * for later resusage by the next request again.
             * Close it to clean things up.
             */",undetermined
5671,httpd,UNKNOWN,/* read the response */,undetermined
5672,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5673,httpd,UNKNOWN,"/* If we had a successful cping/cpong and then a timeout
         * we assume it is a request that cause a back-end timeout,
         * but doesn't affect the whole worker.
         */",undetermined
5674,httpd,UNKNOWN,"/*
         * This is only non fatal when we have not sent (parts) of a possible
         * request body so far (we do not store it and thus cannot send it
         * again) and the method is idempotent. In this case we can dare to
         * retry it with a different worker if we are a balancer member.
         */",undetermined
5675,httpd,UNKNOWN,/* parse the reponse */,undetermined
5676,httpd,UNKNOWN,"/*
     * Prepare apr_pollfd_t struct for possible later check if there is currently
     * data available from the backend (do not flush response to client)
     * or not (flush response to client)
     */",undetermined
5677,httpd,UNKNOWN,/* This is the end */,undetermined
5678,httpd,UNKNOWN,/* will go in ajp_send_data_msg */,undetermined
5679,httpd,UNKNOWN,"/*
                     * something is wrong TC asks for more body but we are
                     * already at the end of the body data
                     */",undetermined
5680,httpd,UNKNOWN,"/* Do not send anything to the client.
                     * Backend already send us the headers.
                     */",undetermined
5681,httpd,UNKNOWN,/* AJP13_SEND_HEADERS: process them */,undetermined
5682,httpd,UNKNOWN,/* AJP13_SEND_BODY_CHUNK: piece of data */,undetermined
5683,httpd,UNKNOWN,"/* If we are overriding the errors, we can't put the content
                     * of the page into the brigade.
                     */",undetermined
5684,httpd,UNKNOWN,"/* AJP13_SEND_BODY_CHUNK with zero length
                         * is explicit flush message
                         */",undetermined
5685,httpd,UNKNOWN,"/* Handle the case where the error document is itself reverse
                             * proxied and was successful. We must maintain any previous
                             * error status so that an underlying error (eg HTTP_NOT_FOUND)
                             * doesn't become an HTTP_OK.
                             */",undetermined
5686,httpd,UNKNOWN,"/* If we are overriding the errors, we must not send anything to
                 * the client, especially as the brigade already contains headers.
                 * So do nothing here, and it will be cleaned up below.
                 */",undetermined
5687,httpd,UNKNOWN,/* XXX: what about flush here? See mod_jk */,undetermined
5688,httpd,UNKNOWN,"/*
         * If connection has been aborted by client: Stop working.
         * Nevertheless, we regard our operation so far as a success:
         * So reset output_failed to 0 and set result to CMD_AJP13_END_RESPONSE
         * But: Close this connection to the backend.
         */",undetermined
5689,httpd,UNKNOWN,"/*
         * We either have finished successfully or we failed.
         * So bail out
         */",undetermined
5690,httpd,UNKNOWN,/* read the response */,undetermined
5691,httpd,UNKNOWN,"/*
     * Clear output_brigade to remove possible buckets that remained there
     * after an error.
     */",undetermined
5692,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5693,httpd,UNKNOWN,/* Return DONE to avoid error messages being added to the stream */,undetermined
5694,httpd,UNKNOWN,/* We had a failure: Close connection to backend */,undetermined
5695,httpd,UNKNOWN,/* Return DONE to avoid error messages being added to the stream */,undetermined
5696,httpd,UNKNOWN,/* Our backend signalled connection close */,undetermined
5697,httpd,UNKNOWN,"/* clear r->status for override error, otherwise ErrorDocument
             * thinks that this is a recursive error, and doesn't find the
             * custom error page
             */",undetermined
5698,httpd,UNKNOWN,"/*
         * If we already send data, signal a broken backend connection
         * upwards in the chain.
         */",undetermined
5699,httpd,UNKNOWN,"/*
             * This is only non fatal when we have not send (parts) of a possible
             * request body so far (we do not store it and thus cannot send it
             * again) and the method is idempotent. In this case we can dare to
             * retry it with a different worker if we are a balancer member.
             */",undetermined
5700,httpd,UNKNOWN,"/*
     * Ensure that we sent an EOS bucket thru the filter chain, if we already
     * have sent some data. Maybe ap_proxy_backend_broke was called and added
     * one to the brigade already (no longer making it empty). So we should
     * not do this in this case.
     */",undetermined
5701,httpd,UNKNOWN,"/* If we have added something to the brigade above, send it */",undetermined
5702,httpd,UNKNOWN,"/*
 * This handles ajp:// URLs
 */",undetermined
5703,httpd,UNKNOWN,/* create space for state information */,undetermined
5704,httpd,UNKNOWN,/* Step One: Determine Who To Connect To */,undetermined
5705,httpd,UNKNOWN,/* Step Two: Make the Connection */,undetermined
5706,httpd,UNKNOWN,/* Handle CPING/CPONG */,undetermined
5707,httpd,UNKNOWN,"/*
             * In case the CPING / CPONG failed for the first time we might be
             * just out of luck and got a faulty backend connection, but the
             * backend might be healthy nevertheless. So ensure that the backend
             * TCP connection gets closed and try it once again.
             */",undetermined
5708,httpd,UNKNOWN,/* Step Three: Process the Request */,undetermined
5709,httpd,UNKNOWN,/* Do not close the socket */,undetermined
5710,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5711,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5712,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5713,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5714,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5715,httpd,UNKNOWN,/* register hooks */,undetermined
5716,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5717,httpd,UNKNOWN,/* Load balancer module for Apache proxy */,undetermined
5718,httpd,UNKNOWN,"/*
 * Register our mutex type before the config is read so we
 * can adjust the mutex settings using the Mutex directive.
 */",undetermined
5719,httpd,UNKNOWN,/* TODO: offset of BALANCER_PREFIX ?? */,undetermined
5720,httpd,UNKNOWN,"/* do syntatic check.
     * We break the URL into host, port, path, search
     */",undetermined
5721,httpd,UNKNOWN,"/*
     * now parse path/search args, according to rfc1738:
     * process the path. With proxy-noncanon set (by
     * mod_proxy) we use the raw, unparsed uri
     */",undetermined
5722,httpd,UNKNOWN,/* this is the raw path */,undetermined
5723,httpd,UNKNOWN,"/* Set default number of attempts to the number of
     * workers.
     */",undetermined
5724,httpd,UNKNOWN,"/* Retrieve the parameter with the given name
 * Something like 'JSESSIONID=12345...N'
 */",undetermined
5725,httpd,UNKNOWN,"/*
             * Session path was found, get its value
             */",undetermined
5726,httpd,UNKNOWN,"/*
                     * Session cookie was found, get its value
                     */",undetermined
5727,httpd,UNKNOWN,"/* Find the worker that has the 'route' defined
 */",undetermined
5728,httpd,UNKNOWN,"/*
                     * If the worker is in error state run
                     * retry on that worker. It will be marked as
                     * operational if the retry timeout is elapsed.
                     * The worker might still be unusable, but we try
                     * anyway.
                     */",undetermined
5729,httpd,UNKNOWN,"/*
                         * We have a worker that is unusable.
                         * It can be in error or disabled, but in case
                         * it has a redirection set use that redirection worker.
                         * This enables to safely remove the member from the
                         * balancer. Of course you will need some kind of
                         * session replication between those two remote.
                         */",undetermined
5730,httpd,UNKNOWN,/* Check if the redirect worker is usable */,undetermined
5731,httpd,UNKNOWN,"/*
                                 * If the worker is in error state run
                                 * retry on that worker. It will be marked as
                                 * operational if the retry timeout is elapsed.
                                 * The worker might still be unusable, but we try
                                 * anyway.
                                 */",undetermined
5732,httpd,UNKNOWN,/* Try to find the sticky route inside url */,undetermined
5733,httpd,UNKNOWN,"/*
     * If we found a value for stickysession, find the first '.' (or whatever
     * sticky_separator is set to) within. Everything after '.' (if present)
     * is our route. 
     */",undetermined
5734,httpd,UNKNOWN,"/* We have a route in path or in cookie
         * Find the worker that has this route defined.
         */",undetermined
5735,httpd,UNKNOWN,"/*
             * Notice that the route of the worker chosen is different from
             * the route supplied by the client.
             */",undetermined
5736,httpd,UNKNOWN,"/* All the workers are in error state or disabled.
         * If the balancer has a timeout sleep for a while
         * and try again to find the worker. The chances are
         * that some other thread will release a connection.
         * By default the timeout is not set, and the server
         * returns SERVER_BUSY.
         */",undetermined
5737,httpd,UNKNOWN,"/* XXX: This can perhaps be build using some
             * smarter mechanism, like tread_cond.
             * But since the statuses can came from
             * different childs, use the provided algo.
             */",undetermined
5738,httpd,UNKNOWN,"/* Set the timeout to 0 so that we don't
             * end in infinite loop
             */",undetermined
5739,httpd,UNKNOWN,/* Try again */,undetermined
5740,httpd,UNKNOWN,/* restore the timeout */,undetermined
5741,httpd,UNKNOWN,"/* we break the URL into host, port, uri */",undetermined
5742,httpd,UNKNOWN,/* Try if we can recover */,undetermined
5743,httpd,UNKNOWN,"/* If all workers are in error state force the recovery.
         */",undetermined
5744,httpd,UNKNOWN,"/* Step 1: check if the url is for us
     * The url we can handle starts with 'balancer://'
     * If balancer is already provided skip the search
     * for balancer, because this is failover attempt.
     */",undetermined
5745,httpd,UNKNOWN,"/* Step 2: Lock the LoadBalancer
     * XXX: perhaps we need the process lock here
     */",undetermined
5746,httpd,UNKNOWN,/* Step 3: force recovery */,undetermined
5747,httpd,UNKNOWN,/* Step 3.5: Update member list for the balancer */,undetermined
5748,httpd,UNKNOWN,/* TODO: Implement as provider! */,undetermined
5749,httpd,UNKNOWN,/* Step 4: find the session route */,undetermined
5750,httpd,UNKNOWN,/* Call the LB implementation */,undetermined
5751,httpd,UNKNOWN,/* Use the default one */,undetermined
5752,httpd,UNKNOWN,"/* We have a sticky load balancer
             * Update the workers status
             * so that even session routes get
             * into account.
             */",undetermined
5753,httpd,UNKNOWN,"/* Take into calculation only the workers that are
                 * not in error state or not disabled.
                 */",undetermined
5754,httpd,UNKNOWN,"/*
         * We have a route provided that doesn't match the
         * balancer name. See if the provider route is the
         * member of the same balancer in which case return 503
         */",undetermined
5755,httpd,UNKNOWN,"/*
             * This balancer has sticky sessions and the client either has not
             * supplied any routing information or all workers for this route
             * including possible redirect and hotstandby workers are in error
             * state, but we have found another working worker for this
             * balancer where we can send the request. Thus notice that we have
             * changed the route to the backend.
             */",undetermined
5756,httpd,UNKNOWN,/* Add balancer/worker info to env. */,undetermined
5757,httpd,UNKNOWN,"/* Rewrite the url from 'balancer://url'
     * to the 'worker_scheme://worker_hostname[:worker_port]/url'
     * This replaces the balancers fictional name with the
     * real hostname of the elected worker.
     */",undetermined
5758,httpd,UNKNOWN,/* Add the session route to request notes if present */,undetermined
5759,httpd,UNKNOWN,/* Add session info to env. */,undetermined
5760,httpd,UNKNOWN,/* Recalculate lbfactors */,undetermined
5761,httpd,UNKNOWN,"/* Special case if there is only one worker its
     * load factor will always be 1
     */",undetermined
5762,httpd,UNKNOWN,/* Update the status entries */,undetermined
5763,httpd,UNKNOWN,/* post_config hook: */,undetermined
5764,httpd,UNKNOWN,"/* balancer_post_config() will be called twice during startup.  So, don't
     * set up the static data the 1st time through. */",undetermined
5765,httpd,UNKNOWN,"/*
     * Get slotmem setups
     */",undetermined
5766,httpd,UNKNOWN,"/*
     * Go thru each Vhost and create the shared mem slotmem for
     * each balancer's workers
     */",undetermined
5767,httpd,UNKNOWN,"/*
         * During create_proxy_config() we created a dummy id. Now that
         * we have identifying info, we can create the real id
         */",undetermined
5768,httpd,UNKNOWN,"/* Shared memory already created for this proxy_server_conf.
             */",undetermined
5769,httpd,UNKNOWN,/* Initialize shared scoreboard data */,undetermined
5770,httpd,UNKNOWN,"/* now that we have the right id, we need to redo the sname field */",undetermined
5771,httpd,UNKNOWN,/* We know this will succeed */,undetermined
5772,httpd,UNKNOWN,/* Create global mutex */,undetermined
5773,httpd,UNKNOWN,/* setup shm for balancers */,undetermined
5774,httpd,UNKNOWN,/* create slotmem slots for workers */,undetermined
5775,httpd,UNKNOWN,/* sync all timestamps */,undetermined
5776,httpd,UNKNOWN,/* now go thru each worker */,undetermined
5777,httpd,UNKNOWN,/* We could have just read-in a persisted config. Force a sync. */,undetermined
5778,httpd,UNKNOWN,/* allow all */,undetermined
5779,httpd,UNKNOWN,"/* Manages the loadfactors and member status
 *   The balancer, worker and nonce are obtained from
 *   the request args (?b=...&w=...&nonce=....).
 *   All other params are pulled from any POST
 *   data that exists.
 * TODO:
 *   /.../<whatever>/balancer/worker/nonce
 */",undetermined
5780,httpd,UNKNOWN,/* is this for us? */,undetermined
5781,httpd,UNKNOWN,"/* Check that the supplied nonce matches this server's nonce;
     * otherwise ignore all parameters, to prevent a CSRF attack. */",undetermined
5782,httpd,UNKNOWN,/* First set the params */,undetermined
5783,httpd,UNKNOWN,"/* if enabling, we need to reset all lb params */",undetermined
5784,httpd,UNKNOWN,/* 2 hrs enuff? */,undetermined
5785,httpd,UNKNOWN,/* sync all timestamps */,undetermined
5786,httpd,UNKNOWN,"/* by default, all new workers are disabled */",undetermined
5787,httpd,UNKNOWN,/* Start proxy_balancer */,undetermined
5788,httpd,UNKNOWN,/* End proxy_balancer */,undetermined
5789,httpd,UNKNOWN,/* Start proxy_worker */,undetermined
5790,httpd,UNKNOWN,/* Begin proxy_worker_stat */,undetermined
5791,httpd,UNKNOWN,/* End proxy_worker_stat */,undetermined
5792,httpd,UNKNOWN,"/* the below is a safe cast, since the number of slots total will
             * never be more than max_workers, which is restricted to int */",undetermined
5793,httpd,UNKNOWN,"/* Ugly, but what else? */",undetermined
5794,httpd,UNKNOWN,"/* Ugly, but what else? */",undetermined
5795,httpd,UNKNOWN,"/* Only the mpm_winnt has child init hook handler.
     * make sure that we are called after the mpm
     * initializes
     */",undetermined
5796,httpd,UNKNOWN,/* manager handler */,undetermined
5797,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5798,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5799,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5800,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5801,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5802,httpd,UNKNOWN,/* register hooks */,undetermined
5803,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5804,httpd,UNKNOWN,/* CONNECT method for Apache proxy */,undetermined
5805,httpd,UNKNOWN,"/*
 * This handles Netscape CONNECT method secure proxy requests.
 * A connection is opened to the specified host and data is
 * passed through between the WWW site and the browser.
 *
 * This code is based on the INTERNET-DRAFT document
 * ""Tunneling SSL Through a WWW Proxy"" currently at
 * http://www.mcom.com/newsref/std/tunneling_ssl.html.
 *
 * If proxyhost and proxyport are set, we send a CONNECT to
 * the specified proxy..
 *
 * FIXME: this doesn't log the number of bytes sent, but
 *        that may be okay, since the data is supposed to
 *        be transparent. In fact, this doesn't log at all
 *        yet. 8^)
 * FIXME: doesn't check any headers initally sent from the
 *        client.
 * FIXME: should allow authentication, but hopefully the
 *        generic proxy authentication is good enough.
 * FIXME: no check for r->assbackwards, whatever that is.
 */",undetermined
5806,httpd,UNKNOWN,"/*
 * Set the ports CONNECT can use
 */",undetermined
5807,httpd,UNKNOWN,/* canonicalise CONNECT URLs. */,undetermined
5808,httpd,UNKNOWN,/* read available data (in blocks of CONN_BLKSZ) from c_i and copy to c_o */,undetermined
5809,httpd,UNKNOWN,/* CONNECT handler */,undetermined
5810,httpd,UNKNOWN,/* is this for us? */,undetermined
5811,httpd,UNKNOWN,"/*
     * Step One: Determine Who To Connect To
     *
     * Break up the URL to determine the host to connect to
     */",undetermined
5812,httpd,UNKNOWN,"/* we break the URL into host, port, uri */",undetermined
5813,httpd,UNKNOWN,/* Determine host/port of next hop; from request URI or of a proxy. */,undetermined
5814,httpd,UNKNOWN,/* Do a DNS lookup for the next hop */,undetermined
5815,httpd,UNKNOWN,/* Check ProxyBlock directive on the hostname/address.  */,undetermined
5816,httpd,UNKNOWN,/* Check if it is an allowed port */,undetermined
5817,httpd,UNKNOWN,"/*
     * Step Two: Make the Connection
     *
     * We have determined who to connect to. Now make the connection.
     */",undetermined
5818,httpd,UNKNOWN,"/*
     * At this point we have a list of one or more IP addresses of
     * the machine to connect to. If configured, reorder this
     * list so that the ""best candidate"" is first try. ""best
     * candidate"" could mean the least loaded server, the fastest
     * responding server, whatever.
     *
     * For now we do nothing, ie we get DNS round robin.
     * XXX FIXME
     */",undetermined
5819,httpd,UNKNOWN,/* handle a permanent error from the above loop */,undetermined
5820,httpd,UNKNOWN,/* setup polling for connection */,undetermined
5821,httpd,UNKNOWN,/* Add client side to the poll */,undetermined
5822,httpd,UNKNOWN,/* Add the server side to the poll */,undetermined
5823,httpd,UNKNOWN,"/*
     * Step Three: Send the Request
     *
     * Send the HTTP/1.1 CONNECT request to the remote server
     */",undetermined
5824,httpd,UNKNOWN,/* peer reset */,undetermined
5825,httpd,UNKNOWN,"/* If we are connecting through a remote proxy, we need to pass
     * the CONNECT request on to it.
     */",undetermined
5826,httpd,UNKNOWN,"/* FIXME: Error checking ignored.
     */",undetermined
5827,httpd,UNKNOWN,"/* This is safer code, but it doesn't work yet.  I'm leaving it
         * here so that I can fix it later.
         */",undetermined
5828,httpd,UNKNOWN,"/*
     * Step Four: Handle Data Transfer
     *
     * Handle two way transfer of data over the socket (this is a tunnel).
     */",undetermined
5829,httpd,UNKNOWN,"/* we are now acting as a tunnel - the input/output filter stacks should
     * not contain any non-connection filters.
     */",undetermined
5830,httpd,UNKNOWN,/*    r->sent_bodyct = 1;*/,undetermined
5831,httpd,UNKNOWN,/* Infinite loop until error (one side closes the connection) */,undetermined
5832,httpd,UNKNOWN,"/*
     * Step Five: Clean Up
     *
     * Close the socket and clean up
     */",undetermined
5833,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5834,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5835,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5836,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5837,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5838,httpd,UNKNOWN,/* register hooks */,undetermined
5839,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5840,httpd,UNKNOWN,/* it should be go on as an internal proxy request */,undetermined
5841,httpd,UNKNOWN,"/*
     * See if we have already added a ProxyPassReverse entry
     * for this host... If so, don't do it again.
     */",undetermined
5842,httpd,UNKNOWN,"/*
     * NOTE: dconf is process specific so this wil only
     *       work as long as we maintain that this process
     *       or thread is handling the backend
     */",undetermined
5843,httpd,UNKNOWN,/* Didn't find one... add it */,undetermined
5844,httpd,UNKNOWN,/* the main config structure */,undetermined
5845,httpd,UNKNOWN,/* create per-dir config structures */,undetermined
5846,httpd,UNKNOWN,/* merge  per-dir config structures */,undetermined
5847,httpd,UNKNOWN,/* create per-server config structures */,undetermined
5848,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
5849,httpd,UNKNOWN,/* table of config file commands */,undetermined
5850,httpd,UNKNOWN,/* register hooks */,undetermined
5851,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5852,httpd,UNKNOWN,"/*
 * The below 3 functions serve to map the FCGI structs
 * back and forth between an 8 byte array. We do this to avoid
 * any potential padding issues when we send or read these
 * structures.
 *
 * NOTE: These have specific internal knowledge of the
 *       layout of the fcgi_header and fcgi_begin_request_body
 *       structs!
 */",undetermined
5853,httpd,UNKNOWN,"/*
 * Canonicalise http-like URLs.
 * scheme is the scheme for the URL
 * url is the URL starting with the first '/'
 * def_port is the default port for this scheme.
 */",undetermined
5854,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
5855,httpd,UNKNOWN,/* this is the raw path */,undetermined
5856,httpd,UNKNOWN,"/*
 * Fill in a fastcgi request header with the following type, request id,
 * content length, and padding length.
 *
 * The header array must be at least FCGI_HEADER_LEN bytes long.
 */",undetermined
5857,httpd,UNKNOWN,/* Wrapper for apr_socket_sendv that handles updating the worker stats. */,undetermined
5858,httpd,UNKNOWN,/* short circuit out */,undetermined
5859,httpd,UNKNOWN,/* Wrapper for apr_socket_recv that handles updating the worker stats. */,undetermined
5860,httpd,UNKNOWN,/* XXX are there any FastCGI specific env vars we need to send? */,undetermined
5861,httpd,UNKNOWN,"/* XXX mod_cgi/mod_cgid use ap_create_environment here, which fills in
     *     the TZ value specially.  We could use that, but it would mean
     *     parsing the key/value pairs back OUT of the allocated env array,
     *     not to mention allocating a totally useless array in the first
     *     place, which would suck. */",undetermined
5862,httpd,UNKNOWN,/* The cast of bodylen is safe since FCGI_MAX_ENV_SIZE is for sure an int */,undetermined
5863,httpd,UNKNOWN,"/* Try to find the end of the script headers in the response from the back
 * end fastcgi server. STATE holds the current header parsing state for this
 * request.
 *
 * Returns 0 if it can't find the end of the headers, and 1 if it found the
 * end of the headers. */",undetermined
5864,httpd,UNKNOWN,"/* We need SOME kind of timeout here, or virtually anything will
         * cause timeout errors. */",undetermined
5865,httpd,UNKNOWN,/* Done with input data */,undetermined
5866,httpd,UNKNOWN,/* empty FCGI_STDIN not already sent? */,undetermined
5867,httpd,UNKNOWN,"/* readbuf has one byte on the end that is always 0, so it's
             * able to work with a strstr when we search for the end of
             * the headers, even if we fill the entire length in the recv. */",undetermined
5868,httpd,UNKNOWN,"/* First, we grab the header... */",undetermined
5869,httpd,UNKNOWN,"/* Now get the actual data.  Yes it sucks to do this in a second
             * recv call, this will eventually change when we move to real
             * nonblocking recv calls. */",undetermined
5870,httpd,UNKNOWN,/* suck in all the rest */,undetermined
5871,httpd,UNKNOWN,"/*
                                 * set script_error_status to discard
                                 * everything after the headers
                                 */",undetermined
5872,httpd,UNKNOWN,"/*
                                 * prevent ap_die() from treating this as a
                                 * recursive error, initially:
                                 */",undetermined
5873,httpd,UNKNOWN,"/* We're still looking for the end of the
                             * headers, so this part of the data will need
                             * to persist. */",undetermined
5874,httpd,UNKNOWN,"/* we've already passed along the headers, so now pass
                         * through the content.  we could simply continue to
                         * setaside the content and not pass until we see the
                         * 0 content-length (below, where we append the EOS),
                         * but that could be a huge amount of data; so we pass
                         * along smaller chunks
                         */",undetermined
5875,httpd,UNKNOWN,"/* If we didn't read all the data go back and get the
                     * rest of it. */",undetermined
5876,httpd,UNKNOWN,/* XXX what if we haven't seen end of the headers yet? */,undetermined
5877,httpd,UNKNOWN,/* XXX Why don't we cleanup here?  (logic from AJP) */,undetermined
5878,httpd,UNKNOWN,/* TODO: Should probably clean up this logging a bit... */,undetermined
5879,httpd,UNKNOWN,/* send ErrorDocument */,undetermined
5880,httpd,UNKNOWN,"/*
 * process the request and write the response.
 */",undetermined
5881,httpd,UNKNOWN,"/* Request IDs are arbitrary numbers that we assign to a
     * single request. This would allow multiplex/pipelinig of
     * multiple requests to the same FastCGI connection, but
     * we don't support that, and always use a value of '1' to
     * keep things simple. */",undetermined
5882,httpd,UNKNOWN,/* Step 1: Send FCGI_BEGIN_REQUEST */,undetermined
5883,httpd,UNKNOWN,/* Step 2: Send Environment via FCGI_PARAMS */,undetermined
5884,httpd,UNKNOWN,/* Step 3: Read records from the back end server and handle them. */,undetermined
5885,httpd,UNKNOWN,"/*
 * This handles fcgi:(dest) URLs
 */",undetermined
5886,httpd,UNKNOWN,/* Create space for state information */,undetermined
5887,httpd,UNKNOWN,/* Step One: Determine Who To Connect To */,undetermined
5888,httpd,UNKNOWN,"/* XXX Setting close to 0 is a great way to end up with
     *     timeouts at this point, since we lack good ways to manage the
     *     back end fastcgi processes.  This should be revisited when we
     *     have a better story on that part of things. */",undetermined
5889,httpd,UNKNOWN,/* Step Two: Make the Connection */,undetermined
5890,httpd,UNKNOWN,/* Step Three: Process the Request */,undetermined
5891,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5892,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5893,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5894,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5895,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5896,httpd,UNKNOWN,/* register hooks */,undetermined
5897,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5898,httpd,UNKNOWN,/* for apr_wait_for_io_or_timeout */,undetermined
5899,httpd,UNKNOWN,/* TODO: In APR 2.x: Extend apr_sockaddr_t to possibly be a path !!! */,undetermined
5900,httpd,UNKNOWN,"/* Create a dummy unconnected socket, and set it as the one we were
         * connected to, so that when the core closes it, it doesn't close
         * the tcp connection to the client.
         */",undetermined
5901,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
5902,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
5903,httpd,UNKNOWN,/* create per-server config structure */,undetermined
5904,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
5905,httpd,UNKNOWN,/* command apr_table_t */,undetermined
5906,httpd,UNKNOWN,/* register hooks */,undetermined
5907,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5908,httpd,UNKNOWN,"/**
 * @file mod_proxy_fdpass.h
 * @brief FD Passing interfaces
 *
 * @ingroup APACHE_INTERNAL
 * @{
 */",undetermined
5909,httpd,UNKNOWN,/* _PROXY_FDPASS_H_ */,undetermined
5910,httpd,UNKNOWN,/** @} */,undetermined
5911,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
5912,httpd,UNKNOWN,/* FTP routines for Apache proxy */,undetermined
5913,httpd,UNKNOWN,"/* Automatic timestamping (Last-Modified header) based on MDTM is used if:
 * 1) the FTP server supports the MDTM command and
 * 2) HAVE_TIMEGM (preferred) or HAVE_GMTOFF is available at compile time
 */",undetermined
5914,httpd,UNKNOWN,/* Put these in the dir config so they work inside <Location> */,undetermined
5915,httpd,UNKNOWN,/* Put these in the dir config so they work inside <Location> */,undetermined
5916,httpd,UNKNOWN,"/*
 * Decodes a '%' escaped string, and returns the number of characters
 */",undetermined
5917,httpd,UNKNOWN,/* special case for no characters */,undetermined
5918,httpd,UNKNOWN,/* decode it if not already done */,undetermined
5919,httpd,UNKNOWN,"/*
 * Escape the globbing characters in a path used as argument to
 * the FTP commands (SIZE, CWD, RETR, MDTM, ...).
 * ftpd assumes '\\' as a quoting character to escape special characters.
 * Just returns the original string if ProxyFtpEscapeWildcards has been
 * configured ""off"".
 * Returns: escaped string
 */",undetermined
5920,httpd,UNKNOWN,"/*
 * Check for globbing characters in a path used as argument to
 * the FTP commands (SIZE, CWD, RETR, MDTM, ...).
 * ftpd assumes '\\' as a quoting character to escape special characters.
 * Returns: 0 (no globbing chars, or all globbing chars escaped), 1 (globbing chars)
 */",undetermined
5921,httpd,UNKNOWN,"/*
 * checks an encoded ftp string for bad characters, namely, CR, LF or
 * non-ascii character
 */",undetermined
5922,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
5923,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
5924,httpd,UNKNOWN,"/*
 * converts a series of buckets into a string
 * XXX: BillS says this function performs essentially the same function as
 * ap_rgetline() in protocol.c. Deprecate this function and use ap_rgetline()
 * instead? I think ftp_string_read() will not work properly on non ASCII
 * (EBCDIC) machines either.
 */",undetermined
5925,httpd,UNKNOWN,/* start with an empty string */,undetermined
5926,httpd,UNKNOWN,/* loop through each brigade */,undetermined
5927,httpd,UNKNOWN,/* get brigade from network one line at a time */,undetermined
5928,httpd,UNKNOWN,/* loop through each bucket */,undetermined
5929,httpd,UNKNOWN,/* The connection aborted or timed out */,undetermined
5930,httpd,UNKNOWN,"/*
                 * is string LF terminated?
                 * XXX: This check can be made more efficient by simply checking
                 * if the last character in the 'response' buffer is an ASCII_LF.
                 * See ap_rgetline() for an example.
                 */",undetermined
5931,httpd,UNKNOWN,/* concat strings until buff is full - then throw the data away */,undetermined
5932,httpd,UNKNOWN,"/*
 * Canonicalise ftp URLs.
 */",undetermined
5933,httpd,UNKNOWN,/* */,undetermined
5934,httpd,UNKNOWN,"/* now parse path/parameters args, according to rfc1738 */",undetermined
5935,httpd,UNKNOWN,"/*
     * N.B. if this isn't a true proxy request, then the URL path (but not
     * query args) has already been decoded. This gives rise to the problem
     * of a ; being decoded into the path.
     */",undetermined
5936,httpd,UNKNOWN,"/* now, rebuild URL */",undetermined
5937,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
5938,httpd,UNKNOWN,/* we chop lines longer than 80 characters */,undetermined
5939,httpd,UNKNOWN,"/*
 * Reads response lines, returns both the ftp status code and
 * remembers the response message in the supplied buffer
 */",undetermined
5940,httpd,UNKNOWN,"/*
    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, NULL,
                 ""<%s"", response);
*/",undetermined
5941,httpd,UNKNOWN,/* this is a filter that turns a raw ASCII directory listing into pretty HTML */,undetermined
5942,httpd,UNKNOWN,"/* ideally, mod_proxy should simply send the raw directory list up the filter
 * stack to mod_autoindex, which in theory should turn the raw ascii into
 * pretty html along with all the bells and whistles it provides...
 *
 * all in good time...! :)
 */",undetermined
5943,httpd,UNKNOWN,/* fallback regex for ls -s1;  ($0..$2) == 3 */,undetermined
5944,httpd,UNKNOWN,/* combine the stored and the new */,undetermined
5945,httpd,UNKNOWN,"/* basedir is either """", or ""/%2f"" for the ""squid %2f hack"" */",undetermined
5946,httpd,UNKNOWN,"/* By default, path is relative to the $HOME dir */",undetermined
5947,httpd,UNKNOWN,"/*
         * In the reverse proxy case we need to construct our site string
         * via ap_construct_url. For non anonymous sites apr_uri_unparse would
         * only supply us with 'username@' which leads to the construction of
         * an invalid base href later on. Losing the username part of the URL
         * is no problem in the reverse proxy case as the browser sents the
         * credentials anyway once entered.
         */",undetermined
5948,httpd,UNKNOWN,"/* Save ""scheme://site"" prefix without password */",undetermined
5949,httpd,UNKNOWN,/* ... and path without query args */,undetermined
5950,httpd,UNKNOWN,"/* If path began with /%2f, change the basedir */",undetermined
5951,httpd,UNKNOWN,/* Strip off a type qualifier. It is ignored for dir listings */,undetermined
5952,httpd,UNKNOWN,/* collapse multiple leading slashes to one */,undetermined
5953,httpd,UNKNOWN,/* strip off the wildcard suffix */,undetermined
5954,httpd,UNKNOWN,"/* Copy path, strip (all except the last) trailing slashes */",undetermined
5955,httpd,UNKNOWN,/* (the trailing slash is needed for the dir component loop below) */,undetermined
5956,httpd,UNKNOWN,/* Add a link to the root directory (if %2f hack was used) */,undetermined
5957,httpd,UNKNOWN,"/* print ""ftp://host/"" */",undetermined
5958,httpd,UNKNOWN,"/* print ""path/"" component */",undetermined
5959,httpd,UNKNOWN,"/* If the caller has determined the current directory, and it differs */",undetermined
5960,httpd,UNKNOWN,"/* from what the client requested, then show the real name */",undetermined
5961,httpd,UNKNOWN,/* print README */,undetermined
5962,httpd,UNKNOWN,/* make sure page intro gets sent out */,undetermined
5963,httpd,UNKNOWN,/* loop through each line of directory */,undetermined
5964,httpd,UNKNOWN,/* get a complete line */,undetermined
5965,httpd,UNKNOWN,/* if the buffer overruns - throw data away */,undetermined
5966,httpd,UNKNOWN,/* len+1 to leave space for the trailing nil char */,undetermined
5967,httpd,UNKNOWN,/* EOS? jump to footer */,undetermined
5968,httpd,UNKNOWN,/* not complete? leave and try get some more */,undetermined
5969,httpd,UNKNOWN,/* strip trailing '\n' */,undetermined
5970,httpd,UNKNOWN,/* strip trailing '\r' if present */,undetermined
5971,httpd,UNKNOWN,/* a symlink? */,undetermined
5972,httpd,UNKNOWN,/* a directory/file? */,undetermined
5973,httpd,UNKNOWN,/* handle DOS dir */,undetermined
5974,httpd,UNKNOWN,/* Line is broken.  Ignore it. */,undetermined
5975,httpd,UNKNOWN,/* erase buffer for next time around */,undetermined
5976,httpd,UNKNOWN,/* while state is BODY */,undetermined
5977,httpd,UNKNOWN,/* handle filenames with spaces in 'em */,undetermined
5978,httpd,UNKNOWN,/* Append a slash to the HREF link for directories */,undetermined
5979,httpd,UNKNOWN,"/* Try a fallback for listings in the format of ""ls -s1"" */",undetermined
5980,httpd,UNKNOWN,"/*
             * We don't need to check for rm_eo == rm_so == -1 here since ls_regex
             * is such that $2 cannot be unset if we have a match.
             */",undetermined
5981,httpd,UNKNOWN,/* re-append the newline */,undetermined
5982,httpd,UNKNOWN,/* erase buffer for next time around */,undetermined
5983,httpd,UNKNOWN,"/* Parse EPSV reply and return port, or zero on error. */",undetermined
5984,httpd,UNKNOWN,"/* Reply syntax per RFC 2428: ""229 blah blah (|||port|)"" where '|'
     * can be any character in ASCII from 33-126, obscurely.  Verify
     * the syntax. */",undetermined
5985,httpd,UNKNOWN,"/*
 * Generic ""send FTP command to server"" routine, using the control socket.
 * Returns the FTP returncode (3 digit code)
 * Allows for tracing the FTP protocol (in LogLevel debug)
 */",undetermined
5986,httpd,UNKNOWN,"/* If cmd == NULL, we retrieve the next ftp response line */",undetermined
5987,httpd,UNKNOWN,/* strip off the CRLF for logging */,undetermined
5988,httpd,UNKNOWN,"/* Set ftp server to TYPE {A,I,E} before transfer of a directory or file */",undetermined
5989,httpd,UNKNOWN,"/* After logon, mode is ASCII */",undetermined
5990,httpd,UNKNOWN,/* set desired type */,undetermined
5991,httpd,UNKNOWN,"/* responses: 200, 421, 500, 501, 504, 530 */",undetermined
5992,httpd,UNKNOWN,/* 200 Command okay. */,undetermined
5993,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
5994,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
5995,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
5996,httpd,UNKNOWN,/* 504 Command not implemented for that parameter. */,undetermined
5997,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
5998,httpd,UNKNOWN,/* Allow not implemented */,undetermined
5999,httpd,UNKNOWN,/* ignore it silently */,undetermined
6000,httpd,UNKNOWN,"/* Return the current directory which we have selected on the FTP server, or NULL */",undetermined
6001,httpd,UNKNOWN,"/* responses: 257, 500, 501, 502, 421, 550 */",undetermined
6002,httpd,UNKNOWN,"/* 257 ""<directory-name>"" <commentary> */",undetermined
6003,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6004,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6005,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6006,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6007,httpd,UNKNOWN,/* 550 Requested action not taken. */,undetermined
6008,httpd,UNKNOWN,"/* Common routine for failed authorization (i.e., missing or wrong password)
 * to an ftp service. This causes most browsers to retry the request
 * with username and password (which was presumably queried from the user)
 * supplied in the Authorization: header.
 * Note that we ""invent"" a realm name which consists of the
 * ftp://user@host part of the reqest (sans password -if supplied but invalid-)
 */",undetermined
6009,httpd,UNKNOWN,"/*
     * Log failed requests if they supplied a password (log username/password
     * guessing attempts)
     */",undetermined
6010,httpd,UNKNOWN,"/*
 * Handles direct access of ftp:// URLs
 * Original (Non-PASV) version from
 * Troy Morrison <spiffnet@zoom.com>
 * PASV added by Chuck
 * Filters by [Graham Leggett <minfrin@sharp.fm>]
 */",undetermined
6011,httpd,UNKNOWN,/*    char *account = NULL; how to supply an account in a URL? */,undetermined
6012,httpd,UNKNOWN,"/* after ftp login, the default is ASCII */",undetermined
6013,httpd,UNKNOWN,/* stuff for PASV mode */,undetermined
6014,httpd,UNKNOWN,/* is this for us? */,undetermined
6015,httpd,UNKNOWN,/* proxy connections are via HTTP */,undetermined
6016,httpd,UNKNOWN,/* only interested in FTP */,undetermined
6017,httpd,UNKNOWN,"/*
     * I: Who Do I Connect To? -----------------------
     *
     * Break up the URL to determine the host to connect to
     */",undetermined
6018,httpd,UNKNOWN,/* we only support GET and HEAD */,undetermined
6019,httpd,UNKNOWN,"/* We break the URL into host, port, path-search */",undetermined
6020,httpd,UNKNOWN,"/* ""type=d"" forces a dir listing.
         * The other types (i|a|e) are directly used for the ftp TYPE command
         */",undetermined
6021,httpd,UNKNOWN,"/* Check valid types, rather than ignoring invalid types silently: */",undetermined
6022,httpd,UNKNOWN,/* make binary transfers the default */,undetermined
6023,httpd,UNKNOWN,"/*
     * The ""Authorization:"" header must be checked first. We allow the user
     * to ""override"" the URL-coded user [ & password ] in the Browsers'
     * User&Password Dialog. NOTE that this is only marginally more secure
     * than having the password travel in plain as part of the URL, because
     * Basic Auth simply uuencodes the plain text password. But chances are
     * still smaller that the URL is logged regularly.
     */",undetermined
6024,httpd,UNKNOWN,/* Check the decoded string for special characters. */,undetermined
6025,httpd,UNKNOWN,"/*
         * Note that this allocation has to be made from r->connection->pool
         * because it has the lifetime of the connection.  The other
         * allocations are temporary and can be tossed away any time.
         */",undetermined
6026,httpd,UNKNOWN,/* do a DNS lookup for the destination host */,undetermined
6027,httpd,UNKNOWN,"/*
     * get all the possible IP addresses for the destname and loop through
     * them until we get a successful connection
     */",undetermined
6028,httpd,UNKNOWN,/* check if ProxyBlock directive on this host */,undetermined
6029,httpd,UNKNOWN,/* create space for state information */,undetermined
6030,httpd,UNKNOWN,/* TODO: see if ftp could use determine_connection */,undetermined
6031,httpd,UNKNOWN,"/*
     * II: Make the Connection -----------------------
     *
     * We have determined who to connect to. Now make the connection.
     */",undetermined
6032,httpd,UNKNOWN,/* Use old naming */,undetermined
6033,httpd,UNKNOWN,"/*
     * III: Send Control Request -------------------------
     *
     * Log into the ftp server, send the username & password, change to the
     * correct directory...
     */",undetermined
6034,httpd,UNKNOWN,/* possible results: */,undetermined
6035,httpd,UNKNOWN,/* 120 Service ready in nnn minutes. */,undetermined
6036,httpd,UNKNOWN,/* 220 Service ready for new user. */,undetermined
6037,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6038,httpd,UNKNOWN,"/*
         * RFC2616 states: 14.37 Retry-After
         *
         * The Retry-After response-header field can be used with a 503 (Service
         * Unavailable) response to indicate how long the service is expected
         * to be unavailable to the requesting client. [...] The value of
         * this field can be either an HTTP-date or an integer number of
         * seconds (in decimal) after the time of the response. Retry-After
         * = ""Retry-After"" "":"" ( HTTP-date | delta-seconds )
         */",undetermined
6039,httpd,UNKNOWN,"/* Look for a number, preceded by whitespace */",undetermined
6040,httpd,UNKNOWN,"/* possible results; 230, 331, 332, 421, 500, 501, 530 */",undetermined
6041,httpd,UNKNOWN,"/* states: 1 - error, 2 - success; 3 - send password, 4,5 fail */",undetermined
6042,httpd,UNKNOWN,"/* 230 User logged in, proceed. */",undetermined
6043,httpd,UNKNOWN,"/* 331 User name okay, need password. */",undetermined
6044,httpd,UNKNOWN,/* 332 Need account for login. */,undetermined
6045,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6046,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6047,httpd,UNKNOWN,/* (This may include errors such as command line too long.) */,undetermined
6048,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6049,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6050,httpd,UNKNOWN,"/* log it: user name guessing
                                         * attempt? */",undetermined
6051,httpd,UNKNOWN,/* send password */,undetermined
6052,httpd,UNKNOWN,"/* possible results 202, 230, 332, 421, 500, 501, 503, 530 */",undetermined
6053,httpd,UNKNOWN,"/* 230 User logged in, proceed. */",undetermined
6054,httpd,UNKNOWN,/* 332 Need account for login. */,undetermined
6055,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6056,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6057,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6058,httpd,UNKNOWN,/* 503 Bad sequence of commands. */,undetermined
6059,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6060,httpd,UNKNOWN,/* @@@ questionable -- we might as well return a 403 Forbidden here */,undetermined
6061,httpd,UNKNOWN,"/* log it: passwd guessing
                                                 * attempt? */",undetermined
6062,httpd,UNKNOWN,"/* Special handling for leading ""%2f"": this enforces a ""cwd /""
     * out of the $HOME directory which was the starting point after login
     */",undetermined
6063,httpd,UNKNOWN,/* skip leading '/' (after root %2f) */,undetermined
6064,httpd,UNKNOWN,"/*
     * set the directory (walk directory component by component): this is
     * what we must do if we don't know the OS type of the remote machine
     */",undetermined
6065,httpd,UNKNOWN,"/* Note! This decodes a %2f -> ""/"" */",undetermined
6066,httpd,UNKNOWN,/* are there now any '/' characters? */,undetermined
6067,httpd,UNKNOWN,"/* NOTE: FTP servers do globbing on the path.
         * So we need to escape the URI metacharacters.
         * We use a special glob-escaping routine to escape globbing chars.
         * We could also have extended gen_test_char.c with a special T_ESCAPE_FTP_PATH
         */",undetermined
6068,httpd,UNKNOWN,"/* responses: 250, 421, 500, 501, 502, 530, 550 */",undetermined
6069,httpd,UNKNOWN,"/* 250 Requested file action okay, completed. */",undetermined
6070,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6071,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6072,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6073,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6074,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6075,httpd,UNKNOWN,/* 550 Requested action not taken. */,undetermined
6076,httpd,UNKNOWN,"/*
     * IV: Make Data Connection? -------------------------
     *
     * Try EPSV, if that fails... try PASV, if that fails... try PORT.
     */",undetermined
6077,httpd,UNKNOWN,/* this temporarily switches off EPSV/PASV */,undetermined
6078,httpd,UNKNOWN,/*goto bypass;*/,undetermined
6079,httpd,UNKNOWN,/* set up data connection - EPSV */,undetermined
6080,httpd,UNKNOWN,"/*
         * The EPSV command replaces PASV where both IPV4 and IPV6 is
         * supported. Only the port is returned, the IP address is always the
         * same as that on the control connection. Example: Entering Extended
         * Passive Mode (|||6446|)
         */",undetermined
6081,httpd,UNKNOWN,"/* possible results: 227, 421, 500, 501, 502, 530 */",undetermined
6082,httpd,UNKNOWN,"/* 227 Entering Passive Mode (h1,h2,h3,h4,p1,p2). */",undetermined
6083,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6084,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6085,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6086,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6087,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6088,httpd,UNKNOWN,/* Parse the port out of the EPSV reply. */,undetermined
6089,httpd,UNKNOWN,/* Retrieve the client's address. */,undetermined
6090,httpd,UNKNOWN,"/* Take a shallow copy of the server address to
                     * modify; the _addr_get function gives back a
                     * pointer to the socket's internal structure.
                     * This is awkward given current APR network
                     * interfaces. */",undetermined
6091,httpd,UNKNOWN,/* set up data connection - PASV */,undetermined
6092,httpd,UNKNOWN,"/* possible results: 227, 421, 500, 501, 502, 530 */",undetermined
6093,httpd,UNKNOWN,"/* 227 Entering Passive Mode (h1,h2,h3,h4,p1,p2). */",undetermined
6094,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6095,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6096,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6097,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6098,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6099,httpd,UNKNOWN,/* FIXME: Check PASV against RFC1123 */,undetermined
6100,httpd,UNKNOWN,/* separate result code */,undetermined
6101,httpd,UNKNOWN,"/* separate address &
                                                                 * port params */",undetermined
6102,httpd,UNKNOWN,/* FIXME: Only supports IPV4 - fix in RFC2428 */,undetermined
6103,httpd,UNKNOWN,/* make the connection */,undetermined
6104,httpd,UNKNOWN,/*bypass:*/,undetermined
6105,httpd,UNKNOWN,/* set up data connection - PORT */,undetermined
6106,httpd,UNKNOWN,"/* BS2000 has this option ""always on"" */",undetermined
6107,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
6108,httpd,UNKNOWN,/* only need a short queue */,undetermined
6109,httpd,UNKNOWN,/* FIXME: Sent PORT here */,undetermined
6110,httpd,UNKNOWN,"/* possible results: 200, 421, 500, 501, 502, 530 */",undetermined
6111,httpd,UNKNOWN,/* 200 Command okay. */,undetermined
6112,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6113,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6114,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6115,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6116,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6117,httpd,UNKNOWN,/* signal that we must use the EPRT/PORT loop */,undetermined
6118,httpd,UNKNOWN,"/* IPV6 FIXME:
 * The EPRT command replaces PORT where both IPV4 and IPV6 is supported. The first
 * number (1,2) indicates the protocol type. Examples:
 *   EPRT |1|132.235.1.2|6275|
 *   EPRT |2|1080::8:800:200C:417A|5282|
 */",undetermined
6119,httpd,UNKNOWN,"/*
     * V: Set The Headers -------------------
     *
     * Get the size of the request, set up the environment for HTTP.
     */",undetermined
6120,httpd,UNKNOWN,"/* set request; ""path"" holds last path component */",undetermined
6121,httpd,UNKNOWN,/* are there now any '/' characters? */,undetermined
6122,httpd,UNKNOWN,"/* If len == 0 then it must be a directory (you can't RETR nothing)
     * Also, don't allow to RETR by wildcard. Instead, create a dirlisting,
     * unless ProxyFtpListOnWildcard is off.
     */",undetermined
6123,httpd,UNKNOWN,"/* (from FreeBSD ftpd):
         * SIZE is not in RFC959, but Postel has blessed it and
         * it will be in the updated RFC.
         *
         * Return size of file in a format suitable for
         * using with RESTART (we just count bytes).
         */",undetermined
6124,httpd,UNKNOWN,"/* from draft-ietf-ftpext-mlst-14.txt:
         * This value will
         * change depending on the current STRUcture, MODE and TYPE of the data
         * connection, or a data connection which would be created were one
         * created now.  Thus, the result of the SIZE command is dependent on
         * the currently established STRU, MODE and TYPE parameters.
         */",undetermined
6125,httpd,UNKNOWN,"/* Therefore: switch to binary if the user did not specify "";type=a"" */",undetermined
6126,httpd,UNKNOWN,/* Size command ok */,undetermined
6127,httpd,UNKNOWN,/* already pstrdup'ed: no copy necessary */,undetermined
6128,httpd,UNKNOWN,/* Not a regular file */,undetermined
6129,httpd,UNKNOWN,"/* possible results: 250, 421, 500, 501, 502, 530, 550 */",undetermined
6130,httpd,UNKNOWN,"/* 250 Requested file action okay, completed. */",undetermined
6131,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6132,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6133,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6134,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6135,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6136,httpd,UNKNOWN,/* 550 Requested action not taken. */,undetermined
6137,httpd,UNKNOWN,"/* If the current directory contains no slash, we are talking to
         * a non-unix ftp system. Try LIST instead of ""LIST -lag"", it
         * should return a long listing anyway (unlike NLST).
         * Some exotic FTP servers might choke on the ""-lag"" switch.
         */",undetermined
6138,httpd,UNKNOWN,"/* Note that we do not escape the path here, to allow for
         * queries like: ftp://user@host/apache/src/server/http_*.c
         */",undetermined
6139,httpd,UNKNOWN,"/* switch to binary if the user did not specify "";type=a"" */",undetermined
6140,httpd,UNKNOWN,"/* from draft-ietf-ftpext-mlst-14.txt:
         *   The FTP command, MODIFICATION TIME (MDTM), can be used to determine
         *   when a file in the server NVFS was last modified.     <..>
         *   The syntax of a time value is:
         *           time-val       = 14DIGIT [ ""."" 1*DIGIT ]      <..>
         *     Symbolically, a time-val may be viewed as
         *           YYYYMMDDHHMMSS.sss
         *     The ""."" and subsequent digits (""sss"") are optional. <..>
         *     Time values are always represented in UTC (GMT)
         */",undetermined
6141,httpd,UNKNOWN,/* then extract the Last-Modified time from it (YYYYMMDDhhmmss or YYYYMMDDhhmmss.xxx GMT). */,undetermined
6142,httpd,UNKNOWN,/* Does system have timegm()? */,undetermined
6143,httpd,UNKNOWN,/* does struct tm have a member tm_gmtoff? */,undetermined
6144,httpd,UNKNOWN,"/* mktime will subtract the local timezone, which is not what we want.
         * Add it again because the MDTM string is GMT
         */",undetermined
6145,httpd,UNKNOWN,/* USE_MDTM */,undetermined
6146,httpd,UNKNOWN,/* FIXME: Handle range requests - send REST */,undetermined
6147,httpd,UNKNOWN,/* rc is an intermediate response for the LIST or RETR commands */,undetermined
6148,httpd,UNKNOWN,"/*
     * RETR: 110, 125, 150, 226, 250, 421, 425, 426, 450, 451, 500, 501, 530,
     * 550 NLST: 125, 150, 226, 250, 421, 425, 426, 450, 451, 500, 501, 502,
     * 530
     */",undetermined
6149,httpd,UNKNOWN,/* 110 Restart marker reply. */,undetermined
6150,httpd,UNKNOWN,/* 125 Data connection already open; transfer starting. */,undetermined
6151,httpd,UNKNOWN,/* 150 File status okay; about to open data connection. */,undetermined
6152,httpd,UNKNOWN,/* 226 Closing data connection. */,undetermined
6153,httpd,UNKNOWN,"/* 250 Requested file action okay, completed. */",undetermined
6154,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6155,httpd,UNKNOWN,/* 425 Can't open data connection. */,undetermined
6156,httpd,UNKNOWN,/* 426 Connection closed; transfer aborted. */,undetermined
6157,httpd,UNKNOWN,/* 450 Requested file action not taken. */,undetermined
6158,httpd,UNKNOWN,/* 451 Requested action aborted. Local error in processing. */,undetermined
6159,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6160,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6161,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6162,httpd,UNKNOWN,/* 550 Requested action not taken. */,undetermined
6163,httpd,UNKNOWN,/* Directory Listings should always be fetched in ASCII mode */,undetermined
6164,httpd,UNKNOWN,"/* possible results: 250, 421, 500, 501, 502, 530, 550 */",undetermined
6165,httpd,UNKNOWN,"/* 250 Requested file action okay, completed. */",undetermined
6166,httpd,UNKNOWN,"/* 421 Service not available, closing control connection. */",undetermined
6167,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6168,httpd,UNKNOWN,/* 501 Syntax error in parameters or arguments. */,undetermined
6169,httpd,UNKNOWN,/* 502 Command not implemented. */,undetermined
6170,httpd,UNKNOWN,/* 530 Not logged in. */,undetermined
6171,httpd,UNKNOWN,/* 550 Requested action not taken. */,undetermined
6172,httpd,UNKNOWN,/* Update current directory after CWD */,undetermined
6173,httpd,UNKNOWN,"/* See above for the ""LIST"" vs. ""LIST -lag"" discussion. */",undetermined
6174,httpd,UNKNOWN,"/* rc is an intermediate response for the LIST command (125 transfer starting, 150 opening data connection) */",undetermined
6175,httpd,UNKNOWN,/* set content-type */,undetermined
6176,httpd,UNKNOWN,"/* We ""trust"" the ftp server to really serve (size) bytes... */",undetermined
6177,httpd,UNKNOWN,/* USE_MDTM */,undetermined
6178,httpd,UNKNOWN,"/* If an encoding has been set by mistake, delete it.
     * @@@ FIXME (e.g., for ftp://user@host/file*.tar.gz,
     * @@@        the encoding is currently set to x-gzip)
     */",undetermined
6179,httpd,UNKNOWN,"/* set content-encoding (not for dir listings, they are uncompressed)*/",undetermined
6180,httpd,UNKNOWN,/* wait for connection */,undetermined
6181,httpd,UNKNOWN,"/* the transfer socket is now open, create a new connection */",undetermined
6182,httpd,UNKNOWN,"/*
         * the peer reset the connection already; ap_run_create_connection() closed
         * the socket
         */",undetermined
6183,httpd,UNKNOWN,"/*
     * We do not do SSL over the data connection, even if the virtual host we
     * are in might have SSL enabled
     */",undetermined
6184,httpd,UNKNOWN,/* set up the connection filters */,undetermined
6185,httpd,UNKNOWN,"/*
     * VI: Receive the Response ------------------------
     *
     * Get response from the remote ftp socket, and pass it up the filter chain.
     */",undetermined
6186,httpd,UNKNOWN,/* send response */,undetermined
6187,httpd,UNKNOWN,/* insert directory filter */,undetermined
6188,httpd,UNKNOWN,/* send body */,undetermined
6189,httpd,UNKNOWN,"/* read the body, pass it to the output filters */",undetermined
6190,httpd,UNKNOWN,/* sanity check */,undetermined
6191,httpd,UNKNOWN,/* found the last brigade? */,undetermined
6192,httpd,UNKNOWN,"/* if this is the last brigade, cleanup the
                 * backend connection first to prevent the
                 * backend server from hanging around waiting
                 * for a slow client to eat these bytes
                 */",undetermined
6193,httpd,UNKNOWN,/* signal that we must leave */,undetermined
6194,httpd,UNKNOWN,"/* if no EOS yet, then we must flush */",undetermined
6195,httpd,UNKNOWN,/* try send what we read */,undetermined
6196,httpd,UNKNOWN,/* Ack! Phbtt! Die! User aborted! */,undetermined
6197,httpd,UNKNOWN,/* make sure we always clean up after ourselves */,undetermined
6198,httpd,UNKNOWN,"/* if we are done, leave */",undetermined
6199,httpd,UNKNOWN,/* Retrieve the final response for the RETR or LIST commands */,undetermined
6200,httpd,UNKNOWN,"/*
     * VII: Clean Up -------------
     *
     * If there are no KeepAlives, or if the connection has been signalled to
     * close, close the socket and clean up
     */",undetermined
6201,httpd,UNKNOWN,/* finish */,undetermined
6202,httpd,UNKNOWN,"/* responses: 221, 500 */",undetermined
6203,httpd,UNKNOWN,/* 221 Service closing control connection. */,undetermined
6204,httpd,UNKNOWN,"/* 500 Syntax error, command unrecognized. */",undetermined
6205,httpd,UNKNOWN,/* hooks */,undetermined
6206,httpd,UNKNOWN,/* filters */,undetermined
6207,httpd,UNKNOWN,"/* Compile the output format of ""ls -s1"" as a fallback for non-unix ftp listings */",undetermined
6208,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6209,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6210,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6211,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6212,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6213,httpd,UNKNOWN,/* register hooks */,undetermined
6214,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6215,httpd,UNKNOWN,/* HTTP routines for Apache proxy */,undetermined
6216,httpd,UNKNOWN,"/*
 * Canonicalise http-like URLs.
 *  scheme is the scheme for the URL
 *  url    is the URL starting with the first '/'
 *  def_port is the default port for this scheme.
 */",undetermined
6217,httpd,UNKNOWN,/* ap_port_of_scheme() */,undetermined
6218,httpd,UNKNOWN,"/* do syntatic check.
     * We break the URL into host, port, path, search
     */",undetermined
6219,httpd,UNKNOWN,"/*
     * now parse path/search args, according to rfc1738:
     * process the path.
     *
     * In a reverse proxy, our URL has been processed, so canonicalise
     * unless proxy-nocanon is set to say it's raw
     * In a forward proxy, we have and MUST NOT MANGLE the original.
     */",undetermined
6220,httpd,UNKNOWN,/* wtf are we doing here? */,undetermined
6221,httpd,UNKNOWN,/* this is the raw path */,undetermined
6222,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
6223,httpd,UNKNOWN,/* Clear all connection-based headers from the incoming headers table */,undetermined
6224,httpd,UNKNOWN,"/*
 * Parse this, suckers!
 *
 *    Warning    = ""Warning"" "":"" 1#warning-value
 *
 *    warning-value = warn-code SP warn-agent SP warn-text
 *                                             [SP warn-date]
 *
 *    warn-code  = 3DIGIT
 *    warn-agent = ( host [ "":"" port ] ) | pseudonym
 *                    ; the name or pseudonym of the server adding
 *                    ; the Warning header, for use in debugging
 *    warn-text  = quoted-string
 *    warn-date  = <""> HTTP-date <"">
 *
 * Buggrit, use a bloomin' regexp!
 * (\d{3}\s+\S+\s+\"".*?\""(\s+\""(.*?)\"")?)  --> whole in $1, date in $3
 */",undetermined
6225,httpd,UNKNOWN,"/* OK, we have a date here */",undetermined
6226,httpd,UNKNOWN,/* add empty line at the end of the headers */,undetermined
6227,httpd,UNKNOWN,/* must be here due to transient bucket. */,undetermined
6228,httpd,UNKNOWN,"/* If this brigade contains EOS, either stop or remove it. */",undetermined
6229,httpd,UNKNOWN,/* We can't pass this EOS to the output_filters. */,undetermined
6230,httpd,UNKNOWN,"/*
         * Append the end-of-chunk CRLF
         */",undetermined
6231,httpd,UNKNOWN,"/* we never sent the header brigade, so go ahead and
             * take care of that now
             */",undetermined
6232,httpd,UNKNOWN,"/*
             * Save input_brigade in bb brigade. (At least) in the SSL case
             * input_brigade contains transient buckets whose data would get
             * overwritten during the next call of ap_get_brigade in the loop.
             * ap_save_brigade ensures these buckets to be set aside.
             * Calling ap_save_brigade with NULL as filter is OK, because
             * bb brigade already has been created and does not need to get
             * created by ap_save_brigade.
             */",undetermined
6233,httpd,UNKNOWN,/* The request is flushed below this loop with chunk EOS header */,undetermined
6234,httpd,UNKNOWN,"/* we never sent the header brigade because there was no request body;
         * send it now
         */",undetermined
6235,httpd,UNKNOWN,/* input brigade still has an EOS which we can't pass to the output_filters. */,undetermined
6236,httpd,UNKNOWN,/* <trailers> */,undetermined
6237,httpd,UNKNOWN,"/* Now we have headers-only, or the chunk EOS mark; flush it */",undetermined
6238,httpd,UNKNOWN,"/* If this brigade contains EOS, either stop or remove it. */",undetermined
6239,httpd,UNKNOWN,/* We can't pass this EOS to the output_filters. */,undetermined
6240,httpd,UNKNOWN,"/* C-L < bytes streamed?!?
         * We will error out after the body is completely
         * consumed, but we can't stream more bytes at the
         * back end since they would in part be interpreted
         * as another request!  If nothing is sent, then
         * just send nothing.
         *
         * Prevents HTTP Response Splitting.
         */",undetermined
6241,httpd,UNKNOWN,"/* we never sent the header brigade, so go ahead and
             * take care of that now
             */",undetermined
6242,httpd,UNKNOWN,"/*
             * Save input_brigade in bb brigade. (At least) in the SSL case
             * input_brigade contains transient buckets whose data would get
             * overwritten during the next call of ap_get_brigade in the loop.
             * ap_save_brigade ensures these buckets to be set aside.
             * Calling ap_save_brigade with NULL as filter is OK, because
             * bb brigade already has been created and does not need to get
             * created by ap_save_brigade.
             */",undetermined
6243,httpd,UNKNOWN,"/* Once we hit EOS, we are ready to flush. */",undetermined
6244,httpd,UNKNOWN,"/* we never sent the header brigade since there was no request
         * body; send it now with the flush flag
         */",undetermined
6245,httpd,UNKNOWN,"/* If this brigade contains EOS, either stop or remove it. */",undetermined
6246,httpd,UNKNOWN,/* We can't pass this EOS to the output_filters. */,undetermined
6247,httpd,UNKNOWN,"/*
             * LimitRequestBody does not affect Proxy requests (Should it?).
             * Let it take effect if we decide to store the body in a
             * temporary file on disk.
             */",undetermined
6248,httpd,UNKNOWN,/* can't spool any more in memory; write latest brigade to disk */,undetermined
6249,httpd,UNKNOWN,"/*
             * Save input_brigade in body_brigade. (At least) in the SSL case
             * input_brigade contains transient buckets whose data would get
             * overwritten during the next call of ap_get_brigade in the loop.
             * ap_save_brigade ensures these buckets to be set aside.
             * Calling ap_save_brigade with NULL as filter is OK, because
             * body_brigade already has been created and does not need to get
             * created by ap_save_brigade.
             */",undetermined
6250,httpd,UNKNOWN,"/* This is all a single brigade, pass with flush flagged */",undetermined
6251,httpd,UNKNOWN,"/*
 * Transform buckets from one bucket allocator to another one by creating a
 * transient bucket for each data bucket and let it use the data read from
 * the old bucket. Metabuckets are transformed by just recreating them.
 * Attention: Currently only the following bucket types are handled:
 *
 * All data buckets
 * FLUSH
 * EOS
 *
 * If an other bucket type is found its type is logged as a debug message
 * and APR_EGENERAL is returned.
 */",undetermined
6252,httpd,UNKNOWN,"/* We have headers, let's figure out our request body... */",undetermined
6253,httpd,UNKNOWN,"/* sub-requests never use keepalives, and mustn't pass request bodies.
     * Because the new logic looks at input_brigade, we will self-terminate
     * input_brigade and jump past all of the request body logic...
     * Reading anything with ap_get_brigade is likely to consume the
     * main request's body or read beyond EOS - which would be unplesant.
     *
     * An exception: when a kept_body is present, then subrequest CAN use
     * pass request bodies, and we DONT skip the body.
     */",undetermined
6254,httpd,UNKNOWN,/* XXX: Why DON'T sub-requests use keepalives? */,undetermined
6255,httpd,UNKNOWN,"/* WE only understand chunked.  Other modules might inject
     * (and therefore, decode) other flavors but we don't know
     * that the can and have done so unless they they remove
     * their decoding from the headers_in T-E list.
     * XXX: Make this extensible, but in doing so, presume the
     * encoding has been done by the extensions' handler, and
     * do not modify add_te_chunked's logic
     */",undetermined
6256,httpd,UNKNOWN,"/* Prefetch MAX_MEM_SPOOL bytes
     *
     * This helps us avoid any election of C-L v.s. T-E
     * request bodies, since we are willing to keep in
     * memory this much data, in any case.  This gives
     * us an instant C-L election if the body is of some
     * reasonable size.
     */",undetermined
6257,httpd,UNKNOWN,"/*
         * Save temp_brigade in input_brigade. (At least) in the SSL case
         * temp_brigade contains transient buckets whose data would get
         * overwritten during the next call of ap_get_brigade in the loop.
         * ap_save_brigade ensures these buckets to be set aside.
         * Calling ap_save_brigade with NULL as filter is OK, because
         * input_brigade already has been created and does not need to get
         * created by ap_save_brigade.
         */",undetermined
6258,httpd,UNKNOWN,"/* Ensure we don't hit a wall where we have a buffer too small
     * for ap_get_brigade's filters to fetch us another bucket,
     * surrender once we hit 80 bytes less than MAX_MEM_SPOOL
     * (an arbitrary value.)
     */",undetermined
6259,httpd,UNKNOWN,"/* Use chunked request body encoding or send a content-length body?
     *
     * Prefer C-L when:
     *
     *   We have no request body (handled by RB_STREAM_CL)
     *
     *   We have a request body length <= MAX_MEM_SPOOL
     *
     *   The administrator has setenv force-proxy-request-1.0
     *
     *   The client sent a C-L body, and the administrator has
     *   not setenv proxy-sendchunked or has set setenv proxy-sendcl
     *
     *   The client sent a T-E body, and the administrator has
     *   setenv proxy-sendcl, and not setenv proxy-sendchunked
     *
     * If both proxy-sendcl and proxy-sendchunked are set, the
     * behavior is the same as if neither were set, large bodies
     * that can't be read will be forwarded in their original
     * form of C-L, or T-E.
     *
     * To ensure maximum compatibility, setenv proxy-sendcl
     * To reduce server resource use,   setenv proxy-sendchunked
     *
     * Then address specific servers with conditional setenv
     * options to restore the default behavior where desireable.
     *
     * We have to compute content length by reading the entire request
     * body; if request body is not small, we'll spool the remaining
     * input to a temporary file.  Chunked is always preferable.
     *
     * We can only trust the client-provided C-L if the T-E header
     * is absent, and the filters are unchanged (the body won't
     * be resized by another content filter).
     */",undetermined
6260,httpd,UNKNOWN,"/* The whole thing fit, so our decision is trivial, use
         * the filtered bytes read from the client for the request
         * body Content-Length.
         *
         * If we expected no body, and read no body, do not set
         * the Content-Length.
         */",undetermined
6261,httpd,UNKNOWN,"/* This is an appropriate default; very efficient for no-body
         * requests, and has the behavior that it will not add any C-L
         * when the old_cl_val is NULL.
         */",undetermined
6262,httpd,UNKNOWN,/* Yes I hate gotos.  This is the subrequest shortcut */,undetermined
6263,httpd,UNKNOWN,"/*
     * Handle Connection: header if we do HTTP/1.1 request:
     * If we plan to close the backend connection sent Connection: close
     * otherwise sent Connection: Keep-Alive.
     */",undetermined
6264,httpd,UNKNOWN,"/* send the request body, if any. */",undetermined
6265,httpd,UNKNOWN,/* shouldn't be possible */,undetermined
6266,httpd,UNKNOWN,/* apr_status_t value has been logged in lower level method */,undetermined
6267,httpd,UNKNOWN,"/*
 * If the date is a valid RFC 850 date or asctime() date, then it
 * is converted to the RFC 1123 format.
 */",undetermined
6268,httpd,UNKNOWN,"/*
 * Note: pread_len is the length of the response that we've  mistakenly
 * read (assuming that we don't consider that an  error via
 * ProxyBadHeader StartBody). This depends on buffer actually being
 * local storage to the calling code in order for pread_len to make
 * any sense at all, since we depend on buffer still containing
 * what was read by ap_getline() upon return.
 */",undetermined
6269,httpd,UNKNOWN,"/*
     * Read header lines until we get the empty separator line, a read error,
     * the connection closes (EOF), or we timeout.
     */",undetermined
6270,httpd,UNKNOWN,/* Find the colon separator */,undetermined
6271,httpd,UNKNOWN,"/* We may encounter invalid headers, usually from buggy
             * MS IIS servers, so we need to determine just how to handle
             * them. We can either ignore them, assume that they mark the
             * start-of-body (eg: a missing CRLF) or (the default) mark
             * the headers as totally bogus and return a 500. The sole
             * exception is an extra ""HTTP/1.0 200, OK"" line sprinkled
             * in between the usual MIME headers, which is a favorite
             * IIS bug.
             */",undetermined
6272,httpd,UNKNOWN,/* XXX: The mask check is buggy if we ever see an HTTP/1.10 */,undetermined
6273,httpd,UNKNOWN,"/* Nope, it wasn't even an extra HTTP header. Give up. */",undetermined
6274,httpd,UNKNOWN,"/* if we've already started loading headers_out, then
                     * return what we've accumulated so far, in the hopes
                     * that they are useful; also note that we likely pre-read
                     * the first line of the response.
                     */",undetermined
6275,httpd,UNKNOWN,/* this is the psc->badopt == bad_ignore case */,undetermined
6276,httpd,UNKNOWN,"/* XXX: RFC2068 defines only SP and HT as whitespace, this test is
         * wrong... and so are many others probably.
         */",undetermined
6277,httpd,UNKNOWN,/* Skip to start of value   */,undetermined
6278,httpd,UNKNOWN,/* should strip trailing whitespace as well */,undetermined
6279,httpd,UNKNOWN,"/* make sure we add so as not to destroy duplicated headers
         * Modify headers requiring canonicalisation and/or affected
         * by ProxyPassReverse and family with process_proxy_header
         */",undetermined
6280,httpd,UNKNOWN,/* the header was too long; at the least we should skip extra data */,undetermined
6281,httpd,UNKNOWN,/* soak up the extra data */,undetermined
6282,httpd,UNKNOWN,/* time to exit the larger loop as well */,undetermined
6283,httpd,UNKNOWN,"/*
 * Limit the number of interim respones we sent back to the client. Otherwise
 * we suffer from a memory build up. Besides there is NO sense in sending back
 * an unlimited number of interim responses to the client. Thus if we cross
 * this limit send back a 502 (Bad Gateway).
 */",undetermined
6284,httpd,UNKNOWN,"/* non-zero whilst interim 1xx responses
                               * are being read. */",undetermined
6285,httpd,UNKNOWN,/* Setup for 100-Continue timeout if appropriate */,undetermined
6286,httpd,UNKNOWN,"/* Get response from the remote server, and pass it up the
     * filter chain
     */",undetermined
6287,httpd,UNKNOWN,"/* In case anyone needs to know, this is a fake request that is really a
     * response.
     */",undetermined
6288,httpd,UNKNOWN,/* handle one potential stray CRLF */,undetermined
6289,httpd,UNKNOWN,"/*
             * If we are a reverse proxy request shutdown the connection
             * WITHOUT ANY response to trigger a retry by the client
             * if allowed (as for idempotent requests).
             * BUT currently we should not do this if the request is the
             * first request on a keepalive connection as browsers like
             * seamonkey only display an empty page in this case and do
             * not do a retry. We should also not do this on a
             * connection which times out; instead handle as
             * we normally would handle timeouts
             */",undetermined
6290,httpd,UNKNOWN,"/*
                 * Add an EOC bucket to signal the ap_http_header_filter
                 * that it should get out of our way, BUT ensure that the
                 * EOC bucket is inserted BEFORE an EOS bucket in bb as
                 * some resource filters like mod_deflate pass everything
                 * up to the EOS down the chain immediately and sent the
                 * remainder of the brigade later (or even never). But in
                 * this case the ap_http_header_filter does not get out of
                 * our way soon enough.
                 */",undetermined
6291,httpd,UNKNOWN,/* Mark the backend connection for closing */,undetermined
6292,httpd,UNKNOWN,/* Need to return OK to avoid sending an error message */,undetermined
6293,httpd,UNKNOWN,/* XXX: Is this a real headers length send from remote? */,undetermined
6294,httpd,UNKNOWN,"/* Is it an HTTP/1 response?
         * This is buggy if we ever see an HTTP/1.10
         */",undetermined
6295,httpd,UNKNOWN,"/* If not an HTTP/1 message or
             * if the status line was > 8192 bytes
             */",undetermined
6296,httpd,UNKNOWN,"/* 2616 requires the space in Status-Line; the origin
                 * server may have sent one but ap_rgetline_core will
                 * have stripped it. */",undetermined
6297,httpd,UNKNOWN,"/* The status out of the front is the same as the status coming in
             * from the back, until further notice.
             */",undetermined
6298,httpd,UNKNOWN,/* read the headers. */,undetermined
6299,httpd,UNKNOWN,"/* N.B. for HTTP/1.0 clients, we have to fold line-wrapped headers*/",undetermined
6300,httpd,UNKNOWN,"/* Also, take care with headers with multiple occurences. */",undetermined
6301,httpd,UNKNOWN,"/* First, tuck away all already existing cookies */",undetermined
6302,httpd,UNKNOWN,/* shove the headers direct into r->headers_out */,undetermined
6303,httpd,UNKNOWN,"/*
                 * ap_send_error relies on a headers_out to be present. we
                 * are in a bad position here.. so force everything we send out
                 * to have nothing to do with the incoming packet
                 */",undetermined
6304,httpd,UNKNOWN,"/* Now, add in the just read cookies */",undetermined
6305,httpd,UNKNOWN,/* and now load 'em all in */,undetermined
6306,httpd,UNKNOWN,/* can't have both Content-Length and Transfer-Encoding */,undetermined
6307,httpd,UNKNOWN,"/*
                 * 2616 section 4.4, point 3: ""if both Transfer-Encoding
                 * and Content-Length are received, the latter MUST be
                 * ignored"";
                 *
                 * To help mitigate HTTP Splitting, unset Content-Length
                 * and shut down the backend server connection
                 * XXX: We aught to treat such a response as uncachable
                 */",undetermined
6308,httpd,UNKNOWN,"/*
             * Save a possible Transfer-Encoding header as we need it later for
             * ap_http_filter to know where to end.
             */",undetermined
6309,httpd,UNKNOWN,/* strip connection listed hop-by-hop headers from response */,undetermined
6310,httpd,UNKNOWN,/* Clear hop-by-hop headers */,undetermined
6311,httpd,UNKNOWN,/* Delete warnings with wrong date */,undetermined
6312,httpd,UNKNOWN,/* handle Via header in response */,undetermined
6313,httpd,UNKNOWN,"/* If USE_CANONICAL_NAME_OFF was configured for the proxy virtual host,
                 * then the server name returned by ap_get_server_name() is the
                 * origin server name (which does make too much sense with Via: headers)
                 * so we use the proxy vhost's name instead.
                 */",undetermined
6314,httpd,UNKNOWN,"/* create a ""Via:"" response header entry and merge it */",undetermined
6315,httpd,UNKNOWN,/* cancel keepalive if HTTP/1.0 or less */,undetermined
6316,httpd,UNKNOWN,/* an http/0.9 response */,undetermined
6317,httpd,UNKNOWN,/* Reset to old timeout iff we've adjusted it */,undetermined
6318,httpd,UNKNOWN,"/* RFC2616 tells us to forward this.
             *
             * OTOH, an interim response here may mean the backend
             * is playing sillybuggers.  The Client didn't ask for
             * it within the defined HTTP/1.1 mechanisms, and if
             * it's an extension, it may also be unsupported by us.
             *
             * There's also the possibility that changing existing
             * behaviour here might break something.
             *
             * So let's make it configurable.
             *
             * We need to set ""r->expecting_100 = 1"" otherwise origin
             * server behaviour will apply.
             */",undetermined
6319,httpd,UNKNOWN,"/* FIXME: refine this to be able to specify per-response-status
             * policies and maybe also add option to bail out with 502
             */",undetermined
6320,httpd,UNKNOWN,"/* Moved the fixups of Date headers and those affected by
         * ProxyPassReverse/etc from here to ap_proxy_read_headers
         */",undetermined
6321,httpd,UNKNOWN,"/*
         * Is it an HTTP/0.9 response or did we maybe preread the 1st line of
         * the response? If so, load the extra data. These are 2 mutually
         * exclusive possibilities, that just happen to require very
         * similar behavior.
         */",undetermined
6322,httpd,UNKNOWN,"/*@@@FIXME:
                 * At this point in response processing of a 0.9 response,
                 * we don't know yet whether data is binary or not.
                 * mod_charset_lite will get control later on, so it cannot
                 * decide on the conversion of this buffer full of data.
                 * However, chances are that we are not really talking to an
                 * HTTP/0.9 server, but to some different protocol, therefore
                 * the best guess IMHO is to always treat the buffer as ""text/x"":
                 */",undetermined
6323,httpd,UNKNOWN,/* PR 41646: get HEAD right with ProxyErrorOverride */,undetermined
6324,httpd,UNKNOWN,"/* clear r->status for override error, otherwise ErrorDocument
             * thinks that this is a recursive error, and doesn't find the
             * custom error page
             */",undetermined
6325,httpd,UNKNOWN,"/* Discard body, if one is expected */",undetermined
6326,httpd,UNKNOWN,/* not HEAD request */,undetermined
6327,httpd,UNKNOWN,/* not 204 */,undetermined
6328,httpd,UNKNOWN,/* not 304 */,undetermined
6329,httpd,UNKNOWN,/* send body - but only if a body is expected */,undetermined
6330,httpd,UNKNOWN,/* not HEAD request */,undetermined
6331,httpd,UNKNOWN,/* not any 1xx response */,undetermined
6332,httpd,UNKNOWN,/* not 204 */,undetermined
6333,httpd,UNKNOWN,/* not 304 */,undetermined
6334,httpd,UNKNOWN,"/* We need to copy the output headers and treat them as input
             * headers as well.  BUT, we need to do this before we remove
             * TE, so that they are preserved accordingly for
             * ap_http_filter to know where to end.
             */",undetermined
6335,httpd,UNKNOWN,"/*
             * Restore Transfer-Encoding header from response if we saved
             * one before and there is none left. We need it for the
             * ap_http_filter. See above.
             */",undetermined
6336,httpd,UNKNOWN,"/*
             * if we are overriding the errors, we can't put the content
             * of the page into the brigade
             */",undetermined
6337,httpd,UNKNOWN,"/* read the body, pass it to the output filters */",undetermined
6338,httpd,UNKNOWN,"/* Handle the case where the error document is itself reverse
                 * proxied and was successful. We must maintain any previous
                 * error status so that an underlying error (eg HTTP_NOT_FOUND)
                 * doesn't become an HTTP_OK.
                 */",undetermined
6339,httpd,UNKNOWN,"/* ap_get_brigade will return success with an empty brigade
                     * for a non-blocking read which would block: */",undetermined
6340,httpd,UNKNOWN,/* flush to the client and switch to blocking mode */,undetermined
6341,httpd,UNKNOWN,"/* In this case, we are in real trouble because
                         * our backend bailed on us. Pass along a 502 error
                         * error bucket
                         */",undetermined
6342,httpd,UNKNOWN,/* next time try a non-blocking read */,undetermined
6343,httpd,UNKNOWN,/* sanity check */,undetermined
6344,httpd,UNKNOWN,/* Switch the allocator lifetime of the buckets */,undetermined
6345,httpd,UNKNOWN,/* found the last brigade? */,undetermined
6346,httpd,UNKNOWN,/* signal that we must leave */,undetermined
6347,httpd,UNKNOWN,"/* the brigade may contain transient buckets that contain
                         * data that lives only as long as the backend connection.
                         * Force a setaside so these transient buckets become heap
                         * buckets that live as long as the request.
                         */",undetermined
6348,httpd,UNKNOWN,"/* finally it is safe to clean up the brigade from the
                         * connection pool, as we have forced a setaside on all
                         * buckets.
                         */",undetermined
6349,httpd,UNKNOWN,"/* make sure we release the backend connection as soon
                         * as we know we are done, so that the backend isn't
                         * left waiting for a slow client to eventually
                         * acknowledge the data.
                         */",undetermined
6350,httpd,UNKNOWN,/* Ensure that the backend is not reused */,undetermined
6351,httpd,UNKNOWN,/* try send what we read */,undetermined
6352,httpd,UNKNOWN,/* Ack! Phbtt! Die! User aborted! */,undetermined
6353,httpd,UNKNOWN,"/* Only close backend if we haven't got all from the
                         * backend. Furthermore if *backend_ptr is NULL it is no
                         * longer safe to fiddle around with backend as it might
                         * be already in use by another thread.
                         */",undetermined
6354,httpd,UNKNOWN,/* this causes socket close below */,undetermined
6355,httpd,UNKNOWN,/* make sure we always clean up after ourselves */,undetermined
6356,httpd,UNKNOWN,"/* make sure we release the backend connection as soon
             * as we know we are done, so that the backend isn't
             * left waiting for a slow client to eventually
             * acknowledge the data.
             */",undetermined
6357,httpd,UNKNOWN,/* Pass EOS bucket down the filter chain. */,undetermined
6358,httpd,UNKNOWN,/* See define of AP_MAX_INTERIM_RESPONSES for why */,undetermined
6359,httpd,UNKNOWN,"/* If our connection with the client is to be aborted, return DONE. */",undetermined
6360,httpd,UNKNOWN,"/*
 * This handles http:// URLs, and other URLs using a remote proxy over http
 * If proxyhost is NULL, then contact the server directly, otherwise
 * go via the proxy.
 * Note that if a proxy is used, then URLs other than http: can be accessed,
 * also, if we have trouble which is clearly specific to the proxy, then
 * we return DECLINED so that we can try another proxy. (Or the direct
 * route.)
 */",undetermined
6361,httpd,UNKNOWN,"/*
     * Use a shorter-lived pool to reduce memory usage
     * and avoid a memory leak
     */",undetermined
6362,httpd,UNKNOWN,/* find the scheme */,undetermined
6363,httpd,UNKNOWN,/* scheme is lowercase */,undetermined
6364,httpd,UNKNOWN,/* is it for us? */,undetermined
6365,httpd,UNKNOWN,"/* only interested in HTTP, or FTP via proxy */",undetermined
6366,httpd,UNKNOWN,/* create space for state information */,undetermined
6367,httpd,UNKNOWN,"/*
     * In the case that we are handling a reverse proxy connection and this
     * is not a request that is coming over an already kept alive connection
     * with the client, do NOT reuse the connection to the backend, because
     * we cannot forward a failure to the client in this case as the client
     * does NOT expect this in this situation.
     * Yes, this creates a performance penalty.
     */",undetermined
6368,httpd,UNKNOWN,/* Step One: Determine Who To Connect To */,undetermined
6369,httpd,UNKNOWN,/* Step Two: Make the Connection */,undetermined
6370,httpd,UNKNOWN,/* Step Three: Create conn_rec */,undetermined
6371,httpd,UNKNOWN,"/*
             * On SSL connections set a note on the connection what CN is
             * requested, such that mod_ssl can check if it is requested to do
             * so.
             */",undetermined
6372,httpd,UNKNOWN,"/*
                 * In the case of ProxyPreserveHost on use the hostname of
                 * the request if present otherwise use the one from the
                 * backend request URI.
                 */",undetermined
6373,httpd,UNKNOWN,"/* Step Four: Send the Request
         * On the off-chance that we forced a 100-Continue as a
         * kinda HTTP ping test, allow for retries
         */",undetermined
6374,httpd,UNKNOWN,/* Step Five: Receive the Response... Fall thru to cleanup */,undetermined
6375,httpd,UNKNOWN,/* Step Six: Clean Up */,undetermined
6376,httpd,UNKNOWN,/* post_config hook: */,undetermined
6377,httpd,UNKNOWN,"/* proxy_http_post_config() will be called twice during startup.  So, don't
     * set up the static data the 1st time through. */",undetermined
6378,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6379,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6380,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6381,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6382,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6383,httpd,UNKNOWN,/* register hooks */,undetermined
6384,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6385,httpd,UNKNOWN,"/*
 * mod_proxy_scgi.c
 * Proxy backend module for the SCGI protocol
 * (http://python.ca/scgi/protocol.txt)
 *
 * André Malo (nd/perlig.de), August 2007
 */",undetermined
6386,httpd,UNKNOWN,/* just protect from typos */,undetermined
6387,httpd,UNKNOWN,/* target URL */,undetermined
6388,httpd,UNKNOWN,/* type of request */,undetermined
6389,httpd,UNKNOWN,"/*
 * We create our own bucket type, which is actually derived (c&p) from the
 * socket bucket.
 * Maybe some time this should be made more abstract (like passing an
 * interception function to read or something) and go into the ap_ or
 * even apr_ namespace.
 */",undetermined
6390,httpd,UNKNOWN,/* count for stats */,undetermined
6391,httpd,UNKNOWN,/* Change the current bucket to refer to what we read */,undetermined
6392,httpd,UNKNOWN,/* note the real buffer size */,undetermined
6393,httpd,UNKNOWN,"/*
 * Canonicalize scgi-like URLs.
 */",undetermined
6394,httpd,UNKNOWN,/* Keep slashes */,undetermined
6395,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
6396,httpd,UNKNOWN,"/*
 * Send a block of data, ensure, everything is sent
 */",undetermined
6397,httpd,UNKNOWN,/* count for stats */,undetermined
6398,httpd,UNKNOWN,"/*
 * Send SCGI header block
 */",undetermined
6399,httpd,UNKNOWN,"/*
     * The header blob basically takes the environment and concatenates
     * keys and values using 0 bytes. There are special treatments here:
     *   - GATEWAY_INTERFACE and SCGI_MAGIC are dropped
     *   - CONTENT_LENGTH is always set and must be sent as the very first
     *     variable
     *
     * Additionally it's wrapped into a so-called netstring (see SCGI spec)
     */",undetermined
6400,httpd,UNKNOWN,"/* 1 == , */",undetermined
6401,httpd,UNKNOWN,"/*
 * Send request body (if any)
 */",undetermined
6402,httpd,UNKNOWN,"/*
 * Fetch response from backend and pass back to the front
 */",undetermined
6403,httpd,UNKNOWN,/* XXX: What could we do with that return code? */,undetermined
6404,httpd,UNKNOWN,"/*
 * Internal redirect / subrequest handler, working on request_status hook
 */",undetermined
6405,httpd,UNKNOWN,"/* keep HEAD, which is passed around as M_GET, too */",undetermined
6406,httpd,UNKNOWN,/* break; */,undetermined
6407,httpd,UNKNOWN,"/*
                     * We don't touch Content-Length here. It might be
                     * borked (there's plenty of room for a race condition).
                     * Either the backend sets it or it's gonna be chunked.
                     */",undetermined
6408,httpd,UNKNOWN,/* break; */,undetermined
6409,httpd,UNKNOWN,"/*
 * This handles scgi:(dest) URLs
 */",undetermined
6410,httpd,UNKNOWN,/* Create space for state information */,undetermined
6411,httpd,UNKNOWN,/* Step One: Determine Who To Connect To */,undetermined
6412,httpd,UNKNOWN,/* Step Two: Make the Connection */,undetermined
6413,httpd,UNKNOWN,/* Step Three: Process the Request */,undetermined
6414,httpd,UNKNOWN,/* always close the socket */,undetermined
6415,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6416,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6417,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6418,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6419,httpd,UNKNOWN,/* command table */,undetermined
6420,httpd,UNKNOWN,/* register hooks */,undetermined
6421,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6422,httpd,UNKNOWN,"/*
 * Canonicalise http-like URLs.
 * scheme is the scheme for the URL
 * url is the URL starting with the first '/'
 * def_port is the default port for this scheme.
 */",undetermined
6423,httpd,UNKNOWN,/* ap_port_of_scheme() */,undetermined
6424,httpd,UNKNOWN,"/*
     * do syntactic check.
     * We break the URL into host, port, path, search
     */",undetermined
6425,httpd,UNKNOWN,"/*
     * now parse path/search args, according to rfc1738:
     * process the path. With proxy-nocanon set (by
     * mod_proxy) we use the raw, unparsed uri
     */",undetermined
6426,httpd,UNKNOWN,/* this is the raw path */,undetermined
6427,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
6428,httpd,UNKNOWN,/* Search thru the input filters and remove the reqtimeout one */,undetermined
6429,httpd,UNKNOWN,"/*
 * process the request and write the response.
 */",undetermined
6430,httpd,UNKNOWN,/* Infinite loop until error (one side closes the connection) */,undetermined
6431,httpd,UNKNOWN,"/*
 */",undetermined
6432,httpd,UNKNOWN,/* create space for state information */,undetermined
6433,httpd,UNKNOWN,/* Step One: Determine Who To Connect To */,undetermined
6434,httpd,UNKNOWN,/* Step Two: Make the Connection */,undetermined
6435,httpd,UNKNOWN,/* Step Three: Create conn_rec */,undetermined
6436,httpd,UNKNOWN,/* Step Three: Process the Request */,undetermined
6437,httpd,UNKNOWN,/* Do not close the socket */,undetermined
6438,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6439,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6440,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6441,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6442,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6443,httpd,UNKNOWN,/* register hooks */,undetermined
6444,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6445,httpd,UNKNOWN,/* Utility routines for Apache proxy */,undetermined
6446,httpd,UNKNOWN,/* for getpid() */,undetermined
6447,httpd,UNKNOWN,"/*
 * Opaque structure containing target server info when
 * using a forward proxy.
 * Up to now only used in combination with HTTP CONNECT.
 */",undetermined
6448,httpd,UNKNOWN,/* Use SSL Tunneling via HTTP CONNECT */,undetermined
6449,httpd,UNKNOWN,/* Target hostname */,undetermined
6450,httpd,UNKNOWN,/* Target port */,undetermined
6451,httpd,UNKNOWN,/* Proxy authorization */,undetermined
6452,httpd,UNKNOWN,/* Keep synced with mod_proxy.h! */,undetermined
6453,httpd,UNKNOWN,/* Global balancer counter */,undetermined
6454,httpd,UNKNOWN,"/* Assume the typical case is smaller copying into bigger
       so we have a fast return */",undetermined
6455,httpd,UNKNOWN,/* XXX: APR_ENOSPACE would be better */,undetermined
6456,httpd,UNKNOWN,/* already called in the knowledge that the characters are hex digits */,undetermined
6457,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
6458,httpd,UNKNOWN,"/*
     * we assume that the hex value refers to an ASCII character
     * so convert to EBCDIC so that it makes sense locally;
     *
     * example:
     *
     * client specifies %20 in URL to refer to a space char;
     * at this point we're called with EBCDIC ""20""; after turning
     * EBCDIC ""20"" into binary 0x20, we then need to assume that 0x20
     * represents an ASCII char and convert 0x20 to EBCDIC, yielding
     * 0x40
     */",undetermined
6459,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
6460,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
6461,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
6462,httpd,UNKNOWN,"/*
 * canonicalise a URL-encoded string
 */",undetermined
6463,httpd,UNKNOWN,"/*
 * Convert a URL-encoded string to canonical form.
 * It decodes characters which need not be encoded,
 * and encodes those which must be encoded, and does not touch
 * those which must not be touched.
 */",undetermined
6464,httpd,UNKNOWN,/* characters which should not be encoded */,undetermined
6465,httpd,UNKNOWN,/* characters which much not be en/de-coded */,undetermined
6466,httpd,UNKNOWN,"/*
 * N.B. in addition to :@&=, this allows ';' in an http path
 * and '?' in an ftp path -- this may be revised
 *
 * Also, it makes a '+' character in a search string reserved, as
 * it may be form-encoded. (Although RFC 1738 doesn't allow this -
 * it only permits ; / ? : @ = & as reserved chars.)
 */",undetermined
6467,httpd,UNKNOWN,/* if (t == enc_parm) */,undetermined
6468,httpd,UNKNOWN,/* always handle '/' first */,undetermined
6469,httpd,UNKNOWN,"/*
 * decode it if not already done. do not decode reverse proxied URLs
 * unless specifically forced
 */",undetermined
6470,httpd,UNKNOWN,/* keep it encoded */,undetermined
6471,httpd,UNKNOWN,"/* recode it, if necessary */",undetermined
6472,httpd,UNKNOWN,"/*
 * Parses network-location.
 *    urlp           on input the URL; on output the path, after the leading /
 *    user           NULL if no user/password permitted
 *    password       holder for password
 *    host           holder for host
 *    port           port number; only set if one is supplied.
 *
 * Returns an error string.
 */",undetermined
6473,httpd,UNKNOWN,/* skip seperating '/' */,undetermined
6474,httpd,UNKNOWN,/* find _last_ '@' since it might occur in user/password part */,undetermined
6475,httpd,UNKNOWN,/* find password */,undetermined
6476,httpd,UNKNOWN,"/*
     * Parse the host string to separate host portion from optional port.
     * Perform range checking on port.
     */",undetermined
6477,httpd,UNKNOWN,/* only update caller's port if port was specified */,undetermined
6478,httpd,UNKNOWN,/* DNS names are case-insensitive */,undetermined
6479,httpd,UNKNOWN,"/* Allow ""error-notes"" string to be printed by ap_send_error_response() */",undetermined
6480,httpd,UNKNOWN,"/* Set url to the first char after ""scheme://"" */",undetermined
6481,httpd,UNKNOWN,"/* make it point to ""//"", which is what proxy_canon_netloc expects */",undetermined
6482,httpd,UNKNOWN,"/* ought to return the port, too */",undetermined
6483,httpd,UNKNOWN,/* Return TRUE if addr represents an IP address (or an IP network address) */,undetermined
6484,httpd,UNKNOWN,"/*
     * if the address is given with an explicit netmask, use that
     * Due to a deficiency in apr_inet_addr(), it is impossible to parse
     * ""partial"" addresses (with less than 4 quads) correctly, i.e.
     * 192.168.123 is parsed as 192.168.0.123, which is not what I want.
     * I therefore have to parse the IP address manually:
     * if (proxy_readmask(This->name, &This->addr.s_addr, &This->mask.s_addr) == 0)
     * addr and mask were set by proxy_readmask()
     * return 1;
     */",undetermined
6485,httpd,UNKNOWN,"/*
     * Parse IP addr manually, optionally allowing
     * abbreviated net addresses like 192.168.
     */",undetermined
6486,httpd,UNKNOWN,/* Iterate over up to 4 (dotted) quads. */,undetermined
6487,httpd,UNKNOWN,/* netmask starts here. */,undetermined
6488,httpd,UNKNOWN,/* no digit at start of quad */,undetermined
6489,httpd,UNKNOWN,"/* expected a digit, found something else */",undetermined
6490,httpd,UNKNOWN,/* invalid octet */,undetermined
6491,httpd,UNKNOWN,"/* after the 4th quad, a dot would be illegal */",undetermined
6492,httpd,UNKNOWN,/* net mask follows: */,undetermined
6493,httpd,UNKNOWN,"/* expected a digit, found something else */",undetermined
6494,httpd,UNKNOWN,/* netmask must be between 0 and 32 */,undetermined
6495,httpd,UNKNOWN,"/*
         * Determine (i.e., ""guess"") netmask by counting the
         * number of trailing .0's; reduce #quads appropriately
         * (so that 192.168.0.0 is equivalent to 192.168.)
         */",undetermined
6496,httpd,UNKNOWN,"/* ""IP Address should be given in dotted-quad form, optionally followed by a netmask (e.g., 192.168.111.0/24)""; */",undetermined
6497,httpd,UNKNOWN,/* every zero-byte counts as 8 zero-bits */,undetermined
6498,httpd,UNKNOWN,/* no warning for fully qualified IP address */,undetermined
6499,httpd,UNKNOWN,/* okay iff we've parsed the whole string */,undetermined
6500,httpd,UNKNOWN,/* Return TRUE if addr represents an IP address (or an IP network address) */,undetermined
6501,httpd,UNKNOWN,/* oops! */,undetermined
6502,httpd,UNKNOWN,"/* ap_proxy_is_ipaddr() already confirmed that we have
             * a valid octet in ip_addr[i]
             */",undetermined
6503,httpd,UNKNOWN,/* Try to deal with multiple IP addr's for a host */,undetermined
6504,httpd,UNKNOWN,/* FIXME: This needs to be able to deal with IPv6 */,undetermined
6505,httpd,UNKNOWN,/* Return TRUE if addr represents a domain name */,undetermined
6506,httpd,UNKNOWN,/* Domain name must start with a '.' */,undetermined
6507,httpd,UNKNOWN,"/* rfc1035 says DNS names must consist of ""[-a-zA-Z0-9]"" and '.' */",undetermined
6508,httpd,UNKNOWN,/* @@@@ handle optional port */,undetermined
6509,httpd,UNKNOWN,/* Strip trailing dots */,undetermined
6510,httpd,UNKNOWN,"/* Return TRUE if host ""host"" is in domain ""domain"" */",undetermined
6511,httpd,UNKNOWN,/* some error was logged already */,undetermined
6512,httpd,UNKNOWN,/* @@@ do this within the setup? */,undetermined
6513,httpd,UNKNOWN,/* Ignore trailing dots in domain comparison: */,undetermined
6514,httpd,UNKNOWN,/* Return TRUE if host represents a host name */,undetermined
6515,httpd,UNKNOWN,/* Host names must not start with a '.' */,undetermined
6516,httpd,UNKNOWN,"/* rfc1035 says DNS names must consist of ""[-a-zA-Z0-9]"" and '.' */",undetermined
6517,httpd,UNKNOWN,/* Strip trailing dots */,undetermined
6518,httpd,UNKNOWN,"/* Return TRUE if host ""host"" is equal to host2 ""host2"" */",undetermined
6519,httpd,UNKNOWN,/* oops! */,undetermined
6520,httpd,UNKNOWN,/* Try to deal with multiple IP addr's for a host */,undetermined
6521,httpd,UNKNOWN,/* Ignore trailing dots in host2 comparison: */,undetermined
6522,httpd,UNKNOWN,/* Return TRUE if addr is to be matched as a word */,undetermined
6523,httpd,UNKNOWN,"/* Return TRUE if string ""str2"" occurs literally in ""str1"" */",undetermined
6524,httpd,UNKNOWN,/* Backwards-compatible interface. */,undetermined
6525,httpd,UNKNOWN,/* XXX FIXME: conf->noproxies->elts is part of an opaque structure */,undetermined
6526,httpd,UNKNOWN,"/* No IP address checks if no IP address was passed in,
         * i.e. the forward address proxy case, where this server does
         * not resolve the hostname.  */",undetermined
6527,httpd,UNKNOWN,/* set up the minimal filter set */,undetermined
6528,httpd,UNKNOWN,"/*
     * XXX FIXME: Make sure this handled the ambiguous case of the :<PORT>
     * after the hostname
     * XXX FIXME: Ensure the /uri component is a case sensitive match
     */",undetermined
6529,httpd,UNKNOWN,"/*
         * First check if mapping against a balancer and see
         * if we have such a entity. If so, then we need to
         * find the particulars of the actual worker which may
         * or may not be the right one... basically, we need
         * to find which member actually handled this request.
         */",undetermined
6530,httpd,UNKNOWN,"/* The balancer comparison is a bit trickier.  Given the context
             *   BalancerMember balancer://alias http://example.com/foo
             *   ProxyPassReverse /bash balancer://alias/bar
             * translate url http://example.com/foo/bar/that to /bash/that
             */",undetermined
6531,httpd,UNKNOWN,/* urlpart (l3) assuredly starts with its own '/' */,undetermined
6532,httpd,UNKNOWN,"/* edge case where fake is just ""/""... avoid double slash */",undetermined
6533,httpd,UNKNOWN,"/*
 * Cookies are a bit trickier to match: we've got two substrings to worry
 * about, and we can't just find them with strstr 'cos of case.  Regexp
 * matching would be an easy fix, but for better consistency with all the
 * other matches we'll refrain and use apr_strmatch to find path=/domain=
 * and stick to plain strings for the config values.
 */",undetermined
6534,httpd,UNKNOWN,"/*
    * Find the match and replacement, but save replacing until we've done
    * both path and domain so we know the new strlen
    */",undetermined
6535,httpd,UNKNOWN,/* no change */,undetermined
6536,httpd,UNKNOWN,"/*
 * BALANCER related...
 */",undetermined
6537,httpd,UNKNOWN,"/*
 * verifies that the balancer name conforms to standards.
 */",undetermined
6538,httpd,UNKNOWN,/* remove path from uri */,undetermined
6539,httpd,UNKNOWN,/* We should never get here without a valid BALANCER_PREFIX... */,undetermined
6540,httpd,UNKNOWN,/* remove path from uri */,undetermined
6541,httpd,UNKNOWN,"/*
     * NOTE: The default method is byrequests - if it doesn't
     * exist, that's OK at this time. We check when we share and sync
     */",undetermined
6542,httpd,UNKNOWN,"/*
     * We do the below for verification. The real sname will be
     * done post_config
     */",undetermined
6543,httpd,UNKNOWN,/* impossible valid input */,undetermined
6544,httpd,UNKNOWN,"/*
 * Create an already defined balancer and free up memory.
 */",undetermined
6545,httpd,UNKNOWN,/* the below should always succeed */,undetermined
6546,httpd,UNKNOWN,"/* Retrieve a UUID and store the nonce for the lifetime of
         * the process.
         */",undetermined
6547,httpd,UNKNOWN,"/*
     * for each balancer we need to init the global
     * mutex and then attach to the shared worker shm
     */",undetermined
6548,httpd,UNKNOWN,/* Re-open the mutex for the child. */,undetermined
6549,httpd,UNKNOWN,/* now attach */,undetermined
6550,httpd,UNKNOWN,"/*
 * CONNECTION related...
 */",undetermined
6551,httpd,UNKNOWN,"/*
     * Create a connection pool's subpool.
     * This pool is used for connection recycling.
     * Once the worker is added it is never removed but
     * it can be disabled.
     */",undetermined
6552,httpd,UNKNOWN,"/*
     * Alloc from the same pool as worker.
     * proxy_conn_pool is permanently attached to the worker.
     */",undetermined
6553,httpd,UNKNOWN,"/*
     * If the connection pool is NULL the worker
     * cleanup has been run. Just return.
     */",undetermined
6554,httpd,UNKNOWN,/* Sanity check: Did we already return the pooled connection? */,undetermined
6555,httpd,UNKNOWN,/* determine if the connection need to be closed */,undetermined
6556,httpd,UNKNOWN,/* Always return the SUCCESS */,undetermined
6557,httpd,UNKNOWN,"/*
     * If we have an existing SSL connection it might be possible that the
     * server sent some SSL message we have not read so far (e.g. an SSL
     * shutdown message if the server closed the keepalive connection while
     * the connection was held unused in our pool).
     * So ensure that if present (=> APR_NONBLOCK_READ) it is read and
     * processed. We don't expect any data to be in the returned brigade.
     */",undetermined
6558,httpd,UNKNOWN,/* reslist constructor */,undetermined
6559,httpd,UNKNOWN,"/*
     * Create the subpool for each connection
     * This keeps the memory consumption constant
     * when disconnecting from backend.
     */",undetermined
6560,httpd,UNKNOWN,"/*
     * Create another subpool that manages the data for the
     * socket and the connection member of the proxy_conn_rec struct as we
     * destroy this data more frequently than other data in the proxy_conn_rec
     * struct like hostname and addr (at least in the case where we have
     * keepalive connections that timed out).
     */",undetermined
6561,httpd,UNKNOWN,/* reslist destructor */,undetermined
6562,httpd,UNKNOWN,/* Destroy the pool only if not called from reslist_destroy */,undetermined
6563,httpd,UNKNOWN,"/*
 * WORKER related...
 */",undetermined
6564,httpd,UNKNOWN,"/*
     * We need to find the start of the path and
     * therefore we know the length of the scheme://hostname/
     * part to we can force-lowercase everything up to
     * the start of the path.
     */",undetermined
6565,httpd,UNKNOWN,"/*
     * Do a ""longest match"" on the worker name to find the worker that
     * fits best to the URL, but keep in mind that we must have at least
     * a minimum matching of length min_match such that
     * scheme://hostname[:port] matches between worker and url.
     */",undetermined
6566,httpd,UNKNOWN,"/*
 * To create a worker from scratch first we define the
 * specifics of the worker; this is all local data.
 * We then allocate space for it if data needs to be
 * shared. This allows for dynamic addition during
 * config and runtime.
 */",undetermined
6567,httpd,UNKNOWN,"/*
     * Workers can be associated w/ balancers or on their
     * own; ie: the generic reverse-proxy or a worker
     * in a simple ProxyPass statement. eg:
     *
     *      ProxyPass / http://www.example.com
     *
     * in which case the worker goes in the conf slot.
     */",undetermined
6568,httpd,UNKNOWN,/* recall that we get a ptr to the ptr here */,undetermined
6569,httpd,UNKNOWN,/* right to left baby */,undetermined
6570,httpd,UNKNOWN,"/* we've updated the list of workers associated with
         * this balancer *locally* */",undetermined
6571,httpd,UNKNOWN,/* we need to allocate space here */,undetermined
6572,httpd,UNKNOWN,"/* right here we just want to tuck away the worker info.
     * if called during config, we don't have shm setup yet,
     * so just note the info for later. */",undetermined
6573,httpd,UNKNOWN,/* will be freed ap_proxy_share_worker */,undetermined
6574,httpd,UNKNOWN,"/*
 * Create an already defined worker and free up memory
 */",undetermined
6575,httpd,UNKNOWN,/* was malloced in ap_proxy_define_worker */,undetermined
6576,httpd,UNKNOWN,/* The worker is already initialized */,undetermined
6577,httpd,UNKNOWN,/* Set default parameters */,undetermined
6578,httpd,UNKNOWN,/* By default address is reusable unless DisableReuse is set */,undetermined
6579,httpd,UNKNOWN,/* Set hard max to no more then mpm_threads */,undetermined
6580,httpd,UNKNOWN,/* Set min to be lower then smax */,undetermined
6581,httpd,UNKNOWN,/* This will supress the apr_reslist creation */,undetermined
6582,httpd,UNKNOWN,/* What if local is init'ed and shm isn't?? Even possible? */,undetermined
6583,httpd,UNKNOWN,/* Now init local worker data */,undetermined
6584,httpd,UNKNOWN,/* Set the acquire timeout */,undetermined
6585,httpd,UNKNOWN,"/*
                 * The forward worker does not keep connections alive, so
                 * ensure that mod_proxy_http does the correct thing
                 * regarding the Connection header in the request.
                 */",undetermined
6586,httpd,UNKNOWN,"/*
                 * The reverse worker does not keep connections alive, so
                 * ensure that mod_proxy_http does the correct thing
                 * regarding the Connection header in the request.
                 */",undetermined
6587,httpd,UNKNOWN,/* All the workers are busy */,undetermined
6588,httpd,UNKNOWN,/* no post_request handler available */,undetermined
6589,httpd,UNKNOWN,/* TODO: recycle direct worker */,undetermined
6590,httpd,UNKNOWN,/* DEPRECATED */,undetermined
6591,httpd,UNKNOWN,"/*
             * this could be an IPv6 address from the DNS but the
             * local machine won't give us an IPv6 socket; hopefully the
             * DNS returned an additional address to try
             */",undetermined
6592,httpd,UNKNOWN,/* Set a timeout on the socket */,undetermined
6593,httpd,UNKNOWN,/* make the connection out of the socket */,undetermined
6594,httpd,UNKNOWN,"/* if an error occurred, loop round and try again */",undetermined
6595,httpd,UNKNOWN,/* Retry the worker */,undetermined
6596,httpd,UNKNOWN,/* create the new connection if the previous was destroyed */,undetermined
6597,httpd,UNKNOWN,"/*
     * Break up the URL to determine the host to connect to
     */",undetermined
6598,httpd,UNKNOWN,"/* we break the URL into host, port, uri */",undetermined
6599,httpd,UNKNOWN,"/*
     * allocate these out of the specified connection pool
     * The scheme handler decides if this is permanent or
     * short living pool.
     */",undetermined
6600,httpd,UNKNOWN,"/* are we connecting directly, or via a proxy? */",undetermined
6601,httpd,UNKNOWN,"/*
     * Figure out if our passed in proxy_conn_rec has a usable
     * address cached.
     *
     * TODO: Handle this much better... 
     *
     * XXX: If generic workers are ever address-reusable, we need 
     *      to check host and port on the conn and be careful about
     *      spilling the cached addr from the worker.
     */",undetermined
6602,httpd,UNKNOWN,"/*
             * If we have a forward proxy and the protocol is HTTPS,
             * then we need to prepend a HTTP CONNECT request before
             * sending our actual HTTPS requests.
             * Save our real backend data for using it later during HTTP CONNECT.
             */",undetermined
6603,httpd,UNKNOWN,"/* Do we want to pass Proxy-Authorization along?
                 * If we haven't used it, then YES
                 * If we have used it then MAYBE: RFC2616 says we MAY propagate it.
                 * So let's make it configurable by env.
                 * The logic here is the same used in mod_proxy_http.
                 */",undetermined
6604,httpd,UNKNOWN,/* we haven't yet authenticated */,undetermined
6605,httpd,UNKNOWN,"/*
         * Worker can have the single constant backend adress.
         * The single DNS lookup is used once per worker.
         * If dynamic change is needed then set the addr to NULL
         * inside dynamic config to force the lookup.
         */",undetermined
6606,httpd,UNKNOWN,/* Close a possible existing socket if we are told to do so */,undetermined
6607,httpd,UNKNOWN,/* Get the server port for the Via headers */,undetermined
6608,httpd,UNKNOWN,/* check if ProxyBlock directive on this host */,undetermined
6609,httpd,UNKNOWN,"/* The socket might be closed in which case
         * the poll will return POLLIN.
         * If there is no data available the socket
         * is closed.
         */",undetermined
6610,httpd,UNKNOWN,/* save timeout */,undetermined
6611,httpd,UNKNOWN,/* set no timeout */,undetermined
6612,httpd,UNKNOWN,/* put back old timeout */,undetermined
6613,httpd,UNKNOWN,/* USE_ALTERNATE_IS_CONNECTED */,undetermined
6614,httpd,UNKNOWN,"/*
 * Send a HTTP CONNECT request to a forward proxy.
 * The proxy is given by ""backend"", the target server
 * is contained in the ""forward"" member of ""backend"".
 */",undetermined
6615,httpd,UNKNOWN,/* Create the CONNECT request */,undetermined
6616,httpd,UNKNOWN,/* Add proxy authorization from the initial request if necessary */,undetermined
6617,httpd,UNKNOWN,/* Set a reasonable agent and send everything */,undetermined
6618,httpd,UNKNOWN,/* Receive the whole CONNECT response */,undetermined
6619,httpd,UNKNOWN,/* Read until we find the end of the headers or run out of buffer */,undetermined
6620,httpd,UNKNOWN,/* Drain what's left */,undetermined
6621,httpd,UNKNOWN,/* Check for HTTP_OK response status */,undetermined
6622,httpd,UNKNOWN,/* Only scan for three character status code */,undetermined
6623,httpd,UNKNOWN,/* Extract the returned code */,undetermined
6624,httpd,UNKNOWN,/* the local address to use for the outgoing connection */,undetermined
6625,httpd,UNKNOWN,"/*
             * this could be an IPv6 address from the DNS but the
             * local machine won't give us an IPv6 socket; hopefully the
             * DNS returned an additional address to try
             */",undetermined
6626,httpd,UNKNOWN,/* Set a timeout for connecting to the backend on the socket */,undetermined
6627,httpd,UNKNOWN,/* Set a keepalive option */,undetermined
6628,httpd,UNKNOWN,/* make the connection out of the socket */,undetermined
6629,httpd,UNKNOWN,"/* if an error occurred, loop round and try again */",undetermined
6630,httpd,UNKNOWN,/* Set a timeout on the socket */,undetermined
6631,httpd,UNKNOWN,"/*
             * For HTTP CONNECT we need to prepend CONNECT request before
             * sending our actual HTTPS requests.
             */",undetermined
6632,httpd,UNKNOWN,"/* If an error occurred, loop round and try again */",undetermined
6633,httpd,UNKNOWN,"/*
     * Put the entire worker to error state if
     * the PROXY_WORKER_IGNORE_ERRORS flag is not set.
     * Altrough some connections may be alive
     * no further connections to the worker could be made
     */",undetermined
6634,httpd,UNKNOWN,"/*
             * A worker came back. So here is where we need to
             * either reset all params to initial conditions or
             * apply some sort of aging
             */",undetermined
6635,httpd,UNKNOWN,"/*
     * The socket is now open, create a new backend server connection
     */",undetermined
6636,httpd,UNKNOWN,"/*
         * the peer reset the connection already; ap_run_create_connection()
         * closed the socket
         */",undetermined
6637,httpd,UNKNOWN,/* XXX: Will be closed when proxy_conn is closed */,undetermined
6638,httpd,UNKNOWN,/* For ssl connection to backend */,undetermined
6639,httpd,UNKNOWN,/* TODO: See if this will break FTP */,undetermined
6640,httpd,UNKNOWN,"/*
     * save the timeout of the socket because core_pre_connection
     * will set it to base_server->timeout
     * (core TimeOut directive).
     */",undetermined
6641,httpd,UNKNOWN,/* set up the connection filters */,undetermined
6642,httpd,UNKNOWN,"/*
     * Since we can't resize the scoreboard when reconfiguring, we
     * have to impose a limit on the number of workers, we are
     * able to reconfigure to.
     */",undetermined
6643,httpd,UNKNOWN,"/*
     * If this is a subrequest, then prevent also caching of the main
     * request.
     */",undetermined
6644,httpd,UNKNOWN,"/*
 * Provide a string hashing function for the proxy.
 * We offer 2 methods: one is the APR model but we
 * also provide our own, based on either FNV or SDBM.
 * The reason is in case we want to use both to ensure no
 * collisions.
 */",undetermined
6645,httpd,UNKNOWN,/* FNV model */,undetermined
6646,httpd,UNKNOWN,/* method == PROXY_HASHFUNC_DEFAULT */,undetermined
6647,httpd,UNKNOWN,/* SDBM model */,undetermined
6648,httpd,UNKNOWN,/* balancer sync */,undetermined
6649,httpd,UNKNOWN,/* worker sync */,undetermined
6650,httpd,UNKNOWN,"/*
     * Look thru the list of workers in shm
     * and see which one(s) we are lacking...
     * again, the cast to unsigned int is safe
     * since our upper limit is always max_workers
     * which is int.
     */",undetermined
6651,httpd,UNKNOWN,"/* account for possible ""holes"" in the slotmem
         * (eg: slots 0-2 are used, but 3 isn't, but 4-5 is)
         */",undetermined
6652,httpd,UNKNOWN,"/**
 * Remove all headers referred to by the Connection header.
 */",undetermined
6653,httpd,UNKNOWN,/* fast path - no memory allocated for one header */,undetermined
6654,httpd,UNKNOWN,/* two or more headers */,undetermined
6655,httpd,UNKNOWN,"/*
     * To be compliant, we only use 100-Continue for requests with bodies.
     * We also make sure we won't be talking HTTP/1.0 as well.
     */",undetermined
6656,httpd,UNKNOWN,"/*
         * According to RFC 2616 8.2.3 we are not allowed to forward an
         * Expect: 100-continue to an HTTP/1.0 server. Instead we MUST return
         * a HTTP_EXPECTATION_FAILED
         */",undetermined
6657,httpd,UNKNOWN,/* if literal IPv6 address */,undetermined
6658,httpd,UNKNOWN,"/* don't want to use r->hostname, as the incoming header might have a
         * port attached
         */",undetermined
6659,httpd,UNKNOWN,/* handle Via */,undetermined
6660,httpd,UNKNOWN,/* Block all outgoing Via: headers */,undetermined
6661,httpd,UNKNOWN,"/* If USE_CANONICAL_NAME_OFF was configured for the proxy virtual host,
         * then the server name returned by ap_get_server_name() is the
         * origin server name (which does make too much sense with Via: headers)
         * so we use the proxy vhost's name instead.
         */",undetermined
6662,httpd,UNKNOWN,"/* Create a ""Via:"" request header entry and merge it */",undetermined
6663,httpd,UNKNOWN,/* Generate outgoing Via: header with/without server comment: */,undetermined
6664,httpd,UNKNOWN,"/* Use HTTP/1.1 100-Continue as quick ""HTTP ping"" test
     * to backend
     */",undetermined
6665,httpd,UNKNOWN,"/* X-Forwarded-*: handling
     *
     * XXX Privacy Note:
     * -----------------
     *
     * These request headers are only really useful when the mod_proxy
     * is used in a reverse proxy configuration, so that useful info
     * about the client can be passed through the reverse proxy and on
     * to the backend server, which may require the information to
     * function properly.
     *
     * In a forward proxy situation, these options are a potential
     * privacy violation, as information about clients behind the proxy
     * are revealed to arbitrary servers out there on the internet.
     *
     * The HTTP/1.1 Via: header is designed for passing client
     * information through proxies to a server, and should be used in
     * a forward proxy configuation instead of X-Forwarded-*. See the
     * ProxyVia option for details.
     */",undetermined
6666,httpd,UNKNOWN,"/* Add X-Forwarded-For: so that the upstream has a chance to
             * determine, where the original request came from.
             */",undetermined
6667,httpd,UNKNOWN,"/* Add X-Forwarded-Host: so that upstream knows what the
             * original request hostname was.
             */",undetermined
6668,httpd,UNKNOWN,"/* Add X-Forwarded-Server: so that upstream knows what the
             * name of this proxy server is (if there are more than one)
             * XXX: This duplicates Via: - do we strictly need it?
             */",undetermined
6669,httpd,UNKNOWN,"/*
     * Make a copy of the headers_in table before clearing the connection
     * headers as we need the connection headers later in the http output
     * filter to prepare the correct response headers.
     *
     * Note: We need to take r->pool for apr_table_copy as the key / value
     * pairs in r->headers_in have been created out of r->pool and
     * p might be (and actually is) a longer living pool.
     * This would trigger the bad pool ancestry abort in apr_table_copy if
     * apr is compiled with APR_POOL_DEBUG.
     */",undetermined
6670,httpd,UNKNOWN,/* send request headers */,undetermined
6671,httpd,UNKNOWN,/* Already sent */,undetermined
6672,httpd,UNKNOWN,"/* Clear out hop-by-hop request headers not to send
             * RFC2616 13.5.1 says we should strip these headers
             */",undetermined
6673,httpd,UNKNOWN,"/* Do we want to strip Proxy-Authorization ?
         * If we haven't used it, then NO
         * If we have used it then MAYBE: RFC2616 says we MAY propagate it.
         * So let's make it configurable by env.
         */",undetermined
6674,httpd,UNKNOWN,/* we've authenticated */,undetermined
6675,httpd,UNKNOWN,"/* Skip Transfer-Encoding and Content-Length for now.
         */",undetermined
6676,httpd,UNKNOWN,"/* for sub-requests, ignore freshness/expiry headers */",undetermined
6677,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6678,httpd,UNKNOWN,"/**
 * @file  proxy_util.h
 * @brief Internal interfaces private to mod_proxy.
 *
 * @defgroup MOD_PROXY_PRIVATE Private
 * @ingroup MOD_PROXY
 * @{
 */",undetermined
6679,httpd,UNKNOWN,"/**
 * Register optional functions declared within proxy_util.c.
 */",undetermined
6680,httpd,UNKNOWN,/** @} */,undetermined
6681,httpd,UNKNOWN,/* PROXY_UTIL_H_ */,undetermined
6682,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6683,httpd,UNKNOWN,/* Round Robin lbmethod EXAMPLE module for Apache proxy */,undetermined
6684,httpd,UNKNOWN,"/* NOTE: This is designed simply to provide some info on how to create
         extra lbmethods via sub-modules... This code is ugly
         and needs work to actually do round-robin ""right""
         but that is left as an exercise for the reader */",undetermined
6685,httpd,UNKNOWN,/* for getpid() */,undetermined
6686,httpd,UNKNOWN,"/*
 */",undetermined
6687,httpd,UNKNOWN,/* The index of the candidate last chosen is stored in ctx->index */,undetermined
6688,httpd,UNKNOWN,/* UGLY */,undetermined
6689,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6690,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6691,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6692,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6693,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6694,httpd,UNKNOWN,/* register hooks */,undetermined
6695,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6696,httpd,UNKNOWN,/* can only happen if mod_proxy isn't loaded */,undetermined
6697,httpd,UNKNOWN,/* First try to see if we have available candidate */,undetermined
6698,httpd,UNKNOWN,/* first time through */,undetermined
6699,httpd,UNKNOWN,"/* If the worker is in error state run
                 * retry on that worker. It will be marked as
                 * operational if the retry timeout is elapsed.
                 * The worker might still be unusable, but we try
                 * anyway.
                 */",undetermined
6700,httpd,UNKNOWN,"/* Take into calculation only the workers that are
                 * not in error state or not disabled.
                 */",undetermined
6701,httpd,UNKNOWN,/* assumed to be mutex protected by caller */,undetermined
6702,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6703,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6704,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6705,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6706,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6707,httpd,UNKNOWN,/* register hooks */,undetermined
6708,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6709,httpd,UNKNOWN,"/*
 * The idea behind the find_best_byrequests scheduler is the following:
 *
 * lbfactor is ""how much we expect this worker to work"", or ""the worker's
 * normalized work quota"".
 *
 * lbstatus is ""how urgent this worker has to work to fulfill its quota
 * of work"".
 *
 * We distribute each worker's work quota to the worker, and then look
 * which of them needs to work most urgently (biggest lbstatus).  This
 * worker is then selected for work, and its lbstatus reduced by the
 * total work quota we distributed to all workers.  Thus the sum of all
 * lbstatus does not change.(*)
 *
 * If some workers are disabled, the others will
 * still be scheduled correctly.
 *
 * If a balancer is configured as follows:
 *
 * worker     a    b    c    d
 * lbfactor  25   25   25   25
 *
 * And b gets disabled, the following schedule is produced:
 *
 *    a c d a c d a c d ...
 *
 * Note that the above lbfactor setting is the *exact* same as:
 *
 * worker     a    b    c    d
 * lbfactor   1    1    1    1
 *
 * Asymmetric configurations work as one would expect. For
 * example:
 *
 * worker     a    b    c    d
 * lbfactor   1    1    1    2
 *
 * would have a, b and c all handling about the same
 * amount of load with d handling twice what a or b
 * or c handles individually. So we could see:
 *
 *   b a d c d a c d b d ...
 *
 */",undetermined
6710,httpd,UNKNOWN,/* can only happen if mod_proxy isn't loaded */,undetermined
6711,httpd,UNKNOWN,/* First try to see if we have available candidate */,undetermined
6712,httpd,UNKNOWN,/* first time through */,undetermined
6713,httpd,UNKNOWN,"/* If the worker is in error state run
                 * retry on that worker. It will be marked as
                 * operational if the retry timeout is elapsed.
                 * The worker might still be unusable, but we try
                 * anyway.
                 */",undetermined
6714,httpd,UNKNOWN,"/* Take into calculation only the workers that are
                 * not in error state or not disabled.
                 */",undetermined
6715,httpd,UNKNOWN,/* assumed to be mutex protected by caller */,undetermined
6716,httpd,UNKNOWN,"/*
 * How to add additional lbmethods:
 *   1. Create func which determines ""best"" candidate worker
 *      (eg: find_best_bytraffic, above)
 *   2. Register it as a provider.
 */",undetermined
6717,httpd,UNKNOWN,"/* Only the mpm_winnt has child init hook handler.
     * make sure that we are called after the mpm
     * initializes and after the mod_proxy
     */",undetermined
6718,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6719,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6720,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6721,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6722,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6723,httpd,UNKNOWN,/* register hooks */,undetermined
6724,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6725,httpd,UNKNOWN,"/*
 * The idea behind the find_best_bytraffic scheduler is the following:
 *
 * We know the amount of traffic (bytes in and out) handled by each
 * worker. We normalize that traffic by each workers' weight. So assuming
 * a setup as below:
 *
 * worker     a    b    c
 * lbfactor   1    1    3
 *
 * the scheduler will allow worker c to handle 3 times the
 * traffic of a and b. If each request/response results in the
 * same amount of traffic, then c would be accessed 3 times as
 * often as a or b. If, for example, a handled a request that
 * resulted in a large i/o bytecount, then b and c would be
 * chosen more often, to even things out.
 */",undetermined
6726,httpd,UNKNOWN,/* can only happen if mod_proxy isn't loaded */,undetermined
6727,httpd,UNKNOWN,/* First try to see if we have available candidate */,undetermined
6728,httpd,UNKNOWN,/* first time through */,undetermined
6729,httpd,UNKNOWN,"/* If the worker is in error state run
                 * retry on that worker. It will be marked as
                 * operational if the retry timeout is elapsed.
                 * The worker might still be unusable, but we try
                 * anyway.
                 */",undetermined
6730,httpd,UNKNOWN,"/* Take into calculation only the workers that are
                 * not in error state or not disabled.
                 */",undetermined
6731,httpd,UNKNOWN,/* assumed to be mutex protected by caller */,undetermined
6732,httpd,UNKNOWN,"/* Only the mpm_winnt has child init hook handler.
     * make sure that we are called after the mpm
     * initializes and after the mod_proxy
     */",undetermined
6733,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6734,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6735,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6736,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6737,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6738,httpd,UNKNOWN,/* register hooks */,undetermined
6739,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6740,httpd,UNKNOWN,"/* If we haven't seen a heartbeat in the last N seconds, don't count this IP
 * as allive.
 */",undetermined
6741,httpd,UNKNOWN,"/*
 * configuration structure
 * path: path of the file where the heartbeat information is stored.
 */",undetermined
6742,httpd,UNKNOWN,/* Split the string in two */,undetermined
6743,httpd,UNKNOWN,/* Skip passed the = */,undetermined
6744,httpd,UNKNOWN,"/*
         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
         ""Found query arg: %s = %s"", key, value);
         */",undetermined
6745,httpd,UNKNOWN,/* comment */,undetermined
6746,httpd,UNKNOWN,/* line format: <IP> <query_string>\n */,undetermined
6747,httpd,UNKNOWN,"/* Server has zero threads active, but lots of them ready,
                 * it likely just started up, so lets /4 the number ready,
                 * to prevent us from completely flooding it with all new
                 * requests.
                 */",undetermined
6748,httpd,UNKNOWN,/* can only happen if mod_proxy isn't loaded */,undetermined
6749,httpd,UNKNOWN,/* do nothing on first call */,undetermined
6750,httpd,UNKNOWN,/* Try to use a slotmem created by mod_heartmonitor */,undetermined
6751,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
6752,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
6753,httpd,UNKNOWN,/* create per-server config structure */,undetermined
6754,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
6755,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6756,httpd,UNKNOWN,/* register hooks */,undetermined
6757,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6758,httpd,UNKNOWN,"/*
 * mod_cern_meta.c
 * version 0.1.0
 * status beta
 *
 * Andrew Wilson <Andrew.Wilson@cm.cf.ac.uk> 25.Jan.96
 *
 * *** IMPORTANT ***
 * This version of mod_cern_meta.c controls Meta File behaviour on a
 * per-directory basis.  Previous versions of the module defined behaviour
 * on a per-server basis.  The upshot is that you'll need to revisit your
 * configuration files in order to make use of the new module.
 * ***
 *
 * Emulate the CERN HTTPD Meta file semantics.  Meta files are HTTP
 * headers that can be output in addition to the normal range of
 * headers for each file accessed.  They appear rather like the Apache
 * .asis files, and are able to provide a crude way of influencing
 * the Expires: header, as well as providing other curiosities.
 * There are many ways to manage meta information, this one was
 * chosen because there is already a large number of CERN users
 * who can exploit this module.  It should be noted that there are probably
 * more sensitive ways of managing the Expires: header specifically.
 *
 * The module obeys the following directives, which can appear
 * in the server's .conf files and in .htaccess files.
 *
 *  MetaFiles <on|off>
 *
 *    turns on|off meta file processing for any directory.
 *    Default value is off
 *
 *        # turn on MetaFiles in this directory
 *        MetaFiles on
 *
 *  MetaDir <directory name>
 *
 *    specifies the name of the directory in which Apache can find
 *    meta information files.  The directory is usually a 'hidden'
 *    subdirectory of the directory that contains the file being
 *    accessed.  eg:
 *
 *        # .meta files are in the *same* directory as the
 *        # file being accessed
 *        MetaDir .
 *
 *    the default is to look in a '.web' subdirectory. This is the
 *    same as for CERN 3.+ webservers and behaviour is the same as
 *    for the directive:
 *
 *        MetaDir .web
 *
 *  MetaSuffix <meta file suffix>
 *
 *    specifies the file name suffix for the file containing the
 *    meta information.  eg:
 *
 *       # our meta files are suffixed with '.cern_meta'
 *       MetaSuffix .cern_meta
 *
 *    the default is to look for files with the suffix '.meta'.  This
 *    behaviour is the same as for the directive:
 *
 *       MetaSuffix .meta
 *
 * When accessing the file
 *
 *   DOCUMENT_ROOT/somedir/index.html
 *
 * this module will look for the file
 *
 *   DOCUMENT_ROOT/somedir/.web/index.html.meta
 *
 * and will use its contents to generate additional MIME header
 * information.
 *
 * For more information on the CERN Meta file semantics see:
 *
 *   http://www.w3.org/hypertext/WWW/Daemon/User/Config/General.html#MetaDir
 *
 * Change-log:
 * 29.Jan.96 pfopen/pfclose instead of fopen/fclose
 *           DECLINE when real file not found, we may be checking each
 *           of the index.html/index.shtml/index.htm variants and don't
 *           need to report missing ones as spurious errors.
 * 31.Jan.96 log_error reports about a malformed .meta file, rather
 *           than a script error.
 * 20.Jun.96 MetaFiles <on|off> default off, added, so that module
 *           can be configured per-directory.  Prior to this the module
 *           was running for each request anywhere on the server, naughty..
 * 29.Jun.96 All directives made per-directory.
 */",undetermined
6759,httpd,UNKNOWN,"/* XXX: this is very similar to ap_scan_script_header_err_core...
 * are the differences deliberate, or just a result of bit rot?
 */",undetermined
6760,httpd,UNKNOWN,/* Delete terminal (CR?)LF */,undetermined
6761,httpd,UNKNOWN,/* if we see a bogus header don't ignore it. Shout and scream */,undetermined
6762,httpd,UNKNOWN,/* Nuke trailing whitespace */,undetermined
6763,httpd,UNKNOWN,/* if ./.web/$1.meta exists then output 'asis' */,undetermined
6764,httpd,UNKNOWN,/* is this a directory? */,undetermined
6765,httpd,UNKNOWN,/* what directory is this file in? */,undetermined
6766,httpd,UNKNOWN,/* skip over last slash */,undetermined
6767,httpd,UNKNOWN,"/* no last slash, buh?! */",undetermined
6768,httpd,UNKNOWN,"/* should really barf, but hey, let's be friends... */",undetermined
6769,httpd,UNKNOWN,"/* It sucks to require this subrequest to complete, because this
     * means people must leave their meta files accessible to the world.
     * A better solution might be a ""safe open"" feature of pfopen to avoid
     * pipes, symlinks, and crap like that.
     *
     * In fact, this doesn't suck.  Because <Location > blocks are never run
     * against sub_req_lookup_file, the meta can be somewhat protected by
     * either masking it with a <Location > directive or alias, or stowing
     * the file outside of the web document tree, while providing the
     * appropriate directory blocks to allow access to it as a file.
     */",undetermined
6770,httpd,UNKNOWN,/* read the headers in */,undetermined
6771,httpd,UNKNOWN,/* dir config creater */,undetermined
6772,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
6773,httpd,UNKNOWN,/* server config */,undetermined
6774,httpd,UNKNOWN,/* merge server configs */,undetermined
6775,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6776,httpd,UNKNOWN,/* register hooks */,undetermined
6777,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6778,httpd,UNKNOWN,"/*
     * res->vars = copy_table( p, base->vars );
     * foreach $unsetenv ( @add->unsetenv )
     *     table_unset( res->vars, $unsetenv );
     * foreach $element ( @add->vars )
     *     table_set( res->vars, $element.key, $element.val );
     *
     * add->unsetenv already removed the vars from add->vars,
     * if they preceeded the UnsetEnv directive.
     */",undetermined
6779,httpd,UNKNOWN,"/* name is mandatory, value is optional.  no value means
     * set the variable to an empty string
     */",undetermined
6780,httpd,UNKNOWN,"/* Always UnsetEnv FOO in the same context as {Set,Pass}Env FOO
     * only if this UnsetEnv follows the {Set,Pass}Env.  The merge
     * will only apply unsetenv to the parent env (main server).
     */",undetermined
6781,httpd,UNKNOWN,/* dir config creater */,undetermined
6782,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
6783,httpd,UNKNOWN,/* server config */,undetermined
6784,httpd,UNKNOWN,/* merge server configs */,undetermined
6785,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6786,httpd,UNKNOWN,/* register hooks */,undetermined
6787,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6788,httpd,UNKNOWN,"/*
 * mod_expires.c
 * version 0.0.11
 * status beta
 *
 * Andrew Wilson <Andrew.Wilson@cm.cf.ac.uk> 26.Jan.96
 *
 * This module allows you to control the form of the Expires: header
 * that Apache issues for each access.  Directives can appear in
 * configuration files or in .htaccess files so expiry semantics can
 * be defined on a per-directory basis.
 *
 * DIRECTIVE SYNTAX
 *
 * Valid directives are:
 *
 *     ExpiresActive on | off
 *     ExpiresDefault <code><seconds>
 *     ExpiresByType type/encoding <code><seconds>
 *
 * Valid values for <code> are:
 *
 *     'M'      expires header shows file modification date + <seconds>
 *     'A'      expires header shows access time + <seconds>
 *
 *              [I'm not sure which of these is best under different
 *              circumstances, I guess it's for other people to explore.
 *              The effects may be indistinguishable for a number of cases]
 *
 * <seconds> should be an integer value [acceptable to atoi()]
 *
 * There is NO space between the <code> and <seconds>.
 *
 * For example, a directory which contains information which changes
 * frequently might contain:
 *
 *     # reports generated by cron every hour.  don't let caches
 *     # hold onto stale information
 *     ExpiresDefault M3600
 *
 * Another example, our html pages can change all the time, the gifs
 * tend not to change often:
 *
 *     # pages are hot (1 week), images are cold (1 month)
 *     ExpiresByType text/html A604800
 *     ExpiresByType image/gif A2592000
 *
 * Expires can be turned on for all URLs on the server by placing the
 * following directive in a conf file:
 *
 *     ExpiresActive on
 *
 * ExpiresActive can also appear in .htaccess files, enabling the
 * behaviour to be turned on or off for each chosen directory.
 *
 *     # turn off Expires behaviour in this directory
 *     # and subdirectories
 *     ExpiresActive off
 *
 * Directives defined for a directory are valid in subdirectories
 * unless explicitly overridden by new directives in the subdirectory
 * .htaccess files.
 *
 * ALTERNATIVE DIRECTIVE SYNTAX
 *
 * Directives can also be defined in a more readable syntax of the form:
 *
 *     ExpiresDefault ""<base> [plus] {<num> <type>}*""
 *     ExpiresByType type/encoding ""<base> [plus] {<num> <type>}*""
 *
 * where <base> is one of:
 *      access
 *      now             equivalent to 'access'
 *      modification
 *
 * where the 'plus' keyword is optional
 *
 * where <num> should be an integer value [acceptable to atoi()]
 *
 * where <type> is one of:
 *      years
 *      months
 *      weeks
 *      days
 *      hours
 *      minutes
 *      seconds
 *
 * For example, any of the following directives can be used to make
 * documents expire 1 month after being accessed, by default:
 *
 *      ExpiresDefault ""access plus 1 month""
 *      ExpiresDefault ""access plus 4 weeks""
 *      ExpiresDefault ""access plus 30 days""
 *
 * The expiry time can be fine-tuned by adding several '<num> <type>'
 * clauses:
 *
 *      ExpiresByType text/html ""access plus 1 month 15 days 2 hours""
 *      ExpiresByType image/gif ""modification plus 5 hours 3 minutes""
 *
 * ---
 *
 * Change-log:
 * 29.Jan.96    Hardened the add_* functions.  Server will now bail out
 *              if bad directives are given in the conf files.
 * 02.Feb.96    Returns DECLINED if not 'ExpiresActive on', giving other
 *              expires-aware modules a chance to play with the same
 *              directives. [Michael Rutman]
 * 03.Feb.96    Call tzset() before localtime().  Trying to get the module
 *              to work properly in non GMT timezones.
 * 12.Feb.96    Modified directive syntax to allow more readable commands:
 *                ExpiresDefault ""now plus 10 days 20 seconds""
 *                ExpiresDefault ""access plus 30 days""
 *                ExpiresDefault ""modification plus 1 year 10 months 30 days""
 * 13.Feb.96    Fix call to table_get() with NULL 2nd parameter [Rob Hartill]
 * 19.Feb.96    Call gm_timestr_822() to get time formatted correctly, can't
 *              rely on presence of HTTP_TIME_FORMAT in Apache 1.1+.
 * 21.Feb.96    This version (0.0.9) reverses assumptions made in 0.0.8
 *              about star/star handlers.  Reverting to 0.0.7 behaviour.
 * 08.Jun.96    allows ExpiresDefault to be used with responses that use
 *              the DefaultType by not DECLINING, but instead skipping
 *              the table_get check and then looking for an ExpiresDefault.
 *              [Rob Hartill]
 * 04.Nov.96    'const' definitions added.
 *
 * TODO
 * add support for Cache-Control: max-age=20 from the HTTP/1.1
 * proposal (in this case, a ttl of 20 seconds) [ask roy]
 * add per-file expiry and explicit expiry times - duplicates some
 * of the mod_cern_meta.c functionality.  eg:
 *              ExpiresExplicit index.html ""modification plus 30 days""
 *
 * BUGS
 * Hi, welcome to the internet.
 */",undetermined
6789,httpd,UNKNOWN,"/* from mod_dir, why is this alias used?
 */",undetermined
6790,httpd,UNKNOWN,"/* if we're here at all it's because someone explicitly
     * set the active flag
     */",undetermined
6791,httpd,UNKNOWN,"/* check_code() parse 'code' and return NULL or an error response
 * string.  If we return NULL then real_code contains code converted
 * to the cnnnn format.
 */",undetermined
6792,httpd,UNKNOWN,"/* 0.0.4 compatibility?
     */",undetermined
6793,httpd,UNKNOWN,"/* <base> [plus] {<num> <type>}*
     */",undetermined
6794,httpd,UNKNOWN,"/* <base>
     */",undetermined
6795,httpd,UNKNOWN,"/* [plus]
     */",undetermined
6796,httpd,UNKNOWN,"/* {<num> <type>}*
     */",undetermined
6797,httpd,UNKNOWN,"/* <num>
         */",undetermined
6798,httpd,UNKNOWN,"/* <type>
         */",undetermined
6799,httpd,UNKNOWN,/* do nothing */,undetermined
6800,httpd,UNKNOWN,"/* next <num>
         */",undetermined
6801,httpd,UNKNOWN,"/*
 * Handle the setting of the expiration response header fields according
 * to our criteria.
 */",undetermined
6802,httpd,UNKNOWN,"/* file doesn't exist on disk, so we can't do anything based on
             * modification time.  Note that this does _not_ log an error.
             */",undetermined
6803,httpd,UNKNOWN,"/* there's been some discussion and it's possible that
         * 'access time' will be stored in request structure
         */",undetermined
6804,httpd,UNKNOWN,"/* expecting the add_* routines to be case-hardened this
         * is just a reminder that module is beta
         */",undetermined
6805,httpd,UNKNOWN,"/*
 * Output filter to set the Expires response header field
 * according to the content-type of the response -- if it hasn't
 * already been set.
 */",undetermined
6806,httpd,UNKNOWN,"/*
     * Check to see which output header table we should use;
     * mod_cgi loads script fields into r->err_headers_out,
     * for instance.
     */",undetermined
6807,httpd,UNKNOWN,"/*
         * No expiration has been set, so we can apply any managed by
         * this module.  First, check to see if there is an applicable
         * ExpiresByType directive.
         */",undetermined
6808,httpd,UNKNOWN,"/*
             * See if we have a wildcard entry for the major type.
             */",undetermined
6809,httpd,UNKNOWN,"/*
                     * Without a '/' character, nothing we have will match.
                     * However, we have one.
                     */",undetermined
6810,httpd,UNKNOWN,"/*
                 * Use the ExpiresDefault directive
                 */",undetermined
6811,httpd,UNKNOWN,/* Don't add Expires headers to errors */,undetermined
6812,httpd,UNKNOWN,/* Say no to subrequests */,undetermined
6813,httpd,UNKNOWN,"/* Check to see if the filter is enabled and if there are any applicable
     * config directives for this directory scope
     */",undetermined
6814,httpd,UNKNOWN,"/* mod_expires needs to run *before* the cache save filter which is
     * AP_FTYPE_CONTENT_SET-1.  Otherwise, our expires won't be honored.
     */",undetermined
6815,httpd,UNKNOWN,/* dir config creater */,undetermined
6816,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
6817,httpd,UNKNOWN,/* server config */,undetermined
6818,httpd,UNKNOWN,/* merge server configs */,undetermined
6819,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6820,httpd,UNKNOWN,/* register hooks */,undetermined
6821,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6822,httpd,UNKNOWN,"/*
 * mod_headers.c: Add/append/remove HTTP response headers
 *     Written by Paul Sutton, paul@ukweb.com, 1 Oct 1996
 *
 * The Header directive can be used to add/replace/remove HTTP headers
 * within the response message.  The RequestHeader directive can be used
 * to add/replace/remove HTTP headers before a request message is processed.
 * Valid in both per-server and per-dir configurations.
 *
 * Syntax is:
 *
 *   Header action header value
 *   RequestHeader action header value
 *
 * Where action is one of:
 *     set    - set this header, replacing any old value
 *     add    - add this header, possible resulting in two or more
 *              headers with the same name
 *     append - append this text onto any existing header of this same
 *     merge  - merge this text onto any existing header of this same,
 *              avoiding duplicate values
 *     unset  - remove this header
 *      edit  - transform the header value according to a regexp
 *
 * Where action is unset, the third argument (value) should not be given.
 * The header name can include the colon, or not.
 *
 * The Header and RequestHeader directives can only be used where allowed
 * by the FileInfo override.
 *
 * When the request is processed, the header directives are processed in
 * this order: firstly, the main server, then the virtual server handling
 * this request (if any), then any <Directory> sections (working downwards
 * from the root dir), then an <Location> sections (working down from
 * shortest URL component), the any <File> sections. This order is
 * important if any 'set' or 'unset' actions are used. For example,
 * the following two directives have different effect if applied in
 * the reverse order:
 *
 *   Header append Author ""John P. Doe""
 *   Header unset Author
 *
 * Examples:
 *
 *  To set the ""Author"" header, use
 *     Header add Author ""John P. Doe""
 *
 *  To remove a header:
 *     Header unset Author
 *
 */",undetermined
6823,httpd,UNKNOWN,/* for the ssl_var_lookup optional function defn */,undetermined
6824,httpd,UNKNOWN,/* format_tag_hash is initialized during pre-config */,undetermined
6825,httpd,UNKNOWN,/* add header (could mean multiple hdrs) */,undetermined
6826,httpd,UNKNOWN,/* set (replace old value) */,undetermined
6827,httpd,UNKNOWN,/* append (merge into any old value) */,undetermined
6828,httpd,UNKNOWN,"/* merge (merge, but avoid duplicates) */",undetermined
6829,httpd,UNKNOWN,/* unset header */,undetermined
6830,httpd,UNKNOWN,/* echo headers from request to response */,undetermined
6831,httpd,UNKNOWN,"/* change value by regexp, match once */",undetermined
6832,httpd,UNKNOWN,"/* change value by regexp, everymatch */",undetermined
6833,httpd,UNKNOWN,"/*
 * magic cmd->info values
 */",undetermined
6834,httpd,UNKNOWN,/* RequestHeader */,undetermined
6835,httpd,UNKNOWN,/* Header onsuccess */,undetermined
6836,httpd,UNKNOWN,/* Header always */,undetermined
6837,httpd,UNKNOWN,/* Callback function type. */,undetermined
6838,httpd,UNKNOWN,"/*
 * There is an array of struct format_tag per Header/RequestHeader
 * config directive
 */",undetermined
6839,httpd,UNKNOWN,/* 'Magic' condition_var value to run action in post_read_request */,undetermined
6840,httpd,UNKNOWN,"/*
 * There is one ""header_entry"" per Header/RequestHeader config directive
 */",undetermined
6841,httpd,UNKNOWN,/* Array of format_tag structs */,undetermined
6842,httpd,UNKNOWN,/* echo_do is used for Header echo to iterate through the request headers*/,undetermined
6843,httpd,UNKNOWN,/* edit_do is used for Header edit to iterate through the request headers */,undetermined
6844,httpd,UNKNOWN,"/*
 * headers_conf is our per-module configuration. This is used as both
 * a per-dir and per-server config
 */",undetermined
6845,httpd,UNKNOWN,"/* Pointer to ssl_var_lookup, if available. */",undetermined
6846,httpd,UNKNOWN,"/*
 * Tag formatting functions
 */",undetermined
6847,httpd,UNKNOWN,"/* unwrap_header returns HDR with any newlines converted into
 * whitespace if necessary. */",undetermined
6848,httpd,UNKNOWN,"/*
 * Config routines
 */",undetermined
6849,httpd,UNKNOWN,"/*
     * This might allocate a few chars extra if there's a backslash
     * escape in the format string.
     */",undetermined
6850,httpd,UNKNOWN,/* copy verbatim */,undetermined
6851,httpd,UNKNOWN,"/*
                 * Allow the loop to deal with this *s in the normal
                 * fashion so that it handles end of string etc.
                 * properly.
                 */",undetermined
6852,httpd,UNKNOWN,/* Handle string literal/conditionals */,undetermined
6853,httpd,UNKNOWN,/* skip the % */,undetermined
6854,httpd,UNKNOWN,/* Pass through %% or % at end of string as % */,undetermined
6855,httpd,UNKNOWN,/* grab the argument if there is one */,undetermined
6856,httpd,UNKNOWN,"/*
 * A format string consists of white space, text and optional format
 * tags in any order. E.g.,
 *
 * Header add MyHeader ""Free form text %D %t more text""
 *
 * Decompose the format string into its tags. Each tag (struct format_tag)
 * contains a pointer to the function used to format the tag. Then save each
 * tag in the tag array anchored in the header_entry.
 */",undetermined
6857,httpd,UNKNOWN,/* No string to parse with unset and echo commands */,undetermined
6858,httpd,UNKNOWN,/* handle RequestHeader and Header directive */,undetermined
6859,httpd,UNKNOWN,"/* there's no subs, so envclause is really that argument */",undetermined
6860,httpd,UNKNOWN,/* Handle the envclause on Header */,undetermined
6861,httpd,UNKNOWN,/* Handle all (xxx)Header directives */,undetermined
6862,httpd,UNKNOWN,"/*
 * Process the tags in the format string. Tags may be format specifiers
 * (%D, %t, etc.), whitespace or text strings. For each tag, run the handler
 * (formatter) specific to the tag. Handlers return text strings.
 * Concatenate the return from each handler into one string that is
 * returned from this call.
 */",undetermined
6863,httpd,UNKNOWN,"/* no match, nothing to do */",undetermined
6864,httpd,UNKNOWN,/* recurse to edit multiple matches if applicable */,undetermined
6865,httpd,UNKNOWN,"/* If the input header (key) matches the regex, echo it intact to
     * r->headers_out.
     */",undetermined
6866,httpd,UNKNOWN,/* ignore early headers in late calls */,undetermined
6867,httpd,UNKNOWN,/* ignore late headers in early calls */,undetermined
6868,httpd,UNKNOWN,/* Do we have an expression to evaluate? */,undetermined
6869,httpd,UNKNOWN,/* Have any conditional envar-controlled Header processing to do? */,undetermined
6870,httpd,UNKNOWN,/* modified version of logic in ap_get_token() */,undetermined
6871,httpd,UNKNOWN,"/*
 * Make sure our error-path filter is in place.
 */",undetermined
6872,httpd,UNKNOWN,/* do the fixup */,undetermined
6873,httpd,UNKNOWN,/* remove ourselves from the filter chain */,undetermined
6874,httpd,UNKNOWN,/* send the data up the stack */,undetermined
6875,httpd,UNKNOWN,"/*
 * Make sure we propagate any ""Header always"" settings on the error
 * path through http_protocol.c.
 */",undetermined
6876,httpd,UNKNOWN,"/*
     * Add any header fields defined by ""Header always"" to r->err_headers_out.
     * Server-wide first, then per-directory to allow overriding.
     */",undetermined
6877,httpd,UNKNOWN,"/*
     * We've done our bit; remove ourself from the filter chain so there's
     * no possibility we'll be called again.
     */",undetermined
6878,httpd,UNKNOWN,"/*
     * Pass the buck.  (euro?)
     */",undetermined
6879,httpd,UNKNOWN,/* do the fixup */,undetermined
6880,httpd,UNKNOWN,/* do the fixup */,undetermined
6881,httpd,UNKNOWN,/* dir config creater */,undetermined
6882,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
6883,httpd,UNKNOWN,/* server config */,undetermined
6884,httpd,UNKNOWN,/* merge server configs */,undetermined
6885,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6886,httpd,UNKNOWN,/* register hooks */,undetermined
6887,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6888,httpd,UNKNOWN,"/*
 * mod_ident: Handle RFC 1413 ident request
 * obtained from rfc1413.c
 *
 * rfc1413() speaks a common subset of the RFC 1413, AUTH, TAP and IDENT
 * protocols. The code queries an RFC 1413 etc. compatible daemon on a remote
 * host to look up the owner of a connection. The information should not be
 * used for authentication purposes. This routine intercepts alarm signals.
 *
 * Author: Wietse Venema, Eindhoven University of Technology,
 * The Netherlands.
 */",undetermined
6889,httpd,UNKNOWN,"/* Some small additions for Apache --- ditch the ""sccsid"" var if
 * compiling with gcc (it *has* changed), include ap_config.h for the
 * prototypes it defines on at least one system (SunlOSs) which has
 * them missing from the standard header files, and one minor change
 * below (extra parens around assign ""if (foo = bar) ..."" to shut up
 * gcc -Wall).
 */",undetermined
6890,httpd,UNKNOWN,/* Rewritten by David Robinson */,undetermined
6891,httpd,UNKNOWN,"/* for server_rec, conn_rec, etc. */",undetermined
6892,httpd,UNKNOWN,/* for aplog_error */,undetermined
6893,httpd,UNKNOWN,/* Whether we should enable rfc1413 identity checking */,undetermined
6894,httpd,UNKNOWN,/* request timeout (sec) */,undetermined
6895,httpd,UNKNOWN,/* Local stuff. */,undetermined
6896,httpd,UNKNOWN,/* Semi-well-known port */,undetermined
6897,httpd,UNKNOWN,/* maximum allowed length of userid */,undetermined
6898,httpd,UNKNOWN,/* rough limit on the amount of data we accept. */,undetermined
6899,httpd,UNKNOWN,"/* default username, if it could not determined */",undetermined
6900,httpd,UNKNOWN,/* ephemeral port */,undetermined
6901,httpd,UNKNOWN,"/* This should not fail since we have a numeric address string
         * as the host. */",undetermined
6902,httpd,UNKNOWN,/* has to match */,undetermined
6903,httpd,UNKNOWN,"/* This should not fail since we have a numeric address string
         * as the host. */",undetermined
6904,httpd,UNKNOWN,/* has to match */,undetermined
6905,httpd,UNKNOWN,"/*
 * Bind the local and remote ends of the query socket to the same
 * IP addresses as the connection under investigation. We go
 * through all this trouble because the local or remote system
 * might have more than one network address. The RFC1413 etc.
 * client sends only port numbers; the server takes the IP
 * addresses from the query socket.
 */",undetermined
6906,httpd,UNKNOWN,"/*
 * errors from connect usually imply the remote machine doesn't support
 * the service; don't log such an error
 */",undetermined
6907,httpd,UNKNOWN,/* XXX */,undetermined
6908,httpd,UNKNOWN,/* send the data */,undetermined
6909,httpd,UNKNOWN,/* send query to server. Handle short write. */,undetermined
6910,httpd,UNKNOWN,"/*
     * Read response from server. - the response should be newline
     * terminated according to rfc - make sure it doesn't stomp its
     * way out of the buffer.
     */",undetermined
6911,httpd,UNKNOWN,"/*
     * Note that the strchr function below checks for \012 instead of '\n'
     * this allows it to work on both ASCII and EBCDIC machines.
     */",undetermined
6912,httpd,UNKNOWN,/* Oops... we ran out of data before finding newline */,undetermined
6913,httpd,UNKNOWN,/* RFC1413_USERLEN = 512 */,undetermined
6914,httpd,UNKNOWN,"/*
     * Strip trailing carriage return. It is part of the
     * protocol, not part of the data.
     */",undetermined
6915,httpd,UNKNOWN,"/*
 * Optional function for the core to to the actual ident request
 */",undetermined
6916,httpd,UNKNOWN,/* return immediately if ident requests are disabled */,undetermined
6917,httpd,UNKNOWN,/* dir config creater */,undetermined
6918,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
6919,httpd,UNKNOWN,/* server config */,undetermined
6920,httpd,UNKNOWN,/* merge server config */,undetermined
6921,httpd,UNKNOWN,/* command apr_table_t */,undetermined
6922,httpd,UNKNOWN,/* register hooks */,undetermined
6923,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
6924,httpd,UNKNOWN,"/*
 * mod_mime_magic: MIME type lookup via file magic numbers
 * Copyright (c) 1996-1997 Cisco Systems, Inc.
 *
 * This software was submitted by Cisco Systems to the Apache Software Foundation in July
 * 1997.  Future revisions and derivatives of this source code must
 * acknowledge Cisco Systems as the original contributor of this module.
 * All other licensing and usage conditions are those of the Apache Software Foundation.
 *
 * Some of this code is derived from the free version of the file command
 * originally posted to comp.sources.unix.  Copyright info for that program
 * is included below as required.
 * ---------------------------------------------------------------------------
 * - Copyright (c) Ian F. Darwin, 1987. Written by Ian F. Darwin.
 *
 * This software is not subject to any license of the American Telephone and
 * Telegraph Company or of the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on any
 * computer system, and to alter it and redistribute it freely, subject to
 * the following restrictions:
 *
 * 1. The author is not responsible for the consequences of use of this
 * software, no matter how awful, even if they arise from flaws in it.
 *
 * 2. The origin of this software must not be misrepresented, either by
 * explicit claim or by omission.  Since few users ever read sources, credits
 * must appear in the documentation.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 * misrepresented as being the original software.  Since few users ever read
 * sources, credits must appear in the documentation.
 *
 * 4. This notice may not be removed or altered.
 * -------------------------------------------------------------------------
 *
 * For compliance with Mr Darwin's terms: this has been very significantly
 * modified from the free ""file"" command.
 * - all-in-one file for compilation convenience when moving from one
 *   version of Apache to the next.
 * - Memory allocation is done through the Apache API's apr_pool_t structure.
 * - All functions have had necessary Apache API request or server
 *   structures passed to them where necessary to call other Apache API
 *   routines.  (i.e. usually for logging, files, or memory allocation in
 *   itself or a called function.)
 * - struct magic has been converted from an array to a single-ended linked
 *   list because it only grows one record at a time, it's only accessed
 *   sequentially, and the Apache API has no equivalent of realloc().
 * - Functions have been changed to get their parameters from the server
 *   configuration instead of globals.  (It should be reentrant now but has
 *   not been tested in a threaded environment.)
 * - Places where it used to print results to stdout now saves them in a
 *   list where they're used to set the MIME type in the Apache request
 *   record.
 * - Command-line flags have been removed since they will never be used here.
 *
 * Ian Kluft <ikluft@cisco.com>
 * Engineering Information Framework
 * Central Engineering
 * Cisco Systems, Inc.
 * San Jose, CA, USA
 *
 * Initial installation          July/August 1996
 * Misc bug fixes                May 1997
 * Submission to Apache Software Foundation    July 1997
 *
 */",undetermined
6925,httpd,UNKNOWN,/* ### this isn't set by configure? does anybody set this? */,undetermined
6926,httpd,UNKNOWN,"/*
 * data structures and related constants
 */",undetermined
6927,httpd,UNKNOWN,/* HOWMANY must be at least 4096 to make gzip -dcq work */,undetermined
6928,httpd,UNKNOWN,/* SMALL_HOWMANY limits how much work we do to figure out text files */,undetermined
6929,httpd,UNKNOWN,/* max leng of text description */,undetermined
6930,httpd,UNKNOWN,"/* max leng of ""string"" types */",undetermined
6931,httpd,UNKNOWN,/* link to next entry */,undetermined
6932,httpd,UNKNOWN,/* line number from magic file */,undetermined
6933,httpd,UNKNOWN,"/* if '>(...)' appears,  */",undetermined
6934,httpd,UNKNOWN,/* comparison is unsigned */,undetermined
6935,httpd,UNKNOWN,"/* level of "">"" */",undetermined
6936,httpd,UNKNOWN,/* byte short long */,undetermined
6937,httpd,UNKNOWN,/* offset from indirection */,undetermined
6938,httpd,UNKNOWN,/* offset to magic number */,undetermined
6939,httpd,UNKNOWN,"/* relation (0=eq, '>'=gt, etc) */",undetermined
6940,httpd,UNKNOWN,"/* int, short, long or string. */",undetermined
6941,httpd,UNKNOWN,"/* length of string value, if any */",undetermined
6942,httpd,UNKNOWN,"/* 2 bytes of a fixed-endian ""short"" */",undetermined
6943,httpd,UNKNOWN,"/* 2 bytes of a fixed-endian ""long"" */",undetermined
6944,httpd,UNKNOWN,/* either number or string */,undetermined
6945,httpd,UNKNOWN,/* mask before comparison with value */,undetermined
6946,httpd,UNKNOWN,/* supress space character */,undetermined
6947,httpd,UNKNOWN,/* NOTE: this string is suspected of overrunning - find it! */,undetermined
6948,httpd,UNKNOWN,/* description */,undetermined
6949,httpd,UNKNOWN,"/*
 * data structures for tar file recognition
 * --------------------------------------------------------------------------
 * Header file for public domain tar (tape archive) program.
 *
 * @(#)tar.h 1.20 86/10/29    Public Domain. Created 25 August 1985 by John
 * Gilmore, ihnp4!hoptoad!gnu.
 *
 * Header block on tape.
 *
 * I'm going to use traditional DP naming conventions here. A ""block"" is a big
 * chunk of stuff that we do I/O on. A ""record"" is a piece of info that we
 * care about. Typically many ""record""s fit into a ""block"".
 */",undetermined
6950,httpd,UNKNOWN,/* The magic field is filled with this if uname and gname are valid. */,undetermined
6951,httpd,UNKNOWN,/* 7 chars and a null */,undetermined
6952,httpd,UNKNOWN,"/*
 * file-function prototypes
 */",undetermined
6953,httpd,UNKNOWN,"/*
 * includes for ASCII substring recognition formerly ""names.h"" in file
 * command
 *
 * Original notes: names and types used by ascmagic in file(1). These tokens are
 * here because they can appear anywhere in the first HOWMANY bytes, while
 * tokens in /etc/magic must appear at fixed offsets into the file. Don't
 * make HOWMANY too high unless you have a very fast CPU.
 */",undetermined
6954,httpd,UNKNOWN,/* these types are used to index the apr_table_t 'types': keep em in sync! */,undetermined
6955,httpd,UNKNOWN,/* HTML inserted in first because this is a web server module now */,undetermined
6956,httpd,UNKNOWN,/* HTML */,undetermined
6957,httpd,UNKNOWN,/* first and foremost on UNIX */,undetermined
6958,httpd,UNKNOWN,/* the oldest one */,undetermined
6959,httpd,UNKNOWN,/* Makefiles */,undetermined
6960,httpd,UNKNOWN,/* PL/1 */,undetermined
6961,httpd,UNKNOWN,/* some kinda assembler */,undetermined
6962,httpd,UNKNOWN,/* English */,undetermined
6963,httpd,UNKNOWN,/* Pascal */,undetermined
6964,httpd,UNKNOWN,/* Electronic mail */,undetermined
6965,httpd,UNKNOWN,/* Usenet Netnews */,undetermined
6966,httpd,UNKNOWN,/* HTML */,undetermined
6967,httpd,UNKNOWN,"/* ""c program text"", */",undetermined
6968,httpd,UNKNOWN,"/* ""fortran program text"", */",undetermined
6969,httpd,UNKNOWN,"/* ""make commands text"", */",undetermined
6970,httpd,UNKNOWN,"/* ""pl/1 program text"", */",undetermined
6971,httpd,UNKNOWN,"/* ""assembler program text"", */",undetermined
6972,httpd,UNKNOWN,"/* ""English text"", */",undetermined
6973,httpd,UNKNOWN,"/* ""pascal program text"", */",undetermined
6974,httpd,UNKNOWN,"/* ""mail text"", */",undetermined
6975,httpd,UNKNOWN,"/* ""news text"", */",undetermined
6976,httpd,UNKNOWN,"/* ""can't happen error on names.h/types"", */",undetermined
6977,httpd,UNKNOWN,/* These must be sorted by eye for optimal hit rate */,undetermined
6978,httpd,UNKNOWN,/* Add to this list only after substantial meditation */,undetermined
6979,httpd,UNKNOWN,"/* must precede ""The"", ""the"", etc. */",undetermined
6980,httpd,UNKNOWN,"/*
     * Too many files of text have these words in them.  Find another way to
     * recognize Fortrash.
     */",undetermined
6981,httpd,UNKNOWN,/* NOTDEF */,undetermined
6982,httpd,UNKNOWN,"/*
 * Result String List (RSL)
 *
 * The file(1) command prints its output.  Instead, we store the various
 * ""printed"" strings in a list (allocating memory as we go) and concatenate
 * them at the end when we finally know how much space they'll need.
 */",undetermined
6983,httpd,UNKNOWN,"/* string, possibly a fragment */",undetermined
6984,httpd,UNKNOWN,/* pointer to next fragment */,undetermined
6985,httpd,UNKNOWN,"/*
 * Apache module configuration structures
 */",undetermined
6986,httpd,UNKNOWN,/* per-server info */,undetermined
6987,httpd,UNKNOWN,/* where magic be found */,undetermined
6988,httpd,UNKNOWN,/* head of magic config list */,undetermined
6989,httpd,UNKNOWN,/* per-request info */,undetermined
6990,httpd,UNKNOWN,/* result string list */,undetermined
6991,httpd,UNKNOWN,/* recursion depth in suffix check */,undetermined
6992,httpd,UNKNOWN,"/*
 * configuration functions - called by Apache API routines
 */",undetermined
6993,httpd,UNKNOWN,/* allocate the config - use pcalloc because it needs to be zeroed */,undetermined
6994,httpd,UNKNOWN,"/*
 * configuration file commands - exported to Apache API
 */",undetermined
6995,httpd,UNKNOWN,"/*
 * RSL (result string list) processing routines
 *
 * These collect strings that would have been printed in fragments by file(1)
 * into a list of magic_rsl structures with the strings. When complete,
 * they're concatenated together to become the MIME content and encoding
 * types.
 *
 * return value conventions for these functions: functions which return int:
 * failure = -1, other = result functions which return pointers: failure = 0,
 * other = result
 */",undetermined
6996,httpd,UNKNOWN,/* allocate a per-request structure and put it in the request record */,undetermined
6997,httpd,UNKNOWN,/* add a string to the result string list for this request */,undetermined
6998,httpd,UNKNOWN,"/* it is the responsibility of the caller to allocate ""str"" */",undetermined
6999,httpd,UNKNOWN,/* make sure we have a list to put it in */,undetermined
7000,httpd,UNKNOWN,/* failure */,undetermined
7001,httpd,UNKNOWN,/* allocate the list entry */,undetermined
7002,httpd,UNKNOWN,/* fill it */,undetermined
7003,httpd,UNKNOWN,/* append to the list */,undetermined
7004,httpd,UNKNOWN,/* success */,undetermined
7005,httpd,UNKNOWN,/* RSL hook for puts-type functions */,undetermined
7006,httpd,UNKNOWN,/* RSL hook for printf-type functions */,undetermined
7007,httpd,UNKNOWN,/* assemble the string into the buffer */,undetermined
7008,httpd,UNKNOWN,/* add the buffer to the list */,undetermined
7009,httpd,UNKNOWN,/* RSL hook for putchar-type functions */,undetermined
7010,httpd,UNKNOWN,/* high overhead for 1 char - just hope they don't do this much */,undetermined
7011,httpd,UNKNOWN,/* allocate and copy a contiguous string from a result string list */,undetermined
7012,httpd,UNKNOWN,/* return value */,undetermined
7013,httpd,UNKNOWN,/* current fragment number/counter */,undetermined
7014,httpd,UNKNOWN,/* current position within fragment */,undetermined
7015,httpd,UNKNOWN,/* position in result string */,undetermined
7016,httpd,UNKNOWN,/* list-traversal pointer */,undetermined
7017,httpd,UNKNOWN,/* allocate the result string */,undetermined
7018,httpd,UNKNOWN,/* loop through and collect the string */,undetermined
7019,httpd,UNKNOWN,/* loop to the first fragment */,undetermined
7020,httpd,UNKNOWN,/* loop through and collect chars */,undetermined
7021,httpd,UNKNOWN,/* clean up and return */,undetermined
7022,httpd,UNKNOWN,/* states for the state-machine algorithm in magic_rsl_to_request() */,undetermined
7023,httpd,UNKNOWN,/* process the RSL and set the MIME info in the request record */,undetermined
7024,httpd,UNKNOWN,/* current fragment number/counter */,undetermined
7025,httpd,UNKNOWN,/* current position within fragment */,undetermined
7026,httpd,UNKNOWN,/* content type starting point: fragment */,undetermined
7027,httpd,UNKNOWN,/* content type starting point: position */,undetermined
7028,httpd,UNKNOWN,/* content type length */,undetermined
7029,httpd,UNKNOWN,/* content encoding starting point: fragment */,undetermined
7030,httpd,UNKNOWN,/* content encoding starting point: position */,undetermined
7031,httpd,UNKNOWN,/* content encoding length */,undetermined
7032,httpd,UNKNOWN,/* list-traversal pointer */,undetermined
7033,httpd,UNKNOWN,/* check if we have a result */,undetermined
7034,httpd,UNKNOWN,"/* empty - no match, we defer to other Apache modules */",undetermined
7035,httpd,UNKNOWN,/* start searching for the type and encoding */,undetermined
7036,httpd,UNKNOWN,/* loop through the characters in the fragment */,undetermined
7037,httpd,UNKNOWN,/* process whitespace actions for each state */,undetermined
7038,httpd,UNKNOWN,/* eat whitespace in this state */,undetermined
7039,httpd,UNKNOWN,/* whitespace: type has no slash! */,undetermined
7040,httpd,UNKNOWN,/* whitespace: end of MIME type */,undetermined
7041,httpd,UNKNOWN,/* eat whitespace in this state */,undetermined
7042,httpd,UNKNOWN,/* whitespace: end of MIME encoding */,undetermined
7043,httpd,UNKNOWN,/* we're done */,undetermined
7044,httpd,UNKNOWN,/* should not be possible */,undetermined
7045,httpd,UNKNOWN,/* abandon malfunctioning module */,undetermined
7046,httpd,UNKNOWN,/* NOTREACHED */,undetermined
7047,httpd,UNKNOWN,/* copy the char and go to rsl_subtype state */,undetermined
7048,httpd,UNKNOWN,/* process non-space actions for each state */,undetermined
7049,httpd,UNKNOWN,/* non-space: begin MIME type */,undetermined
7050,httpd,UNKNOWN,/* non-space: adds to type */,undetermined
7051,httpd,UNKNOWN,/* non-space: begin MIME encoding */,undetermined
7052,httpd,UNKNOWN,/* non-space: adds to encoding */,undetermined
7053,httpd,UNKNOWN,/* should not be possible */,undetermined
7054,httpd,UNKNOWN,/* abandon malfunctioning module */,undetermined
7055,httpd,UNKNOWN,/* NOTREACHED */,undetermined
7056,httpd,UNKNOWN,/* NOTREACHED */,undetermined
7057,httpd,UNKNOWN,"/* if we ended prior to state rsl_subtype, we had incomplete info */",undetermined
7058,httpd,UNKNOWN,/* defer to other modules */,undetermined
7059,httpd,UNKNOWN,/* save the info in the request record */,undetermined
7060,httpd,UNKNOWN,"/* XXX: this could be done at config time I'm sure... but I'm
     * confused by all this magic_rsl stuff. -djg */",undetermined
7061,httpd,UNKNOWN,"/* XXX: this could be done at config time I'm sure... but I'm
         * confused by all this magic_rsl stuff. -djg */",undetermined
7062,httpd,UNKNOWN,/* detect memory allocation or other errors */,undetermined
7063,httpd,UNKNOWN,/* success! */,undetermined
7064,httpd,UNKNOWN,"/*
 * magic_process - process input file r        Apache API request record
 * (formerly called ""process"" in file command, prefix added for clarity) Opens
 * the file and reads a fixed-size buffer to begin processing the contents.
 */",undetermined
7065,httpd,UNKNOWN,/* one extra for terminating '\0' */,undetermined
7066,httpd,UNKNOWN,/* number of bytes read from a datafile */,undetermined
7067,httpd,UNKNOWN,"/*
     * first try judging the file based on its filesystem status
     */",undetermined
7068,httpd,UNKNOWN,"/* fatal error, bail out */",undetermined
7069,httpd,UNKNOWN,"/* We can't open it, but we were able to stat it. */",undetermined
7070,httpd,UNKNOWN,/* let some other handler decide what the problem is */,undetermined
7071,httpd,UNKNOWN,"/*
     * try looking at the first HOWMANY bytes
     */",undetermined
7072,httpd,UNKNOWN,/* null-terminate it */,undetermined
7073,httpd,UNKNOWN,"/*
     * Try compression stuff
     */",undetermined
7074,httpd,UNKNOWN,"/*
     * try tests in /etc/magic (or surrogate magic file)
     */",undetermined
7075,httpd,UNKNOWN,"/*
     * try known keywords, check for ascii-ness too.
     */",undetermined
7076,httpd,UNKNOWN,"/*
     * abandon hope, all ye who remain here
     */",undetermined
7077,httpd,UNKNOWN,"/*
 * apprentice - load configuration from the magic file r
 *  API request record
 */",undetermined
7078,httpd,UNKNOWN,/* set up the magic list (empty) */,undetermined
7079,httpd,UNKNOWN,/* parse it */,undetermined
7080,httpd,UNKNOWN,"/* guaranteed that len >= 1 since an
                                               * ""empty"" line contains a '\n'
                                               */",undetermined
7081,httpd,UNKNOWN,/* delete newline and any other trailing whitespace */,undetermined
7082,httpd,UNKNOWN,/* skip leading whitespace */,undetermined
7083,httpd,UNKNOWN,/* skip blank lines */,undetermined
7084,httpd,UNKNOWN,"/* comment, do not parse */",undetermined
7085,httpd,UNKNOWN,"/* if we get here, we're going to use it so count it */",undetermined
7086,httpd,UNKNOWN,/* parse it */,undetermined
7087,httpd,UNKNOWN,"/*
 * extend the sign bit if the comparison is to be signed
 */",undetermined
7088,httpd,UNKNOWN,"/*
             * Do not remove the casts below.  They are vital. When later
             * compared with the data, the sign extension must have happened.
             */",undetermined
7089,httpd,UNKNOWN,"/*
 * parse one line from magic file, put into magic[index++] if valid
 */",undetermined
7090,httpd,UNKNOWN,/* allocate magic structure entry */,undetermined
7091,httpd,UNKNOWN,/* append to linked list */,undetermined
7092,httpd,UNKNOWN,/* set values in magic structure */,undetermined
7093,httpd,UNKNOWN,/* step over */,undetermined
7094,httpd,UNKNOWN,/* step over */,undetermined
7095,httpd,UNKNOWN,"/* get offset, then skip over it */",undetermined
7096,httpd,UNKNOWN,"/*
         * read [.lbs][+-]nnnnn)
         */",undetermined
7097,httpd,UNKNOWN,"/* get type, skip it */",undetermined
7098,httpd,UNKNOWN,"/* New-style anding: ""0 byte&0x80 =0x80 dynamically linked"" */",undetermined
7099,httpd,UNKNOWN,"/* Old-style anding: ""0 byte &0x80 dynamically linked"" */",undetermined
7100,httpd,UNKNOWN,/* FALL THROUGH */,undetermined
7101,httpd,UNKNOWN,/* Bill The Cat */,undetermined
7102,httpd,UNKNOWN,"/*
     * now get last part - the description
     */",undetermined
7103,httpd,UNKNOWN,/* MIME_MAGIC_DEBUG */,undetermined
7104,httpd,UNKNOWN,"/*
 * Read a numeric value from a pointer, into the value union of a magic
 * pointer, according to the magic type.  Update the string pointer to point
 * just after the number read.  Return 0 for success, non-zero for failure.
 */",undetermined
7105,httpd,UNKNOWN,"/*
 * Convert a string containing C character escapes.  Stop at an unescaped
 * space or tab. Copy the converted version to ""p"", returning its length in
 * *slen. Return updated scan pointer as function result.
 */",undetermined
7106,httpd,UNKNOWN,/* \ and up to 3 octal digits */,undetermined
7107,httpd,UNKNOWN,/* try for 2 */,undetermined
7108,httpd,UNKNOWN,/* try for 3 */,undetermined
7109,httpd,UNKNOWN,/* \x and up to 3 hex digits */,undetermined
7110,httpd,UNKNOWN,/* Default if no digits */,undetermined
7111,httpd,UNKNOWN,/* Get next char */,undetermined
7112,httpd,UNKNOWN,/* Single hex char to int; -1 if not a hex char. */,undetermined
7113,httpd,UNKNOWN,"/*
 * return DONE to indicate it's been handled
 * return OK to indicate it's a regular file still needing handling
 * other returns indicate a failure of some sort
 */",undetermined
7114,httpd,UNKNOWN,"/*
         * (void) magic_rsl_printf(r,""character special (%d/%d)"",
         * major(sb->st_rdev), minor(sb->st_rdev));
         */",undetermined
7115,httpd,UNKNOWN,"/*
         * (void) magic_rsl_printf(r,""block special (%d/%d)"",
         * major(sb->st_rdev), minor(sb->st_rdev));
         */",undetermined
7116,httpd,UNKNOWN,/* TODO add code to handle V7 MUX and Blit MUX files */,undetermined
7117,httpd,UNKNOWN,"/*
         * magic_rsl_puts(r,""fifo (named pipe)"");
         */",undetermined
7118,httpd,UNKNOWN,"/* We used stat(), the only possible reason for this is that the
         * symlink is broken.
         */",undetermined
7119,httpd,UNKNOWN,"/*
     * regular file, check next possibility
     */",undetermined
7120,httpd,UNKNOWN,"/*
 * softmagic - lookup one file in database (already read from /etc/magic by
 * apprentice.c). Passed the name and FILE * of one file to be typed.
 */",undetermined
7121,httpd,UNKNOWN,/* ARGSUSED1 */,undetermined
7122,httpd,UNKNOWN,"/* nbytes passed for regularity, maybe need later */",undetermined
7123,httpd,UNKNOWN,"/*
 * Go through the whole list, stopping if you find a match.  Process all the
 * continuations of that match before returning.
 *
 * We support multi-level continuations:
 *
 * At any time when processing a successful top-level match, there is a current
 * continuation level; it represents the level of the last successfully
 * matched continuation.
 *
 * Continuations above that level are skipped as, if we see one, it means that
 * the continuation that controls them - i.e, the lower-level continuation
 * preceding them - failed to match.
 *
 * Continuations below that level are processed as, if we see one, it means
 * we've finished processing or skipping higher-level continuations under the
 * control of a successful or unsuccessful lower-level continuation, and are
 * now seeing the next lower-level continuation and should process it.  The
 * current continuation level reverts to the level of the one we're seeing.
 *
 * Continuations at the current level are processed as, if we see one, there's
 * no lower-level continuation that may have failed.
 *
 * If a continuation matches, we bump the current continuation level so that
 * higher-level continuations are processed.
 */",undetermined
7124,httpd,UNKNOWN,/* check if main entry matches */,undetermined
7125,httpd,UNKNOWN,"/*
             * main entry didn't match, flush its continuations
             */",undetermined
7126,httpd,UNKNOWN,"/*
                 * this trick allows us to keep *m in sync when the continue
                 * advances the pointer
                 */",undetermined
7127,httpd,UNKNOWN,"/* if we get here, the main entry rule was a match */",undetermined
7128,httpd,UNKNOWN,/* this will be the last run through the loop */,undetermined
7129,httpd,UNKNOWN,/* print the match */,undetermined
7130,httpd,UNKNOWN,"/*
         * If we printed something, we'll need to print a blank before we
         * print something else.
         */",undetermined
7131,httpd,UNKNOWN,/* and any continuations that match */,undetermined
7132,httpd,UNKNOWN,"/*
         * while (m && m->next && m->next->cont_level != 0 && ( m = m->next
         * ))
         */",undetermined
7133,httpd,UNKNOWN,"/*
                     * We're at the end of the level ""cont_level""
                     * continuations.
                     */",undetermined
7134,httpd,UNKNOWN,"/*
                     * This continuation matched. Print its message, with a
                     * blank before it if the previous item printed and this
                     * item isn't empty.
                     */",undetermined
7135,httpd,UNKNOWN,/* space if previous printed */,undetermined
7136,httpd,UNKNOWN,"/*
                     * If we see any continuations at a higher level, process
                     * them.
                     */",undetermined
7137,httpd,UNKNOWN,/* move to next continuation record */,undetermined
7138,httpd,UNKNOWN,/* all through */,undetermined
7139,httpd,UNKNOWN,/* no match at all */,undetermined
7140,httpd,UNKNOWN,"/*
 * Convert the byte order of the data we are looking at
 */",undetermined
7141,httpd,UNKNOWN,/* Null terminate and eat the return */,undetermined
7142,httpd,UNKNOWN,"/*
         * What we want here is: v = strncmp(m->value.s, p->s, m->vallen);
         * but ignoring any nulls.  bcmp doesn't give -/+/0 and isn't
         * universally available anyway.
         */",undetermined
7143,httpd,UNKNOWN,"/*  bogosity, pretend that it just wasn't a match */",undetermined
7144,httpd,UNKNOWN,"/* bogosity, pretend it didn't match */",undetermined
7145,httpd,UNKNOWN,/* an optimization over plain strcmp() */,undetermined
7146,httpd,UNKNOWN,/* one extra for terminating '\0' */,undetermined
7147,httpd,UNKNOWN,"/* these are easy, do them first */",undetermined
7148,httpd,UNKNOWN,"/*
     * for troff, look for . + letter + letter or .\""; this must be done to
     * disambiguate tar archives' ./file and other trash from real troff
     * input.
     */",undetermined
7149,httpd,UNKNOWN,/* skip leading whitespace */,undetermined
7150,httpd,UNKNOWN,/* Fortran */,undetermined
7151,httpd,UNKNOWN,"/* look for tokens from names.h - this is expensive!, so we'll limit
     * ourselves to only SMALL_HOWMANY bytes */",undetermined
7152,httpd,UNKNOWN,/* make a copy of the buffer here because apr_strtok() will destroy it */,undetermined
7153,httpd,UNKNOWN,/* make apr_strtok() keep on tokin' */,undetermined
7154,httpd,UNKNOWN,/* V7 tar archive */,undetermined
7155,httpd,UNKNOWN,/* POSIX tar archive */,undetermined
7156,httpd,UNKNOWN,"/* all else fails, but it is ascii... */",undetermined
7157,httpd,UNKNOWN,"/*
 * compress routines: zmagic() - returns 0 if not recognized, uncompresses
 * and prints information if recognized uncompress(s, method, old, n, newch)
 * - uncompress old into new, using method, return sizeof new
 */",undetermined
7158,httpd,UNKNOWN,/* MUST be lowercase */,undetermined
7159,httpd,UNKNOWN,"/* we use gzip here rather than uncompress because we have to pass
     * it a full filename -- and uncompress only considers filenames
     * ending with .Z
     */",undetermined
7160,httpd,UNKNOWN,"/*
     * XXX pcat does not work, cause I don't know how to make it read stdin,
     * so we use gzip
     */",undetermined
7161,httpd,UNKNOWN,/* set encoding type in the request record */,undetermined
7162,httpd,UNKNOWN,/* null-terminate uncompressed data */,undetermined
7163,httpd,UNKNOWN,/* Try to detect the content type of the uncompressed data */,undetermined
7164,httpd,UNKNOWN,"/* XXX missing 1.3 logic:
     *
     * what happens when !compr[parm->method].silent?
     * Should we create the err pipe, read it, and copy to the log?
     */",undetermined
7165,httpd,UNKNOWN,"/* Something bad happened, tell the world. */",undetermined
7166,httpd,UNKNOWN,/* Bad things happened. Everyone should have cleaned up. */,undetermined
7167,httpd,UNKNOWN,"/* We make a sub_pool so that we can collect our child early, otherwise
     * there are cases (i.e. generating directory indicies with mod_autoindex)
     * where we would end up with LOTS of zombies.
     */",undetermined
7168,httpd,UNKNOWN,"/*
 * is_tar() -- figure out whether file is a tar archive.
 *
 * Stolen (by author of file utility) from the public domain tar program: Public
 * Domain version written 26 Aug 1985 John Gilmore (ihnp4!hoptoad!gnu).
 *
 * @(#)list.c 1.18 9/23/86 Public Domain - gnu $Id: mod_mime_magic.c,v 1.7
 * 1997/06/24 00:41:02 ikluft Exp ikluft $
 *
 * Comments changed and some code/comments reformatted for file command by Ian
 * Darwin.
 */",undetermined
7169,httpd,UNKNOWN,"/*
 * Return 0 if the checksum is bad (i.e., probably not a tar archive), 1 for
 * old UNIX tar file, 2 for Unix Std (POSIX) tar file.
 */",undetermined
7170,httpd,UNKNOWN,"/*
         * We can't use unsigned char here because of old compilers, e.g. V7.
         */",undetermined
7171,httpd,UNKNOWN,"/* Adjust checksum to count the ""chksum"" field as blanks. */",undetermined
7172,httpd,UNKNOWN,/* Not a tar archive */,undetermined
7173,httpd,UNKNOWN,/* Unix Standard tar archive */,undetermined
7174,httpd,UNKNOWN,/* Old fashioned tar archive */,undetermined
7175,httpd,UNKNOWN,"/*
 * Quick and dirty octal conversion.
 *
 * Result is -1 if the field is invalid (all blank, or nonoctal).
 */",undetermined
7176,httpd,UNKNOWN,/* Skip spaces */,undetermined
7177,httpd,UNKNOWN,/* All blank field */,undetermined
7178,httpd,UNKNOWN,/* Scan til nonoctal */,undetermined
7179,httpd,UNKNOWN,/* Ended on non-space/nul */,undetermined
7180,httpd,UNKNOWN,"/*
 * Check for file-revision suffix
 *
 * This is for an obscure document control system used on an intranet.
 * The web representation of each file's revision has an @1, @2, etc
 * appended with the revision number.  This needs to be stripped off to
 * find the file suffix, which can be recognized by sending the name back
 * through a sub-request.  The base file name (without the @num suffix)
 * must exist because its type will be used as the result.
 */",undetermined
7181,httpd,UNKNOWN,/* MIME_MAGIC_DEBUG */,undetermined
7182,httpd,UNKNOWN,/* check for recognized revision suffix */,undetermined
7183,httpd,UNKNOWN,/* perform sub-request for the file name without the suffix */,undetermined
7184,httpd,UNKNOWN,/* MIME_MAGIC_DEBUG */,undetermined
7185,httpd,UNKNOWN,/* extract content type/encoding/language from sub-request */,undetermined
7186,httpd,UNKNOWN,/* MIME_MAGIC_DEBUG */,undetermined
7187,httpd,UNKNOWN,/* clean up */,undetermined
7188,httpd,UNKNOWN,"/*
 * initialize the module
 */",undetermined
7189,httpd,UNKNOWN,/* MIME_MAGIC_DEBUG */,undetermined
7190,httpd,UNKNOWN,/* inherits from the parent */,undetermined
7191,httpd,UNKNOWN,"/*
 * Find the Content-Type from any resource this module has available
 */",undetermined
7192,httpd,UNKNOWN,/* the file has to exist */,undetermined
7193,httpd,UNKNOWN,/* was someone else already here? */,undetermined
7194,httpd,UNKNOWN,/* initialize per-request info */,undetermined
7195,httpd,UNKNOWN,/* try excluding file-revision suffixes */,undetermined
7196,httpd,UNKNOWN,/* process it based on the file contents */,undetermined
7197,httpd,UNKNOWN,"/* if we have any results, put them in the request structure */",undetermined
7198,httpd,UNKNOWN,"/* mod_mime_magic should be run after mod_mime, if at all. */",undetermined
7199,httpd,UNKNOWN,"/*
 * Apache API module interface
 */",undetermined
7200,httpd,UNKNOWN,/* dir config creator */,undetermined
7201,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7202,httpd,UNKNOWN,/* server config */,undetermined
7203,httpd,UNKNOWN,/* merge server config */,undetermined
7204,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7205,httpd,UNKNOWN,/* register hooks */,undetermined
7206,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7207,httpd,UNKNOWN,/** A proxy IP mask to match */,undetermined
7208,httpd,UNKNOWN,"/** Flagged if internal, otherwise an external trusted proxy */",undetermined
7209,httpd,UNKNOWN,/** The header to retrieve a proxy-via ip list */,undetermined
7210,httpd,UNKNOWN,"/** A header to record the proxied IP's
     * (removed as the physical connection and
     * from the proxy-via ip header value list)
     */",undetermined
7211,httpd,UNKNOWN,"/** A list of trusted proxies, ideally configured
     *  with the most commonly encountered listed first
     */",undetermined
7212,httpd,UNKNOWN,/** The list of proxy ip's ignored as remote ip's */,undetermined
7213,httpd,UNKNOWN,/** The remaining list of untrusted proxied remote ip's */,undetermined
7214,httpd,UNKNOWN,"/* config->header_name = NULL;
     * config->proxies_header_name = NULL;
     */",undetermined
7215,httpd,UNKNOWN,/* Would be quite nice if APR exported this */,undetermined
7216,httpd,UNKNOWN,/* apr:network_io/unix/sockaddr.c */,undetermined
7217,httpd,UNKNOWN,/* definitely not a hostname; assume it is intended to be an IPv6 address */,undetermined
7218,httpd,UNKNOWN,/* simple IPv4 address string check */,undetermined
7219,httpd,UNKNOWN,"/* Note s may be null, that's fine (explicit host) */",undetermined
7220,httpd,UNKNOWN,"/* verify c->client_addr is trusted if there is a trusted proxy list
         */",undetermined
7221,httpd,UNKNOWN,"/* We map as IPv4 rather than IPv6 for equivilant host names
         * or IPV4OVERIPV6
         */",undetermined
7222,httpd,UNKNOWN,/* For intranet (Internal proxies) ignore all restrictions below */,undetermined
7223,httpd,UNKNOWN,"/* For internet (non-Internal proxies) deny all
                    * RFC3330 designated local/private subnets:
                    * 10.0.0.0/8   169.254.0.0/16  192.168.0.0/16
                    * 127.0.0.0/8  172.16.0.0/12
                    */",undetermined
7224,httpd,UNKNOWN,"/* For internet (non-Internal proxies) we translated
                    * IPv4-over-IPv6-mapped addresses as IPv4, above.
                    * Accept only Global Unicast 2000::/3 defined by RFC4291
                    */",undetermined
7225,httpd,UNKNOWN,/* save away our results */,undetermined
7226,httpd,UNKNOWN,/* Set useragent_ip string */,undetermined
7227,httpd,UNKNOWN,/* Nothing happened? */,undetermined
7228,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
7229,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
7230,httpd,UNKNOWN,/* create per-server config structure */,undetermined
7231,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
7232,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7233,httpd,UNKNOWN,/* register hooks */,undetermined
7234,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7235,httpd,UNKNOWN,"/*
 * mod_setenvif.c
 * Set environment variables based on matching request headers or
 * attributes against regex strings
 *
 * Paul Sutton <paul@ukweb.com> 27 Oct 1996
 * Based on mod_browser by Alexei Kosut <akosut@organic.com>
 */",undetermined
7236,httpd,UNKNOWN,"/*
 * Used to set environment variables based on the incoming request headers,
 * or some selected other attributes of the request (e.g., the remote host
 * name).
 *
 * Usage:
 *
 *   SetEnvIf name regex var ...
 *
 * where name is either a HTTP request header name, or one of the
 * special values (see below). 'name' may be a regex when it is used
 * to specify an HTTP request header name. The 'value' of the header
 & (or the value of the special value from below) are compared against
 * the regex argument. If this is a simple string, a simple sub-string
 * match is performed. Otherwise, a request expression match is
 * done. If the value matches the string or regular expression, the
 * environment variables listed as var ... are set. Each var can
 * be in one of three formats: var, which sets the named variable
 * (the value value ""1""); var=value, which sets the variable to
 * the given value; or !var, which unsets the variable is it has
 * been previously set.
 *
 * Normally the strings are compared with regard to case. To ignore
 * case, use the directive SetEnvIfNoCase instead.
 *
 * Special values for 'name' are:
 *
 *   server_addr        IP address of interface on which request arrived
 *                      (analogous to SERVER_ADDR set in ap_add_common_vars())
 *   remote_host        Remote host name (if available)
 *   remote_addr        Remote IP address
 *   request_method     Request method (GET, POST, etc)
 *   request_uri        Requested URI
 *
 * Examples:
 *
 * To set the environment variable LOCALHOST if the client is the local
 * machine:
 *
 *    SetEnvIf remote_addr 127.0.0.1 LOCALHOST
 *
 * To set LOCAL if the client is the local host, or within our company's
 * domain (192.168.10):
 *
 *    SetEnvIf remote_addr 192.168.10. LOCAL
 *    SetEnvIf remote_addr 127.0.0.1   LOCALHOST
 *
 * This could be written as:
 *
 *    SetEnvIf remote_addr (127.0.0.1|192.168.10.) LOCAL
 *
 * To set HAVE_TS if the client request contains any header beginning
 * with ""TS"" with a value beginning with a lower case alphabet:
 *
 *    SetEnvIf ^TS* ^[a-z].* HAVE_TS
 */",undetermined
7237,httpd,UNKNOWN,/* header name */,undetermined
7238,httpd,UNKNOWN,/* compiled header name regex */,undetermined
7239,httpd,UNKNOWN,/* regex to match against */,undetermined
7240,httpd,UNKNOWN,/* compiled regex */,undetermined
7241,httpd,UNKNOWN,/* non-regex pattern to match */,undetermined
7242,httpd,UNKNOWN,/* parsed expression */,undetermined
7243,httpd,UNKNOWN,/* env vars to set (or unset) */,undetermined
7244,httpd,UNKNOWN,"/* is it a ""special"" header ? */",undetermined
7245,httpd,UNKNOWN,/* ignoring case? */,undetermined
7246,httpd,UNKNOWN,"/*
 * These routines, the create- and merge-config functions, are called
 * for both the server-wide and the per-directory contexts.  This is
 * because the different definitions are used at different times; the
 * server-wide ones are used in the post-read-request phase, and the
 * per-directory ones are used during the header-parse phase (after
 * the URI has been mapped to a file and we have anything from the
 * .htaccess file and <Directory> and <Files> containers).
 */",undetermined
7247,httpd,UNKNOWN,"/*
 * any non-NULL magic constant will do... used to indicate if AP_REG_ICASE should
 * be used
 */",undetermined
7248,httpd,UNKNOWN,"/* If a Header name contains characters other than:
     *    -,_,[A-Z\, [a-z] and [0-9].
     * assume the header name is a regular expression.
     */",undetermined
7249,httpd,UNKNOWN,"/* If the input string does not take advantage of regular
 * expression metacharacters, return a pointer to an equivalent
 * string that can be searched using apr_strmatch().  (The
 * returned string will often be the input string.  But if
 * the input string contains escaped characters, the returned
 * string will be a copy with the escapes removed.)
 */",undetermined
7250,httpd,UNKNOWN,"/*
     * Determine from our context into which record to put the entry.
     * cmd->path == NULL means we're in server-wide context; otherwise,
     * we're dealing with a per-directory setting.
     */",undetermined
7251,httpd,UNKNOWN,/* get regex */,undetermined
7252,httpd,UNKNOWN,"/*
     * If we've already got a sei_entry with the same name we want to
     * just copy the name pointer... so that later on we can compare
     * two header names just by comparing the pointers.
     */",undetermined
7253,httpd,UNKNOWN,"/* if the last entry has an identical headername and regex then
     * merge with it
     */",undetermined
7254,httpd,UNKNOWN,"/* no match, create a new entry */",undetermined
7255,httpd,UNKNOWN,"/* Handle fname as a regular expression.
             * If fname a simple header string, identify as such
             * (new->pnamereg = NULL) to avoid the overhead of searching
             * through headers_in for a regex match.
             */",undetermined
7256,httpd,UNKNOWN,/* get header name */,undetermined
7257,httpd,UNKNOWN,"/*
     * Determine from our context into which record to put the entry.
     * cmd->path == NULL means we're in server-wide context; otherwise,
     * we're dealing with a per-directory setting.
     */",undetermined
7258,httpd,UNKNOWN,/* get expr */,undetermined
7259,httpd,UNKNOWN,"/*
 * This routine handles the BrowserMatch* directives.  It simply turns around
 * and feeds them, with the appropriate embellishments, to the general-purpose
 * command handler.
 */",undetermined
7260,httpd,UNKNOWN,"/*
 * This routine gets called at two different points in request processing:
 * once before the URI has been translated (during the post-read-request
 * phase) and once after (during the header-parse phase).  We use different
 * config records for the two different calls to reduce overhead (by not
 * re-doing the server-wide settings during directory processing), and
 * signal which call it is by having the earlier one pass a flag to the
 * later one.
 */",undetermined
7261,httpd,UNKNOWN,"/* Optimize the case where a bunch of directives in a row use the
             * same header.  Remember we don't need to strcmp the two header
             * names because we made sure the pointers were equal during
             * configuration.
             */",undetermined
7262,httpd,UNKNOWN,"/* Matching headers_in against a regex. Iterate through
                         * the headers_in until we find a match or run out of
                         * headers.
                         */",undetermined
7263,httpd,UNKNOWN,/* Not matching against a regex */,undetermined
7264,httpd,UNKNOWN,"/*
         * A NULL value indicates that the header field or special entity
         * wasn't present or is undefined.  Represent that as an empty string
         * so that REs like ""^$"" will work and allow envariable setting
         * based on missing or empty field. This is also necessary to make
         * ap_pregsub work after evaluating an ap_expr_t which does set the
         * regexp backref data.
         */",undetermined
7265,httpd,UNKNOWN,/* dir config creater */,undetermined
7266,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7267,httpd,UNKNOWN,/* server config */,undetermined
7268,httpd,UNKNOWN,/* merge server configs */,undetermined
7269,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7270,httpd,UNKNOWN,/* register hooks */,undetermined
7271,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7272,httpd,UNKNOWN,"/*
 * mod_unique_id.c: generate a unique identifier for each request
 *
 * Original author: Dean Gaudet <dgaudet@arctic.org>
 * UUencoding modified by: Alvaro Martinez Echevarria <alvaro@lander.es>
 */",undetermined
7273,httpd,UNKNOWN,/* for htons() et al */,undetermined
7274,httpd,UNKNOWN,/* for APR_OFFSETOF                */,undetermined
7275,httpd,UNKNOWN,/* for ap_hook_post_read_request */,undetermined
7276,httpd,UNKNOWN,/* for getpid() */,undetermined
7277,httpd,UNKNOWN,"/* We are using thread_index (the index into the scoreboard), because we
 * cannot guarantee the thread_id will be an integer.
 *
 * This code looks like it won't give a unique ID with the new thread logic.
 * It will.  The reason is, we don't increment the counter in a thread_safe
 * manner.  Because the thread_index is also in the unique ID now, this does
 * not matter.  In order for the id to not be unique, the same thread would
 * have to get the same counter twice in the same second.
 */",undetermined
7278,httpd,UNKNOWN,"/* Comments:
 *
 * We want an identifier which is unique across all hits, everywhere.
 * ""everywhere"" includes multiple httpd instances on the same machine, or on
 * multiple machines.  Essentially ""everywhere"" should include all possible
 * httpds across all servers at a particular ""site"".  We make some assumptions
 * that if the site has a cluster of machines then their time is relatively
 * synchronized.  We also assume that the first address returned by a
 * gethostbyname (gethostname()) is unique across all the machines at the
 * ""site"".
 *
 * We also further assume that pids fit in 32-bits.  If something uses more
 * than 32-bits, the fix is trivial, but it requires the unrolled uuencoding
 * loop to be extended.  * A similar fix is needed to support multithreaded
 * servers, using a pid/tid combo.
 *
 * Together, the in_addr and pid are assumed to absolutely uniquely identify
 * this one child from all other currently running children on all servers
 * (including this physical server if it is running multiple httpds) from each
 * other.
 *
 * The stamp and counter are used to distinguish all hits for a particular
 * (in_addr,pid) pair.  The stamp is updated using r->request_time,
 * saving cpu cycles.  The counter is never reset, and is used to permit up to
 * 64k requests in a single second by a single child.
 *
 * The 144-bits of unique_id_rec are encoded using the alphabet
 * [A-Za-z0-9@-], resulting in 24 bytes of printable characters.  That is then
 * stuffed into the environment variable UNIQUE_ID so that it is available to
 * other modules.  The alphabet choice differs from normal base64 encoding
 * [A-Za-z0-9+/] because + and / are special characters in URLs and we want to
 * make it easy to use UNIQUE_ID in URLs.
 *
 * Note that UNIQUE_ID should be considered an opaque token by other
 * applications.  No attempt should be made to dissect its internal components.
 * It is an abstraction that may change in the future as the needs of this
 * module change.
 *
 * It is highly desirable that identifiers exist for ""eternity"".  But future
 * needs (such as much faster webservers, moving to 64-bit pids, or moving to a
 * multithreaded server) may dictate a need to change the contents of
 * unique_id_rec.  Such a future implementation should ensure that the first
 * field is still a time_t stamp.  By doing that, it is possible for a site to
 * have a ""flag second"" in which they stop all of their old-format servers,
 * wait one entire second, and then start all of their new-servers.  This
 * procedure will ensure that the new space of identifiers is completely unique
 * from the old space.  (Since the first four unencoded bytes always differ.)
 */",undetermined
7279,httpd,UNKNOWN,"/*
 * Sun Jun  7 05:43:49 CEST 1998 -- Alvaro
 * More comments:
 * 1) The UUencoding prodecure is now done in a general way, avoiding the problems
 * with sizes and paddings that can arise depending on the architecture. Now the
 * offsets and sizes of the elements of the unique_id_rec structure are calculated
 * in unique_id_global_init; and then used to duplicate the structure without the
 * paddings that might exist. The multithreaded server fix should be now very easy:
 * just add a new ""tid"" field to the unique_id_rec structure, and increase by one
 * UNIQUE_ID_REC_MAX.
 * 2) unique_id_rec.stamp has been changed from ""time_t"" to ""unsigned int"", because
 * its size is 64bits on some platforms (linux/alpha), and this caused problems with
 * htonl/ntohl. Well, this shouldn't be a problem till year 2106.
 */",undetermined
7280,httpd,UNKNOWN,"/*
 * XXX: We should have a per-thread counter and not use cur_unique_id.counter
 * XXX: in all threads, because this is bad for performance on multi-processor
 * XXX: systems: Writing to the same address from several CPUs causes cache
 * XXX: thrashing.
 */",undetermined
7281,httpd,UNKNOWN,"/*
 * Number of elements in the structure unique_id_rec.
 */",undetermined
7282,httpd,UNKNOWN,"/*
     * Calculate the sizes and offsets in cur_unique_id.
     */",undetermined
7283,httpd,UNKNOWN,"/*
     * Calculate the size of the structure when encoded.
     */",undetermined
7284,httpd,UNKNOWN,"/*
     * Now get the global in_addr.  Note that it is not sufficient to use one
     * of the addresses from the main_server, since those aren't as likely to
     * be unique as the physical address of the machine
     */",undetermined
7285,httpd,UNKNOWN,"/*
     * If the server is pummelled with restart requests we could possibly end
     * up in a situation where we're starting again during the same second
     * that has been used in previous identifiers.  Avoid that situation.
     *
     * In truth, for this to actually happen not only would it have to restart
     * in the same second, but it would have to somehow get the same pids as
     * one of the other servers that was running in that second. Which would
     * mean a 64k wraparound on pids ... not very likely at all.
     *
     * But protecting against it is relatively cheap.  We just sleep into the
     * next second.
     */",undetermined
7286,httpd,UNKNOWN,"/*
     * Note that we use the pid because it's possible that on the same
     * physical machine there are multiple servers (i.e. using Listen). But
     * it's guaranteed that none of them will share the same pids between
     * children.
     *
     * XXX: for multithread this needs to use a pid/tid combo and probably
     * needs to be expanded to 32 bits
     */",undetermined
7287,httpd,UNKNOWN,"/*
     * Test our assumption that the pid is 32-bits.  It's possible that
     * 64-bit machines will declare pid_t to be 64 bits but only use 32
     * of them.  It would have been really nice to test this during
     * global_init ... but oh well.
     */",undetermined
7288,httpd,UNKNOWN,"/*
     * If we use 0 as the initial counter we have a little less protection
     * against restart problems, and a little less protection against a clock
     * going backwards in time.
     */",undetermined
7289,httpd,UNKNOWN,"/*
     * We must always use network ordering for these bytes, so that
     * identifiers are comparable between machines of different byte
     * orderings.  Note in_addr is already in network order.
     */",undetermined
7290,httpd,UNKNOWN,"/* NOTE: This is *NOT* the same encoding used by base64encode ... the last two
 * characters should be + and /.  But those two characters have very special
 * meanings in URLs, and we want to make it easy to use identifiers in
 * URLs.  So we replace them with @ and -.
 */",undetermined
7291,httpd,UNKNOWN,"/*
     * Buffer padded with two final bytes, used to copy the unique_id_red
     * structure without the internal paddings that it could have.
     */",undetermined
7292,httpd,UNKNOWN,"/* we'll use a temporal buffer to avoid uuencoding the possible internal
     * paddings of the original structure */",undetermined
7293,httpd,UNKNOWN,"/*
     * We reset two more bytes just in case padding is needed for the uuencoding.
     */",undetermined
7294,httpd,UNKNOWN,/* alloc str and do the uuencoding */,undetermined
7295,httpd,UNKNOWN,/* and increment the identifier for the next call */,undetermined
7296,httpd,UNKNOWN,"/*
 * There are two ways the generation of a unique id can be triggered:
 *
 * - from the post_read_request hook which calls set_unique_id()
 * - from error logging via the generate_log_id hook which calls
 *   generate_log_id(). This may happen before or after set_unique_id()
 *   has been called, or not at all.
 */",undetermined
7297,httpd,UNKNOWN,/* we do not care about connection ids */,undetermined
7298,httpd,UNKNOWN,/* XXX: do we need special handling for internal redirects? */,undetermined
7299,httpd,UNKNOWN,"/* if set_unique_id() has been called for this request, use it */",undetermined
7300,httpd,UNKNOWN,"/* copy the unique_id if this is an internal redirect (we're never
     * actually called for sub requests, so we don't need to test for
     * them) */",undetermined
7301,httpd,UNKNOWN,"/* if we have a log id, it was set by our generate_log_id() function
         * and we should reuse the same id
         */",undetermined
7302,httpd,UNKNOWN,/* set the environment variable */,undetermined
7303,httpd,UNKNOWN,/* dir config creater */,undetermined
7304,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7305,httpd,UNKNOWN,/* server config */,undetermined
7306,httpd,UNKNOWN,/* merge server configs */,undetermined
7307,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7308,httpd,UNKNOWN,/* register hooks */,undetermined
7309,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7310,httpd,UNKNOWN,"/* User Tracking Module (Was mod_cookies.c)
 *
 * *** IMPORTANT NOTE: This module is not designed to generate
 * *** cryptographically secure cookies.  This means you should not
 * *** use cookies generated by this module for authentication purposes
 *
 * This Apache module is designed to track users paths through a site.
 * It uses the client-side state (""Cookie"") protocol developed by Netscape.
 * It is known to work on most browsers.
 *
 * Each time a page is requested we look to see if the browser is sending
 * us a Cookie: header that we previously generated.
 *
 * If we don't find one then the user hasn't been to this site since
 * starting their browser or their browser doesn't support cookies.  So
 * we generate a unique Cookie for the transaction and send it back to
 * the browser (via a ""Set-Cookie"" header)
 * Future requests from the same browser should keep the same Cookie line.
 *
 * By matching up all the requests with the same cookie you can
 * work out exactly what path a user took through your site.  To log
 * the cookie use the "" %{Cookie}n "" directive in a custom access log;
 *
 * Example 1 : If you currently use the standard Log file format (CLF)
 * and use the command ""TransferLog somefilename"", add the line
 *       LogFormat ""%h %l %u %t \""%r\"" %s %b %{Cookie}n""
 * to your config file.
 *
 * Example 2 : If you used to use the old ""CookieLog"" directive, you
 * can emulate it by adding the following command to your config file
 *       CustomLog filename ""%{Cookie}n \""%r\"" %t""
 *
 * Mark Cox, mjc@apache.org, 6 July 95
 *
 * This file replaces mod_cookies.c
 */",undetermined
7311,httpd,UNKNOWN,/* used to compile regexp; save for debugging */,undetermined
7312,httpd,UNKNOWN,/* used to find usertrack cookie in cookie header */,undetermined
7313,httpd,UNKNOWN,"/* Make Cookie: Now we have to generate something that is going to be
 * pretty unique.  We can base it on the pid, time, hostip */",undetermined
7314,httpd,UNKNOWN,"/* Cookie with date; as strftime '%a, %d-%h-%y %H:%M:%S GMT' */",undetermined
7315,httpd,UNKNOWN,/* log first time */,undetermined
7316,httpd,UNKNOWN,"/* dcfg->regexp is ""^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)"",
 * which has three subexpressions, $0..$2 */",undetermined
7317,httpd,UNKNOWN,"/* The goal is to end up with this regexp,
     * ^cookie_name=([^;,]+)|[;,][ \t]+cookie_name=([^;,]+)
     * with cookie_name obviously substituted either
     * with the real cookie name set by the user in httpd.conf, or with the
     * default COOKIE_NAME. */",undetermined
7318,httpd,UNKNOWN,"/* Anyway, we need to escape the cookie_name before pasting it
     * into the regex
     */",undetermined
7319,httpd,UNKNOWN,/* 1 == \0 */,undetermined
7320,httpd,UNKNOWN,/* Do not run in subrequests */,undetermined
7321,httpd,UNKNOWN,"/* Our regexp,
             * ^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)
             * only allows for $1 or $2 to be available. ($0 is always
             * filled with the entire matched expression, not just
             * the part in parentheses.) So just check for either one
             * and assign to cookieval if present. */",undetermined
7322,httpd,UNKNOWN,"/* Set the cookie in a note, for logging */",undetermined
7323,httpd,UNKNOWN,"/* There's already a cookie, no new one */",undetermined
7324,httpd,UNKNOWN,/* We set our cookie */,undetermined
7325,httpd,UNKNOWN,"/* In case the user does not use the CookieName directive,
     * we need to compile the regexp for the default cookie name. */",undetermined
7326,httpd,UNKNOWN,/* The simple case first - all numbers (we assume) */,undetermined
7327,httpd,UNKNOWN,"/*
     * The harder case - stolen from mod_expires
     *
     * CookieExpires ""[plus] {<num> <type>}*""
     */",undetermined
7328,httpd,UNKNOWN,/* {<num> <type>}* */,undetermined
7329,httpd,UNKNOWN,/* <num> */,undetermined
7330,httpd,UNKNOWN,/* <type> */,undetermined
7331,httpd,UNKNOWN,/* next <num> */,undetermined
7332,httpd,UNKNOWN,"/*
 * Set the value for the 'Domain=' attribute.
 */",undetermined
7333,httpd,UNKNOWN,"/*
     * Apply the restrictions on cookie domain attributes.
     */",undetermined
7334,httpd,UNKNOWN,"/*
 * Make a note of the cookie style we should use.
 */",undetermined
7335,httpd,UNKNOWN,/* dir config creater */,undetermined
7336,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7337,httpd,UNKNOWN,/* server config */,undetermined
7338,httpd,UNKNOWN,/* merge server configs */,undetermined
7339,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7340,httpd,UNKNOWN,/* register hooks */,undetermined
7341,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7342,httpd,UNKNOWN,"/*
 * mod_version.c
 * Allow conditional configuration depending on the httpd version
 *
 * André Malo (nd/perlig.de), January 2004
 *
 * Some stuff coded here is heavily based on the core <IfModule>
 * containers.
 *
 * The module makes the following confgurations possible:
 *
 * <IfVersion op major.minor.patch>
 *     # conditional config here ...
 *</IfVersion>
 *
 * where ""op"" is one of:
 * = / ==       equal
 * >            greater than
 * >=           greater or equal
 * <            less than
 * <=           less or equal
 *
 * If minor version and patch level are omitted they are assumed to be 0.
 *
 * Alternatively you can match the whole version (including some vendor-added
 * string of the CORE version, see ap_release.h) against a regular expression:
 *
 * <IfVersion op regex>
 *     # conditional config here ...
 *</IfVersion>
 *
 * where ""op"" is one of:
 * = / ==       match; regex must be surrounded by slashes
 * ~            match; regex MAY NOT be surrounded by slashes
 *
 * Note that all operators may be preceeded by an exclamation mark
 * (without spaces) in order to reverse their meaning.
 *
 */",undetermined
7343,httpd,UNKNOWN,/* module structure */,undetermined
7344,httpd,UNKNOWN,/* queried httpd version */,undetermined
7345,httpd,UNKNOWN,"/*
 * compare the supplied version with the core one
 */",undetermined
7346,httpd,UNKNOWN,/* parse supplied version */,undetermined
7347,httpd,UNKNOWN,/* syntax error */,undetermined
7348,httpd,UNKNOWN,/* seems to be the same */,undetermined
7349,httpd,UNKNOWN,"/*
 * match version against a regular expression
 */",undetermined
7350,httpd,UNKNOWN,"/*
 * Implements the <IfVersion> container
 */",undetermined
7351,httpd,UNKNOWN,"/* supplying one argument is possible, we assume an equality check then */",undetermined
7352,httpd,UNKNOWN,/* surrounding quotes without operator */,undetermined
7353,httpd,UNKNOWN,"/* the third argument makes version surrounding quotes plus operator
     * possible.
     */",undetermined
7354,httpd,UNKNOWN,/* normal comparison */,undetermined
7355,httpd,UNKNOWN,/* regexp otherwise */,undetermined
7356,httpd,UNKNOWN,/* regular expression */,undetermined
7357,httpd,UNKNOWN,/* dir config creater */,undetermined
7358,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7359,httpd,UNKNOWN,/* server config */,undetermined
7360,httpd,UNKNOWN,/* merge server configs */,undetermined
7361,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7362,httpd,UNKNOWN,/* register hooks */,undetermined
7363,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7364,httpd,UNKNOWN,"/*
 * mod_actions.c: executes scripts based on MIME type or HTTP method
 *
 * by Alexei Kosut; based on mod_cgi.c, mod_mime.c and mod_includes.c,
 * adapted by rst from original NCSA code by Rob McCool
 *
 * Usage instructions:
 *
 * Action mime/type /cgi-bin/script
 *
 * will activate /cgi-bin/script when a file of content type mime/type is
 * requested. It sends the URL and file path of the requested document using
 * the standard CGI PATH_INFO and PATH_TRANSLATED environment variables.
 *
 * Script PUT /cgi-bin/script
 *
 * will activate /cgi-bin/script when a request is received with the
 * HTTP method ""PUT"".  The available method names are defined in httpd.h.
 * If the method is GET, the script will only be activated if the requested
 * URI includes query information (stuff after a ?-mark).
 */",undetermined
7365,httpd,UNKNOWN,/* Added with Action... */,undetermined
7366,httpd,UNKNOWN,/* Added with Script... */,undetermined
7367,httpd,UNKNOWN,"/* True if Action or Script has been
                      * called at least once
                      */",undetermined
7368,httpd,UNKNOWN,"/* In .htaccess, we can't globally register new methods. */",undetermined
7369,httpd,UNKNOWN,"/* ap_method_register recognizes already registered methods,
         * so don't bother to check its previous existence explicitely.
         */",undetermined
7370,httpd,UNKNOWN,"/* Note that this handler handles _all_ types, so handler is unchecked */",undetermined
7371,httpd,UNKNOWN,/* Set allowed stuff */,undetermined
7372,httpd,UNKNOWN,"/* First, check for the method-handling scripts */",undetermined
7373,httpd,UNKNOWN,"/* Check for looping, which can happen if the CGI script isn't */",undetermined
7374,httpd,UNKNOWN,"/* Second, check for actions (which override the method scripts) */",undetermined
7375,httpd,UNKNOWN,"/* propagate the handler name to the script
         * (will be REDIRECT_HANDLER there)
         */",undetermined
7376,httpd,UNKNOWN,/* dir config creater */,undetermined
7377,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7378,httpd,UNKNOWN,/* server config */,undetermined
7379,httpd,UNKNOWN,/* merge server config */,undetermined
7380,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7381,httpd,UNKNOWN,/* register hooks */,undetermined
7382,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7383,httpd,UNKNOWN,"/*
 * http_alias.c: Stuff for dealing with directory aliases
 *
 * Original by Rob McCool, rewritten in succession by David Robinson
 * and rst.
 *
 */",undetermined
7384,httpd,UNKNOWN,"/* 301, 302, 303, 410, etc */",undetermined
7385,httpd,UNKNOWN,/* need prototype for overlap check */,undetermined
7386,httpd,UNKNOWN,/* XXX: real can NOT be relative to DocumentRoot here... compat bug. */,undetermined
7387,httpd,UNKNOWN,"/* XXX This may be optimized, but we must know that new->real
         * exists.  If so, we can dir merge later, trusing new->real
         * and just canonicalizing the remainder.  Not till I finish
         * cleaning out the old ap_canonical stuff first.
         */",undetermined
7388,httpd,UNKNOWN,"/* check for overlapping (Script)Alias directives
     * and throw a warning if found one
     */",undetermined
7389,httpd,UNKNOWN,/* one warning per alias should be sufficient */,undetermined
7390,httpd,UNKNOWN,"/*
     * Logic flow:
     *   Go ahead and try to grok the 1st arg, in case it is a
     *   Redirect status. Now if we have 3 args, we expect that
     *   we were able to understand that 1st argument (it's something
     *   we expected, so if not, then we bail
     */",undetermined
7391,httpd,UNKNOWN,"/*
     * if we don't have the 3rd arg and we didn't understand the 1st
     * one, then assume URL-path URL. This also handles case, eg, GONE
     * we even though we don't have a 3rd arg, we did understand the 1st
     * one, so we don't want to re-arrange
     */",undetermined
7392,httpd,UNKNOWN,"/* PR#35314: we can allow path components here;
         * they get correctly resolved to full URLs.
         */",undetermined
7393,httpd,UNKNOWN,"/* any number of '/' in the alias matches any number in
             * the supplied URI, but there must be at least one...
             */",undetermined
7394,httpd,UNKNOWN,/* Other characters are compared literally */,undetermined
7395,httpd,UNKNOWN,/* Check last alias path component matched all the way */,undetermined
7396,httpd,UNKNOWN,"/* Return number of characters from URI which matched (may be
     * greater than length of alias, since we may have matched
     * doubled slashes)
     */",undetermined
7397,httpd,UNKNOWN,/* Do not escape the query string or fragment. */,undetermined
7398,httpd,UNKNOWN,/* need something non-null */,undetermined
7399,httpd,UNKNOWN,"/* Set handler, and leave a note for mod_cgi */",undetermined
7400,httpd,UNKNOWN,"/* XXX This is as SLOW as can be, next step, we optimize
             * and merge to whatever part of the found path was already
             * canonicalized.  After I finish eliminating os canonical.
             * Better fail test for ap_server_root_relative needed here.
             */",undetermined
7401,httpd,UNKNOWN,"/* append requested query only, if the config didn't
                 * supply its own.
                 */",undetermined
7402,httpd,UNKNOWN,"/* It may have changed since last time, so try again */",undetermined
7403,httpd,UNKNOWN,"/* append requested query only, if the config didn't
                 * supply its own.
                 */",undetermined
7404,httpd,UNKNOWN,/* dir config creater */,undetermined
7405,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7406,httpd,UNKNOWN,/* server config */,undetermined
7407,httpd,UNKNOWN,/* merge server configs */,undetermined
7408,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7409,httpd,UNKNOWN,/* register hooks */,undetermined
7410,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7411,httpd,UNKNOWN,"/*
 * mod_dir.c: handle default index files, and trailing-/ redirects
 */",undetermined
7412,httpd,UNKNOWN,"/* peek to see if ""disabled"" is first in a series of arguments */",undetermined
7413,httpd,UNKNOWN,"/* ""disabled"" is first, and alone */",undetermined
7414,httpd,UNKNOWN,"/* XXX: if FallbackResource points to something that doesn't exist,
     * this may recurse until it hits the limit for internal redirects
     * before returning an Internal Server Error.
     */",undetermined
7415,httpd,UNKNOWN,"/* The logic of this function is basically cloned and simplified
     * from fixup_dir below.  See the comments there.
     */",undetermined
7416,httpd,UNKNOWN,"/* nothing for us to do, pass on through */",undetermined
7417,httpd,UNKNOWN,"/* In case mod_mime wasn't present, and no handler was assigned. */",undetermined
7418,httpd,UNKNOWN,/* Never tolerate path_info on dir requests */,undetermined
7419,httpd,UNKNOWN,/* Redirect requests that are not '/' terminated */,undetermined
7420,httpd,UNKNOWN,"/* Only redirect non-get requests if we have no note to warn
         * that this browser cannot handle redirs on non-GET requests
         * (such as Microsoft's WebFolders).
         */",undetermined
7421,httpd,UNKNOWN,"/* XXX: Is this name_ptr considered escaped yet, or not??? */",undetermined
7422,httpd,UNKNOWN,"/* Once upon a time args were handled _after_ the successful redirect.
         * But that redirect might then _refuse_ the given r->args, creating
         * a nasty tangle.  It seems safer to consider the r->args while we
         * determine if name_ptr is our viable index, and therefore set them
         * up correctly on redirect.
         */",undetermined
7423,httpd,UNKNOWN,"/* The sub request lookup is very liberal, and the core map_to_storage
         * handler will almost always result in HTTP_OK as /foo/index.html
         * may be /foo with PATH_INFO=""/index.html"", or even / with
         * PATH_INFO=""/foo/index.html"". To get around this we insist that the
         * the index be a regular filetype.
         *
         * Another reason is that the core handler also makes the assumption
         * that if r->finfo is still NULL by the time it gets called, the
         * file does not exist.
         */",undetermined
7424,httpd,UNKNOWN,"/* If the request returned a redirect, propagate it to the client */",undetermined
7425,httpd,UNKNOWN,"/* If the request returned something other than 404 (or 200),
         * it means the module encountered some sort of problem. To be
         * secure, we should return the error, rather than allow autoindex
         * to create a (possibly unsafe) directory index.
         *
         * So we store the error, and if none of the listed files
         * exist, we return the last error response we got, instead
         * of a directory listing.
         */",undetermined
7426,httpd,UNKNOWN,"/* record what we tried, mostly for the benefit of mod_autoindex */",undetermined
7427,httpd,UNKNOWN,"/* nothing for us to do, pass on through */",undetermined
7428,httpd,UNKNOWN,/* serve up a directory */,undetermined
7429,httpd,UNKNOWN,/* No handler and nothing in the filesystem - use fallback */,undetermined
7430,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
7431,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
7432,httpd,UNKNOWN,/* create per-server config structure */,undetermined
7433,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
7434,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7435,httpd,UNKNOWN,/* register hooks */,undetermined
7436,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7437,httpd,UNKNOWN,"/*
 * This imagemap module started as a port of the original imagemap.c
 * written by Rob McCool (11/13/93 robm@ncsa.uiuc.edu).
 * This version includes the mapping algorithms found in version 1.3
 * of imagemap.c.
 *
 * Contributors to this code include:
 *
 * Kevin Hughes, kevinh@pulua.hcc.hawaii.edu
 *
 * Eric Haines, erich@eye.com
 * ""macmartinized"" polygon code copyright 1992 by Eric Haines, erich@eye.com
 *
 * Randy Terbush, randy@zyzzyva.com
 * port to Apache module format, ""base_uri"" and support for relative URLs
 *
 * James H. Cloos, Jr., cloos@jhcloos.com
 * Added point datatype, using code in NCSA's version 1.8 imagemap.c
 * program, as distributed with version 1.4.1 of their server.
 * The point code is originally added by Craig Milo Rogers, Rogers@ISI.Edu
 *
 * Nathan Kurz, nate@tripod.com
 * Rewrite/reorganization.  New handling of default, base and relative URLs.
 * New Configuration directives:
 *    ImapMenu {none, formatted, semiformatted, unformatted}
 *    ImapDefault {error, nocontent, referer, menu, URL}
 *    ImapBase {map, referer, URL}
 * Support for creating non-graphical menu added.  (backwards compatible):
 *    Old:  directive URL [x,y ...]
 *    New:  directive URL ""Menu text"" [x,y ...]
 *     or:  directive URL x,y ... ""Menu text""
 * Map format and menu concept courtesy Joshua Bell, jsbell@acs.ucalgary.ca.
 *
 * Mark Cox, mark@ukweb.com, Allow relative URLs even when no base specified
 */",undetermined
7438,httpd,UNKNOWN,/* for sscanf() */,undetermined
7439,httpd,UNKNOWN,/* just counting the vertexes */,undetermined
7440,httpd,UNKNOWN,/* don't mess around with negative coordinates */,undetermined
7441,httpd,UNKNOWN,"/* if this is the first point or is the closest yet
                                set 'closest' equal to this distance^2 */",undetermined
7442,httpd,UNKNOWN,/* if it's not the first or closest */,undetermined
7443,httpd,UNKNOWN,/* we want it non-null */,undetermined
7444,httpd,UNKNOWN,/* -1 is returned if no coordinate is given */,undetermined
7445,httpd,UNKNOWN,/* in case we aren't passed anything */,undetermined
7446,httpd,UNKNOWN,"/* jump to the first digit, but not past
                                   a comma or end */",undetermined
7447,httpd,UNKNOWN,/* if a conversion was made */,undetermined
7448,httpd,UNKNOWN,"/* else if no conversion was made,
                                   or if no args was given */",undetermined
7449,httpd,UNKNOWN,/* we want it non-null */,undetermined
7450,httpd,UNKNOWN,/* -1 is returned on error */,undetermined
7451,httpd,UNKNOWN,/* in case we aren't passed anything */,undetermined
7452,httpd,UNKNOWN,/* the comma */,undetermined
7453,httpd,UNKNOWN,"/* start looking at the character after
                                   the comma */",undetermined
7454,httpd,UNKNOWN,"/* jump to the first digit, but not
                                   past the end */",undetermined
7455,httpd,UNKNOWN,"/* if no conversion was made, or
                                   no comma was found in args */",undetermined
7456,httpd,UNKNOWN,"/* See if string has a ""quoted part"", and if so set *quoted_part to
 * the first character of the quoted part, then hammer a \0 onto the
 * trailing quote, and set *string to point at the first character
 * past the second quote.
 *
 * Otherwise set *quoted_part to NULL, and leave *string alone.
 */",undetermined
7457,httpd,UNKNOWN,/* assume there's no quoted part */,undetermined
7458,httpd,UNKNOWN,/* go along string until non-whitespace */,undetermined
7459,httpd,UNKNOWN,/* if that character is a double quote */,undetermined
7460,httpd,UNKNOWN,/* step over it */,undetermined
7461,httpd,UNKNOWN,/* note where the quoted part begins */,undetermined
7462,httpd,UNKNOWN,/* skip the quoted portion */,undetermined
7463,httpd,UNKNOWN,/* end the string with a NUL */,undetermined
7464,httpd,UNKNOWN,/* step over the last double quote */,undetermined
7465,httpd,UNKNOWN,"/*
 * returns the mapped URL or NULL.
 */",undetermined
7466,httpd,UNKNOWN,/* translates a value into a URL. */,undetermined
7467,httpd,UNKNOWN,"/* these are handled elsewhere,
                                                so just copy them */",undetermined
7468,httpd,UNKNOWN,"/* XXX:  This used to do *value = '\0'; ... which is totally bogus
             * because it hammers the passed in value, which can be a string
             * constant, or part of a config, or whatever.  Total garbage.
             * This works around that without changing the rest of this
             * code much
             */",undetermined
7469,httpd,UNKNOWN,"/* if 'referer' but no referring page,
                                null the value */",undetermined
7470,httpd,UNKNOWN,"/* go along the URL from the map
                                         until a non-letter */",undetermined
7471,httpd,UNKNOWN,/* if letters and then a colon (like http:) */,undetermined
7472,httpd,UNKNOWN,"/* it's an absolute URL, so use it! */",undetermined
7473,httpd,UNKNOWN,/* no base: use what is given */,undetermined
7474,httpd,UNKNOWN,"/* no base, no value: pick a simple default */",undetermined
7475,httpd,UNKNOWN,/* must be a relative URL to be combined with base */,undetermined
7476,httpd,UNKNOWN,"/* if there are two slashes, jump over them */",undetermined
7477,httpd,UNKNOWN,/* the first single slash */,undetermined
7478,httpd,UNKNOWN,"/* if the URL from the map starts from root,
                                   end the base URL string at the first single
                                   slash */",undetermined
7479,httpd,UNKNOWN,"/* save the start of
                                                   the directory portion */",undetermined
7480,httpd,UNKNOWN,"/* now reuse
                                                           string_pos */",undetermined
7481,httpd,UNKNOWN,/* step over that last slash */,undetermined
7482,httpd,UNKNOWN,"/* but if the map url is relative, leave the
                                   slash on the base (if there is one) */",undetermined
7483,httpd,UNKNOWN,"/* until we get to the end of my_base without
                                   finding a slash by itself */",undetermined
7484,httpd,UNKNOWN,"/* for each '..',  knock a directory off the end
               by ending the string right at the last slash.
               But only consider the directory portion: don't eat
               into the server name.  And only try if a directory
               portion was found */",undetermined
7485,httpd,UNKNOWN,"/* jump over the '..' that we found in the
                                   value */",undetermined
7486,httpd,UNKNOWN,"/* step over the '/' if there are more '..'
                                   to do.  This way, we leave the starting
                                   '/' on value after the last '..', but get
                                   rid of it otherwise */",undetermined
7487,httpd,UNKNOWN,"/* by this point, value does not start
                                   with '..' */",undetermined
7488,httpd,UNKNOWN,/* they actually requested an error! */,undetermined
7489,httpd,UNKNOWN,/* tell the client to keep the page it has */,undetermined
7490,httpd,UNKNOWN,"/* must be a URL, so redirect to it */",undetermined
7491,httpd,UNKNOWN,/* print just a newline if 'formatted' */,undetermined
7492,httpd,UNKNOWN,"/* comments are ignored in the
                                   'formatted' form */",undetermined
7493,httpd,UNKNOWN,"/* don't print such lines, these aren't
                                   really href's */",undetermined
7494,httpd,UNKNOWN,"/* don't print such lines, as this isn't
                                   really an href */",undetermined
7495,httpd,UNKNOWN,/* finish the menu */,undetermined
7496,httpd,UNKNOWN,"/* set base according
                                                    to default */",undetermined
7497,httpd,UNKNOWN,"/* and default to
                                                    global default */",undetermined
7498,httpd,UNKNOWN,/* if either is -1 or if both are zero (new Lynx) */,undetermined
7499,httpd,UNKNOWN,/* we don't have valid coordinates */,undetermined
7500,httpd,UNKNOWN,"/* show the menu _unless_ ImapMenu is
                                   'none' or 'no' */",undetermined
7501,httpd,UNKNOWN,"/* send start of imagemap menu if
                                   we're going to */",undetermined
7502,httpd,UNKNOWN,"/* blank lines and comments are ignored
                                   if we aren't printing a menu */",undetermined
7503,httpd,UNKNOWN,"/* find the first two space delimited fields, recall that
         * ap_cfg_getline has removed leading/trailing whitespace.
         *
         * note that we're tokenizing as we go... if we were to use the
         * ap_getword() class of functions we would end up allocating extra
         * memory for every line of the map file
         */",undetermined
7504,httpd,UNKNOWN,/* need at least two fields */,undetermined
7505,httpd,UNKNOWN,/* past directive */,undetermined
7506,httpd,UNKNOWN,/* need at least two fields */,undetermined
7507,httpd,UNKNOWN,/* need at least two fields */,undetermined
7508,httpd,UNKNOWN,/* past whitespace */,undetermined
7509,httpd,UNKNOWN,/* past value */,undetermined
7510,httpd,UNKNOWN,"/* end of input, don't advance past it */",undetermined
7511,httpd,UNKNOWN,"/* base, base_uri */",undetermined
7512,httpd,UNKNOWN,/* base is never printed to a menu */,undetermined
7513,httpd,UNKNOWN,/* default */,undetermined
7514,httpd,UNKNOWN,/* print the default if there's a menu */,undetermined
7515,httpd,UNKNOWN,/* Now skip what we just read... we can't use ANSIism %n */,undetermined
7516,httpd,UNKNOWN,/* past whitespace */,undetermined
7517,httpd,UNKNOWN,/* and the 1st number */,undetermined
7518,httpd,UNKNOWN,"/* skip the ',' */",undetermined
7519,httpd,UNKNOWN,/* past any more whitespace */,undetermined
7520,httpd,UNKNOWN,/* 2nd number */,undetermined
7521,httpd,UNKNOWN,"/* so long as there are more vertices to
                                   read, and we have room, read them in.
                                   We start where we left off of the last
                                   sscanf, not at the beginning. */",undetermined
7522,httpd,UNKNOWN,/* signals the end of vertices */,undetermined
7523,httpd,UNKNOWN,"/* href text could
                                                             be here instead */",undetermined
7524,httpd,UNKNOWN,/* note that we don't make it past here if we are making a menu */,undetermined
7525,httpd,UNKNOWN,"/* don't try the following tests if testpoints
                                   are invalid, or if there are no
                                   coordinates */",undetermined
7526,httpd,UNKNOWN,/* poly */,undetermined
7527,httpd,UNKNOWN,/* circle */,undetermined
7528,httpd,UNKNOWN,/* rect */,undetermined
7529,httpd,UNKNOWN,/* point */,undetermined
7530,httpd,UNKNOWN,"/* move on to next line whether it's
                                   closest or not */",undetermined
7531,httpd,UNKNOWN,"/* nothing matched, so we get another line! */",undetermined
7532,httpd,UNKNOWN,/* we are done with the map file; close it */,undetermined
7533,httpd,UNKNOWN,/* finish the menu and we are done */,undetermined
7534,httpd,UNKNOWN,/* if a 'point' directive has been seen */,undetermined
7535,httpd,UNKNOWN,"/* a default should be defined, even if
                                  only 'nocontent' */",undetermined
7536,httpd,UNKNOWN,"/* If we make it this far,
                                                 we failed. They lose! */",undetermined
7537,httpd,UNKNOWN,/* fall through */,undetermined
7538,httpd,UNKNOWN,"/* There's not much else we can do ... we've already sent the headers
         * to the client.
         */",undetermined
7539,httpd,UNKNOWN,"/* Optimization: skip the allocation of large local variables on the
     * stack (in imap_handler_internal()) on requests that aren't using
     * imagemaps
     */",undetermined
7540,httpd,UNKNOWN,/* dir config creater */,undetermined
7541,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7542,httpd,UNKNOWN,/* server config */,undetermined
7543,httpd,UNKNOWN,/* merge server config */,undetermined
7544,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7545,httpd,UNKNOWN,/* register hooks */,undetermined
7546,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7547,httpd,UNKNOWN,"/*
 * mod_negotiation.c: keeps track of MIME types the client is willing to
 * accept, and contains code to handle type arbitration.
 *
 * rst
 */",undetermined
7548,httpd,UNKNOWN,"/* Commands --- configuring document caching on a per (virtual?)
 * server basis...
 */",undetermined
7549,httpd,UNKNOWN,"/* forcelangpriority flags
 */",undetermined
7550,httpd,UNKNOWN,"/* Same as FLP_DEFAULT, but base overrides */",undetermined
7551,httpd,UNKNOWN,"/* Return 406, HTTP_NOT_ACCEPTABLE */",undetermined
7552,httpd,UNKNOWN,/* Use language_priority rather than MC */,undetermined
7553,httpd,UNKNOWN,/* Use language_priority rather than NA */,undetermined
7554,httpd,UNKNOWN,"/* env evaluation
 */",undetermined
7555,httpd,UNKNOWN,/* no-gzip */,undetermined
7556,httpd,UNKNOWN,/* gzip-only-text/html */,undetermined
7557,httpd,UNKNOWN,/* give priority to the config in the subdirectory */,undetermined
7558,httpd,UNKNOWN,"/*
 * Record of available info on a media type specified by the client
 * (we also use 'em for encodings and languages)
 */",undetermined
7559,httpd,UNKNOWN,/* MUST be lowercase */,undetermined
7560,httpd,UNKNOWN,/* for content-type only */,undetermined
7561,httpd,UNKNOWN,"/*
 * Record of available info on a particular variant
 *
 * Note that a few of these fields are updated by the actual negotiation
 * code.  These are:
 *
 * level_matched --- initialized to zero.  Set to the value of level
 *             if the client actually accepts this media type at that
 *             level (and *not* if it got in on a wildcard).  See level_cmp
 *             below.
 * mime_stars -- initialized to zero.  Set to the number of stars
 *               present in the best matching Accept header element.
 *               1 for star/star, 2 for type/star and 3 for
 *               type/subtype.
 *
 * definite -- initialized to 1.  Set to 0 if there is a match which
 *             makes the variant non-definite according to the rules
 *             in rfc2296.
 */",undetermined
7562,httpd,UNKNOWN,"/* May be NULL (is, for map files) */",undetermined
7563,httpd,UNKNOWN,/* MUST be lowercase */,undetermined
7564,httpd,UNKNOWN,/* Set to 'this' (for map file body content) */,undetermined
7565,httpd,UNKNOWN,/* Only for map file body content */,undetermined
7566,httpd,UNKNOWN,/* list of lang. for this variant */,undetermined
7567,httpd,UNKNOWN,"/* The next five items give the quality values for the dimensions
     * of negotiation for this variant. They are obtained from the
     * appropriate header lines, except for source_quality, which
     * is obtained from the variant itself (the 'qs' parameter value
     * from the variant's mime-type). Apart from source_quality,
     * these values are set when we find the quality for each variant
     * (see best_match()). source_quality is set from the 'qs' parameter
     * of the variant description or mime type: see set_mime_fields().
     */",undetermined
7568,httpd,UNKNOWN,/* quality of this variant's language */,undetermined
7569,httpd,UNKNOWN,/* ditto encoding */,undetermined
7570,httpd,UNKNOWN,/* ditto charset */,undetermined
7571,httpd,UNKNOWN,/* ditto media type */,undetermined
7572,httpd,UNKNOWN,/* source quality for this variant */,undetermined
7573,httpd,UNKNOWN,/* Now some special values */,undetermined
7574,httpd,UNKNOWN,/* Auxiliary to content-type... */,undetermined
7575,httpd,UNKNOWN,"/* content length, if known */",undetermined
7576,httpd,UNKNOWN,/* Index into LanguagePriority list */,undetermined
7577,httpd,UNKNOWN,"/* text/html, *or* the INCLUDES_MAGIC_TYPEs */",undetermined
7578,httpd,UNKNOWN,"/* Above are all written-once properties of the variant.  The
     * three fields below are changed during negotiation:
     */",undetermined
7579,httpd,UNKNOWN,"/* Something to carry around the state of negotiation (and to keep
 * all of this thread-safe)...
 */",undetermined
7580,httpd,UNKNOWN,/* 1 if an Accept item has a q= param */,undetermined
7581,httpd,UNKNOWN,/* fiddle lang q for variants with no lang */,undetermined
7582,httpd,UNKNOWN,"/* the array pointers below are NULL if the corresponding accept
     * headers are not present
     */",undetermined
7583,httpd,UNKNOWN,/* accept_recs */,undetermined
7584,httpd,UNKNOWN,/* accept_recs */,undetermined
7585,httpd,UNKNOWN,/* accept_recs */,undetermined
7586,httpd,UNKNOWN,/* accept_recs */,undetermined
7587,httpd,UNKNOWN,/* available variants */,undetermined
7588,httpd,UNKNOWN,/* number of variants found on disk */,undetermined
7589,httpd,UNKNOWN,/* 1 if this resource is trans. negotiable */,undetermined
7590,httpd,UNKNOWN,/* 1 if we may not fiddle with accept hdrs */,undetermined
7591,httpd,UNKNOWN,/* 1 if ua supports trans negotiation */,undetermined
7592,httpd,UNKNOWN,/* 1 if we want to send an Alternates header */,undetermined
7593,httpd,UNKNOWN,/* 1 if we may choose a variant for the client */,undetermined
7594,httpd,UNKNOWN,/* 1 if we must use RVSA/1.0 negotiation algo */,undetermined
7595,httpd,UNKNOWN,"/* A few functions to manipulate var_recs.
 * Cleaning out the fields...
 */",undetermined
7596,httpd,UNKNOWN,"/* Initializing the relevant fields of a variant record from the
 * accept_info read out of its content-type, one way or another.
 */",undetermined
7597,httpd,UNKNOWN,/* Create a variant list validator in r using info from vlistr. */,undetermined
7598,httpd,UNKNOWN,"/* Calculating the variant list validator is similar to
     * calculating an etag for the source of the variant list
     * information, so we use ap_make_etag().  Note that this
     * validator can be 'weak' in extreme case.
     */",undetermined
7599,httpd,UNKNOWN,"/* ap_set_etag will later take r->vlist_validator into account
     * when creating the etag header
     */",undetermined
7600,httpd,UNKNOWN,"/*****************************************************************
 *
 * Parsing (lists of) media types and their parameters, as seen in
 * HTTPD header lines and elsewhere.
 */",undetermined
7601,httpd,UNKNOWN,"/*
 * parse quality value. atof(3) is not well-usable here, because it
 * depends on the locale (argh).
 *
 * However, RFC 2616 states:
 * 3.9 Quality Values
 *
 * [...] HTTP/1.1 applications MUST NOT generate more than three digits
 * after the decimal point. User configuration of these values SHOULD also
 * be limited in this fashion.
 *
 *     qvalue         = ( ""0"" [ ""."" 0*3DIGIT ] )
 *                    | ( ""1"" [ ""."" 0*3(""0"") ] )
 *
 * This is quite easy. If the supplied string doesn't match the above
 * definition (loosely), we simply return 1 (same as if there's no qvalue)
 */",undetermined
7602,httpd,UNKNOWN,"/* be tolerant and accept qvalues without leading zero
     * (also for backwards compat, where atof() was in use)
     */",undetermined
7603,httpd,UNKNOWN,"/* better only one division later, than dealing with fscking
         * IEEE format 0.1 factors ...
         */",undetermined
7604,httpd,UNKNOWN,"/*
 * Get a single mime type entry --- one media type and parameters;
 * enter the values we recognize into the argument accept_rec
 */",undetermined
7605,httpd,UNKNOWN,"/*
     * Note that this handles what I gather is the ""old format"",
     *
     *    Accept: text/html text/plain moo/zot
     *
     * without any compatibility kludges --- if the token after the
     * MIME type begins with a semicolon, we know we're looking at parms,
     * otherwise, we know we aren't.  (So why all the pissing and moaning
     * in the CERN server code?  I must be missing something).
     */",undetermined
7606,httpd,UNKNOWN,"/* You want case insensitive,
                                       * you'll *get* case insensitive.
                                       */",undetermined
7607,httpd,UNKNOWN,"/* KLUDGE!!! Default HTML to level 2.0 unless the browser
     * *explicitly* says something else.
     */",undetermined
7608,httpd,UNKNOWN,/* Parameters ... */,undetermined
7609,httpd,UNKNOWN,/* Look for 'var = value' --- and make sure the var is in lcase. */,undetermined
7610,httpd,UNKNOWN,/* No '='; just ignore it. */,undetermined
7611,httpd,UNKNOWN,/* Delimit var */,undetermined
7612,httpd,UNKNOWN,/* strip ending quote or return */,undetermined
7613,httpd,UNKNOWN,"/*****************************************************************
 *
 * Dealing with header lines ...
 *
 * Accept, Accept-Charset, Accept-Language and Accept-Encoding
 * are handled by do_header_line() - they all have the same
 * basic structure of a list of items of the format
 *    name; q=N; charset=TEXT
 *
 * where charset is only valid in Accept.
 */",undetermined
7614,httpd,UNKNOWN,"/* Given the text of the Content-Languages: line from the var map file,
 * return an array containing the languages of this variant
 */",undetermined
7615,httpd,UNKNOWN,"/*****************************************************************
 *
 * Handling header lines from clients...
 */",undetermined
7616,httpd,UNKNOWN,/* calculate new->accept_q value */,undetermined
7617,httpd,UNKNOWN,"/* This is possibly overkill for some servers, heck, we have
     * only 33 index.html variants in docs/docroot (today).
     * Make this configurable?
     */",undetermined
7618,httpd,UNKNOWN,"/* First, default to no TCN, no Alternates, and the original Apache
     * negotiation algorithm with fiddles for broken browser configs.
     *
     * To save network bandwidth, we do not configure to send an
     * Alternates header to the user agent by default.  User
     * agents that want an Alternates header for agent-driven
     * negotiation will have to request it by sending an
     * appropriate Negotiate header.
     */",undetermined
7619,httpd,UNKNOWN,"/* Lynx 2.7 and 2.8 send 'negotiate: trans' even though they
         * do not support transparent content negotiation, so for Lynx we
         * ignore the negotiate header when its contents are exactly ""trans"".
         * If future versions of Lynx ever need to say 'negotiate: trans',
         * they can send the equivalent 'negotiate: trans, trans' instead
         * to avoid triggering the workaround below.
         */",undetermined
7620,httpd,UNKNOWN,/* An empty Negotiate would require 300 response */,undetermined
7621,httpd,UNKNOWN,/* The user agent supports transparent negotiation */,undetermined
7622,httpd,UNKNOWN,"/* Send-alternates could be configurable, but note
             * that it must be 1 if we have 'vlist' in the
             * negotiate header.
             */",undetermined
7623,httpd,UNKNOWN,"/* we may use the RVSA/1.0 algorithm, configure for it */",undetermined
7624,httpd,UNKNOWN,"/* we may use any variant selection algorithm, configure
                 * to use the Apache algorithm
                 */",undetermined
7625,httpd,UNKNOWN,"/* We disable header fiddles on the assumption that a
                 * client sending Negotiate knows how to send correct
                 * headers which don't need fiddling.
                 */",undetermined
7626,httpd,UNKNOWN,"/* Sometimes clients will give us no Accept info at all; this routine sets
 * up the standard default for that case, and also arranges for us to be
 * willing to run a CGI script if we find one.  (In fact, we set up to
 * dramatically prefer CGI scripts in cases where that's appropriate,
 * e.g., POST or when URI includes query args or extra path info).
 */",undetermined
7627,httpd,UNKNOWN,"/*****************************************************************
 *
 * Parsing type-map files, in Roy's meta/http format augmented with
 * #-comments.
 */",undetermined
7628,httpd,UNKNOWN,"/* Reading RFC822-style header lines, ignoring #-comments and
 * handling continuations.
 */",undetermined
7629,httpd,UNKNOWN,/* Get a noncommented line */,undetermined
7630,httpd,UNKNOWN,"/* If blank, just return it --- this ends information on this variant */",undetermined
7631,httpd,UNKNOWN,"/* If non-blank, go looking for header lines, but note that we still
     * have to treat comments specially...
     */",undetermined
7632,httpd,UNKNOWN,"/* We need to shortcut the rest of this block following the Body:
     * tag - we will not look for continutation after this line.
     */",undetermined
7633,httpd,UNKNOWN,/* Comment line */,undetermined
7634,httpd,UNKNOWN,"/* Leading whitespace.  POSSIBLE continuation line
             * Also, possibly blank --- if so, we ungetc() the final newline
             * so that we will pick up the blank line the next time 'round.
             */",undetermined
7635,httpd,UNKNOWN,/* Blank line */,undetermined
7636,httpd,UNKNOWN,/* Continuation */,undetermined
7637,httpd,UNKNOWN,/* Line beginning with something other than whitespace */,undetermined
7638,httpd,UNKNOWN,"/* We are at the first character following a body:tag\n entry
     * Suck in the body, then backspace to the first char after the
     * closing tag entry.  If we fail to read, find the tag or back
     * up then we have a hosed file, so give up already
     */",undetermined
7639,httpd,UNKNOWN,"/* put a copy of the tag *after* the data read from the file
     * so that strstr() will find something with no reliance on
     * terminating '\0'
     */",undetermined
7640,httpd,UNKNOWN,/* Skip all the trailing cruft after the end tag to the next line */,undetermined
7641,httpd,UNKNOWN,/* Give the caller back the actual body's file offset and length */,undetermined
7642,httpd,UNKNOWN,/* Stripping out RFC822 comments */,undetermined
7643,httpd,UNKNOWN,"/* Hmmm... is this correct?  In Roy's latest draft, (comments) can nest! */",undetermined
7644,httpd,UNKNOWN,"/* Nope, it isn't correct.  Fails to handle backslash escape as well.    */",undetermined
7645,httpd,UNKNOWN,/* Getting to a header body from the header */,undetermined
7646,httpd,UNKNOWN,/* We are not using multiviews */,undetermined
7647,httpd,UNKNOWN,/* Sort function used by read_types_multi. */,undetermined
7648,httpd,UNKNOWN,"/* First key is the source quality, sort in descending order. */",undetermined
7649,httpd,UNKNOWN,"/* XXX: note that we currently implement no method of setting the
     * source quality for multiviews variants, so we are always comparing
     * 1.0 to 1.0 for now
     */",undetermined
7650,httpd,UNKNOWN,/* Second key is the variant name */,undetermined
7651,httpd,UNKNOWN,"/*****************************************************************
 *
 * Same as read_type_map, except we use a filtered directory listing
 * as the map...
 */",undetermined
7652,httpd,UNKNOWN,/* Only absolute paths here */,undetermined
7653,httpd,UNKNOWN,/* Do we have a match? */,undetermined
7654,httpd,UNKNOWN,"/* Don't negotiate directories and other unusual files
         * Really shouldn't see anything but DIR/LNK/REG here,
         * and we aught to discover if the LNK was interesting.
         *
         * Of course, this only helps platforms that capture the
         * the filetype in apr_dir_read(), which most can once
         * they are optimized with some magic [it's known to the
         * dirent, not associated to the inode, on most FS's.]
         */",undetermined
7655,httpd,UNKNOWN,"/* Ok, something's here.  Maybe nothing useful.  Remember that
         * we tried, if we completely fail, so we can reject the request!
         */",undetermined
7656,httpd,UNKNOWN,"/* See if it's something which we have access to, and which
         * has a known type and encoding.
         */",undetermined
7657,httpd,UNKNOWN,"/* Double check, we still don't multi-resolve non-ordinary files
         */",undetermined
7658,httpd,UNKNOWN,/* XXX sub req not destroyed -- may be a bug/unintentional ? */,undetermined
7659,httpd,UNKNOWN,"/* If it has a handler, we'll pretend it's a CGI script,
         * since that's a good indication of the sort of thing it
         * might be doing.
         */",undetermined
7660,httpd,UNKNOWN,"/*
         * mod_mime will _always_ provide us the base name in the
         * ap-mime-exception-list, if it processed anything.  If
         * this list is empty, give up immediately, there was
         * nothing interesting.  For example, looking at the files
         * readme.txt and readme.foo, we will throw away .foo if
         * it's an insignificant file (e.g. did not identify a
         * language, charset, encoding, content type or handler,)
         */",undetermined
7661,httpd,UNKNOWN,"/* Each unregonized bit better match our base name, in sequence.
         * A test of index.html.foo will match index.foo or index.html.foo,
         * but it will never transpose the segments and allow index.foo.html
         * because that would introduce too much CPU consumption.  Better that
         * we don't attempt a many-to-many match here.
         */",undetermined
7662,httpd,UNKNOWN,"/* Something you don't know is, something you don't know...
                 */",undetermined
7663,httpd,UNKNOWN,"/*
         * If we failed the subrequest, or don't
         * know what we are serving, then continue.
         */",undetermined
7664,httpd,UNKNOWN,"/* If it's a map file, we use that instead of the map
         * we're building...
         */",undetermined
7665,httpd,UNKNOWN,/* Have reasonable variant --- gather notes. */,undetermined
7666,httpd,UNKNOWN,"/* We found some file names that matched.  None could be served.
     * Rather than fall out to autoindex or some other mapper, this
     * request must die.
     */",undetermined
7667,httpd,UNKNOWN,"/* Sort the variants into a canonical order.  The negotiation
     * result sometimes depends on the order of the variants.  By
     * sorting the variants into a canonical order, rather than using
     * the order in which readdir() happens to return them, we ensure
     * that the negotiation result will be consistent over filesystem
     * backup/restores and over all mirror sites.
     */",undetermined
7668,httpd,UNKNOWN,"/*****************************************************************
 * And now for the code you've been waiting for... actually
 * finding a match to the client's requirements.
 */",undetermined
7669,httpd,UNKNOWN,"/* Matching MIME types ... the star/star and foo/star commenting conventions
 * are implemented here.  (You know what I mean by star/star, but just
 * try mentioning those three characters in a C comment).  Using strcmp()
 * is legit, because everything has already been smashed to lowercase.
 *
 * Note also that if we get an exact match on the media type, we update
 * level_matched for use in level_cmp below...
 *
 * We also give a value for mime_stars, which is used later. It should
 * be 1 for star/star, 2 for type/star and 3 for type/subtype.
 */",undetermined
7670,httpd,UNKNOWN,/* Anything matches star/star */,undetermined
7671,httpd,UNKNOWN,"/* This code implements a piece of the tie-breaking algorithm between
 * variants of equal quality.  This piece is the treatment of variants
 * of the same base media type, but different levels.  What we want to
 * return is the variant at the highest level that the client explicitly
 * claimed to accept.
 *
 * If all the variants available are at a higher level than that, or if
 * the client didn't say anything specific about this media type at all
 * and these variants just got in on a wildcard, we prefer the lowest
 * level, on grounds that that's the one that the client is least likely
 * to choke on.
 *
 * (This is all motivated by treatment of levels in HTML --- we only
 * want to give level 3 to browsers that explicitly ask for it; browsers
 * that don't, including HTTP/0.9 browsers that only get the implicit
 * ""Accept: * / *"" [space added to avoid confusing cpp --- no, that
 * syntax doesn't really work] should get HTML2 if available).
 *
 * (Note that this code only comes into play when we are choosing among
 * variants of equal quality, where the draft standard gives us a fair
 * bit of leeway about what to do.  It ain't specified by the standard;
 * rather, it is a choice made by this server about what to do in cases
 * where the standard does not specify a unique course of action).
 */",undetermined
7672,httpd,UNKNOWN,/* Levels are only comparable between matching media types */,undetermined
7673,httpd,UNKNOWN,"/* The result of the above if statements is that, if we get to
     * here, both variants have the same mime_type or both are
     * pseudo-html.
     */",undetermined
7674,httpd,UNKNOWN,"/* Take highest level that matched, if either did match. */",undetermined
7675,httpd,UNKNOWN,"/* Neither matched.  Take lowest level, if there's a difference. */",undetermined
7676,httpd,UNKNOWN,/* Tied */,undetermined
7677,httpd,UNKNOWN,"/* Finding languages.  The main entry point is set_language_quality()
 * which is called for each variant. It sets two elements in the
 * variant record:
 *    language_quality  - the 'q' value of the 'best' matching language
 *                        from Accept-Language: header (HTTP/1.1)
 *    lang_index    -     Non-negotiated language priority, using
 *                        position of language on the Accept-Language:
 *                        header, if present, else LanguagePriority
 *                        directive order.
 *
 * When we do the variant checking for best variant, we use language
 * quality first, and if a tie, language_index next (this only applies
 * when _not_ using the RVSA/1.0 algorithm). If using the RVSA/1.0
 * algorithm, lang_index is never used.
 *
 * set_language_quality() calls find_lang_index() and find_default_index()
 * to set lang_index.
 */",undetermined
7678,httpd,UNKNOWN,"/* set_default_lang_quality() sets the quality we apply to variants
 * which have no language assigned to them. If none of the variants
 * have a language, we are not negotiating on language, so all are
 * acceptable, and we set the default q value to 1.0. However if
 * some of the variants have languages, we set this default to 0.0001.
 * The value of this default will be applied to all variants with
 * no explicit language -- which will have the effect of making them
 * acceptable, but only if no variants with an explicit language
 * are acceptable. The default q value set here is assigned to variants
 * with no language type in set_language_quality().
 *
 * Note that if using the RVSA/1.0 algorithm, we don't use this
 * fiddle.
 */",undetermined
7679,httpd,UNKNOWN,"/* Set the language_quality value in the variant record. Also
 * assigns lang_index for ForceLanguagePriority.
 *
 * To find the language_quality value, we look for the 'q' value
 * of the 'best' matching language on the Accept-Language
 * header. The 'best' match is the language on Accept-Language
 * header which matches the language of this variant either fully,
 * or as far as the prefix marker (-). If two or more languages
 * match, use the longest string from the Accept-Language header
 * (see HTTP/1.1 [14.4])
 *
 * When a variant has multiple languages, we find the 'best'
 * match for each variant language tag as above, then select the
 * one with the highest q value. Because both the accept-header
 * and variant can have multiple languages, we now have a hairy
 * loop-within-a-loop here.
 *
 * If the variant has no language and we have no Accept-Language
 * items, leave the quality at 1.0 and return.
 *
 * If the variant has no language, we use the default as set by
 * set_default_lang_quality() (1.0 if we are not negotiating on
 * language, 0.001 if we are).
 *
 * Following the setting of the language quality, we drop through to
 * set the old 'lang_index'. This is set based on either the order
 * of the languages on the Accept-Language header, or the
 * order on the LanguagePriority directive. This is only used
 * in the negotiation if the language qualities tie.
 */",undetermined
7680,httpd,UNKNOWN,"/* This variant has no content-language, so use the default
         * quality factor for variants with no content-language
         * (previously set by set_default_lang_quality()).
         * Leave the factor alone (it remains at 1.0) when we may not fiddle
         * with the headers.
         */",undetermined
7681,httpd,UNKNOWN,/* no accept-language header */,undetermined
7682,httpd,UNKNOWN,"/* Variant has one (or more) languages.  Look for the best
         * match. We do this by going through each language on the
         * variant description looking for a match on the
         * Accept-Language header. The best match is the longest
         * matching language on the header. The final result is the
         * best q value from all the languages on the variant
         * description.
         */",undetermined
7683,httpd,UNKNOWN,/* no accept-language header makes the variant indefinite */,undetermined
7684,httpd,UNKNOWN,/* There is an accept-language with 0 or more items */,undetermined
7685,httpd,UNKNOWN,"/* lang is the variant's language-tag, which is the one
                 * we are allowed to use the prefix of in HTTP/1.1
                 */",undetermined
7686,httpd,UNKNOWN,"/* now find the best (i.e. longest) matching
                 * Accept-Language header language. We put the best match
                 * for this tag in bestthistag. We cannot update the
                 * overall best (based on q value) because the best match
                 * for this tag is the longest language item on the accept
                 * header, not necessarily the highest q.
                 */",undetermined
7687,httpd,UNKNOWN,"/* Find language. We match if either the variant
                     * language tag exactly matches the language range
                     * from the accept header, or a prefix of the variant
                     * language tag up to a '-' character matches the
                     * whole of the language range in the Accept-Language
                     * header.  Note that HTTP/1.x allows any number of
                     * '-' characters in a tag or range, currently only
                     * tags with zero or one '-' characters are defined
                     * for general use (see rfc1766).
                     *
                     * We only use language range in the Accept-Language
                     * header the best match for the variant language tag
                     * if it is longer than the previous best match.
                     */",undetermined
7688,httpd,UNKNOWN,"/* The next bit is a fiddle. Some browsers might
                         * be configured to send more specific language
                         * ranges than desirable. For example, an
                         * Accept-Language of en-US should never match
                         * variants with languages en or en-GB. But US
                         * English speakers might pick en-US as their
                         * language choice.  So this fiddle checks if the
                         * language range has a prefix, and if so, it
                         * matches variants which match that prefix with a
                         * priority of 0.001. So a request for en-US would
                         * match variants of types en and en-GB, but at
                         * much lower priority than matches of en-US
                         * directly, or of any other language listed on
                         * the Accept-Language header. Note that this
                         * fiddle does not handle multi-level prefixes.
                         */",undetermined
7689,httpd,UNKNOWN,"/* Finished looking at Accept-Language headers, the best
                 * (longest) match is in bestthistag, or NULL if no match
                 */",undetermined
7690,httpd,UNKNOWN,"/* See if the tag matches on a * in the Accept-Language
                 * header. If so, record this fact for later use
                 */",undetermined
7691,httpd,UNKNOWN,"/* If one of the language tags of the variant matched on *, we
             * need to see if its q is better than that of any non-* match
             * on any other tag of the variant.  If so the * match takes
             * precedence and the overall match is not definite.
             */",undetermined
7692,httpd,UNKNOWN,"/* Handle the ForceDefaultLanguage overrides, based on the best match
     * to LanguagePriority order.  The best match is the lowest index of
     * any LanguagePriority match.
     */",undetermined
7693,httpd,UNKNOWN,"/* lang is the variant's language-tag, which is the one
             * we are allowed to use the prefix of in HTTP/1.1
             */",undetermined
7694,httpd,UNKNOWN,"/* If we wish to fallback or
             * we use our own LanguagePriority index.
             */",undetermined
7695,httpd,UNKNOWN,"/* Determining the content length --- if the map didn't tell us,
 * we have to do a stat() and remember for next time.
 */",undetermined
7696,httpd,UNKNOWN,"/* For a given variant, find the best matching Accept: header
 * and assign the Accept: header's quality value to the
 * mime_type_quality field of the variant, for later use in
 * determining the best matching variant.
 */",undetermined
7697,httpd,UNKNOWN,"/* if no Accept: header, leave quality alone (will
     * remain at the default value of 1)
     *
     * XXX: This if is currently never true because of the effect of
     * maybe_add_default_accepts().
     */",undetermined
7698,httpd,UNKNOWN,"/*
     * Go through each of the ranges on the Accept: header,
     * looking for the 'best' match with this variant's
     * content-type. We use the best match's quality
     * value (from the Accept: header) for this variant's
     * mime_type_quality field.
     *
     * The best match is determined like this:
     *    type/type is better than type/ * is better than * / *
     *    if match is type/type, use the level mime param if available
     */",undetermined
7699,httpd,UNKNOWN,/* didn't match the content type at all */,undetermined
7700,httpd,UNKNOWN,"/* did match - see if there were less or more stars than
             * in previous match
             */",undetermined
7701,httpd,UNKNOWN,/* more stars => not as good a match */,undetermined
7702,httpd,UNKNOWN,"/* If we are allowed to mess with the q-values
         * and have no explicit q= parameters in the accept header,
         * make wildcards very low, so we have a low chance
         * of ending up with them if there's something better.
         */",undetermined
7703,httpd,UNKNOWN,"/* For a given variant, find the 'q' value of the charset given
 * on the Accept-Charset line. If no charsets are listed,
 * assume value of '1'.
 */",undetermined
7704,httpd,UNKNOWN,"/* if no Accept-Charset: header, leave quality alone (will
     * remain at the default value of 1)
     */",undetermined
7705,httpd,UNKNOWN,/* Charset of variant not known */,undetermined
7706,httpd,UNKNOWN,"/* if not a text / * type, leave quality alone */",undetermined
7707,httpd,UNKNOWN,"/* Don't go guessing if we are in strict header mode,
         * e.g. when running the rvsa, as any guess won't be reflected
         * in the variant list or content-location headers.
         */",undetermined
7708,httpd,UNKNOWN,/* The default charset for HTTP text types */,undetermined
7709,httpd,UNKNOWN,"/*
     * Go through each of the items on the Accept-Charset header,
     * looking for a match with this variant's charset. If none
     * match, charset is unacceptable, so set quality to 0.
     */",undetermined
7710,httpd,UNKNOWN,/* No explicit match */,undetermined
7711,httpd,UNKNOWN,"/* If this variant is in charset iso-8859-1, the default is 1.0 */",undetermined
7712,httpd,UNKNOWN,"/* is_identity_encoding is included for back-compat, but does anyone
 * use 7bit, 8bin or binary in their var files??
 */",undetermined
7713,httpd,UNKNOWN,"/*
 * set_encoding_quality determines whether the encoding for a particular
 * variant is acceptable for the user-agent.
 *
 * The rules for encoding are that if the user-agent does not supply
 * any Accept-Encoding header, then all encodings are allowed but a
 * variant with no encoding should be preferred.
 * If there is an empty Accept-Encoding header, then no encodings are
 * acceptable. If there is a non-empty Accept-Encoding header, then
 * any of the listed encodings are acceptable, as well as no encoding
 * unless the ""identity"" encoding is specifically excluded.
 */",undetermined
7714,httpd,UNKNOWN,"/* We had no Accept-Encoding header, assume that all
         * encodings are acceptable with a low quality,
         * but we prefer no encoding if available.
         */",undetermined
7715,httpd,UNKNOWN,"/* Go through each of the encodings on the Accept-Encoding: header,
     * looking for a match with our encoding. x- prefixes are ignored.
     */",undetermined
7716,httpd,UNKNOWN,/* No explicit match */,undetermined
7717,httpd,UNKNOWN,"/* Encoding not found on Accept-Encoding: header, so it is
     * _not_ acceptable unless it is the identity (no encoding)
     */",undetermined
7718,httpd,UNKNOWN,"/*************************************************************
 * Possible results of the variant selection algorithm
 */",undetermined
7719,httpd,UNKNOWN,/* choose variant */,undetermined
7720,httpd,UNKNOWN,/* list variants */,undetermined
7721,httpd,UNKNOWN,"/* Below is the 'best_match' function. It returns an int, which has
 * one of the two values alg_choice or alg_list, which give the result
 * of the variant selection algorithm.  alg_list means that no best
 * variant was found by the algorithm, alg_choice means that a best
 * variant was found and should be returned.  The list/choice
 * terminology comes from TCN (rfc2295), but is used in a more generic
 * way here.  The best variant is returned in *pbest. best_match has
 * two possible algorithms for determining the best variant: the
 * RVSA/1.0 algorithm (from RFC2296), and the standard Apache
 * algorithm. These are split out into separate functions
 * (is_variant_better_rvsa() and is_variant_better()).  Selection of
 * one is through the neg->use_rvsa flag.
 *
 * The call to best_match also creates full information, including
 * language, charset, etc quality for _every_ variant. This is needed
 * for generating a correct Vary header, and can be used for the
 * Alternates header, the human-readable list responses and 406 errors.
 */",undetermined
7722,httpd,UNKNOWN,"/* Firstly, the RVSA/1.0 (HTTP Remote Variant Selection Algorithm
 * v1.0) from rfc2296.  This is the algorithm that goes together with
 * transparent content negotiation (TCN).
 */",undetermined
7723,httpd,UNKNOWN,"/* TCN does not cover negotiation on content-encoding.  For now,
     * we ignore the encoding unless it was explicitly excluded.
     */",undetermined
7724,httpd,UNKNOWN,"/* RFC 2296 calls for the result to be rounded to 5 decimal places,
    * but we don't do that because it serves no useful purpose other
    * than to ensure that a remote algorithm operates on the same
    * precision as ours.  That is silly, since what we obviously want
    * is for the algorithm to operate on the best available precision
    * regardless of who runs it.  Since the above calculation may
    * result in significant variance at 1e-12, rounding would be bogus.
    */",undetermined
7725,httpd,UNKNOWN,"/* If the best variant's encoding is of lesser quality than
         * this variant, then we prefer this variant
         */",undetermined
7726,httpd,UNKNOWN,"/* Negotiation algorithm as used by previous versions of Apache
 * (just about).
 */",undetermined
7727,httpd,UNKNOWN,"/* For non-transparent negotiation, server can choose how
     * to handle the negotiation. We'll use the following in
     * order: content-type, language, content-type level, charset,
     * content encoding, content length.
     *
     * For each check, we have three possible outcomes:
     *   This variant is worse than current best: return 0
     *   This variant is better than the current best:
     *          assign this variant's q to *p_bestq, and return 1
     *   This variant is just as desirable as the current best:
     *          drop through to the next test.
     *
     * This code is written in this long-winded way to allow future
     * customisation, either by the addition of additional
     * checks, or to allow the order of the checks to be determined
     * by configuration options (e.g. we might prefer to check
     * language quality _before_ content type).
     */",undetermined
7728,httpd,UNKNOWN,"/* First though, eliminate this variant if it is not
     * acceptable by type, charset, encoding or language.
     */",undetermined
7729,httpd,UNKNOWN,/* don't consider unacceptables */,undetermined
7730,httpd,UNKNOWN,/* language */,undetermined
7731,httpd,UNKNOWN,"/* if language qualities were equal, try the LanguagePriority stuff */",undetermined
7732,httpd,UNKNOWN,"/* content-type level (sometimes used with text/html, though we
     * support it on other types too)
     */",undetermined
7733,httpd,UNKNOWN,/* charset */,undetermined
7734,httpd,UNKNOWN,"/* If the best variant's charset is ISO-8859-1 and this variant has
     * the same charset quality, then we prefer this variant
     */",undetermined
7735,httpd,UNKNOWN,"/* Prefer the highest value for encoding_quality.
     */",undetermined
7736,httpd,UNKNOWN,/* content length if all else equal */,undetermined
7737,httpd,UNKNOWN,"/* ok, to get here means every thing turned out equal, except
     * we have a shorter content length, so use this variant
     */",undetermined
7738,httpd,UNKNOWN,"/* figure out, whether a variant is in a specific language
 * it returns also false, if the variant has no language.
 */",undetermined
7739,httpd,UNKNOWN,/* fast exit */,undetermined
7740,httpd,UNKNOWN,"/* check for environment variables 'no-gzip' and
 * 'gzip-only-text/html' to get a behaviour similiar
 * to mod_deflate
 */",undetermined
7741,httpd,UNKNOWN,"/* fetch request dependent variables
     * prefer-language: prefer a certain language.
     */",undetermined
7742,httpd,UNKNOWN,/* no-gzip: do not send encoded documents */,undetermined
7743,httpd,UNKNOWN,"/* gzip-only-text/html: send encoded documents only
     * if they are text/html. (no-gzip has a higher priority).
     */",undetermined
7744,httpd,UNKNOWN,"/*
     * Find the 'best' variant
     * We run the loop possibly twice: if ""prefer-language""
     * environment variable is set but we did not find an appropriate
     * best variant. In that case forget the preferred language and
     * negotiate over all variants.
     */",undetermined
7745,httpd,UNKNOWN,"/* if this variant is encoded somehow and there are special
             * variables set, we do not negotiate it. see above.
             */",undetermined
7746,httpd,UNKNOWN,"/* if a language is preferred, but the current variant
             * is not in that language, then drop it for now
             */",undetermined
7747,httpd,UNKNOWN,"/* Find all the relevant 'quality' values from the
             * Accept... headers, and store in the variant.  This also
             * prepares for sending an Alternates header etc so we need to
             * do it even if we do not actually plan to find a best
             * variant.
             */",undetermined
7748,httpd,UNKNOWN,"/* accept the preferred language, even when it's not listed within
             * the Accept-Language header
             */",undetermined
7749,httpd,UNKNOWN,"/* Only do variant selection if we may actually choose a
             * variant for the client
             */",undetermined
7750,httpd,UNKNOWN,"/* Now find out if this variant is better than the current
                 * best, either using the RVSA/1.0 algorithm, or Apache's
                 * internal server-driven algorithm. Presumably other
                 * server-driven algorithms are possible, and could be
                 * implemented here.
                 */",undetermined
7751,httpd,UNKNOWN,"/* We now either have a best variant, or no best variant */",undetermined
7752,httpd,UNKNOWN,"/* calculate result for RVSA/1.0 algorithm:
             * only a choice response if the best variant has q>0
             * and is definite
             */",undetermined
7753,httpd,UNKNOWN,/* calculate result for Apache negotiation algorithm */,undetermined
7754,httpd,UNKNOWN,"/* run the loop again, if the ""prefer-language"" got no clear result */",undetermined
7755,httpd,UNKNOWN,"/* Returning a choice response with a non-neighboring variant is a
     * protocol security error in TCN (see rfc2295).  We do *not*
     * verify here that the variant and URI are neighbors, even though
     * we may return alg_choice.  We depend on the environment (the
     * caller) to only declare the resource transparently negotiable if
     * all variants are neighbors.
     */",undetermined
7756,httpd,UNKNOWN,"/* Sets response headers for a negotiated response.
 * neg->is_transparent determines whether a transparently negotiated
 * response or a plain `server driven negotiation' response is
 * created.   Applicable headers are Alternates, Vary, and TCN.
 *
 * The Vary header we create is sometimes longer than is required for
 * the correct caching of negotiated results by HTTP/1.1 caches.  For
 * example if we have 3 variants x.html, x.ps.en and x.ps.nl, and if
 * the Accept: header assigns a 0 quality to .ps, then the results of
 * the two server-side negotiation algorithms we currently implement
 * will never depend on Accept-Language so we could return `Vary:
 * negotiate, accept' instead of the longer 'Vary: negotiate, accept,
 * accept-language' which the code below will return.  A routine for
 * computing the exact minimal Vary header would be a huge pain to code
 * and maintain though, especially because we need to take all possible
 * twiddles in the server-side negotiation algorithms into account.
 */",undetermined
7757,httpd,UNKNOWN,"/* In order to avoid O(n^2) memory copies in building Alternates,
     * we preallocate a apr_table_t with the maximum substrings possible,
     * fill it with the variant list, and then concatenate the entire array.
     * Note that if you change the number of substrings pushed, you also
     * need to change the calculation of max_vlist_array above.
     */",undetermined
7758,httpd,UNKNOWN,"/* Put headers into err_headers_out, since send_http_header()
     * outputs both headers_out and err_headers_out.
     */",undetermined
7759,httpd,UNKNOWN,/* Calculate Vary by looking for any difference between variants */,undetermined
7760,httpd,UNKNOWN,/* Generate the string components for this Alternates entry */,undetermined
7761,httpd,UNKNOWN,/* Strip trailing zeros (saves those valuable network bytes) */,undetermined
7762,httpd,UNKNOWN,"/* Strictly speaking, this is non-standard, but so is TCN */",undetermined
7763,httpd,UNKNOWN,"/* Note that the Alternates specification (in rfc2295) does
         * not require that we include {length x}, so we could omit it
         * if determining the length is too expensive.  We currently
         * always include it though.
         *
         * If the variant is a CGI script, find_content_length would
         * return the length of the script, not the output it
         * produces, so we check for the presence of a handler and if
         * there is one we don't add a length.
         *
         * XXX: TODO: This check does not detect a CGI script if we
         * get the variant from a type map.  This needs to be fixed
         * (without breaking things if the type map specifies a
         * content-length, which currently leads to the correct result).
         */",undetermined
7764,httpd,UNKNOWN,/* trimmed below */,undetermined
7765,httpd,UNKNOWN,/* remove last comma */,undetermined
7766,httpd,UNKNOWN,/* Create TCN response header */,undetermined
7767,httpd,UNKNOWN,"/**********************************************************************
 *
 * Return an HTML list of variants. This is output as part of the
 * choice response or 406 status body.
 */",undetermined
7768,httpd,UNKNOWN,"/* In order to avoid O(n^2) memory copies in building the list,
     * we preallocate a apr_table_t with the maximum substrings possible,
     * fill it with the variant list, and then concatenate the entire array.
     */",undetermined
7769,httpd,UNKNOWN,"/* The format isn't very neat, and it would be nice to make
         * the tags human readable (eg replace 'language en' with 'English').
         * Note that if you change the number of substrings pushed, you also
         * need to change the calculation of max_vlist_array above.
         */",undetermined
7770,httpd,UNKNOWN,"/* Called if we got a ""Choice"" response from the variant selection algorithm.
 * It checks the result of the chosen variant to see if it
 * is itself negotiated (if so, return error HTTP_VARIANT_ALSO_VARIES).
 * Otherwise, add the appropriate headers to the current response.
 */",undetermined
7771,httpd,UNKNOWN,"/* The variant selection algorithm told us to return a ""Choice""
     * response. This is the normal variant response, with
     * some extra headers. First, ensure that the chosen
     * variant did or will not itself engage in transparent negotiation.
     * If not, set the appropriate headers, and fall through to
     * the normal variant handling
     */",undetermined
7772,httpd,UNKNOWN,"/* This catches the error that a transparent type map selects a
     * transparent multiviews resource as the best variant.
     *
     * XXX: We do not signal an error if a transparent type map
     * selects a _non_transparent multiviews resource as the best
     * variant, because we can generate a legal negotiation response
     * in this case.  In this case, the vlist_validator of the
     * nontransparent subrequest will be lost however.  This could
     * lead to cases in which a change in the set of variants or the
     * negotiation algorithm of the nontransparent resource is never
     * propagated up to a HTTP/1.1 cache which interprets Vary.  To be
     * completely on the safe side we should return HTTP_VARIANT_ALSO_VARIES
     * for this type of recursive negotiation too.
     */",undetermined
7773,httpd,UNKNOWN,"/* This catches the error that a transparent type map recursively
     * selects, as the best variant, another type map which itself
     * causes transparent negotiation to be done.
     *
     * XXX: Actually, we catch this error by catching all cases of
     * type map recursion.  There are some borderline recursive type
     * map arrangements which would not produce transparent
     * negotiation protocol errors or lack of cache propagation
     * problems, but such arrangements are very hard to detect at this
     * point in the control flow, so we do not bother to single them
     * out.
     *
     * Recursive type maps imply a recursive arrangement of negotiated
     * resources which is visible to outside clients, and this is not
     * supported by the transparent negotiation caching protocols, so
     * if we are to have generic support for recursive type maps, we
     * have to create some configuration setting which makes all type
     * maps non-transparent when recursion is enabled.  Also, if we
     * want recursive type map support which ensures propagation of
     * type map changes into HTTP/1.1 caches that handle Vary, we
     * would have to extend the current mechanism for generating
     * variant list validators.
     */",undetermined
7774,httpd,UNKNOWN,"/* This adds an appropriate Variant-Vary header if the subrequest
     * is a multiviews resource.
     *
     * XXX: TODO: Note that this does _not_ handle any Vary header
     * returned by a CGI if sub_req is a CGI script, because we don't
     * see that Vary header yet at this point in the control flow.
     * This won't cause any cache consistency problems _unless_ the
     * CGI script also returns a Cache-Control header marking the
     * response as cachable.  This needs to be fixed, also there are
     * problems if a CGI returns an Etag header which also need to be
     * fixed.
     */",undetermined
7775,httpd,UNKNOWN,"/* Move the subreq Vary header into the main request to
         * prevent having two Vary headers in the response, which
         * would be legal but strange.
         */",undetermined
7776,httpd,UNKNOWN,/* add Alternates and Vary */,undetermined
7777,httpd,UNKNOWN,/* Still to do by caller: add Expires */,undetermined
7778,httpd,UNKNOWN,"/****************************************************************
 *
 * Executive...
 */",undetermined
7779,httpd,UNKNOWN,/* result of variant selection algorithm */,undetermined
7780,httpd,UNKNOWN,/* Decide if resource is transparently negotiable */,undetermined
7781,httpd,UNKNOWN,/* GET or HEAD? (HEAD has same method number as GET) */,undetermined
7782,httpd,UNKNOWN,"/* maybe this should be configurable, see also the comment
         * about recursive type maps in setup_choice_response()
         */",undetermined
7783,httpd,UNKNOWN,"/* We can't be transparent if we are a map file in the middle
         * of the request URI.
         */",undetermined
7784,httpd,UNKNOWN,"/* We can't be transparent, because of internal
             * assumptions in best_match(), if there is a
             * non-neighboring variant.  We can have a non-neighboring
             * variant when processing a type map.
             */",undetermined
7785,httpd,UNKNOWN,"/* We can't be transparent, because of the behavior
             * of variant typemap bodies.
             */",undetermined
7786,httpd,UNKNOWN,/* configure negotiation on non-transparent resource */,undetermined
7787,httpd,UNKNOWN,"/* alg_result is one of
     *   alg_choice: a best variant is chosen
     *   alg_list: no best variant is chosen
     */",undetermined
7788,httpd,UNKNOWN,/* send a list response or HTTP_NOT_ACCEPTABLE error response  */,undetermined
7789,httpd,UNKNOWN,/* always include Alternates header */,undetermined
7790,httpd,UNKNOWN,/* XXX todo: expires? cachability? */,undetermined
7791,httpd,UNKNOWN,"/* Some HTTP/1.0 clients are known to choke when they get
             * a 300 (multiple choices) response without a Location
             * header.  However the 300 code response we are are about
             * to generate will only reach 1.0 clients which support
             * transparent negotiation, and they should be OK. The
             * response should never reach older 1.0 clients, even if
             * we have CacheNegotiatedDocs enabled, because no 1.0
             * proxy cache (we know of) will cache and return 300
             * responses (they certainly won't if they conform to the
             * HTTP/1.0 specification).
             */",undetermined
7792,httpd,UNKNOWN,/* Variant selection chose a variant */,undetermined
7793,httpd,UNKNOWN,/* XXX todo: merge the two cases in the if statement below */,undetermined
7794,httpd,UNKNOWN,/* return if error */,undetermined
7795,httpd,UNKNOWN,"/* Make sure caching works - Vary should handle HTTP/1.1, but for
     * HTTP/1.0, we can't allow caching at all.
     */",undetermined
7796,httpd,UNKNOWN,"/* XXX: Note that we only set r->no_cache to 1, which causes
     * Expires: <now> to be added, when responding to a HTTP/1.0
     * client.  If we return the response to a 1.1 client, we do not
     * add Expires <now>, because doing so would degrade 1.1 cache
     * performance by preventing re-use of the response without prior
     * revalidation.  On the other hand, if the 1.1 client is a proxy
     * which was itself contacted by a 1.0 client, or a proxy cache
     * which can be contacted later by 1.0 clients, then we currently
     * rely on this 1.1 proxy to add the Expires: <now> when it
     * forwards the response.
     *
     * XXX: TODO: Find out if the 1.1 spec requires proxies and
     * tunnels to add Expires: <now> when forwarding the response to
     * 1.0 clients.  I (kh) recall it is rather vague on this point.
     * Testing actual 1.1 proxy implementations would also be nice. If
     * Expires: <now> is not added by proxies then we need to always
     * include Expires: <now> ourselves to ensure correct caching, but
     * this would degrade HTTP/1.1 cache efficiency unless we also add
     * Cache-Control: max-age=N, which we currently don't.
     *
     * Roy: No, we are not going to screw over HTTP future just to
     *      ensure that people who can't be bothered to upgrade their
     *      clients will always receive perfect server-side negotiation.
     *      Hell, those clients are sending bogus accept headers anyway.
     *
     *      Manual setting of cache-control/expires always overrides this
     *      automated kluge, on purpose.
     */",undetermined
7797,httpd,UNKNOWN,"/* XXX: ?
         * if (r->method_number == M_OPTIONS) {
         *    return ap_send_http_options(r);
         *}
         */",undetermined
7798,httpd,UNKNOWN,"/* ### These may be implemented by adding some 'extra' info
         *     of the file offset onto the etag
         * ap_update_mtime(r, r->finfo.mtime);
         * ap_set_last_modified(r);
         * ap_set_etag(r);
         */",undetermined
7799,httpd,UNKNOWN,/* set MIME type and charset as negotiated */,undetermined
7800,httpd,UNKNOWN,/* set Content-language(s) as negotiated */,undetermined
7801,httpd,UNKNOWN,/* set Content-Encoding as negotiated */,undetermined
7802,httpd,UNKNOWN,"/* remove any path_info from the end of the uri before trying
         * to change the filename.  r->path_info from the original
         * request is passed along on the redirect.
         */",undetermined
7803,httpd,UNKNOWN,/* free all allocated memory from subrequests */,undetermined
7804,httpd,UNKNOWN,"/* We got this out of a map file, so we don't actually have
         * a sub_req structure yet.  Get one now.
         */",undetermined
7805,httpd,UNKNOWN,"/* now do a ""fast redirect"" ... promotes the sub_req into the main req */",undetermined
7806,httpd,UNKNOWN,"/* give no advise for time on this subrequest.  Perhaps we
     * should tally the last mtime amoung all variants, and date
     * the most recent, but that could confuse the proxies.
     */",undetermined
7807,httpd,UNKNOWN,"/* clean up all but our favorite variant, since that sub_req
     * is now merged into the main request!
     */",undetermined
7808,httpd,UNKNOWN,"/**********************************************************************
 * There is a problem with content-encoding, as some clients send and
 * expect an x- token (e.g. x-gzip) while others expect the plain token
 * (i.e. gzip). To try and deal with this as best as possible we do
 * the following: if the client sent an Accept-Encoding header and it
 * contains a plain token corresponding to the content encoding of the
 * response, then set content encoding using the plain token. Else if
 * the A-E header contains the x- token use the x- token in the C-E
 * header. Else don't do anything.
 *
 * Note that if no A-E header was sent, or it does not contain a token
 * compatible with the final content encoding, then the token in the
 * C-E header will be whatever was specified in the AddEncoding
 * directive.
 */",undetermined
7809,httpd,UNKNOWN,/* dir config creator */,undetermined
7810,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
7811,httpd,UNKNOWN,/* server config */,undetermined
7812,httpd,UNKNOWN,/* merge server config */,undetermined
7813,httpd,UNKNOWN,/* command apr_table_t */,undetermined
7814,httpd,UNKNOWN,/* register hooks */,undetermined
7815,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
7816,httpd,UNKNOWN,"/*                       _                            _ _
 *   _ __ ___   ___   __| |    _ __ _____      ___ __(_) |_ ___
 *  | '_ ` _ \ / _ \ / _` |   | '__/ _ \ \ /\ / / '__| | __/ _ \
 *  | | | | | | (_) | (_| |   | | |  __/\ V  V /| |  | | ||  __/
 *  |_| |_| |_|\___/ \__,_|___|_|  \___| \_/\_/ |_|  |_|\__\___|
 *                       |_____|
 *
 *  URL Rewriting Module
 *
 *  This module uses a rule-based rewriting engine (based on a
 *  regular-expression parser) to rewrite requested URLs on the fly.
 *
 *  It supports an unlimited number of additional rule conditions (which can
 *  operate on a lot of variables, even on HTTP headers) for granular
 *  matching and even external database lookups (either via plain text
 *  tables, DBM hash files or even external processes) for advanced URL
 *  substitution.
 *
 *  It operates on the full URLs (including the PATH_INFO part) both in
 *  per-server context (httpd.conf) and per-dir context (.htaccess) and even
 *  can generate QUERY_STRING parts on result.   The rewriting result finally
 *  can lead to internal subprocessing, external request redirection or even
 *  to internal proxy throughput.
 *
 *  This module was originally written in April 1996 and
 *  gifted exclusively to the The Apache Software Foundation in July 1997 by
 *
 *      Ralf S. Engelschall
 *      rse engelschall.com
 *      www.engelschall.com
 */",undetermined
7817,httpd,UNKNOWN,/* XXX: Do we really need these headers? */,undetermined
7818,httpd,UNKNOWN,"/*
 * in order to improve performance on running production systems, you
 * may strip all rewritelog code entirely from mod_rewrite by using the
 * -DREWRITELOG_DISABLED compiler option.
 *
 * DO NOT USE THIS OPTION FOR PUBLIC BINARY RELEASES. Otherwise YOU are
 * responsible for answering all the mod_rewrite questions out there.
 */",undetermined
7819,httpd,UNKNOWN,"/* If logging is limited to APLOG_DEBUG or lower, disable rewrite log, too */",undetermined
7820,httpd,UNKNOWN,/* !REWRITELOG_DISABLED */,undetermined
7821,httpd,UNKNOWN,/* REWRITELOG_DISABLED */,undetermined
7822,httpd,UNKNOWN,/* remembered mime-type for [T=...] */,undetermined
7823,httpd,UNKNOWN,"/* return code of the rewrite rule
 * the result may be escaped - or not
 */",undetermined
7824,httpd,UNKNOWN,/* max cookie size in rfc 2109 */,undetermined
7825,httpd,UNKNOWN,/* XXX: not used at all. We should do a check somewhere and/or cut the cookie */,undetermined
7826,httpd,UNKNOWN,/* max line length (incl.\n) in text rewrite maps */,undetermined
7827,httpd,UNKNOWN,/* buffer length for prg rewrite maps */,undetermined
7828,httpd,UNKNOWN,/* for better readbility */,undetermined
7829,httpd,UNKNOWN,"/*
 * expansion result items on the stack to save some cycles
 *
 * (5 == about 2 variables like ""foo%{var}bar%{var}baz"")
 */",undetermined
7830,httpd,UNKNOWN,"/*
 * check that a subrequest won't cause infinite recursion
 *
 * either not in a subrequest, or in a subrequest
 * and URIs aren't NULL and sub/main URIs differ
 */",undetermined
7831,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                 Types and Structures
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7832,httpd,UNKNOWN,/* filename for map data files         */,undetermined
7833,httpd,UNKNOWN,/* dbm type for dbm map data files     */,undetermined
7834,httpd,UNKNOWN,/* filename to check for map existence */,undetermined
7835,httpd,UNKNOWN,/* for cached maps (txt/rnd/dbm)       */,undetermined
7836,httpd,UNKNOWN,/* the type of the map                 */,undetermined
7837,httpd,UNKNOWN,/* in  file pointer for program maps   */,undetermined
7838,httpd,UNKNOWN,/* out file pointer for program maps   */,undetermined
7839,httpd,UNKNOWN,/* err file pointer for program maps   */,undetermined
7840,httpd,UNKNOWN,/* function pointer for internal maps  */,undetermined
7841,httpd,UNKNOWN,/* argv of the external rewrite map    */,undetermined
7842,httpd,UNKNOWN,/* SQL SELECT statement for rewritemap */,undetermined
7843,httpd,UNKNOWN,"/* filename to check for map existence
                                      NULL if only one file               */",undetermined
7844,httpd,UNKNOWN,/* special pattern types for RewriteCond */,undetermined
7845,httpd,UNKNOWN,/* Input string of RewriteCond   */,undetermined
7846,httpd,UNKNOWN,/* the RegExp pattern string     */,undetermined
7847,httpd,UNKNOWN,/* the precompiled regexp        */,undetermined
7848,httpd,UNKNOWN,/* the compiled ap_expr          */,undetermined
7849,httpd,UNKNOWN,/* Flags which control the match */,undetermined
7850,httpd,UNKNOWN,/* pattern type                  */,undetermined
7851,httpd,UNKNOWN,/* back-index to display pattern */,undetermined
7852,httpd,UNKNOWN,/* single linked list for env vars and cookies */,undetermined
7853,httpd,UNKNOWN,/* the corresponding RewriteCond entries */,undetermined
7854,httpd,UNKNOWN,/* the RegExp pattern string             */,undetermined
7855,httpd,UNKNOWN,/* the RegExp pattern compilation        */,undetermined
7856,httpd,UNKNOWN,/* the Substitution string               */,undetermined
7857,httpd,UNKNOWN,/* Flags which control the substitution  */,undetermined
7858,httpd,UNKNOWN,/* forced MIME type of substitution      */,undetermined
7859,httpd,UNKNOWN,/* forced content handler of subst.      */,undetermined
7860,httpd,UNKNOWN,/* forced HTTP response status           */,undetermined
7861,httpd,UNKNOWN,/* added environment variables           */,undetermined
7862,httpd,UNKNOWN,/* added cookies                         */,undetermined
7863,httpd,UNKNOWN,/* number of next rules to skip          */,undetermined
7864,httpd,UNKNOWN,/* the RewriteEngine state            */,undetermined
7865,httpd,UNKNOWN,/* the RewriteOption state            */,undetermined
7866,httpd,UNKNOWN,/* the RewriteMap entries             */,undetermined
7867,httpd,UNKNOWN,/* the RewriteCond entries (temp.)    */,undetermined
7868,httpd,UNKNOWN,/* the RewriteRule entries            */,undetermined
7869,httpd,UNKNOWN,/* the corresponding server indicator */,undetermined
7870,httpd,UNKNOWN,/* the RewriteEngine state           */,undetermined
7871,httpd,UNKNOWN,/* the RewriteOption state           */,undetermined
7872,httpd,UNKNOWN,/* the RewriteCond entries (temp.)   */,undetermined
7873,httpd,UNKNOWN,/* the RewriteRule entries           */,undetermined
7874,httpd,UNKNOWN,/* the directory where it applies    */,undetermined
7875,httpd,UNKNOWN,/* the base-URL  where it applies    */,undetermined
7876,httpd,UNKNOWN,"/* the (per-child) cache structures.
 */",undetermined
7877,httpd,UNKNOWN,"/* cached maps contain an mtime for the whole map and live in a subpool
 * of the cachep->pool. That makes it easy to forget them if necessary.
 */",undetermined
7878,httpd,UNKNOWN,"/* the regex structure for the
 * substitution of backreferences
 */",undetermined
7879,httpd,UNKNOWN,"/* single linked list used for
 * variable expansion
 */",undetermined
7880,httpd,UNKNOWN,"/* context structure for variable lookup and expansion
 */",undetermined
7881,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                 static module data
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7882,httpd,UNKNOWN,/* the global module structure */,undetermined
7883,httpd,UNKNOWN,/* rewritemap int: handler function registry */,undetermined
7884,httpd,UNKNOWN,/* the cache */,undetermined
7885,httpd,UNKNOWN,/* whether proxy module is available or not */,undetermined
7886,httpd,UNKNOWN,/* Locks/Mutexes */,undetermined
7887,httpd,UNKNOWN,/* Optional functions imported from mod_ssl when loaded: */,undetermined
7888,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |              rewriting logfile support
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7889,httpd,UNKNOWN,/* !REWRITELOG_DISABLED */,undetermined
7890,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                URI and path functions
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7891,httpd,UNKNOWN,"/* return number of chars of the scheme (incl. '://')
 * if the URI is absolute (includes a scheme etc.)
 * otherwise 0.
 * If supportqs is not NULL, we return a whether or not
 * the scheme supports a query string or not.
 *
 * NOTE: If you add new schemes here, please have a
 *       look at escape_absolute_uri and splitout_queryargs.
 *       Not every scheme takes query strings and some schemes
 *       may be handled in a special way.
 *
 * XXX: we may consider a scheme registry, perhaps with
 *      appropriate escape callbacks to allow other modules
 *      to extend mod_rewrite at runtime.
 */",undetermined
7892,httpd,UNKNOWN,/* fast exit */,undetermined
7893,httpd,UNKNOWN,/* ajp://    */,undetermined
7894,httpd,UNKNOWN,/* balancer:// */,undetermined
7895,httpd,UNKNOWN,/* ftp://    */,undetermined
7896,httpd,UNKNOWN,/* fcgi://   */,undetermined
7897,httpd,UNKNOWN,/* gopher:// */,undetermined
7898,httpd,UNKNOWN,/* http://   */,undetermined
7899,httpd,UNKNOWN,/* https://  */,undetermined
7900,httpd,UNKNOWN,/* ldap://   */,undetermined
7901,httpd,UNKNOWN,/* mailto:   */,undetermined
7902,httpd,UNKNOWN,/* news:     */,undetermined
7903,httpd,UNKNOWN,/* nntp://   */,undetermined
7904,httpd,UNKNOWN,/* scgi://   */,undetermined
7905,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
7906,httpd,UNKNOWN,"/*
 * Escapes a uri in a similar way as php's urlencode does.
 * Based on ap_os_escape_path in server/util.c
 */",undetermined
7907,httpd,UNKNOWN,"/*
 * escape absolute uri, which may or may not be path oriented.
 * So let's handle them differently.
 */",undetermined
7908,httpd,UNKNOWN,"/* be safe.
     * NULL should indicate elsewhere, that something's wrong
     */",undetermined
7909,httpd,UNKNOWN,/* scheme with authority part? */,undetermined
7910,httpd,UNKNOWN,/* skip host part */,undetermined
7911,httpd,UNKNOWN,/* nothing after the hostpart. ready! */,undetermined
7912,httpd,UNKNOWN,/* remember the hostname stuff */,undetermined
7913,httpd,UNKNOWN,"/* special thing for ldap.
         * The parts are separated by question marks. From RFC 2255:
         *     ldapurl = scheme ""://"" [hostport] [""/""
         *               [dn [""?"" [attributes] [""?"" [scope]
         *               [""?"" [filter] [""?"" extensions]]]]]]
         */",undetermined
7914,httpd,UNKNOWN,/* Nothing special here. Apply normal escaping. */,undetermined
7915,httpd,UNKNOWN,"/*
 * split out a QUERY_STRING part from
 * the current URI string
 */",undetermined
7916,httpd,UNKNOWN,"/* don't touch, unless it's a scheme for which a query string makes sense.
     * See RFC 1738 and RFC 2368.
     */",undetermined
7917,httpd,UNKNOWN,/* forget the query that's still flying around */,undetermined
7918,httpd,UNKNOWN,/* Discard query string */,undetermined
7919,httpd,UNKNOWN,"/*
 * strip 'http[s]://ourhost/' from URI
 */",undetermined
7920,httpd,UNKNOWN,/* our scratchpad */,undetermined
7921,httpd,UNKNOWN,/* cut the hostname and port out of the URI */,undetermined
7922,httpd,UNKNOWN,"/* 3 == strlen(""://"") */",undetermined
7923,httpd,UNKNOWN,/* additional port given */,undetermined
7924,httpd,UNKNOWN,/* default port */,undetermined
7925,httpd,UNKNOWN,/* now check whether we could reduce it to a local path... */,undetermined
7926,httpd,UNKNOWN,"/*
 * add 'http[s]://ourhost[:ourport]/' to URI
 * if URI is still not fully qualified
 */",undetermined
7927,httpd,UNKNOWN,"/*
 * stat() only the first segment of a path
 */",undetermined
7928,httpd,UNKNOWN,"/* let's recognize slashes only, the mod_rewrite semantics are opaque
     * enough.
     */",undetermined
7929,httpd,UNKNOWN,"/*
 * substitute the prefix path 'match' in 'input' with 'subst' (RewriteBase)
 */",undetermined
7930,httpd,UNKNOWN,/* don't forget the \0 */,undetermined
7931,httpd,UNKNOWN,/* prefix didn't match */,undetermined
7932,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                    caching support
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7933,httpd,UNKNOWN,"/* Now we should have a valid map->entries hash, where we
         * can store our value.
         *
         * We need to copy the key and the value into OUR pool,
         * so that we don't leave it during the r->pool cleanup.
         */",undetermined
7934,httpd,UNKNOWN,"/* if this map is outdated, forget it. */",undetermined
7935,httpd,UNKNOWN,"/* copy the cached value into the supplied pool,
                     * where it belongs (r->pool usually)
                     */",undetermined
7936,httpd,UNKNOWN,/* turns off cache */,undetermined
7937,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                    Map Functions
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7938,httpd,UNKNOWN,"/*
 * General Note: key is already a fresh string, created (expanded) just
 * for the purpose to be passed in here. So one can modify key itself.
 */",undetermined
7939,httpd,UNKNOWN,/* count number of distinct values */,undetermined
7940,httpd,UNKNOWN,/* extract it from the whole string */,undetermined
7941,httpd,UNKNOWN,"/* should not be NULL, but ... */",undetermined
7942,httpd,UNKNOWN,/* child process code */,undetermined
7943,httpd,UNKNOWN,"/*  If the engine isn't turned on,
     *  don't even try to do anything.
     */",undetermined
7944,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                  Lookup functions
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7945,httpd,UNKNOWN,/* +1 for \0 */,undetermined
7946,httpd,UNKNOWN,/* ignore comments and lines starting with whitespaces */,undetermined
7947,httpd,UNKNOWN,/* key doesn't match - ignore. */,undetermined
7948,httpd,UNKNOWN,/* jump to the value */,undetermined
7949,httpd,UNKNOWN,/* no value? ignore */,undetermined
7950,httpd,UNKNOWN,/* extract the value and return. */,undetermined
7951,httpd,UNKNOWN,/* randomise crudely amongst multiple results */,undetermined
7952,httpd,UNKNOWN,/* what's a fair rewritelog level for this? */,undetermined
7953,httpd,UNKNOWN,"/* when `RewriteEngine off' was used in the per-server
     * context then the rewritemap-programs were not spawned.
     * In this case using such a map (usually in per-dir context)
     * is useless because it is not available.
     *
     * newlines in the key leave bytes in the pipe and cause
     * bad things to happen (next map lookup will use the chars
     * after the \n instead of the new key etc etc - in other words,
     * the Rewritemap falls out of sync with the requests).
     */",undetermined
7954,httpd,UNKNOWN,/* take the lock */,undetermined
7955,httpd,UNKNOWN,/* Maybe this should be fatal? */,undetermined
7956,httpd,UNKNOWN,/* write out the request key */,undetermined
7957,httpd,UNKNOWN,/* XXX: error handling */,undetermined
7958,httpd,UNKNOWN,/* XXX: error handling */,undetermined
7959,httpd,UNKNOWN,/* read in the response value */,undetermined
7960,httpd,UNKNOWN,/* remove eol from the buffer */,undetermined
7961,httpd,UNKNOWN,/* only partial (invalid) eol sequence -> reset the counter */,undetermined
7962,httpd,UNKNOWN,"/* catch binary mode, e.g. on Win32 */",undetermined
7963,httpd,UNKNOWN,"/* well, if there wasn't a newline yet, we need to read further */",undetermined
7964,httpd,UNKNOWN,/* concat the stuff */,undetermined
7965,httpd,UNKNOWN,/* \0 */,undetermined
7966,httpd,UNKNOWN,/* give the lock back */,undetermined
7967,httpd,UNKNOWN,/* Maybe this should be fatal? */,undetermined
7968,httpd,UNKNOWN,"/* catch the ""failed"" case */",undetermined
7969,httpd,UNKNOWN,"/*
 * generic map lookup
 */",undetermined
7970,httpd,UNKNOWN,/* get map configuration */,undetermined
7971,httpd,UNKNOWN,/* map doesn't exist */,undetermined
7972,httpd,UNKNOWN,"/*
     * Text file map (perhaps random)
     */",undetermined
7973,httpd,UNKNOWN,"/*
     * DBM file map
     */",undetermined
7974,httpd,UNKNOWN,"/*
     * SQL map without cache
     */",undetermined
7975,httpd,UNKNOWN,"/*
     * SQL map with cache
     */",undetermined
7976,httpd,UNKNOWN,"/*
     * Program file map
     */",undetermined
7977,httpd,UNKNOWN,"/*
     * Internal Map
     */",undetermined
7978,httpd,UNKNOWN,"/*
 * lookup a HTTP header and set VARY note
 */",undetermined
7979,httpd,UNKNOWN,"/*
 * lookahead helper function
 * Determine the correct URI path in perdir context
 */",undetermined
7980,httpd,UNKNOWN,"/*
 * generic variable lookup
 */",undetermined
7981,httpd,UNKNOWN,/* fast exit */,undetermined
7982,httpd,UNKNOWN,/* fast tests for variable length variables (sic) first */,undetermined
7983,httpd,UNKNOWN,"/* sigh, the user wants a file based subrequest, but
                         * we can't do one, since we don't know what the file
                         * path is! In this case behave like LA-U.
                         */",undetermined
7984,httpd,UNKNOWN,"/* well, do it the hard way */",undetermined
7985,httpd,UNKNOWN,"/* can't do this above, because of the getenv call */",undetermined
7986,httpd,UNKNOWN,/* same as request_filename (16) */,undetermined
7987,httpd,UNKNOWN,/* same as script_filename (15) */,undetermined
7988,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                 Expansion functions
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
7989,httpd,UNKNOWN,"/*
 * Bracketed expression handling
 * s points after the opening bracket
 */",undetermined
7990,httpd,UNKNOWN,"/* perform all the expansions on the input string
 * putting the result into a new string
 *
 * for security reasons this expansion must be performed in a
 * single pass, otherwise an attacker can arrange for the result
 * of an earlier expansion to include expansion specifiers that
 * are interpreted by a later expansion, producing results that
 * were not intended by the administrator.
 */",undetermined
7991,httpd,UNKNOWN,/* fast exit */,undetermined
7992,httpd,UNKNOWN,"/* well, actually something to do */",undetermined
7993,httpd,UNKNOWN,/* loop for specials */,undetermined
7994,httpd,UNKNOWN,/* prepare next entry */,undetermined
7995,httpd,UNKNOWN,/* escaped character */,undetermined
7996,httpd,UNKNOWN,/* variable or map lookup */,undetermined
7997,httpd,UNKNOWN,/* variable lookup */,undetermined
7998,httpd,UNKNOWN,/* map lookup */,undetermined
7999,httpd,UNKNOWN,/* *p == '$' */,undetermined
8000,httpd,UNKNOWN,"/*
                 * To make rewrite maps useful, the lookup key and
                 * default values must be expanded, so we make
                 * recursive calls to do the work. For security
                 * reasons we must never expand a string that includes
                 * verbatim data from the network. The recursion here
                 * isn't a problem because the result of expansion is
                 * only passed to lookup_map() so it cannot be
                 * re-expanded, only re-looked-up. Another way of
                 * looking at it is that the recursion is entirely
                 * driven by the syntax of the nested curly brackets.
                 */",undetermined
8001,httpd,UNKNOWN,/* reuse of key variable as result */,undetermined
8002,httpd,UNKNOWN,/* backreference */,undetermined
8003,httpd,UNKNOWN,/* see ap_pregsub() in server/util.c */,undetermined
8004,httpd,UNKNOWN,/* escape the backreference */,undetermined
8005,httpd,UNKNOWN,"/* not for us, just copy it */",undetermined
8006,httpd,UNKNOWN,/* check the remainder */,undetermined
8007,httpd,UNKNOWN,/* assemble result */,undetermined
8008,httpd,UNKNOWN,/* don't forget the \0 */,undetermined
8009,httpd,UNKNOWN,"/* XXX: can be removed after
                                                   * extensive testing and
                                                   * review
                                                   */",undetermined
8010,httpd,UNKNOWN,"/*
 * perform all the expansions on the environment variables
 */",undetermined
8011,httpd,UNKNOWN,"/*
 * perform all the expansions on the cookies
 *
 * TODO: use cached time similar to how logging does it
 */",undetermined
8012,httpd,UNKNOWN,"/*
 * Expand tilde-paths (/~user) through Unix /etc/passwd
 * database information (or other OS-specific database)
 */",undetermined
8013,httpd,UNKNOWN,/* reuse of user variable */,undetermined
8014,httpd,UNKNOWN,/* if APR_HAS_USER */,undetermined
8015,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |              rewriting lockfile support
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8016,httpd,UNKNOWN,/* create the lockfile */,undetermined
8017,httpd,UNKNOWN,"/* XXX See if there are any rewrite map programs before creating
     * the mutex.
     */",undetermined
8018,httpd,UNKNOWN,/* destroy the rewritelock */,undetermined
8019,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |           configuration directive handling
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8020,httpd,UNKNOWN,"/*
 * own command line parser for RewriteRule and RewriteCond,
 * which doesn't have the '\\' problem.
 * (returns true on error)
 *
 * XXX: what an inclined parser. Seems we have to leave it so
 *      for backwards compat. *sigh*
 */",undetermined
8021,httpd,UNKNOWN,"/*
     * determine first argument
     */",undetermined
8022,httpd,UNKNOWN,"/*
     * determine second argument
     */",undetermined
8023,httpd,UNKNOWN,/* 3rd argument is optional */,undetermined
8024,httpd,UNKNOWN,/* 3rd argument is still optional */,undetermined
8025,httpd,UNKNOWN,"/*
     * determine third argument
     */",undetermined
8026,httpd,UNKNOWN,"/*
         *  local directives override
         *  and anything else is inherited
         */",undetermined
8027,httpd,UNKNOWN,"/*
         *  local directives override
         *  and anything else is inherited (preserving order)
         */",undetermined
8028,httpd,UNKNOWN,"/*
         *  local directives override
         *  and anything else gets defaults
         */",undetermined
8029,httpd,UNKNOWN,/* make sure it has a trailing slash */,undetermined
8030,httpd,UNKNOWN,/* server command? set both global scope and base directory scope */,undetermined
8031,httpd,UNKNOWN,/* directory command? set directory scope only */,undetermined
8032,httpd,UNKNOWN,/* server command? set both global scope and base directory scope */,undetermined
8033,httpd,UNKNOWN,/* is server command */,undetermined
8034,httpd,UNKNOWN,/* directory command? set directory scope only */,undetermined
8035,httpd,UNKNOWN,/* is per-directory command */,undetermined
8036,httpd,UNKNOWN,"/*
 * generic lexer for RewriteRule and RewriteCond flags.
 * The parser will be passed in as a function pointer
 * and called if a flag was found
 */",undetermined
8037,httpd,UNKNOWN,/* for simpler parsing */,undetermined
8038,httpd,UNKNOWN,/* skip leading spaces */,undetermined
8039,httpd,UNKNOWN,"/* NULL should not
                                                               * happen, but ...
                                                               */",undetermined
8040,httpd,UNKNOWN,/* strip trailing spaces */,undetermined
8041,httpd,UNKNOWN,/* split key and val */,undetermined
8042,httpd,UNKNOWN,/*  make a new entry in the internal temporary rewrite rule list */,undetermined
8043,httpd,UNKNOWN,/* is server command */,undetermined
8044,httpd,UNKNOWN,/* is per-directory command */,undetermined
8045,httpd,UNKNOWN,"/* parse the argument line ourself
     * a1 .. a3 are substrings of str, which is a fresh copy
     * of the argument line. So we can use a1 .. a3 without
     * copying them again.
     */",undetermined
8046,httpd,UNKNOWN,/* arg1: the input string */,undetermined
8047,httpd,UNKNOWN,"/* arg3: optional flags field
     * (this has to be parsed first, because we need to
     *  know if the regex should be compiled with ICASE!)
     */",undetermined
8048,httpd,UNKNOWN,/* arg2: the pattern */,undetermined
8049,httpd,UNKNOWN,/* determine the pattern type */,undetermined
8050,httpd,UNKNOWN,"/* Inversion, ensure !-ne == -eq */",undetermined
8051,httpd,UNKNOWN,"/* """" represents an empty string */",undetermined
8052,httpd,UNKNOWN,/* chain */,undetermined
8053,httpd,UNKNOWN,/* cookie */,undetermined
8054,httpd,UNKNOWN,/* env */,undetermined
8055,httpd,UNKNOWN,/* end */,undetermined
8056,httpd,UNKNOWN,/* forbidden */,undetermined
8057,httpd,UNKNOWN,/* gone */,undetermined
8058,httpd,UNKNOWN,/* handler */,undetermined
8059,httpd,UNKNOWN,/* last */,undetermined
8060,httpd,UNKNOWN,/* noescape */,undetermined
8061,httpd,UNKNOWN,/* next */,undetermined
8062,httpd,UNKNOWN,/* nosubreq */,undetermined
8063,httpd,UNKNOWN,/* nocase */,undetermined
8064,httpd,UNKNOWN,/* proxy */,undetermined
8065,httpd,UNKNOWN,/* passthrough */,undetermined
8066,httpd,UNKNOWN,/* qsappend */,undetermined
8067,httpd,UNKNOWN,/* qsdiscard */,undetermined
8068,httpd,UNKNOWN,/* redirect */,undetermined
8069,httpd,UNKNOWN,/* skip */,undetermined
8070,httpd,UNKNOWN,/* type */,undetermined
8071,httpd,UNKNOWN,/*  make a new entry in the internal rewrite rule list */,undetermined
8072,httpd,UNKNOWN,/* is server command */,undetermined
8073,httpd,UNKNOWN,/* is per-directory command */,undetermined
8074,httpd,UNKNOWN,/*  parse the argument line ourself */,undetermined
8075,httpd,UNKNOWN,/* arg3: optional flags field */,undetermined
8076,httpd,UNKNOWN,"/* arg1: the pattern
     * try to compile the regexp to test if is ok
     */",undetermined
8077,httpd,UNKNOWN,/* arg2: the output string */,undetermined
8078,httpd,UNKNOWN,"/* now, if the server or per-dir config holds an
     * array of RewriteCond entries, we take it for us
     * and clear the array
     */",undetermined
8079,httpd,UNKNOWN,/* is server command */,undetermined
8080,httpd,UNKNOWN,/* is per-directory command */,undetermined
8081,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                  the rewriting engine
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8082,httpd,UNKNOWN,/* Lexicographic Compare */,undetermined
8083,httpd,UNKNOWN,"/*
 * Apply a single rewriteCond
 */",undetermined
8084,httpd,UNKNOWN,/* double-check that file exists since default result is 200 */,undetermined
8085,httpd,UNKNOWN,/* Note: the only type where the operator is dropped from p->pattern */,undetermined
8086,httpd,UNKNOWN,/* update briRC backref info */,undetermined
8087,httpd,UNKNOWN,"/* it is really a regexp pattern, so apply it */",undetermined
8088,httpd,UNKNOWN,/* update briRC backref info */,undetermined
8089,httpd,UNKNOWN,/* check for forced type and handler */,undetermined
8090,httpd,UNKNOWN,"/*
 * Apply a single RewriteRule
 */",undetermined
8091,httpd,UNKNOWN,"/*
         * Proxy request?
         */",undetermined
8092,httpd,UNKNOWN,"/* Since we want to match against the (so called) full URL, we have
         * to re-add the PATH_INFO postfix
         */",undetermined
8093,httpd,UNKNOWN,"/* Additionally we strip the physical path from the url to match
         * it independent from the underlaying filesystem.
         */",undetermined
8094,httpd,UNKNOWN,"/* Try to match the URI against the RewriteRule pattern
     * and exit immediately if it didn't apply.
     */",undetermined
8095,httpd,UNKNOWN,"/* It matched, wow! Now it's time to prepare the context structure for
     * further processing
     */",undetermined
8096,httpd,UNKNOWN,"/* Ok, we already know the pattern has matched, but we now
     * additionally have to check for all existing preconditions
     * (RewriteCond) which have to be also true. We do this at
     * this very late stage to avoid unnessesary checks which
     * would slow down the rewriting engine.
     */",undetermined
8097,httpd,UNKNOWN,"/*
         * Reset vary_this if the novary flag is set for this condition.
         */",undetermined
8098,httpd,UNKNOWN,"/* One condition is false, but another can be still true. */",undetermined
8099,httpd,UNKNOWN,/* skip the rest of the chained OR conditions */,undetermined
8100,httpd,UNKNOWN,"/* If some HTTP header was involved in the condition, remember it
         * for later use
         */",undetermined
8101,httpd,UNKNOWN,/* expand the result */,undetermined
8102,httpd,UNKNOWN,/* expand [E=var:val] and [CO=<cookie>] */,undetermined
8103,httpd,UNKNOWN,/* non-substitution rules ('RewriteRule <pat> -') end here. */,undetermined
8104,httpd,UNKNOWN,/* Now adjust API's knowledge about r->filename and r->args */,undetermined
8105,httpd,UNKNOWN,"/* Add the previously stripped per-directory location prefix, unless
     * (1) it's an absolute URL path and
     * (2) it's a full qualified URL
     */",undetermined
8106,httpd,UNKNOWN,"/* If this rule is forced for proxy throughput
     * (`RewriteRule ... ... [P]') then emulate mod_proxy's
     * URL-to-filename handler to be sure mod_proxy is triggered
     * for this URL later in the Apache API. But make sure it is
     * a fully-qualified URL. (If not it is qualified with
     * ourself).
     */",undetermined
8107,httpd,UNKNOWN,"/* For rules evaluated in server context, the mod_proxy fixup
         * hook can be relied upon to escape the URI as and when
         * necessary, since it occurs later.  If in directory context,
         * the ordering of the fixup hooks is forced such that
         * mod_proxy comes first, so the URI must be escaped here
         * instead.  See PR 39746, 46428, and other headaches. */",undetermined
8108,httpd,UNKNOWN,"/* If this rule is explicitly forced for HTTP redirection
     * (`RewriteRule .. .. [R]') then force an external HTTP
     * redirect. But make sure it is a fully-qualified URL. (If
     * not it is qualified with ourself).
     */",undetermined
8109,httpd,UNKNOWN,"/* Special Rewriting Feature: Self-Reduction
     * We reduce the URL by stripping a possible
     * http[s]://<ourhost>[:<port>] prefix, i.e. a prefix which
     * corresponds to ourself. This is to simplify rewrite maps
     * and to avoid recursion, etc. When this prefix is not a
     * coincidence then the user has to use [R] explicitly (see
     * above).
     */",undetermined
8110,httpd,UNKNOWN,"/* If this rule is still implicitly forced for HTTP
     * redirection (`RewriteRule .. <scheme>://...') then
     * directly force an external HTTP redirect.
     */",undetermined
8111,httpd,UNKNOWN,/* Finally remember the forced mime-type */,undetermined
8112,httpd,UNKNOWN,"/* Puuhhhhhhhh... WHAT COMPLICATED STUFF ;_)
     * But now we're done for this particular rule.
     */",undetermined
8113,httpd,UNKNOWN,"/*
 * Apply a complete rule set,
 * i.e. a list of rewrite rules
 */",undetermined
8114,httpd,UNKNOWN,"/*
     *  Iterate over all existing rules
     */",undetermined
8115,httpd,UNKNOWN,"/*
         *  Ignore this rule on subrequests if we are explicitly
         *  asked to do so or this is a proxy-throughput or a
         *  forced redirect rule.
         */",undetermined
8116,httpd,UNKNOWN,"/*
         *  Apply the current rule.
         */",undetermined
8117,httpd,UNKNOWN,"/* Regardless of what we do next, we've found a match. Check to see
             * if any of the request header fields were involved, and add them
             * to the Vary field of the response.
             */",undetermined
8118,httpd,UNKNOWN,"/*
             * The rule sets the response code (implies match-only)
             */",undetermined
8119,httpd,UNKNOWN,"/*
             * Indicate a change if this was not a match-only rule.
             */",undetermined
8120,httpd,UNKNOWN,"/*
             *  Pass-Through Feature (`RewriteRule .. .. [PT]'):
             *  Because the Apache 1.x API is very limited we
             *  need this hack to pass the rewritten URL to other
             *  modules like mod_alias, mod_userdir, etc.
             */",undetermined
8121,httpd,UNKNOWN,"/*
             *  Stop processing also on proxy pass-through and
             *  last-rule and new-round flags.
             */",undetermined
8122,httpd,UNKNOWN,"/*
             *  On ""new-round"" flag we just start from the top of
             *  the rewriting ruleset again.
             */",undetermined
8123,httpd,UNKNOWN,"/*
             *  If we are forced to skip N next rules, do it now.
             */",undetermined
8124,httpd,UNKNOWN,"/*
             *  If current rule is chained with next rule(s),
             *  skip all this next rule(s)
             */",undetermined
8125,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |             Module Initialization Hooks
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8126,httpd,UNKNOWN,/* register int: rewritemap handlers */,undetermined
8127,httpd,UNKNOWN,/* check if proxy module is available */,undetermined
8128,httpd,UNKNOWN,"/* if we are not doing the initial config, step through the servers and
     * open the RewriteMap prg:xxx programs,
     */",undetermined
8129,httpd,UNKNOWN,/* get a rid of gcc warning (REWRITELOG_DISABLED) */,undetermined
8130,httpd,UNKNOWN,/* create the lookup cache */,undetermined
8131,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                     runtime hooks
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8132,httpd,UNKNOWN,"/*
 * URI-to-filename hook
 * [deals with RewriteRules in server context]
 */",undetermined
8133,httpd,UNKNOWN,"/*
     *  retrieve the config structures
     */",undetermined
8134,httpd,UNKNOWN,"/*
     *  only do something under runtime if the engine is really enabled,
     *  else return immediately!
     */",undetermined
8135,httpd,UNKNOWN,"/*
     *  check for the ugly API case of a virtual host section where no
     *  mod_rewrite directives exists. In this situation we became no chance
     *  by the API to setup our default per-server config so we have to
     *  on-the-fly assume we have the default config. But because the default
     *  config has a disabled rewriting engine we are lucky because can
     *  just stop operating now.
     */",undetermined
8136,httpd,UNKNOWN,/* END flag was used as a RewriteRule flag on this request */,undetermined
8137,httpd,UNKNOWN,"/* Unless the anyuri option is set, ensure that the input to the
     * first rule really is a URL-path, avoiding security issues with
     * poorly configured rules.  See CVE-2011-3368, CVE-2011-4317. */",undetermined
8138,httpd,UNKNOWN,"/*
     *  add the SCRIPT_URL variable to the env. this is a bit complicated
     *  due to the fact that apache uses subrequests and internal redirects
     */",undetermined
8139,httpd,UNKNOWN,"/*
     *  create the SCRIPT_URI variable for the env
     */",undetermined
8140,httpd,UNKNOWN,/* add the canonical URI of this URL */,undetermined
8141,httpd,UNKNOWN,/* set the variable */,undetermined
8142,httpd,UNKNOWN,"/* if filename was not initially set,
         * we start with the requested URI
         */",undetermined
8143,httpd,UNKNOWN,"/*
         *  now apply the rules ...
         */",undetermined
8144,httpd,UNKNOWN,/* it should be go on as an internal proxy request */,undetermined
8145,httpd,UNKNOWN,"/* check if the proxy module is enabled, so
             * we can actually use it!
             */",undetermined
8146,httpd,UNKNOWN,"/* make sure the QUERY_STRING and
             * PATH_INFO parts get incorporated
             */",undetermined
8147,httpd,UNKNOWN,/* see proxy_http:proxy_http_canon() */,undetermined
8148,httpd,UNKNOWN,/* now make sure the request gets handled by the proxy handler */,undetermined
8149,httpd,UNKNOWN,/* it was finally rewritten to a remote URL */,undetermined
8150,httpd,UNKNOWN,/* append the QUERY_STRING part */,undetermined
8151,httpd,UNKNOWN,/* determine HTTP redirect response code */,undetermined
8152,httpd,UNKNOWN,/* make Apache kernel happy */,undetermined
8153,httpd,UNKNOWN,/* now do the redirection */,undetermined
8154,httpd,UNKNOWN,"/*
             * Hack because of underpowered API: passing the current
             * rewritten filename through to other URL-to-filename handlers
             * just as it were the requested URL. This is to enable
             * post-processing by mod_alias, etc.  which always act on
             * r->uri! The difference here is: We do not try to
             * add the document root
             */",undetermined
8155,httpd,UNKNOWN,/* it was finally rewritten to a local path */,undetermined
8156,httpd,UNKNOWN,"/* expand ""/~user"" prefix */",undetermined
8157,httpd,UNKNOWN,"/* the filename must be either an absolute local path or an
             * absolute local URL.
             */",undetermined
8158,httpd,UNKNOWN,"/* if there is no valid prefix, we call
             * the translator from the core and
             * prefix the filename with document_root
             *
             * NOTICE:
             * We cannot leave out the prefix_stat because
             * - when we always prefix with document_root
             *   then no absolute path can be created, e.g. via
             *   emulating a ScriptAlias directive, etc.
             * - when we always NOT prefix with document_root
             *   then the files under document_root have to
             *   be references directly and document_root
             *   gets never used and will be a dummy parameter -
             *   this is also bad
             *
             * BUT:
             * Under real Unix systems this is no problem,
             * because we only do stat() on the first directory
             * and this gets cached by the kernel for along time!
             */",undetermined
8159,httpd,UNKNOWN,"/*
 * Fixup hook
 * [RewriteRules in directory context]
 */",undetermined
8160,httpd,UNKNOWN,/* if there is no per-dir config we return immediately */,undetermined
8161,httpd,UNKNOWN,"/*
     * only do something under runtime if the engine is really enabled,
     * for this directory, else return immediately!
     */",undetermined
8162,httpd,UNKNOWN,"/* if there are no real (i.e. no RewriteRule directives!)
       per-dir config of us, we return also immediately */",undetermined
8163,httpd,UNKNOWN,"/*
     * Proxy request?
     */",undetermined
8164,httpd,UNKNOWN,"/*
     *  .htaccess file is called before really entering the directory, i.e.:
     *  URL: http://localhost/foo  and .htaccess is located in foo directory
     *  Ignore such attempts, allowing mod_dir to direct the client to the
     *  canonical URL. This can be controlled with the AllowNoSlash option.
     */",undetermined
8165,httpd,UNKNOWN,/* END flag was used as a RewriteRule flag on this request */,undetermined
8166,httpd,UNKNOWN,"/*
     *  Do the Options check after engine check, so
     *  the user is able to explicitely turn RewriteEngine Off.
     */",undetermined
8167,httpd,UNKNOWN,/* FollowSymLinks is mandatory! */,undetermined
8168,httpd,UNKNOWN,"/*
     *  remember the current filename before rewriting for later check
     *  to prevent deadlooping because of internal redirects
     *  on final URL/filename which can be equal to the inital one.
     *  also, we'll restore original r->filename if we decline this
     *  request
     */",undetermined
8169,httpd,UNKNOWN,"/*
     *  now apply the rules ...
     */",undetermined
8170,httpd,UNKNOWN,/* it should go on as an internal proxy request */,undetermined
8171,httpd,UNKNOWN,"/* make sure the QUERY_STRING and
             * PATH_INFO parts get incorporated
             * (r->path_info was already appended by the
             * rewriting engine because of the per-dir context!)
             */",undetermined
8172,httpd,UNKNOWN,/* see proxy_http:proxy_http_canon() */,undetermined
8173,httpd,UNKNOWN,/* now make sure the request gets handled by the proxy handler */,undetermined
8174,httpd,UNKNOWN,/* it was finally rewritten to a remote URL */,undetermined
8175,httpd,UNKNOWN,"/* because we are in a per-dir context
             * first try to replace the directory with its base-URL
             * if there is a base-URL available
             */",undetermined
8176,httpd,UNKNOWN,/* skip 'scheme://' */,undetermined
8177,httpd,UNKNOWN,"/* I think, that hack needs an explanation:
                     * well, here is it:
                     * mod_rewrite was written for unix systems, were
                     * absolute file-system paths start with a slash.
                     * URL-paths _also_ start with slashes, so they
                     * can be easily compared with system paths.
                     *
                     * the following assumes, that the actual url-path
                     * may be prefixed by the current directory path and
                     * tries to replace the system path with the RewriteBase
                     * URL.
                     * That assumption is true if we use a RewriteRule like
                     *
                     * RewriteRule ^foo bar [R]
                     *
                     * (see apply_rewrite_rule function)
                     * However on systems that don't have a / as system
                     * root this will never match, so we skip the / after the
                     * hostname and compare/substitute only the stuff after it.
                     *
                     * (note that cp was already increased to the right value)
                     */",undetermined
8178,httpd,UNKNOWN,/* now prepare the redirect... */,undetermined
8179,httpd,UNKNOWN,/* append the QUERY_STRING part */,undetermined
8180,httpd,UNKNOWN,/* determine HTTP redirect response code */,undetermined
8181,httpd,UNKNOWN,/* make Apache kernel happy */,undetermined
8182,httpd,UNKNOWN,/* now do the redirection */,undetermined
8183,httpd,UNKNOWN,/* it was finally rewritten to a local path */,undetermined
8184,httpd,UNKNOWN,"/* if someone used the PASSTHROUGH flag in per-dir
             * context we just ignore it. It is only useful
             * in per-server context
             */",undetermined
8185,httpd,UNKNOWN,"/* the filename must be either an absolute local path or an
             * absolute local URL.
             */",undetermined
8186,httpd,UNKNOWN,"/* Check for deadlooping:
             * At this point we KNOW that at least one rewriting
             * rule was applied, but when the resulting URL is
             * the same as the initial URL, we are not allowed to
             * use the following internal redirection stuff because
             * this would lead to a deadloop.
             */",undetermined
8187,httpd,UNKNOWN,"/* if there is a valid base-URL then substitute
             * the per-dir prefix with this base-URL if the
             * current filename still is inside this per-dir
             * context. If not then treat the result as a
             * plain URL
             */",undetermined
8188,httpd,UNKNOWN,"/* if no explicit base-URL exists we assume
                 * that the directory prefix is also a valid URL
                 * for this webserver and only try to remove the
                 * document_root if it is prefix
                 */",undetermined
8189,httpd,UNKNOWN,/* strip trailing slash */,undetermined
8190,httpd,UNKNOWN,/* now initiate the internal redirect */,undetermined
8191,httpd,UNKNOWN,"/*
 * MIME-type hook
 * [T=...,H=...] execution
 */",undetermined
8192,httpd,UNKNOWN,/* type */,undetermined
8193,httpd,UNKNOWN,/* handler */,undetermined
8194,httpd,UNKNOWN,"/*
 * ""content"" handler for internal redirects
 */",undetermined
8195,httpd,UNKNOWN,/* just make sure that we are really meant! */,undetermined
8196,httpd,UNKNOWN,/* now do the internal redirect */,undetermined
8197,httpd,UNKNOWN,/* and return gracefully */,undetermined
8198,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                Module paraphernalia
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
8199,httpd,UNKNOWN,"/* fixup after mod_proxy, so that the proxied url will not
     * escaped accidentally by mod_proxy's fixup.
     */",undetermined
8200,httpd,UNKNOWN,"/* make the hashtable before registering the function, so that
     * other modules are prevented from accessing uninitialized memory.
     */",undetermined
8201,httpd,UNKNOWN,/* the main config structure */,undetermined
8202,httpd,UNKNOWN,/* create per-dir    config structures */,undetermined
8203,httpd,UNKNOWN,/* merge  per-dir    config structures */,undetermined
8204,httpd,UNKNOWN,/* create per-server config structures */,undetermined
8205,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
8206,httpd,UNKNOWN,/* table of config file commands       */,undetermined
8207,httpd,UNKNOWN,/* register hooks                      */,undetermined
8208,httpd,UNKNOWN,/*EOF*/,undetermined
8209,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8210,httpd,UNKNOWN,"/**
 * @file  mod_rewrite.h
 * @brief Rewrite Extension module for Apache
 *
 * @defgroup MOD_REWRITE mod_rewrite
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
8211,httpd,UNKNOWN,/* rewrite map function prototype */,undetermined
8212,httpd,UNKNOWN,/* optional function declaration */,undetermined
8213,httpd,UNKNOWN,/* MOD_REWRITE_H */,undetermined
8214,httpd,UNKNOWN,/** @} */,undetermined
8215,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8216,httpd,UNKNOWN,"/* mod_speling.c - by Alexei Kosut <akosut@organic.com> June, 1996
 *
 * This module is transparent, and simple. It attempts to correct
 * misspellings of URLs that users might have entered, namely by checking
 * capitalizations. If it finds a match, it sends a redirect.
 *
 * Sep-1999 Hugo Haas <hugo@w3.org>
 * o Added a CheckCaseOnly option to check only miscapitalized words.
 *
 * 08-Aug-1997 <Martin.Kraemer@Mch.SNI.De>
 * o Upgraded module interface to apache_1.3a2-dev API (more NULL's in
 *   speling_module).
 * o Integrated tcsh's ""spelling correction"" routine which allows one
 *   misspelling (character insertion/omission/typo/transposition).
 *   Rewrote it to ignore case as well. This ought to catch the majority
 *   of misspelled requests.
 * o Commented out the second pass where files' suffixes are stripped.
 *   Given the better hit rate of the first pass, this rather ugly
 *   (request index.html, receive index.db ?!?!) solution can be
 *   omitted.
 * o wrote a ""kind of"" html page for mod_speling
 *
 * Activate it with ""CheckSpelling On""
 */",undetermined
8217,httpd,UNKNOWN,"/*
 * Create a configuration specific to this module for a server or directory
 * location, and fill it with the default settings.
 *
 * The API says that in the absence of a merge function, the record for the
 * closest ancestor is used exclusively.  That's what we want, so we don't
 * bother to have such a function.
 */",undetermined
8218,httpd,UNKNOWN,"/*
 * Respond to a callback to create configuration record for a server or
 * vhost environment.
 */",undetermined
8219,httpd,UNKNOWN,"/*
 * Respond to a callback to create a config record for a specific directory.
 */",undetermined
8220,httpd,UNKNOWN,"/*
 * Define the directives specific to this module.  This structure is referenced
 * later by the 'module' structure.
 */",undetermined
8221,httpd,UNKNOWN,"/*
 * spdist() is taken from Kernighan & Pike,
 *  _The_UNIX_Programming_Environment_
 * and adapted somewhat to correspond better to psychological reality.
 * (Note the changes to the return values)
 *
 * According to Pollock and Zamora, CACM April 1984 (V. 27, No. 4),
 * page 363, the correct order for this is:
 * OMISSION = TRANSPOSITION > INSERTION > SUBSTITUTION
 * thus, it was exactly backwards in the old version. -- PWP
 *
 * This routine was taken out of tcsh's spelling correction code
 * (tcsh-6.07.04) and re-converted to apache data types (""char"" type
 * instead of tcsh's NLS'ed ""Char""). Plus it now ignores the case
 * during comparisons, so is a ""approximate strcasecmp()"".
 * NOTE that is still allows only _one_ real ""typo"",
 * it does NOT try to correct multiple errors.
 */",undetermined
8222,httpd,UNKNOWN,/* exact match (sans case) */,undetermined
8223,httpd,UNKNOWN,/* transposition */,undetermined
8224,httpd,UNKNOWN,/* 1 char mismatch */,undetermined
8225,httpd,UNKNOWN,/* extra character */,undetermined
8226,httpd,UNKNOWN,/* missing character */,undetermined
8227,httpd,UNKNOWN,/* distance too large to fix. */,undetermined
8228,httpd,UNKNOWN,/* We only want to worry about GETs */,undetermined
8229,httpd,UNKNOWN,/* We've already got a file of some kind or another */,undetermined
8230,httpd,UNKNOWN,/* Not a file request */,undetermined
8231,httpd,UNKNOWN,/* This is a sub request - don't mess with it */,undetermined
8232,httpd,UNKNOWN,"/*
     * The request should end up looking like this:
     * r->uri: /correct-url/mispelling/more
     * r->filename: /correct-file/mispelling r->path_info: /more
     *
     * So we do this in steps. First break r->filename into two pieces
     */",undetermined
8233,httpd,UNKNOWN,"/*
     * Don't do anything if the request doesn't contain a slash, or
     * requests ""/""
     */",undetermined
8234,httpd,UNKNOWN,/* good = /correct-file */,undetermined
8235,httpd,UNKNOWN,/* bad = mispelling */,undetermined
8236,httpd,UNKNOWN,/* postgood = mispelling/more */,undetermined
8237,httpd,UNKNOWN,/* Check to see if the URL pieces add up */,undetermined
8238,httpd,UNKNOWN,/* url = /correct-url */,undetermined
8239,httpd,UNKNOWN,/* Now open the directory and do ourselves a check... */,undetermined
8240,httpd,UNKNOWN,"/* Oops, not a directory... */",undetermined
8241,httpd,UNKNOWN,"/*
         * If we end up with a ""fixed"" URL which is identical to the
         * requested one, we must have found a broken symlink or some such.
         * Do _not_ try to redirect this, it causes a loop!
         */",undetermined
8242,httpd,UNKNOWN,"/*
         * miscapitalization errors are checked first (like, e.g., lower case
         * file, upper case request)
         */",undetermined
8243,httpd,UNKNOWN,"/*
         * simple typing errors are checked next (like, e.g.,
         * missing/extra/transposed char)
         */",undetermined
8244,httpd,UNKNOWN,"/*
         * The spdist() should have found the majority of the misspelled
         * requests.  It is of questionable use to continue looking for
         * files with the same base name, but potentially of totally wrong
         * type (index.html <-> index.db).
         * I would propose to not set the WANT_BASENAME_MATCH define.
         *      08-Aug-1997 <Martin.Kraemer@Mch.SNI.De>
         *
         * However, Alexei replied giving some reasons to add it anyway:
         * > Oh, by the way, I remembered why having the
         * > extension-stripping-and-matching stuff is a good idea:
         * >
         * > If you're using MultiViews, and have a file named foobar.html,
         * > which you refer to as ""foobar"", and someone tried to access
         * > ""Foobar"", mod_speling won't find it, because it won't find
         * > anything matching that spelling. With the extension-munging,
         * > it would locate ""foobar.html"". Not perfect, but I ran into
         * > that problem when I first wrote the module.
         */",undetermined
8245,httpd,UNKNOWN,"/*
             * Okay... we didn't find anything. Now we take out the hard-core
             * power tools. There are several cases here. Someone might have
             * entered a wrong extension (.htm instead of .html or vice
             * versa) or the document could be negotiated. At any rate, now
             * we just compare stuff before the first dot. If it matches, we
             * figure we got us a match. This can result in wrong things if
             * there are files of different content types but the same prefix
             * (e.g. foo.gif and foo.html) This code will pick the first one
             * it finds. Better than a Not Found, though.
             */",undetermined
8246,httpd,UNKNOWN,/* Wow... we found us a mispelling. Construct a fixed url */,undetermined
8247,httpd,UNKNOWN,"/*
         * Conditions for immediate redirection:
         *     a) the first candidate was not found by stripping the suffix
         * AND b) there exists only one candidate OR the best match is not
         *        ambiguous
         * then return a redirection right away.
         */",undetermined
8248,httpd,UNKNOWN,"/*
         * Otherwise, a ""[300] Multiple Choices"" list with the variants is
         * returned.
         */",undetermined
8249,httpd,UNKNOWN,/* Generate the response text. */,undetermined
8250,httpd,UNKNOWN,/* The format isn't very neat... */,undetermined
8251,httpd,UNKNOWN,"/*
                 * when we have printed the ""close matches"" and there are
                 * more ""distant matches"" (matched by stripping the suffix),
                 * then we insert an additional separator text to suggest
                 * that the user LOOK CLOSELY whether these are really the
                 * files she wanted.
                 */",undetermined
8252,httpd,UNKNOWN,"/* If we know there was a referring page, add a note: */",undetermined
8253,httpd,UNKNOWN,/* Pass our apr_table_t to http_protocol.c (see mod_negotiation): */,undetermined
8254,httpd,UNKNOWN,/* create per-dir config */,undetermined
8255,httpd,UNKNOWN,/* merge per-dir config */,undetermined
8256,httpd,UNKNOWN,/* server config */,undetermined
8257,httpd,UNKNOWN,/* merge server config */,undetermined
8258,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8259,httpd,UNKNOWN,/* register hooks */,undetermined
8260,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8261,httpd,UNKNOWN,"/*
 * mod_userdir... implement the UserDir command.  Broken away from the
 * Alias stuff for a couple of good and not-so-good reasons:
 *
 * 1) It shows a real minimal working example of how to do something like
 *    this.
 * 2) I know people who are actually interested in changing this *particular*
 *    aspect of server functionality without changing the rest of it.  That's
 *    what this whole modular arrangement is supposed to be good at...
 *
 * Modified by Alexei Kosut to support the following constructs
 * (server running at www.foo.com, request for /~bar/one/two.html)
 *
 * UserDir public_html      -> ~bar/public_html/one/two.html
 * UserDir /usr/web         -> /usr/web/bar/one/two.html
 * UserDir /home/ * /www     -> /home/bar/www/one/two.html
 *  NOTE: theses ^ ^ space only added allow it to work in a comment, ignore
 * UserDir http://x/users   -> (302) http://x/users/bar/one/two.html
 * UserDir http://x/ * /y     -> (302) http://x/bar/y/one/two.html
 *  NOTE: here also ^ ^
 *
 * In addition, you can use multiple entries, to specify alternate
 * user directories (a la Directory Index). For example:
 *
 * UserDir public_html /usr/web http://www.xyz.com/users
 *
 * Modified by Ken Coar to provide for the following:
 *
 * UserDir disable[d] username ...
 * UserDir enable[d] username ...
 *
 * If ""disabled"" has no other arguments, *all* ~<username> references are
 * disabled, except those explicitly turned on with the ""enabled"" keyword.
 */",undetermined
8262,httpd,UNKNOWN,/* Contains the suexec_identity hook used on Unix */,undetermined
8263,httpd,UNKNOWN,"/*
 * The default directory in user's home dir
 * In the default install, the module is disabled
 */",undetermined
8264,httpd,UNKNOWN,"/*
 * Server config for this module: global disablement flag, a list of usernames
 * ineligible for UserDir access, a list of those immune to global (but not
 * explicit) disablement, and the replacement string for all others.
 */",undetermined
8265,httpd,UNKNOWN,/* not merged */,undetermined
8266,httpd,UNKNOWN,"/* Since we are a raw argument, it is possible for us to be called with
     * zero arguments.  So that we aren't ambiguous, flat out reject this.
     */",undetermined
8267,httpd,UNKNOWN,"/*
     * Let's do the comparisons once.
     */",undetermined
8268,httpd,UNKNOWN,"/*
         * If there are no usernames specified, this is a global disable - we
         * need do no more at this point than record the fact.
         */",undetermined
8269,httpd,UNKNOWN,"/*
         * If the first (only?) value isn't one of our keywords, just copy
         * the string to the userdir string.
         */",undetermined
8270,httpd,UNKNOWN,"/*
     * Now we just take each word in turn from the command line and add it to
     * the appropriate table.
     */",undetermined
8271,httpd,UNKNOWN,"/*
     * If the URI doesn't match our basic pattern, we've nothing to do with
     * it.
     */",undetermined
8272,httpd,UNKNOWN,"/*
     * The 'dname' funny business involves backing it up to capture the '/'
     * delimiting the ""/~user"" part from the rest of the URL, in case there
     * was one (the case where there wasn't being just ""GET /~user HTTP/1.0"",
     * for which we don't want to tack on a '/' onto the filename).
     */",undetermined
8273,httpd,UNKNOWN,"/*
     * If there's no username, it's not for us.  Ignore . and .. as well.
     */",undetermined
8274,httpd,UNKNOWN,"/*
     * Nor if there's an username but it's in the disabled list.
     */",undetermined
8275,httpd,UNKNOWN,"/*
     * If there's a global interdiction on UserDirs, check to see if this
     * name is one of the Blessed.
     */",undetermined
8276,httpd,UNKNOWN,"/*
     * Special cases all checked, onward to normal substitution processing.
     */",undetermined
8277,httpd,UNKNOWN,"/*
                 * Crummy hack. Need to figure out whether we have been
                 * redirected to a URL or to a file on some drive. Since I
                 * know of no protocols that are a single letter, ignore
                 * a : as the first or second character, and assume a file
                 * was specified
                 */",undetermined
8278,httpd,UNKNOWN,/* HAVE_DRIVE_LETTERS */,undetermined
8279,httpd,UNKNOWN,"/*
         * Now see if it exists, or we're at the last entry. If we are at the
         * last entry, then use the filename generated (if there is one)
         * anyway, in the hope that some handler might handle it. This can be
         * used, for example, to run a CGI script for the user.
         */",undetermined
8280,httpd,UNKNOWN,"/* XXX: Does this walk us around FollowSymLink rules?
             * When statbuf contains info on r->filename we can save a syscall
             * by copying it to r->finfo
             */",undetermined
8281,httpd,UNKNOWN,/* For use in the get_suexec_identity phase */,undetermined
8282,httpd,UNKNOWN,/* HAVE_UNIX_SUEXEC */,undetermined
8283,httpd,UNKNOWN,/* dir config creater */,undetermined
8284,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
8285,httpd,UNKNOWN,/* server config */,undetermined
8286,httpd,UNKNOWN,/* merge server config */,undetermined
8287,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8288,httpd,UNKNOWN,/* register hooks */,undetermined
8289,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8290,httpd,UNKNOWN,"/*
 * mod_vhost_alias.c: support for dynamically configured mass virtual hosting
 *
 * Copyright (c) 1998-1999 Demon Internet Ltd.
 *
 * This software was submitted by Demon Internet to the Apache Software Foundation
 * in May 1999. Future revisions and derivatives of this source code
 * must acknowledge Demon Internet as the original contributor of
 * this module. All other licensing and usage conditions are those
 * of the Apache Software Foundation.
 *
 * Originally written by Tony Finch <fanf@demon.net> <dot@dotat.at>.
 *
 * Implementation ideas were taken from mod_alias.c. The overall
 * concept is derived from the OVERRIDE_DOC_ROOT/OVERRIDE_CGIDIR
 * patch to Apache 1.3b3 and a similar feature in Demon's thttpd,
 * both written by James Grinter <jrg@blodwen.demon.co.uk>.
 */",undetermined
8291,httpd,UNKNOWN,/* for ap_hook_translate_name */,undetermined
8292,httpd,UNKNOWN,"/*
 * basic configuration things
 * we abbreviate ""mod_vhost_alias"" to ""mva"" for shorter names
 */",undetermined
8293,httpd,UNKNOWN,"/*
 * Per-server module config record.
 */",undetermined
8294,httpd,UNKNOWN,"/*
 * These are just here to tell us what vhost_alias_set should do.
 * We don't put anything into them; we just use the cell addresses.
 */",undetermined
8295,httpd,UNKNOWN,/* there ought to be a better way of doing this */,undetermined
8296,httpd,UNKNOWN,/* sanity check */,undetermined
8297,httpd,UNKNOWN,/* we just found a '%' */,undetermined
8298,httpd,UNKNOWN,/* optional dash */,undetermined
8299,httpd,UNKNOWN,/* digit N */,undetermined
8300,httpd,UNKNOWN,/* optional plus */,undetermined
8301,httpd,UNKNOWN,/* do we end here? */,undetermined
8302,httpd,UNKNOWN,/* optional dash */,undetermined
8303,httpd,UNKNOWN,/* digit M */,undetermined
8304,httpd,UNKNOWN,/* optional plus */,undetermined
8305,httpd,UNKNOWN,"/*
 * This really wants to be a nested function
 * but C is too feeble to support them.
 */",undetermined
8306,httpd,UNKNOWN,/* XXX: what if size > HUGE_STRING_LEN? */,undetermined
8307,httpd,UNKNOWN,/* 0..9 9..0 */,undetermined
8308,httpd,UNKNOWN,/* slightly naughty */,undetermined
8309,httpd,UNKNOWN,/* normal characters */,undetermined
8310,httpd,UNKNOWN,/* we are in a format specifier */,undetermined
8311,httpd,UNKNOWN,/* %% -> % */,undetermined
8312,httpd,UNKNOWN,/* port number */,undetermined
8313,httpd,UNKNOWN,/* no. of decimal digits in a short plus one */,undetermined
8314,httpd,UNKNOWN,/* deal with %-N+.-M+ -- syntax is already checked */,undetermined
8315,httpd,UNKNOWN,/* value */,undetermined
8316,httpd,UNKNOWN,/* is there a plus? */,undetermined
8317,httpd,UNKNOWN,/* is there a dash? */,undetermined
8318,httpd,UNKNOWN,"/* note that N and M are one-based indices, not zero-based */",undetermined
8319,httpd,UNKNOWN,/* ptr to the first character */,undetermined
8320,httpd,UNKNOWN,/* ptr to the character after the last one */,undetermined
8321,httpd,UNKNOWN,/* no double slashes */,undetermined
8322,httpd,UNKNOWN,"/* ### There is an optimization available here to determine the
     * absolute portion of the path from the server config phase,
     * through the first % segment, and note that portion of the path
     * canonical_path buffer.
     */",undetermined
8323,httpd,UNKNOWN,/* see is_scriptaliased() in mod_cgi */,undetermined
8324,httpd,UNKNOWN,/* dir config creater */,undetermined
8325,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
8326,httpd,UNKNOWN,/* server config */,undetermined
8327,httpd,UNKNOWN,/* merge server configs */,undetermined
8328,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8329,httpd,UNKNOWN,/* register hooks */,undetermined
8330,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8331,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8332,httpd,UNKNOWN,/* !_LUA_APR_H_ */,undetermined
8333,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8334,httpd,UNKNOWN,/* Change to use ap_lua_map_handler */,undetermined
8335,httpd,UNKNOWN,"/*static int cfg_root(lua_State *L) {
    ap_lua_dir_cfg *cfg = check_dir_config(L, 1);
    lua_pushstring(L, cfg->root_path);
    return 1;
}*/",undetermined
8336,httpd,UNKNOWN,"/* {""root"", cfg_root}, */",undetermined
8337,httpd,UNKNOWN,/* helper function for the logging functions below */,undetermined
8338,httpd,UNKNOWN,/* r:debug(String) and friends which use apache logging */,undetermined
8339,httpd,UNKNOWN,/* [metatable] */,undetermined
8340,httpd,UNKNOWN,/* [metatable] */,undetermined
8341,httpd,UNKNOWN,/* [metatable] */,undetermined
8342,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8343,httpd,UNKNOWN,/* !_APL_CONFIG_H_ */,undetermined
8344,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8345,httpd,UNKNOWN,"/*
   =============================================================================
    db:close(): Closes an open database connection.
   =============================================================================
 */",undetermined
8346,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~*/,undetermined
8347,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~*/,undetermined
8348,httpd,UNKNOWN,"/*
   =============================================================================
     db:__gc(): Garbage collecting function.
   =============================================================================
 */",undetermined
8349,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~*/,undetermined
8350,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~*/,undetermined
8351,httpd,UNKNOWN,"/*
   =============================================================================
    db:active(): Returns true if the connection to the db is still active.
   =============================================================================
 */",undetermined
8352,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~*/,undetermined
8353,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~*/,undetermined
8354,httpd,UNKNOWN,"/*
   =============================================================================
    db:query(statement): Executes the given database query and returns the 
    number of rows affected. If an error is encountered, returns nil as the 
    first parameter and the error message as the second.
   =============================================================================
 */",undetermined
8355,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8356,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8357,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8358,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8359,httpd,UNKNOWN,"/*
   =============================================================================
    db:escape(string): Escapes a string for safe use in the given database type.
   =============================================================================
 */",undetermined
8360,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8361,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8362,httpd,UNKNOWN,"/*
   =============================================================================
     resultset(N): Fetches one or more rows from a result set.
   =============================================================================
 */",undetermined
8363,httpd,UNKNOWN,/* Fetch all rows at once? */,undetermined
8364,httpd,UNKNOWN,/* Just fetch a single row */,undetermined
8365,httpd,UNKNOWN,"/*
   =============================================================================
    db:select(statement): Queries the database for the given statement and 
    returns the rows/columns found as a table. If an error is encountered, 
    returns nil as the first parameter and the error message as the second.
   =============================================================================
 */",undetermined
8366,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8367,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8368,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8369,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8370,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8371,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8372,httpd,UNKNOWN,"/*
   =============================================================================
    statement:select(var1, var2, var3...): Injects variables into a prepared 
    statement and returns the number of rows matching the query.
   =============================================================================
 */",undetermined
8373,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8374,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8375,httpd,UNKNOWN,/* Fetch the prepared statement and the vars passed */,undetermined
8376,httpd,UNKNOWN,"/* Check if we got enough variables passed on to us.
     * This, of course, only works for prepared statements made through lua. */",undetermined
8377,httpd,UNKNOWN,/* Fire off the query */,undetermined
8378,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8379,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8380,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8381,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8382,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8383,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8384,httpd,UNKNOWN,"/*
   =============================================================================
    statement:query(var1, var2, var3...): Injects variables into a prepared 
    statement and returns the number of rows affected.
   =============================================================================
 */",undetermined
8385,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8386,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8387,httpd,UNKNOWN,/* Fetch the prepared statement and the vars passed */,undetermined
8388,httpd,UNKNOWN,"/* Check if we got enough variables passed on to us.
     * This, of course, only works for prepared statements made through lua. */",undetermined
8389,httpd,UNKNOWN,/* Fire off the query */,undetermined
8390,httpd,UNKNOWN,/*~~~~~~~~~~~~~~*/,undetermined
8391,httpd,UNKNOWN,/*~~~~~~~~~~~~~~*/,undetermined
8392,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8393,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8394,httpd,UNKNOWN,"/*
   =============================================================================
    db:prepare(statement): Prepares a statement for later query/select.
    Returns a table with a :query and :select function, same as the db funcs.
   =============================================================================
 */",undetermined
8395,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8396,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8397,httpd,UNKNOWN,/* Count number of variables in statement */,undetermined
8398,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8399,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8400,httpd,UNKNOWN,/* Push the prepared statement table */,undetermined
8401,httpd,UNKNOWN,"/*
   =============================================================================
    db:prepared(statement): Fetches a prepared statement made through 
    DBDPrepareSQL.
   =============================================================================
 */",undetermined
8402,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8403,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8404,httpd,UNKNOWN,/* Look for the statement */,undetermined
8405,httpd,UNKNOWN,/* Push the prepared statement table */,undetermined
8406,httpd,UNKNOWN,/* we don't know :( */,undetermined
8407,httpd,UNKNOWN,"/* lua_push_db_handle: Creates a database table object with database functions 
   and a userdata at index 0, which will call lua_dbgc when garbage collected.
 */",undetermined
8408,httpd,UNKNOWN,"/*
   =============================================================================
    dbacquire(dbType, dbString): Opens a new connection to a database of type 
    _dbType_ and with the connection parameters _dbString_. If successful, 
    returns a table with functions for using the database handle. If an error 
    occurs, returns nil as the first parameter and the error message as the 
    second. See the APR_DBD for a list of database types and connection strings 
    supported.
   =============================================================================
 */",undetermined
8409,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8410,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8411,httpd,UNKNOWN,/* Defaults to mod_dbd */,undetermined
8412,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8413,httpd,UNKNOWN,/* !_LUA_DBD_H_ */,undetermined
8414,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8415,httpd,UNKNOWN,"/*
 * Make a password record from the given information.  A zero return
 * indicates success; on failure, ctx->errstr points to the error message.
 */",undetermined
8416,httpd,UNKNOWN,/* XXX out >= 28 + strlen(sha1) chars - fixed len SHA */,undetermined
8417,httpd,UNKNOWN,/* CRYPT_ALGO_SUPPORTED */,undetermined
8418,httpd,UNKNOWN,/* BCRYPT_ALGO_SUPPORTED */,undetermined
8419,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8420,httpd,UNKNOWN,//    const char      *passwd;,undetermined
8421,httpd,UNKNOWN,"/*
 * The following functions return zero on success; otherwise, one of
 * the ERR_* codes is returned and an error message is stored in ctx->errstr.
 */",undetermined
8422,httpd,UNKNOWN,"/*
 * Make a password record from the given information.
 */",undetermined
8423,httpd,UNKNOWN,/* _LUA_PASSWD_H */,undetermined
8424,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8425,httpd,UNKNOWN,"/**
 * Verify that the thing at index is a request_rec wrapping
 * userdata thingamajig and return it if it is. if it is not
 * lua will enter its error handling routine.
 */",undetermined
8426,httpd,UNKNOWN,/* ------------------ request methods -------------------- */,undetermined
8427,httpd,UNKNOWN,/* helper callback for req_parseargs */,undetermined
8428,httpd,UNKNOWN,"/* [table<s,t>, table<s,s>] */",undetermined
8429,httpd,UNKNOWN,"/* rstack_dump(L, RRR, ""start of cb""); */",undetermined
8430,httpd,UNKNOWN,"/* L is [table<s,t>, table<s,s>] */",undetermined
8431,httpd,UNKNOWN,/* build complex */,undetermined
8432,httpd,UNKNOWN,"/* [VALUE, table<s,t>, table<s,s>] */",undetermined
8433,httpd,UNKNOWN,"/* rstack_dump(L, RRR, ""after getfield""); */",undetermined
8434,httpd,UNKNOWN,"/* [table<s,t>, table<s,s>] */",undetermined
8435,httpd,UNKNOWN,"/* [array, table<s,t>, table<s,s>] */",undetermined
8436,httpd,UNKNOWN,"/* [1, array, table<s,t>, table<s,s>] */",undetermined
8437,httpd,UNKNOWN,"/* [string, 1, array, table<s,t>, table<s,s>] */",undetermined
8438,httpd,UNKNOWN,"/* [array, table<s,t>, table<s,s>]  */",undetermined
8439,httpd,UNKNOWN,"/* [table<s,t>, table<s,s>] */",undetermined
8440,httpd,UNKNOWN,"/* [array, table<s,t>, table<s,s>] */",undetermined
8441,httpd,UNKNOWN,"/* [#, array, table<s,t>, table<s,s>] */",undetermined
8442,httpd,UNKNOWN,"/* [string, #, array, table<s,t>, table<s,s>] */",undetermined
8443,httpd,UNKNOWN,"/* [array, table<s,t>, table<s,s>] */",undetermined
8444,httpd,UNKNOWN,"/* [table<s,t>, table<s,s>] */",undetermined
8445,httpd,UNKNOWN,"/* L is [table<s,t>, table<s,s>] */",undetermined
8446,httpd,UNKNOWN,/* build simple */,undetermined
8447,httpd,UNKNOWN,"/* [VALUE, table<s,s>, table<s,t>] */",undetermined
8448,httpd,UNKNOWN,/* only set if not already set */,undetermined
8449,httpd,UNKNOWN,"/* [table<s,s>, table<s,t>]] */",undetermined
8450,httpd,UNKNOWN,"/* [string, table<s,s>, table<s,t>] */",undetermined
8451,httpd,UNKNOWN,"/* [table<s,s>, table<s,t>]  */",undetermined
8452,httpd,UNKNOWN,"/*
 =======================================================================================================================
    lua_read_body(request_rec *r, const char **rbuf, apr_off_t *size): Reads any additional form data sent in POST/PUT
    requests. Used for multipart POST data.
 =======================================================================================================================
 */",undetermined
8453,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8454,httpd,UNKNOWN,/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/,undetermined
8455,httpd,UNKNOWN,"/*
 * =======================================================================================================================
 * lua_write_body: Reads any additional form data sent in POST/PUT requests
 * and writes to a file.
 * =======================================================================================================================
 */",undetermined
8456,httpd,UNKNOWN,/* r:parseargs() returning a lua table */,undetermined
8457,httpd,UNKNOWN,"/* [table, table] */",undetermined
8458,httpd,UNKNOWN,"/* [table<string, string>, table<string, array<string>>] */",undetermined
8459,httpd,UNKNOWN,/* r:parsebody(): Parses regular (url-enocded) or multipart POST data and returns two tables*/,undetermined
8460,httpd,UNKNOWN,"/* [table, table] */",undetermined
8461,httpd,UNKNOWN,"/* [table<string, string>, table<string, array<string>>] */",undetermined
8462,httpd,UNKNOWN,"/*
 * lua_ap_requestbody; r:requestbody([filename]) - Reads or stores the request
 * body
 */",undetermined
8463,httpd,UNKNOWN,/* wrap ap_rputs as r:puts(String) */,undetermined
8464,httpd,UNKNOWN,/* wrap ap_rwrite as r:write(String) */,undetermined
8465,httpd,UNKNOWN,/* r:addoutputfilter(name|function) */,undetermined
8466,httpd,UNKNOWN,/* wrap ap_construct_url as r:construct_url(String) */,undetermined
8467,httpd,UNKNOWN,/* wrap ap_escape_html r:escape_html(String) */,undetermined
8468,httpd,UNKNOWN,/* wrap optional ssl_var_lookup as  r:ssl_var_lookup(String) */,undetermined
8469,httpd,UNKNOWN,/* BEGIN dispatch mathods for request_rec fields */,undetermined
8470,httpd,UNKNOWN,"/* not really a field, but we treat it like one */",undetermined
8471,httpd,UNKNOWN,"/*
 * lua_apr_b64encode; r:encode_base64(string) - encodes a string to Base64
 * format
 */",undetermined
8472,httpd,UNKNOWN,"/*
 * lua_apr_b64decode; r:decode_base64(string) - decodes a Base64 string
 */",undetermined
8473,httpd,UNKNOWN,"/*
 * lua_ap_unescape; r:unescape(string) - Unescapes an URL-encoded string
 */",undetermined
8474,httpd,UNKNOWN,"/*
 * lua_ap_escape; r:escape(string) - URL-escapes a string
 */",undetermined
8475,httpd,UNKNOWN,"/*
 * lua_apr_md5; r:md5(string) - Calculates an MD5 digest of a string
 */",undetermined
8476,httpd,UNKNOWN,"/*
 * lua_apr_sha1; r:sha1(string) - Calculates the SHA1 digest of a string
 */",undetermined
8477,httpd,UNKNOWN,"/*
 * lua_apr_htpassword; r:htpassword(string [, algorithm [, cost]]) - Creates
 * a htpassword hash from a string
 */",undetermined
8478,httpd,UNKNOWN,"/*
 * lua_apr_touch; r:touch(string [, time]) - Sets mtime of a file
 */",undetermined
8479,httpd,UNKNOWN,"/*
 * lua_apr_mkdir; r:mkdir(string [, permissions]) - Creates a directory
 */",undetermined
8480,httpd,UNKNOWN,"/*
 * lua_apr_mkrdir; r:mkrdir(string [, permissions]) - Creates directories
 * recursive
 */",undetermined
8481,httpd,UNKNOWN,"/*
 * lua_apr_rmdir; r:rmdir(string) - Removes a directory
 */",undetermined
8482,httpd,UNKNOWN,"/*
 * lua_apr_date_parse_rfc; r.date_parse_rfc(string) - Parses a DateTime string
 */",undetermined
8483,httpd,UNKNOWN,"/*
 * lua_ap_mpm_query; r:mpm_query(info) - Queries for MPM info
 */",undetermined
8484,httpd,UNKNOWN,"/*
 * lua_ap_expr; r:expr(string) - Evaluates an expr statement.
 */",undetermined
8485,httpd,UNKNOWN,"/*
 * lua_ap_regex; r:regex(string, pattern [, flags])
 * - Evaluates a regex and returns captures if matched
 */",undetermined
8486,httpd,UNKNOWN,"/*
 * lua_ap_scoreboard_process; r:scoreboard_process(a) - returns scoreboard info
 */",undetermined
8487,httpd,UNKNOWN,"/*
 * lua_ap_scoreboard_worker; r:scoreboard_worker(proc, thread) - Returns thread
 * info
 */",undetermined
8488,httpd,UNKNOWN,"/*
 * lua_ap_clock; r:clock() - Returns timestamp with microsecond precision
 */",undetermined
8489,httpd,UNKNOWN,"/*
 * lua_ap_add_input_filter; r:add_input_filter(name) - Adds an input filter to
 * the chain
 */",undetermined
8490,httpd,UNKNOWN,"/*
 * lua_ap_module_info; r:module_info(mod_name) - Returns information about a
 * loaded module
 */",undetermined
8491,httpd,UNKNOWN,"/*
 * lua_ap_runtime_dir_relative: r:runtime_dir_relative(file): Returns the
 * filename as relative to the runtime dir
 */",undetermined
8492,httpd,UNKNOWN,"/*
 * lua_ap_set_document_root; r:set_document_root(path) - sets the current doc
 * root for the request
 */",undetermined
8493,httpd,UNKNOWN,"/*
 * lua_ap_getdir; r:get_direntries(directory) - Gets all entries of a
 * directory and returns the directory info as a table
 */",undetermined
8494,httpd,UNKNOWN,/* ignore un-stat()able files */,undetermined
8495,httpd,UNKNOWN,"/*
 * lua_ap_stat; r:stat(filename [, wanted]) - Runs stat on a file and
 * returns the file info as a table
 */",undetermined
8496,httpd,UNKNOWN,"/*
 * lua_ap_loaded_modules; r:loaded_modules() - Returns a list of loaded modules
 */",undetermined
8497,httpd,UNKNOWN,"/*
 * lua_ap_server_info; r:server_info() - Returns server info, such as the
 * executable filename, server root, mpm etc
 */",undetermined
8498,httpd,UNKNOWN,"/*
 * === Auto-scraped functions ===
 */",undetermined
8499,httpd,UNKNOWN,"/**
 * ap_set_context_info: Set context_prefix and context_document_root.
 * @param r The request
 * @param prefix the URI prefix, without trailing slash
 * @param document_root the corresponding directory on disk, without trailing
 * slash
 * @note If one of prefix of document_root is NULL, the corrsponding
 * property will not be changed.
 */",undetermined
8500,httpd,UNKNOWN,"/**
 * ap_os_escape_path (apr_pool_t *p, const char *path, int partial)
 * convert an OS path to a URL in an OS dependant way.
 * @param p The pool to allocate from
 * @param path The path to convert
 * @param partial if set, assume that the path will be appended to something
 *        with a '/' in it (and thus does not prefix ""./"")
 * @return The converted URL
 */",undetermined
8501,httpd,UNKNOWN,"/**
 * ap_escape_logitem (apr_pool_t *p, const char *str)
 * Escape a string for logging
 * @param p The pool to allocate from
 * @param str The string to escape
 * @return The escaped string
 */",undetermined
8502,httpd,UNKNOWN,"/**
 * ap_strcmp_match (const char *str, const char *expected)
 * Determine if a string matches a patterm containing the wildcards '?' or '*'
 * @param str The string to check
 * @param expected The pattern to match against
 * @param ignoreCase Whether to ignore case when matching
 * @return 1 if the two strings match, 0 otherwise
 */",undetermined
8503,httpd,UNKNOWN,"/**
 * ap_set_keepalive (request_rec *r)
 * Set the keepalive status for this request
 * @param r The current request
 * @return 1 if keepalive can be set, 0 otherwise
 */",undetermined
8504,httpd,UNKNOWN,"/**
 * ap_make_etag (request_rec *r, int force_weak)
 * Construct an entity tag from the resource information.  If it's a real
 * file, build in some of the file characteristics.
 * @param r The current request
 * @param force_weak Force the entity tag to be weak - it could be modified
 *                   again in as short an interval.
 * @return The entity tag
 */",undetermined
8505,httpd,UNKNOWN,"/**
 * ap_send_interim_response (request_rec *r, int send_headers)
 * Send an interim (HTTP 1xx) response immediately.
 * @param r The request
 * @param send_headers Whether to send&clear headers in r->headers_out
 */",undetermined
8506,httpd,UNKNOWN,"/**
 * ap_custom_response (request_rec *r, int status, const char *string)
 * Install a custom response handler for a given status
 * @param r The current request
 * @param status The status for which the custom response should be used
 * @param string The custom response.  This can be a static string, a file
 *               or a URL
 */",undetermined
8507,httpd,UNKNOWN,"/**
 * ap_exists_config_define (const char *name)
 * Check for a definition from the server command line
 * @param name The define to check for
 * @return 1 if defined, 0 otherwise
 */",undetermined
8508,httpd,UNKNOWN,/* ap_state_query (int query_code) item starts a new field  */,undetermined
8509,httpd,UNKNOWN,"/*
 * lua_ap_usleep; r:usleep(microseconds)
 * - Sleep for the specified number of microseconds.
 */",undetermined
8510,httpd,UNKNOWN,/* END dispatch methods for request_rec fields */,undetermined
8511,httpd,UNKNOWN,/* helper function for the logging functions below */,undetermined
8512,httpd,UNKNOWN,/* r:debug(String) and friends which use apache logging */,undetermined
8513,httpd,UNKNOWN,/* add trailing \0 */,undetermined
8514,httpd,UNKNOWN,/* handle r.status = 201 */,undetermined
8515,httpd,UNKNOWN,"/* request_rec* r = lua_touserdata(L, lua_upvalueindex(1)); */",undetermined
8516,httpd,UNKNOWN,"/* const char* key = luaL_checkstring(L, -2); */",undetermined
8517,httpd,UNKNOWN,"/*   {""__newindex"", req_set_field}, */",undetermined
8518,httpd,UNKNOWN,/* [metatable] */,undetermined
8519,httpd,UNKNOWN,/* [metatable] */,undetermined
8520,httpd,UNKNOWN,/* [metatable] */,undetermined
8521,httpd,UNKNOWN,/* [metatable] */,undetermined
8522,httpd,UNKNOWN,/* [metatable] */,undetermined
8523,httpd,UNKNOWN,/* [metatable] */,undetermined
8524,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8525,httpd,UNKNOWN,/* !_LUA_REQUEST_H_ */,undetermined
8526,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8527,httpd,UNKNOWN,/* forward dec'l from this file */,undetermined
8528,httpd,UNKNOWN,/* BEGIN modules*/,undetermined
8529,httpd,UNKNOWN,/* BEGIN apache lmodule  */,undetermined
8530,httpd,UNKNOWN,/* empty stack */,undetermined
8531,httpd,UNKNOWN,"/*
       makeintegerfield(L, HTTP_CONTINUE);
       makeintegerfield(L, HTTP_SWITCHING_PROTOCOLS);
       makeintegerfield(L, HTTP_PROCESSING);
       makeintegerfield(L, HTTP_OK);
       makeintegerfield(L, HTTP_CREATED);
       makeintegerfield(L, HTTP_ACCEPTED);
       makeintegerfield(L, HTTP_NON_AUTHORITATIVE);
       makeintegerfield(L, HTTP_NO_CONTENT);
       makeintegerfield(L, HTTP_RESET_CONTENT);
       makeintegerfield(L, HTTP_PARTIAL_CONTENT);
       makeintegerfield(L, HTTP_MULTI_STATUS);
       makeintegerfield(L, HTTP_ALREADY_REPORTED);
       makeintegerfield(L, HTTP_IM_USED);
       makeintegerfield(L, HTTP_MULTIPLE_CHOICES);
       makeintegerfield(L, HTTP_MOVED_PERMANENTLY);
       makeintegerfield(L, HTTP_MOVED_TEMPORARILY);
       makeintegerfield(L, HTTP_SEE_OTHER);
       makeintegerfield(L, HTTP_NOT_MODIFIED);
       makeintegerfield(L, HTTP_USE_PROXY);
       makeintegerfield(L, HTTP_TEMPORARY_REDIRECT);
       makeintegerfield(L, HTTP_PERMANENT_REDIRECT);
       makeintegerfield(L, HTTP_BAD_REQUEST);
       makeintegerfield(L, HTTP_UNAUTHORIZED);
       makeintegerfield(L, HTTP_PAYMENT_REQUIRED);
       makeintegerfield(L, HTTP_FORBIDDEN);
       makeintegerfield(L, HTTP_NOT_FOUND);
       makeintegerfield(L, HTTP_METHOD_NOT_ALLOWED);
       makeintegerfield(L, HTTP_NOT_ACCEPTABLE);
       makeintegerfield(L, HTTP_PROXY_AUTHENTICATION_REQUIRED);
       makeintegerfield(L, HTTP_REQUEST_TIME_OUT);
       makeintegerfield(L, HTTP_CONFLICT);
       makeintegerfield(L, HTTP_GONE);
       makeintegerfield(L, HTTP_LENGTH_REQUIRED);
       makeintegerfield(L, HTTP_PRECONDITION_FAILED);
       makeintegerfield(L, HTTP_REQUEST_ENTITY_TOO_LARGE);
       makeintegerfield(L, HTTP_REQUEST_URI_TOO_LARGE);
       makeintegerfield(L, HTTP_UNSUPPORTED_MEDIA_TYPE);
       makeintegerfield(L, HTTP_RANGE_NOT_SATISFIABLE);
       makeintegerfield(L, HTTP_EXPECTATION_FAILED);
       makeintegerfield(L, HTTP_UNPROCESSABLE_ENTITY);
       makeintegerfield(L, HTTP_LOCKED);
       makeintegerfield(L, HTTP_FAILED_DEPENDENCY);
       makeintegerfield(L, HTTP_UPGRADE_REQUIRED);
       makeintegerfield(L, HTTP_PRECONDITION_REQUIRED);
       makeintegerfield(L, HTTP_TOO_MANY_REQUESTS);
       makeintegerfield(L, HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);
       makeintegerfield(L, HTTP_INTERNAL_SERVER_ERROR);
       makeintegerfield(L, HTTP_NOT_IMPLEMENTED);
       makeintegerfield(L, HTTP_BAD_GATEWAY);
       makeintegerfield(L, HTTP_SERVICE_UNAVAILABLE);
       makeintegerfield(L, HTTP_GATEWAY_TIME_OUT);
       makeintegerfield(L, HTTP_VERSION_NOT_SUPPORTED);
       makeintegerfield(L, HTTP_VARIANT_ALSO_VARIES);
       makeintegerfield(L, HTTP_INSUFFICIENT_STORAGE);
       makeintegerfield(L, HTTP_LOOP_DETECTED);
       makeintegerfield(L, HTTP_NOT_EXTENDED);
       makeintegerfield(L, HTTP_NETWORK_AUTHENTICATION_REQUIRED);
     */",undetermined
8532,httpd,UNKNOWN,/* END apache2 lmodule */,undetermined
8533,httpd,UNKNOWN,/*  END library functions */,undetermined
8534,httpd,UNKNOWN,/* callback for cleaning up a lua vm when pool is closed */,undetermined
8535,httpd,UNKNOWN,"/*
        munge_path(L, 
                   ""path"", 
                   ""?.lua"", 
                   ""./?.lua"", 
                   lifecycle_pool,
                   spec->package_paths, 
                   spec->file);
*/",undetermined
8536,httpd,UNKNOWN,"/**
 * field -> ""path"" or ""cpath""
 * sub_pat -> ""?.lua""
 * rep_pat -> ""./?.lua""
 * pool -> lifecycle pool for allocations
 * paths -> things to add
 * file -> ???
 */",undetermined
8537,httpd,UNKNOWN,"/* pop ""package"" off the stack     */",undetermined
8538,httpd,UNKNOWN,/* drop module table */,undetermined
8539,httpd,UNKNOWN,"/**
 * Function used to create a lua_State instance bound into the web
 * server in the appropriate scope.
 */",undetermined
8540,httpd,UNKNOWN,"/* not available, so create */",undetermined
8541,httpd,UNKNOWN,"/* On first visit, modified will be zero, but that's fine - The file is 
            loaded in the vm_construct function.
            */",undetermined
8542,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8543,httpd,UNKNOWN,"/**
 * Specification for a lua virtual machine
 */",undetermined
8544,httpd,UNKNOWN,/* NEED TO ADD ADDITIONAL PACKAGE PATHS AS PART OF SPEC INSTEAD OF DIR CONFIG */,undetermined
8545,httpd,UNKNOWN,/* name of base file to load in the vm */,undetermined
8546,httpd,UNKNOWN,/* APL_SCOPE_ONCE | APL_SCOPE_REQUEST | APL_SCOPE_CONN | APL_SCOPE_THREAD | APL_SCOPE_SERVER */,undetermined
8547,httpd,UNKNOWN,"/* pool to use for lifecycle if APL_SCOPE_ONCE is set, otherwise unused */",undetermined
8548,httpd,UNKNOWN,"/* Pre-compiled Lua Byte code to load directly.  If bytecode_len is >0,
     * the file part of this structure is ignored for loading purposes, but
     * it is used for error messages.
     */",undetermined
8549,httpd,UNKNOWN,/* AP_LUA_FILTER_INPUT | AP_LUA_FILTER_OUTPUT */,undetermined
8550,httpd,UNKNOWN,"/**
 * Fake out addition of the ""apache2"" module
 */",undetermined
8551,httpd,UNKNOWN,"/*
 * alternate means of getting lua_State (preferred eventually)
 * Obtain a lua_State which has loaded file and is associated with lifecycle_pool
 * If one exists, will return extant one, otherwise will create, attach, and return
 * This does no locking around the lua_State, so if the pool is shared between
 * threads, locking is up the client.
 *
 * @lifecycle_pool -> pool whose lifeycle controls the lua_State
 * @file file to be opened, also used as a key for uniquing lua_States
 * @cb callback for vm initialization called *before* the file is opened
 * @ctx a baton passed to cb
 */",undetermined
8552,httpd,UNKNOWN,"/*
 * Initialize mod_lua mutex.
 * @pool pool for mutex
 * @s server_rec for logging
 */",undetermined
8553,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8554,httpd,UNKNOWN,"/**
 * error reporting if lua has an error.
 * Extracts the error from lua stack and prints
 */",undetermined
8555,httpd,UNKNOWN,"/* If no replacement was made, just return the original string */",undetermined
8556,httpd,UNKNOWN,"/**
 * ""main""
 */",undetermined
8557,httpd,UNKNOWN,"/* Decline the request if the script does not exist (or is a directory),
     * rather than just returning internal server error */",undetermined
8558,httpd,UNKNOWN,/* XXX: This seems wrong because it may generate wrong headers for HEAD requests */,undetermined
8559,httpd,UNKNOWN,/* TODO annotate spec with failure reason */,undetermined
8560,httpd,UNKNOWN,/* ------------------- Input/output content filters ------------------- */,undetermined
8561,httpd,UNKNOWN,/* Find the filter that was called */,undetermined
8562,httpd,UNKNOWN,"/* If a Lua filter is interested in filtering a request, it must first do a yield, 
             * otherwise we'll assume that it's not interested and pretend we didn't find it.
             */",undetermined
8563,httpd,UNKNOWN,"/* Set up the initial filter context and acquire the function.
     * The corresponding Lua function should yield here.
     */",undetermined
8564,httpd,UNKNOWN,"/* No filter entry found (or the script declined to filter), just pass on the buckets */",undetermined
8565,httpd,UNKNOWN,"/* While the Lua function is still yielding, pass in buckets to the coroutine */",undetermined
8566,httpd,UNKNOWN,/* read the bucket */,undetermined
8567,httpd,UNKNOWN,/* Push the bucket onto the Lua stack as a global var */,undetermined
8568,httpd,UNKNOWN,"/* If Lua yielded, it means we have something to pass on */",undetermined
8569,httpd,UNKNOWN,"/* If we've safely reached the end, do a final call to Lua to allow for any 
        finishing moves by the script, such as appending a tail. */",undetermined
8570,httpd,UNKNOWN,/* Clean up */,undetermined
8571,httpd,UNKNOWN,"/* Set up the initial filter context and acquire the function.
     * The corresponding Lua function should yield here.
     */",undetermined
8572,httpd,UNKNOWN,"/* If the Lua script broke or denied serving the request, just pass the buckets through */",undetermined
8573,httpd,UNKNOWN,"/* While the Lua function is still yielding, pass buckets to the coroutine */",undetermined
8574,httpd,UNKNOWN,/* read the bucket */,undetermined
8575,httpd,UNKNOWN,/* Push the bucket onto the Lua stack as a global var */,undetermined
8576,httpd,UNKNOWN,"/* If Lua yielded, it means we have something to pass on */",undetermined
8577,httpd,UNKNOWN,"/* If we've safely reached the end, do a final call to Lua to allow for any 
        finishing moves by the script, such as appending a tail. */",undetermined
8578,httpd,UNKNOWN,/* ---------------- Configury stuff --------------- */,undetermined
8579,httpd,UNKNOWN,/** harnesses for magic hooks **/,undetermined
8580,httpd,UNKNOWN,"/* Okay, this deserves a little explaination -- in order for the errors that lua
 * generates to be 'accuarate', including line numbers, we basically inject
 * N line number new lines into the 'top' of the chunk reader.....
 *
 * be happy. this is cool.
 *
 */",undetermined
8581,httpd,UNKNOWN,"/*fprintf(stderr, ""buf read: %s\n"", ctx->buf); */",undetermined
8582,httpd,UNKNOWN,"/* You can be unhappy now.
 *
 * This is uncool.
 *
 * When you create a <Section handler in httpd, the only 'easy' way to create
 * a directory context is to parse the section, and convert it into a 'normal'
 * Configureation option, and then collapse the entire section, in memory,
 * back into the parent section -- from which you can then get the new directive
 * invoked.... anyways. evil. Rici taught me how to do this hack :-)
 */",undetermined
8583,httpd,UNKNOWN,"/* This lua State is used only to compile the input strings -> bytecode, so we don't need anything extra. */",undetermined
8584,httpd,UNKNOWN,"/* Here, we have to replace our current config node for the next pass */",undetermined
8585,httpd,UNKNOWN,/* TODO: Make it work on other types than just AP_FTYPE_RESOURCE? */,undetermined
8586,httpd,UNKNOWN,"/* ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, ""LuaHookInsertFilter not yet implemented""); */",undetermined
8587,httpd,UNKNOWN,"/**
 * Called for config directive which looks like
 * LuaPackagePath /lua/package/path/mapped/thing/like/this/?.lua
 */",undetermined
8588,httpd,UNKNOWN,"/**
 * Called for config directive which looks like
 * LuaPackageCPath /lua/package/path/mapped/thing/like/this/?.so
 */",undetermined
8589,httpd,UNKNOWN,/* ap_lua_dir_cfg* cfg = (ap_lua_dir_cfg*)_cfg; */,undetermined
8590,httpd,UNKNOWN,/*******************************/,undetermined
8591,httpd,UNKNOWN,/* todo: test */,undetermined
8592,httpd,UNKNOWN,/* todo: test */,undetermined
8593,httpd,UNKNOWN,/* todo: test */,undetermined
8594,httpd,UNKNOWN,/* todo: test */,undetermined
8595,httpd,UNKNOWN,/* todo: test */,undetermined
8596,httpd,UNKNOWN,/* todo: test */,undetermined
8597,httpd,UNKNOWN,"/* ap_register_output_filter(""luahood"", luahood, NULL, AP_FTYPE_RESOURCE); */",undetermined
8598,httpd,UNKNOWN,/* http_request.h hooks */,undetermined
8599,httpd,UNKNOWN,/* providers */,undetermined
8600,httpd,UNKNOWN,/* ivm mutex */,undetermined
8601,httpd,UNKNOWN,/* create per-dir    config structures */,undetermined
8602,httpd,UNKNOWN,/* merge  per-dir    config structures */,undetermined
8603,httpd,UNKNOWN,/* create per-server config structures */,undetermined
8604,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
8605,httpd,UNKNOWN,/* table of config file commands       */,undetermined
8606,httpd,UNKNOWN,/* register hooks                      */,undetermined
8607,httpd,UNKNOWN,"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8608,httpd,UNKNOWN,/* Allow for Lua 5.2 backwards compatibility */,undetermined
8609,httpd,UNKNOWN,/* Load mode for lua_load() */,undetermined
8610,httpd,UNKNOWN,"/* Create a set of AP_LUA_DECLARE(type), AP_LUA_DECLARE_NONSTD(type) and
 * AP_LUA_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
8611,httpd,UNKNOWN,"/**
 * make a userdata out of a C pointer, and vice versa
 * instead of using lightuserdata
 */",undetermined
8612,httpd,UNKNOWN,"/**
     * mapped handlers/filters
     */",undetermined
8613,httpd,UNKNOWN,"/**
     * AP_LUA_SCOPE_ONCE | AP_LUA_SCOPE_REQUEST | AP_LUA_SCOPE_CONN | AP_LUA_SCOPE_SERVER
     */",undetermined
8614,httpd,UNKNOWN,/* info for the hook harnesses */,undetermined
8615,httpd,UNKNOWN,/* <wombat_hook_info> */,undetermined
8616,httpd,UNKNOWN,/* the actual directory being configured */,undetermined
8617,httpd,UNKNOWN,/* Whether Lua scripts in a sub-dir are run before parents */,undetermined
8618,httpd,UNKNOWN,"/**
     * AP_LUA_CACHE_NEVER | AP_LUA_CACHE_STAT | AP_LUA_CACHE_FOREVER
     */",undetermined
8619,httpd,UNKNOWN,/* value of the LuaRoot directive */,undetermined
8620,httpd,UNKNOWN,/* !_MOD_LUA_H_ */,undetermined
8621,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8622,httpd,UNKNOWN,"/*
 * Modified by djm@va.pubnix.com:
 * If no TransferLog is given explicitly, decline to log.
 *
 * This is module implements the TransferLog directive (same as the
 * common log module), and additional directives, LogFormat and CustomLog.
 *
 *
 * Syntax:
 *
 *    TransferLog fn      Logs transfers to fn in standard log format, unless
 *                        a custom format is set with LogFormat
 *    LogFormat format    Set a log format from TransferLog files
 *    CustomLog fn format
 *                        Log to file fn with format given by the format
 *                        argument
 *
 * There can be any number of TransferLog and CustomLog
 * commands. Each request will be logged to _ALL_ the
 * named files, in the appropriate format.
 *
 * If no TransferLog or CustomLog directive appears in a VirtualHost,
 * the request will be logged to the log file(s) defined outside
 * the virtual host section. If a TransferLog or CustomLog directive
 * appears in the VirtualHost section, the log files defined outside
 * the VirtualHost will _not_ be used. This makes this module compatable
 * with the CLF and config log modules, where the use of TransferLog
 * inside the VirtualHost section overrides its use outside.
 *
 * Examples:
 *
 *    TransferLog    logs/access_log
 *    <VirtualHost>
 *    LogFormat      ""... custom format ...""
 *    TransferLog    log/virtual_only
 *    CustomLog      log/virtual_useragents ""%t %{user-agent}i""
 *    </VirtualHost>
 *
 * This will log using CLF to access_log any requests handled by the
 * main server, while any requests to the virtual host will be logged
 * with the ""... custom format..."" to virtual_only _AND_ using
 * the custom user-agent log to virtual_useragents.
 *
 * Note that the NCSA referer and user-agent logs are easily added with
 * CustomLog:
 *   CustomLog   logs/referer  ""%{referer}i -> %U""
 *   CustomLog   logs/agent    ""%{user-agent}i""
 *
 * RefererIgnore functionality can be obtained with conditional
 * logging (SetEnvIf and CustomLog ... env=!VAR).
 *
 * But using this method allows much easier modification of the
 * log format, e.g. to log hosts along with UA:
 *   CustomLog   logs/referer ""%{referer}i %U %h""
 *
 * The argument to LogFormat and CustomLog is a string, which can include
 * literal characters copied into the log files, and '%' directives as
 * follows:
 *
 * %...B:  bytes sent, excluding HTTP headers.
 * %...b:  bytes sent, excluding HTTP headers in CLF format, i.e. a '-'
 *         when no bytes where sent (rather than a '0'.
 * %...{FOOBAR}C:  The contents of the HTTP cookie FOOBAR
 * %...{FOOBAR}e:  The contents of the environment variable FOOBAR
 * %...f:  filename
 * %...h:  remote host
 * %...a:  remote IP-address
 * %...A:  local IP-address
 * %...{Foobar}i:  The contents of Foobar: header line(s) in the request
 *                 sent to the client.
 * %...k:  number of keepalive requests served over this connection
 * %...l:  remote logname (from identd, if supplied)
 * %...{Foobar}n:  The contents of note ""Foobar"" from another module.
 * %...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
 * %...p:  the canonical port for the server
 * %...{format}p: the canonical port for the server, or the actual local
 *                or remote port
 * %...P:  the process ID of the child that serviced the request.
 * %...{format}P: the process ID or thread ID of the child/thread that
 *                serviced the request
 * %...r:  first line of request
 * %...s:  status.  For requests that got internally redirected, this
 *         is status of the *original* request --- %...>s for the last.
 * %...t:  time, in common log format time format
 * %...{format}t:  The time, in the form given by format, which should
 *                 be in strftime(3) format.
 * %...T:  the time taken to serve the request, in seconds.
 * %...D:  the time taken to serve the request, in micro seconds.
 * %...u:  remote user (from auth; may be bogus if return status (%s) is 401)
 * %...U:  the URL path requested.
 * %...v:  the configured name of the server (i.e. which virtual host?)
 * %...V:  the server name according to the UseCanonicalName setting
 * %...m:  the request method
 * %...H:  the request protocol
 * %...q:  the query string prepended by ""?"", or empty if no query string
 * %...X:  Status of the connection.
 *         'X' = connection aborted before the response completed.
 *         '+' = connection may be kept alive after the response is sent.
 *         '-' = connection will be closed after the response is sent.
 *         (This directive was %...c in late versions of Apache 1.3, but
 *          this conflicted with the historical ssl %...{var}c syntax.)
 * %...L:  Log-Id of the Request (or '-' if none)
 * %...{c}L:  Log-Id of the Connection (or '-' if none)
 *
 * The '...' can be nothing at all (e.g. ""%h %u %r %s %b""), or it can
 * indicate conditions for inclusion of the item (which will cause it
 * to be replaced with '-' if the condition is not met).  Note that
 * there is no escaping performed on the strings from %r, %...i and
 * %...o; some with long memories may remember that I thought this was
 * a bad idea, once upon a time, and I'm still not comfortable with
 * it, but it is difficult to see how to ""do the right thing"" with all
 * of '%..i', unless we URL-escape everything and break with CLF.
 *
 * The forms of condition are a list of HTTP status codes, which may
 * or may not be preceded by '!'.  Thus, '%400,501{User-agent}i' logs
 * User-agent: on 400 errors and 501 errors (Bad Request, Not
 * Implemented) only; '%!200,304,302{Referer}i' logs Referer: on all
 * requests which did *not* return some sort of normal status.
 *
 * The default LogFormat reproduces CLF; see below.
 *
 * The way this is supposed to work with virtual hosts is as follows:
 * a virtual host can have its own LogFormat, or its own TransferLog.
 * If it doesn't have its own LogFormat, it inherits from the main
 * server.  If it doesn't have its own TransferLog, it writes to the
 * same descriptor (meaning the same process for ""| ..."").
 *
 * --- rst */",undetermined
8623,httpd,UNKNOWN,/* For REMOTE_NAME */,undetermined
8624,httpd,UNKNOWN,/* default unbuffered */,undetermined
8625,httpd,UNKNOWN,"/* POSIX.1 defines PIPE_BUF as the maximum number of bytes that is
 * guaranteed to be atomic when writing a pipe.  And PIPE_BUF >= 512
 * is guaranteed.  So we'll just guess 512 in the event the system
 * doesn't have this.  Now, for file writes there is actually no limit,
 * the entire write is atomic.  Whether all systems implement this
 * correctly is another question entirely ... so we'll just use PIPE_BUF
 * because it's probably a good guess as to what is implemented correctly
 * everywhere.
 */",undetermined
8626,httpd,UNKNOWN,"/*
 * multi_log_state is our per-(virtual)-server configuration. We store
 * an array of the logs we are going to use, each of type config_log_state.
 * If a default log format is given by LogFormat, store in default_format
 * (backward compat. with mod_log_config).  We also store for each virtual
 * server a pointer to the logs specified for the main server, so that if this
 * vhost has no logs defined, we can use the main server's logs instead.
 *
 * So, for the main server, config_logs contains a list of the log files
 * and server_config_logs is empty. For a vhost, server_config_logs
 * points to the same array as config_logs in the main server, and
 * config_logs points to the array of logs defined inside this vhost,
 * which might be empty.
 */",undetermined
8627,httpd,UNKNOWN,"/*
 * config_log_state holds the status of a single log file. fname might
 * be NULL, which means this module does no logging for this
 * request. format might be NULL, in which case the default_format
 * from the multi_log_state should be used, or if that is NULL as
 * well, use the CLF.
 * log_writer is NULL before the log file is opened and is
 * set to a opaque structure (usually a fd) after it is opened.

 */",undetermined
8628,httpd,UNKNOWN,/** place of definition or NULL if already checked */,undetermined
8629,httpd,UNKNOWN,"/*
 * log_request_state holds request specific log data that is not
 * part of the request_rec.
 */",undetermined
8630,httpd,UNKNOWN,"/*
 * Format items...
 * Note that many of these could have ap_sprintfs replaced with static buffers.
 */",undetermined
8631,httpd,UNKNOWN,"/* NOTE: If the original request contained a password, we
     * re-write the request line here to contain XXXXXX instead:
     * (note the truncation before the protocol string for HTTP/0.9 requests)
     * (note also that r->the_request contains the unmodified request)
     */",undetermined
8632,httpd,UNKNOWN,/* \0 */,undetermined
8633,httpd,UNKNOWN,"/* "", "" */",undetermined
8634,httpd,UNKNOWN,"/*
     * This supports Netscape version 0 cookies while being tolerant to
     * some properties of RFC2109/2965 version 1 cookies:
     * - case-insensitive match of cookie names
     * - white space between the tokens
     * It does not support the following version 1 features:
     * - quoted strings as cookie values
     * - commas to separate cookies
     */",undetermined
8635,httpd,UNKNOWN,/* Move past leading WS */,undetermined
8636,httpd,UNKNOWN,"/* Absolute (micro-/milli-)second time
                                              * or msec/usec fraction
                                              */",undetermined
8637,httpd,UNKNOWN,/* Custom format */,undetermined
8638,httpd,UNKNOWN,"/* The custom time formatting uses a very large temp buffer
         * on the stack.  To avoid using so much stack space in the
         * common case where we're not using a custom format, the code
         * for the custom format in a separate function.  (That's why
         * log_request_time_custom is not inlined right here.)
         */",undetermined
8639,httpd,UNKNOWN,/* CLF format */,undetermined
8640,httpd,UNKNOWN,"/* This code uses the same technique as ap_explode_recent_localtime():
         * optimistic caching with logic to detect and correct race conditions.
         * See the comments in server/util_time.c for more information.
         */",undetermined
8641,httpd,UNKNOWN,"/* Invalid or old snapshot, so compute the proper time string
             * and store it in the cache
             */",undetermined
8642,httpd,UNKNOWN,"/* These next two routines use the canonical name:port so that log
 * parsers don't need to duplicate all the vhost parsing crud.
 */",undetermined
8643,httpd,UNKNOWN,/* bogus format */,undetermined
8644,httpd,UNKNOWN,"/* This respects the setting of UseCanonicalName so that
 * the dynamic mass virtual hosting trick works better.
 */",undetermined
8645,httpd,UNKNOWN,"/* APR will format ""0"" anyway but an arg is needed */",undetermined
8646,httpd,UNKNOWN,/* APR can format a thread id in hex */,undetermined
8647,httpd,UNKNOWN,"/* APR is missing the feature, so always use decimal */",undetermined
8648,httpd,UNKNOWN,/* bogus format */,undetermined
8649,httpd,UNKNOWN,"/*****************************************************************
 *
 * Parsing the log format string
 */",undetermined
8650,httpd,UNKNOWN,"/*
     * This might allocate a few chars extra if there's a backslash
     * escape in the format string.
     */",undetermined
8651,httpd,UNKNOWN,/* copy verbatim */,undetermined
8652,httpd,UNKNOWN,"/*
                 * Allow the loop to deal with this *s in the normal
                 * fashion so that it handles end of string etc.
                 * properly.
                 */",undetermined
8653,httpd,UNKNOWN,/* For safety's sake... */,undetermined
8654,httpd,UNKNOWN,"/*****************************************************************
 *
 * Actually logging.
 */",undetermined
8655,httpd,UNKNOWN,"/* First, see if we need to process this thing at all... */",undetermined
8656,httpd,UNKNOWN,/* We do.  Do it... */,undetermined
8657,httpd,UNKNOWN,"/*
     * See if we've got any conditional envariable-controlled logging decisions
     * to make.
     */",undetermined
8658,httpd,UNKNOWN,"/*
     * Initialize per request state
     */",undetermined
8659,httpd,UNKNOWN,"/*
     * Log this transaction..
     */",undetermined
8660,httpd,UNKNOWN,"/*****************************************************************
 *
 * Module glue...
 */",undetermined
8661,httpd,UNKNOWN,"/*
 * Use the merger to simply add a pointer from the vhost log state
 * to the log of logs specified for the non-vhost configuration.  Make sure
 * vhosts inherit any globally-defined format names.
 */",undetermined
8662,httpd,UNKNOWN,"/*
 * Set the default logfile format, or define a nickname for a format string.
 */",undetermined
8663,httpd,UNKNOWN,"/*
     * If we were given two arguments, the second is a name to be given to the
     * format.  This syntax just defines the nickname - it doesn't actually
     * make the format the default.
     */",undetermined
8664,httpd,UNKNOWN,/* virtual config shared w/main server */,undetermined
8665,httpd,UNKNOWN,/* Leave it NULL to decline.  */,undetermined
8666,httpd,UNKNOWN,/* Failure already logged by open_config_log */,undetermined
8667,httpd,UNKNOWN,/* Failure already logged by open_config_log */,undetermined
8668,httpd,UNKNOWN,"/* First init the buffered logs array, which is needed when opening the logs. */",undetermined
8669,httpd,UNKNOWN,"/* Next, do ""physical"" server, which gets default log fd and format
     * for the virtual servers, if they don't override...
     */",undetermined
8670,httpd,UNKNOWN,"/* Then, virtual servers */",undetermined
8671,httpd,UNKNOWN,/* Now register the last buffer flush with the cleanup engine */,undetermined
8672,httpd,UNKNOWN,/* reset to default conditions */,undetermined
8673,httpd,UNKNOWN,/* Don't check this config_log_state again */,undetermined
8674,httpd,UNKNOWN,"/*
         * We don't need to check mls->server_config_logs because it just
         * points to the parent server's mls->config_logs.
         */",undetermined
8675,httpd,UNKNOWN,"/* Init log_hash before we register the optional function. It is
     * possible for the optional function, ap_register_log_handler,
     * to be called before any other mod_log_config hooks are called.
     * As a policy, we should init everything required by an optional function
     * before calling APR_REGISTER_OPTIONAL_FN.
     */",undetermined
8676,httpd,UNKNOWN,/* create per-dir config */,undetermined
8677,httpd,UNKNOWN,/* merge per-dir config */,undetermined
8678,httpd,UNKNOWN,/* server config */,undetermined
8679,httpd,UNKNOWN,/* merge server config */,undetermined
8680,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8681,httpd,UNKNOWN,/* register hooks */,undetermined
8682,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8683,httpd,UNKNOWN,"/**
 * @file mod_log_config.h
 * @brief Logging Configuration Extension Module for Apache
 *
 * @defgroup MOD_LOG_CONFIG mod_log_config
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
8684,httpd,UNKNOWN,"/**
 * callback function prototype for a external log handler
 */",undetermined
8685,httpd,UNKNOWN,"/**
 * callback function prototype for external writer initialization.
 */",undetermined
8686,httpd,UNKNOWN,"/**
 * callback which gets called where there is a log line to write.
 */",undetermined
8687,httpd,UNKNOWN,"/**
 * you will need to set your init handler *BEFORE* the open_logs
 * in mod_log_config gets executed
 */",undetermined
8688,httpd,UNKNOWN,"/**
 * you should probably set the writer at the same time (ie..before open_logs)
 */",undetermined
8689,httpd,UNKNOWN,/* MOD_LOG_CONFIG */,undetermined
8690,httpd,UNKNOWN,/** @} */,undetermined
8691,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8692,httpd,UNKNOWN,/*  0 */,undetermined
8693,httpd,UNKNOWN,/*  1 */,undetermined
8694,httpd,UNKNOWN,/*  2 */,undetermined
8695,httpd,UNKNOWN,/*  3 */,undetermined
8696,httpd,UNKNOWN,/*  4 */,undetermined
8697,httpd,UNKNOWN,/*  5 */,undetermined
8698,httpd,UNKNOWN,/*  6 */,undetermined
8699,httpd,UNKNOWN,/*  7 */,undetermined
8700,httpd,UNKNOWN,/*  8 */,undetermined
8701,httpd,UNKNOWN,/*  9 */,undetermined
8702,httpd,UNKNOWN,/* 10 */,undetermined
8703,httpd,UNKNOWN,/* 11 */,undetermined
8704,httpd,UNKNOWN,/* apr_array_append actually creates a new array */,undetermined
8705,httpd,UNKNOWN,/* create per-dir config */,undetermined
8706,httpd,UNKNOWN,/* merge per-dir config */,undetermined
8707,httpd,UNKNOWN,/* server config */,undetermined
8708,httpd,UNKNOWN,/* merge server config */,undetermined
8709,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8710,httpd,UNKNOWN,/* register hooks */,undetermined
8711,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8712,httpd,UNKNOWN,"/*
 * See also support/check_forensic.
 * Relate the forensic log to the transfer log by including
 * %{forensic-id}n in the custom log format, for example:
 * CustomLog logs/custom ""%h %l %u %t \""%r\"" %>s %b %{forensic-id}n""
 *
 * Credit is due to Tina Bird <tbird precision-guesswork.com>, whose
 * idea this module was.
 *
 *   Ben Laurie 29/12/2003
 */",undetermined
8713,httpd,UNKNOWN,"/* e is the first _invalid_ location in q
   N.B. returns the terminating NUL.
 */",undetermined
8714,httpd,UNKNOWN,"/* note that we don't have to check h->pos here, coz its been done
       for us by log_escape */",undetermined
8715,httpd,UNKNOWN,"/* we make the assumption that we can't go through all the PIDs in
           under 1 second */",undetermined
8716,httpd,UNKNOWN,/* create per-dir config */,undetermined
8717,httpd,UNKNOWN,/* merge per-dir config */,undetermined
8718,httpd,UNKNOWN,/* server config */,undetermined
8719,httpd,UNKNOWN,/* merge server config */,undetermined
8720,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8721,httpd,UNKNOWN,/* register hooks */,undetermined
8722,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8723,httpd,UNKNOWN,"/*
 * Written by Bojan Smojver <bojan rexursive.com>:
 *
 * The argument to LogFormat and CustomLog is a string, which can include
 * literal characters copied into the log files, and '%' directives as
 * follows:
 *
 * %...I:  bytes received, including request and headers, cannot be zero
 * %...O:  bytes sent, including headers, cannot be zero
 *
 */",undetermined
8724,httpd,UNKNOWN,"/*
 * Logging of input and output config...
 */",undetermined
8725,httpd,UNKNOWN,"/*
 * Optional function for the core to add to bytes_out
 */",undetermined
8726,httpd,UNKNOWN,"/*
 * Optional function for modules to adjust bytes_in
 */",undetermined
8727,httpd,UNKNOWN,"/*
 * Optional function to get total byte count of last request for
 * ap_increment_counts.
 */",undetermined
8728,httpd,UNKNOWN,"/*
 * Format items...
 */",undetermined
8729,httpd,UNKNOWN,"/*
 * Reset counters after logging...
 */",undetermined
8730,httpd,UNKNOWN,/* need to save byte count of last request for ap_increment_counts */,undetermined
8731,httpd,UNKNOWN,"/*
 * Logging of input filter...
 */",undetermined
8732,httpd,UNKNOWN,"/*
 * The hooks...
 */",undetermined
8733,httpd,UNKNOWN,/* create per-dir config */,undetermined
8734,httpd,UNKNOWN,/* merge per-dir config */,undetermined
8735,httpd,UNKNOWN,/* server config */,undetermined
8736,httpd,UNKNOWN,/* merge server config */,undetermined
8737,httpd,UNKNOWN,/* command apr_table_t */,undetermined
8738,httpd,UNKNOWN,/* register hooks */,undetermined
8739,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8740,httpd,UNKNOWN,"/*
 * util_ldap.c: LDAP things
 *
 * Original code from auth_ldap module for Apache v1.3:
 * Copyright 1998, 1999 Enbridge Pipelines Inc.
 * Copyright 1999-2001 Dave Carrigan
 */",undetermined
8741,httpd,UNKNOWN,"/* Default define for ldap functions that need a SIZELIMIT but
 * do not have the define
 * XXX This should be removed once a supporting #define is
 *  released through APR-Util.
 */",undetermined
8742,httpd,UNKNOWN,"/*
 * Status Handler
 * --------------
 *
 * This handler generates a status page about the current performance of
 * the LDAP cache. It is enabled as follows:
 *
 * <Location /ldap-status>
 *   SetHandler ldap-status
 * </Location>
 *
 */",undetermined
8743,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8744,httpd,UNKNOWN,"/*
 * Closes an LDAP connection by unlocking it. The next time
 * uldap_connection_find() is called this connection will be
 * available for reuse.
 */",undetermined
8745,httpd,UNKNOWN,"/* We leave bound LDAP connections floating around in our pool,
      * but always check/fix the binddn/bindpw when we take them out
      * of the pool
      */",undetermined
8746,httpd,UNKNOWN,/* mark our connection as available for reuse */,undetermined
8747,httpd,UNKNOWN,"/*
 * Destroys an LDAP connection by unbinding and closing the connection to
 * the LDAP server. It is used to bring the connection back to a known
 * state after an error.
 */",undetermined
8748,httpd,UNKNOWN,/* forget the rebind info for this conn */,undetermined
8749,httpd,UNKNOWN,"/* not presently used, not part of the API */",undetermined
8750,httpd,UNKNOWN,"/*
 * util_ldap_connection_remove frees all storage associated with the LDAP
 * connection and removes it completely from the per-virtualhost list of
 * connections
 *
 * The caller should hold the lock for this connection
 */",undetermined
8751,httpd,UNKNOWN,/* Remove ldc from the list */,undetermined
8752,httpd,UNKNOWN,/* Destory the pool associated with this connection */,undetermined
8753,httpd,UNKNOWN,"/*
     * Normally we enable SSL/TLS with apr_ldap_set_option(), except
     * with Solaris LDAP, where this is broken.
     */",undetermined
8754,httpd,UNKNOWN,"/*
     * With Solaris LDAP, we enable TSL via the secure argument
     * to apr_ldap_init(). This requires a fix from apr-util >= 1.4.0.
     *
     * Just in case client certificates ever get supported, we
     * handle those as with the other LDAP SDKs.
     */",undetermined
8755,httpd,UNKNOWN,"/* Since the host will include a port if the default port is not used,
     * always specify the default ports for the port parameter.  This will
     * allow a host string that contains multiple hosts the ability to mix
     * some hosts with ports and some without. All hosts which do not
     * specify a port will use the default port.
     */",undetermined
8756,httpd,UNKNOWN,/* something really bad happened */,undetermined
8757,httpd,UNKNOWN,"/* Now that we have an ldap struct, add it to the referral list for rebinds. */",undetermined
8758,httpd,UNKNOWN,/* always default to LDAP V3 */,undetermined
8759,httpd,UNKNOWN,/* set client certificates */,undetermined
8760,httpd,UNKNOWN,/* switch on SSL/TLS */,undetermined
8761,httpd,UNKNOWN,/* See comments near apr_ldap_init() above */,undetermined
8762,httpd,UNKNOWN,/* Set the alias dereferencing option */,undetermined
8763,httpd,UNKNOWN,/* Set options for rebind and referrals. */,undetermined
8764,httpd,UNKNOWN,/* Referral hop limit - only if referrals are enabled and a hop limit is explicitly requested */,undetermined
8765,httpd,UNKNOWN,/*XXX All of the #ifdef's need to be removed once apr-util 1.2 is released */,undetermined
8766,httpd,UNKNOWN,"/* This is not a per-connection setting so just pass NULL for the
       Ldap connection handle */",undetermined
8767,httpd,UNKNOWN,"/*
     * LDAP_OPT_TIMEOUT is not portable, but it influences all synchronous ldap
     * function calls and not just ldap_search_ext_s(), which accepts a timeout
     * parameter.
     * XXX: It would be possible to simulate LDAP_OPT_TIMEOUT by replacing all
     * XXX: synchronous ldap function calls with asynchronous calls and using
     * XXX: ldap_result() with a timeout.
     */",undetermined
8768,httpd,UNKNOWN,"/*
 * Replacement function for ldap_simple_bind_s() with a timeout.
 * To do this in a portable way, we have to use ldap_simple_bind() and
 * ldap_result().
 *
 * Returns LDAP_SUCCESS on success; and an error code on failure
 */",undetermined
8769,httpd,UNKNOWN,"/* -1 is LDAP_SERVER_DOWN in openldap, use something else */",undetermined
8770,httpd,UNKNOWN,"/*
 * Connect to the LDAP server and binds. Does not connect if already
 * connected (i.e. ldc->ldap is non-NULL.) Does not bind if already bound.
 *
 * Returns LDAP_SUCCESS on success; and an error code on failure
 */",undetermined
8771,httpd,UNKNOWN,/* sanity check for NULL */,undetermined
8772,httpd,UNKNOWN,"/* If the connection is already bound, return
    */",undetermined
8773,httpd,UNKNOWN,"/* create the ldap session handle
    */",undetermined
8774,httpd,UNKNOWN,"/* loop trying to bind up to st->retries times if LDAP_SERVER_DOWN or LDAP_TIMEOUT
     * are returned.  Close the connection before the first retry, and then on every
     * other retry.
     *
     * On Success or any other error, break out of the loop.
     *
     * NOTE: Looping is probably not a great idea. If the server isn't
     * responding the chances it will respond after a few tries are poor.
     * However, the original code looped and it only happens on
     * the error condition.
     */",undetermined
8775,httpd,UNKNOWN,/* Other errors not retryable */,undetermined
8776,httpd,UNKNOWN,/* leave rc as the initial bind return code */,undetermined
8777,httpd,UNKNOWN,"/* free the handle if there was an error
    */",undetermined
8778,httpd,UNKNOWN,"/*
 * Compare client certificate arrays.
 *
 * Returns 1 on compare failure, 0 otherwise.
 */",undetermined
8779,httpd,UNKNOWN,"/* arrays both NULL? if so, then equal */",undetermined
8780,httpd,UNKNOWN,"/* arrays different length or either NULL? If so, then not equal */",undetermined
8781,httpd,UNKNOWN,/* run an actual comparison */,undetermined
8782,httpd,UNKNOWN,"/* One is passwordless? If so, then not equal */",undetermined
8783,httpd,UNKNOWN,"/* if we got here, the cert arrays were identical */",undetermined
8784,httpd,UNKNOWN,"/*
 * Find an existing ldap connection struct that matches the
 * provided ldap connection parameters.
 *
 * If not found in the cache, a new ldc structure will be allocated
 * from st->pool and returned to the caller.  If found in the cache,
 * a pointer to the existing ldc structure will be returned.
 */",undetermined
8785,httpd,UNKNOWN,/* To traverse the linked list */,undetermined
8786,httpd,UNKNOWN,/* mutex lock this function */,undetermined
8787,httpd,UNKNOWN,"/* Search for an exact connection match in the list that is not
     * being used.
     */",undetermined
8788,httpd,UNKNOWN,"/* Go ahead (by falling through) and use it, so we don't create more just to unbind some other old ones */",undetermined
8789,httpd,UNKNOWN,"/* If this connection didn't match the criteria, then we
             * need to unlock the mutex so it is available to be reused.
             */",undetermined
8790,httpd,UNKNOWN,"/* If nothing found, search again, but we don't care about the
     * binddn and bindpw this time.
     */",undetermined
8791,httpd,UNKNOWN,/* the bind credentials have changed */,undetermined
8792,httpd,UNKNOWN,"/* no check for connection_pool_ttl, since we are unbinding any way */",undetermined
8793,httpd,UNKNOWN,"/* If this connection didn't match the criteria, then we
                 * need to unlock the mutex so it is available to be reused.
                 */",undetermined
8794,httpd,UNKNOWN,/* artificially disable cache */,undetermined
8795,httpd,UNKNOWN,/* l = NULL; */,undetermined
8796,httpd,UNKNOWN,"/* If no connection was found after the second search, we
     * must create one.
     */",undetermined
8797,httpd,UNKNOWN,"/*
         * Add the new connection entry to the linked list. Note that we
         * don't actually establish an LDAP connection yet; that happens
         * the first time authentication is requested.
         */",undetermined
8798,httpd,UNKNOWN,/* create the details of this connection in the new pool */,undetermined
8799,httpd,UNKNOWN,"/* The security mode after parsing the URL will always be either
         * APR_LDAP_NONE (ldap://) or APR_LDAP_SSL (ldaps://).
         * If the security setting is NONE, override it to the security
         * setting optionally supplied by the admin using LDAPTrustedMode
         */",undetermined
8800,httpd,UNKNOWN,/* save away a copy of the client cert list that is presently valid */,undetermined
8801,httpd,UNKNOWN,/* whether or not to keep this connection in the pool when it's returned */,undetermined
8802,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8803,httpd,UNKNOWN,"/*
 * Compares two DNs to see if they're equal. The only way to do this correctly
 * is to search for the dn and then do ldap_get_dn() on the result. This should
 * match the initial dn, since it would have been also retrieved with
 * ldap_get_dn(). This is expensive, so if the configuration value
 * compare_dn_on_server is false, just does an ordinary strcmp.
 *
 * The lock for the ldap cache should already be acquired.
 */",undetermined
8804,httpd,UNKNOWN,/* get cache entry (or create one) */,undetermined
8805,httpd,UNKNOWN,/* a simple compare? */,undetermined
8806,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8807,httpd,UNKNOWN,/* no - it's a server side compare */,undetermined
8808,httpd,UNKNOWN,/* is it in the compare cache? */,undetermined
8809,httpd,UNKNOWN,"/* If it's in the cache, it's good */",undetermined
8810,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8811,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8812,httpd,UNKNOWN,/* make a server connection */,undetermined
8813,httpd,UNKNOWN,/* connect to server failed */,undetermined
8814,httpd,UNKNOWN,/* search for reqdn */,undetermined
8815,httpd,UNKNOWN,"/*
         * we are reusing a connection that doesn't seem to be active anymore
         * (firewall state drop?), let's try a new connection.
         */",undetermined
8816,httpd,UNKNOWN,/* search for reqdn failed - no match */,undetermined
8817,httpd,UNKNOWN,/* compare unsuccessful */,undetermined
8818,httpd,UNKNOWN,/* compare successful - add to the compare cache */,undetermined
8819,httpd,UNKNOWN,"/*
 * Does an generic ldap_compare operation. It accepts a cache that it will use
 * to lookup the compare in the cache. We cache two kinds of compares
 * (require group compares) and (require user compares). Each compare has a
 * different cache node: require group includes the DN; require user does not
 * because the require user cache is owned by the
 *
 */",undetermined
8820,httpd,UNKNOWN,/* silence gcc -Wall */,undetermined
8821,httpd,UNKNOWN,/* get cache entry (or create one) */,undetermined
8822,httpd,UNKNOWN,/* make a comparison to the cache */,undetermined
8823,httpd,UNKNOWN,/* found it... */,undetermined
8824,httpd,UNKNOWN,/* ...but it is too old */,undetermined
8825,httpd,UNKNOWN,/* ...and it is good */,undetermined
8826,httpd,UNKNOWN,/* record the result code to return with the reason... */,undetermined
8827,httpd,UNKNOWN,/* and unlock this read lock */,undetermined
8828,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8829,httpd,UNKNOWN,/* connect failed */,undetermined
8830,httpd,UNKNOWN,/* connection failed - try again */,undetermined
8831,httpd,UNKNOWN,"/*
         * we are reusing a connection that doesn't seem to be active anymore
         * (firewall state drop?), let's try a new connection.
         */",undetermined
8832,httpd,UNKNOWN,/* compare completed; caching result */,undetermined
8833,httpd,UNKNOWN,"/* If the node doesn't exist then insert it, otherwise just update
             * it with the last results
             */",undetermined
8834,httpd,UNKNOWN,"/*
     * 3.B. The cache didn't have any subgrouplist yet. Go check for subgroups.
     */",undetermined
8835,httpd,UNKNOWN,/* connect failed */,undetermined
8836,httpd,UNKNOWN,/* try to do the search */,undetermined
8837,httpd,UNKNOWN,"/*
         * we are reusing a connection that doesn't seem to be active anymore
         * (firewall state drop?), let's try a new connection.
         */",undetermined
8838,httpd,UNKNOWN,/* if there is an error (including LDAP_NO_SUCH_OBJECT) return now */,undetermined
8839,httpd,UNKNOWN,"/*
     * Get values for the provided sub-group attributes.
     */",undetermined
8840,httpd,UNKNOWN,"/* Get *all* matching ""member"" values from this group. */",undetermined
8841,httpd,UNKNOWN,"/*
                 * Now we are going to pare the subgroup members of this group
                 * to *just* the subgroups, add them to the compare_nodep, and
                 * then proceed to check the new level of subgroups.
                 */",undetermined
8842,httpd,UNKNOWN,/* Check if this entry really is a group. */,undetermined
8843,httpd,UNKNOWN,"/* It's a group, so add it to the array.  */",undetermined
8844,httpd,UNKNOWN,/* We need to fill in tmp_local_subgroups using the data from LDAP */,undetermined
8845,httpd,UNKNOWN,"/*
 * Does a recursive lookup operation to try to find a user within (cached)
 * nested groups. It accepts a cache that it will use to lookup previous
 * compare attempts. We cache two kinds of compares (require group compares)
 * and (require user compares). Each compare has a different cache node:
 * require group includes the DN; require user does not because the require
 * user cache is owned by the
 *
 * DON'T CALL THIS UNLESS YOU CALLED uldap_cache_compare FIRST!!!!!
 *
 *
 * 1. Call uldap_cache_compare for each subgroupclass value to check the
 *    generic, user-agnostic, cached group entry. This will create a new generic
 *    cache entry if there
 *    wasn't one. If nothing returns LDAP_COMPARE_TRUE skip to step 5 since we
 *    have no groups.
 * 2. Lock The cache and get the generic cache entry.
 * 3. Check if there is already a subgrouplist in this generic group's cache
 *    entry.
 *    A. If there is, go to step 4.
 *    B. If there isn't:
 *       i)   Use ldap_search to get the full list
 *            of subgroup ""members"" (which may include non-group ""members"").
 *       ii)  Use uldap_cache_compare to strip the list down to just groups.
 *       iii) Lock and add this stripped down list to the cache of the generic
 *            group.
 * 4. Loop through the sgl and call uldap_cache_compare (using the user info)
 *    for each
 *    subgroup to see if the subgroup contains the user and to get the subgroups
 *    added to the
 *    cache (with user-afinity, if they aren't already there).
 *    A. If the user is in the subgroup, then we'll be returning
 *       LDAP_COMPARE_TRUE.
 *    B. if the user isn't in the subgroup (LDAP_COMPARE_FALSE via
 *       uldap_cache_compare) then recursively call this function to get the
 *       sub-subgroups added...
 * 5. Cleanup local allocations.
 * 6. Return the final result.
 */",undetermined
8846,httpd,UNKNOWN,"/*
     * Stop looking at deeper levels of nested groups if we have reached the
     * max. Since we already checked the top-level group in uldap_cache_compare,
     * we don't need to check it again here - so if max_subgroup_depth is set
     * to 0, we won't check it (i.e. that is why we check < rather than <=).
     * We'll be calling uldap_cache_compare from here to check if the user is
     * in the next level before we recurse into that next level looking for
     * more subgroups.
     */",undetermined
8847,httpd,UNKNOWN,"/*
     * 1. Check the ""groupiness"" of the specified basedn. Stopping at the first
     *    TRUE return.
     */",undetermined
8848,httpd,UNKNOWN,"/*
     * 2. Find previously created cache entry and check if there is already a
     *    subgrouplist.
     */",undetermined
8849,httpd,UNKNOWN,/* make a comparison to the cache */,undetermined
8850,httpd,UNKNOWN,"/*
             * Found the generic group entry... but the user isn't in this
             * group or we wouldn't be here.
             */",undetermined
8851,httpd,UNKNOWN,/* Make a local copy of the subgroup list */,undetermined
8852,httpd,UNKNOWN,"/* No Cached SGL, retrieve from LDAP */",undetermined
8853,httpd,UNKNOWN,/* No SGL aailable via LDAP either */,undetermined
8854,httpd,UNKNOWN,"/*
         * Find the generic group cache entry and add the sgl we just retrieved.
         */",undetermined
8855,httpd,UNKNOWN,"/*
             * The group entry we want to attach our SGL to doesn't exist.
             * We only got here if we verified this DN was actually a group
             * based on the objectClass, but we can't call the compare function
             * while we already hold the cache lock -- only the insert.
             */",undetermined
8856,httpd,UNKNOWN,"/*
         * We have a valid cache entry and a locally generated SGL.
         * Attach the SGL to the cache entry
         */",undetermined
8857,httpd,UNKNOWN,/* We looked up an SGL for a group and found it to be empty */,undetermined
8858,httpd,UNKNOWN,"/*
     * tmp_local_sgl has either been created, or copied out of the cache
     * If tmp_local_sgl is NULL, there are no subgroups to process and we'll
     * return false
     */",undetermined
8859,httpd,UNKNOWN,"/*
         * 4. Now loop through the subgroupList and call uldap_cache_compare
         * to check for the user.
         */",undetermined
8860,httpd,UNKNOWN,"/*
             * 4.A. We found the user in the subgroup. Return
             * LDAP_COMPARE_TRUE.
             */",undetermined
8861,httpd,UNKNOWN,"/*
             * 4.B. We didn't find the user in this subgroup, so recurse into
             * it and keep looking.
             */",undetermined
8862,httpd,UNKNOWN,/* Cached URL node */,undetermined
8863,httpd,UNKNOWN,/* Cached search node */,undetermined
8864,httpd,UNKNOWN,/* Get the cache node for this url */,undetermined
8865,httpd,UNKNOWN,/* found entry in search cache... */,undetermined
8866,httpd,UNKNOWN,"/*
             * Remove this item from the cache if its expired. If the sent
             * password doesn't match the storepassword, the entry will
             * be removed and readded later if the credentials pass
             * authentication.
             */",undetermined
8867,httpd,UNKNOWN,/* ...but entry is too old */,undetermined
8868,httpd,UNKNOWN,/* ...and entry is valid */,undetermined
8869,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8870,httpd,UNKNOWN,"/*
     * At this point, there is no valid cached search, so lets do the search.
     */",undetermined
8871,httpd,UNKNOWN,"/*
     * If LDAP operation fails due to LDAP_SERVER_DOWN, control returns here.
     */",undetermined
8872,httpd,UNKNOWN,/* try do the search */,undetermined
8873,httpd,UNKNOWN,/* if there is an error (including LDAP_NO_SUCH_OBJECT) return now */,undetermined
8874,httpd,UNKNOWN,"/*
     * We should have found exactly one entry; to find a different
     * number is an error.
     */",undetermined
8875,httpd,UNKNOWN,"/* Grab the dn, copy it into the pool, and free it again */",undetermined
8876,httpd,UNKNOWN,"/*
     * A bind to the server with an empty password always succeeds, so
     * we check to ensure that the password is not empty. This implies
     * that users who actually do have empty passwords will never be
     * able to authenticate with this module. I don't see this as a big
     * problem.
     */",undetermined
8877,httpd,UNKNOWN,"/*
     * Attempt to bind with the retrieved dn and the password. If the bind
     * fails, it means that the password is wrong (the dn obviously
     * exists, since we just retrieved it)
     */",undetermined
8878,httpd,UNKNOWN,/* failure? if so - return */,undetermined
8879,httpd,UNKNOWN,"/*
         * We have just bound the connection to a different user and password
         * combination, which might be reused unintentionally next time this
         * connection is used from the connection pool. To ensure no confusion,
         * we mark the connection as unbound.
         */",undetermined
8880,httpd,UNKNOWN,"/*
     * Get values for the provided attributes.
     */",undetermined
8881,httpd,UNKNOWN,/* get values */,undetermined
8882,httpd,UNKNOWN,"/*
     * Add the new username to the search cache.
     */",undetermined
8883,httpd,UNKNOWN,"/* Search again to make sure that another thread didn't ready insert
         * this node into the cache before we got here. If it does exist then
         * update the lastbind
         */",undetermined
8884,httpd,UNKNOWN,"/* Nothing in cache, insert new entry */",undetermined
8885,httpd,UNKNOWN,"/* Entry in cache is invalid, remove it and insert new one */",undetermined
8886,httpd,UNKNOWN,"/* Cache entry is valid, update lastbind */",undetermined
8887,httpd,UNKNOWN,"/*
 * This function will return the DN of the entry matching userid.
 * It is used to get the DN in case some other module than mod_auth_ldap
 * has authenticated the user.
 * The function is basically a copy of uldap_cache_checkuserid
 * with password checking removed.
 */",undetermined
8888,httpd,UNKNOWN,/* Cached URL node */,undetermined
8889,httpd,UNKNOWN,/* Cached search node */,undetermined
8890,httpd,UNKNOWN,/* Get the cache node for this url */,undetermined
8891,httpd,UNKNOWN,/* found entry in search cache... */,undetermined
8892,httpd,UNKNOWN,"/*
             * Remove this item from the cache if its expired.
             */",undetermined
8893,httpd,UNKNOWN,/* ...but entry is too old */,undetermined
8894,httpd,UNKNOWN,/* ...and entry is valid */,undetermined
8895,httpd,UNKNOWN,/* unlock this read lock */,undetermined
8896,httpd,UNKNOWN,"/*
     * At this point, there is no valid cached search, so lets do the search.
     */",undetermined
8897,httpd,UNKNOWN,"/*
     * If LDAP operation fails due to LDAP_SERVER_DOWN, control returns here.
     */",undetermined
8898,httpd,UNKNOWN,/* try do the search */,undetermined
8899,httpd,UNKNOWN,/* if there is an error (including LDAP_NO_SUCH_OBJECT) return now */,undetermined
8900,httpd,UNKNOWN,"/*
     * We should have found exactly one entry; to find a different
     * number is an error.
     */",undetermined
8901,httpd,UNKNOWN,"/* Grab the dn, copy it into the pool, and free it again */",undetermined
8902,httpd,UNKNOWN,"/*
     * Get values for the provided attributes.
     */",undetermined
8903,httpd,UNKNOWN,/* get values */,undetermined
8904,httpd,UNKNOWN,"/*
     * Add the new username to the search cache.
     */",undetermined
8905,httpd,UNKNOWN,"/* Search again to make sure that another thread didn't ready insert
         * this node into the cache before we got here. If it does exist then
         * update the lastbind
         */",undetermined
8906,httpd,UNKNOWN,"/* Nothing in cache, insert new entry */",undetermined
8907,httpd,UNKNOWN,"/*
         * Don't update lastbind on entries with bindpw because
         * we haven't verified that password. It's OK to update
         * the entry if there is no password in it.
         */",undetermined
8908,httpd,UNKNOWN,"/* Cache entry is valid, update lastbind */",undetermined
8909,httpd,UNKNOWN,"/*
 * Reports if ssl support is enabled
 *
 * 1 = enabled, 0 = not enabled
 */",undetermined
8910,httpd,UNKNOWN,/* ---------------------------------------- */,undetermined
8911,httpd,UNKNOWN,/* config directives */,undetermined
8912,httpd,UNKNOWN,"/**
 * Parse the certificate type.
 *
 * The type can be one of the following:
 * CA_DER, CA_BASE64, CA_CERT7_DB, CA_SECMOD, CERT_DER, CERT_BASE64,
 * CERT_KEY3_DB, CERT_NICKNAME, KEY_DER, KEY_BASE64
 *
 * If no matches are found, APR_LDAP_CA_TYPE_UNKNOWN is returned.
 */",undetermined
8913,httpd,UNKNOWN,/* Authority file in binary DER format */,undetermined
8914,httpd,UNKNOWN,/* Authority file in Base64 format */,undetermined
8915,httpd,UNKNOWN,/* Netscape certificate database file/directory */,undetermined
8916,httpd,UNKNOWN,/* Netscape secmod file/directory */,undetermined
8917,httpd,UNKNOWN,/* Client cert file in DER format */,undetermined
8918,httpd,UNKNOWN,/* Client cert file in Base64 format */,undetermined
8919,httpd,UNKNOWN,/* Client cert file in PKCS#12 format */,undetermined
8920,httpd,UNKNOWN,/* Netscape client cert database file/directory */,undetermined
8921,httpd,UNKNOWN,/* Netscape client cert nickname */,undetermined
8922,httpd,UNKNOWN,/* Client cert key file in DER format */,undetermined
8923,httpd,UNKNOWN,/* Client cert key file in Base64 format */,undetermined
8924,httpd,UNKNOWN,/* Client cert key file in PKCS#12 format */,undetermined
8925,httpd,UNKNOWN,"/**
 * Set LDAPTrustedGlobalCert.
 *
 * This directive takes either two or three arguments:
 * - certificate type
 * - certificate file / directory / nickname
 * - certificate password (optional)
 *
 * This directive may only be used globally.
 */",undetermined
8926,httpd,UNKNOWN,/* handle the certificate type */,undetermined
8927,httpd,UNKNOWN,/* add the certificate to the global array */,undetermined
8928,httpd,UNKNOWN,"/* if file is a file or path, fix the path */",undetermined
8929,httpd,UNKNOWN,"/**
 * Set LDAPTrustedClientCert.
 *
 * This directive takes either two or three arguments:
 * - certificate type
 * - certificate file / directory / nickname
 * - certificate password (optional)
 */",undetermined
8930,httpd,UNKNOWN,/* handle the certificate type */,undetermined
8931,httpd,UNKNOWN,/* add the certificate to the client array */,undetermined
8932,httpd,UNKNOWN,"/* if file is a file or path, fix the path */",undetermined
8933,httpd,UNKNOWN,"/**
 * Set LDAPTrustedMode.
 *
 * This directive sets what encryption mode to use on a connection:
 * - None (No encryption)
 * - SSL (SSL encryption)
 * - STARTTLS (TLS encryption)
 */",undetermined
8934,httpd,UNKNOWN,/* defaults are AP_LDAP_CHASEREFERRALS_ON and AP_LDAP_DEFAULT_HOPLIMIT */,undetermined
8935,httpd,UNKNOWN,/* reserve -1 for default value */,undetermined
8936,httpd,UNKNOWN,"/* Create a per vhost pool for mod_ldap to use, serialized with
     * st->mutex (also one per vhost).  both are replicated by fork(),
     * no shared memory managed by either.
     */",undetermined
8937,httpd,UNKNOWN,/* no limit */,undetermined
8938,httpd,UNKNOWN,/* no delay */,undetermined
8939,httpd,UNKNOWN,"/* cache-related settings are not merged here, but in the post_config hook,
 * since the cache has not yet sprung to life
 */",undetermined
8940,httpd,UNKNOWN,"/* The cache settings can not be modified in a
        virtual host since all server use the same
        shared memory cache. */",undetermined
8941,httpd,UNKNOWN,/* not known until post-config and re-merged */,undetermined
8942,httpd,UNKNOWN,"/* These LDAP connection settings can not be overwritten in
        a virtual host. Once set in the base server, they must
        remain the same. None of the LDAP SDKs seem to be able
        to handle setting the verify_svr_cert flag on a
        per-connection basis.  The OpenLDAP client appears to be
        able to handle the connection timeout per-connection
        but the Novell SDK cannot.  Allowing the timeout to
        be set by each vhost is of little value so rather than
        trying to make special expections for one LDAP SDK, GLOBAL_ONLY
        is being enforced on this setting as well. */",undetermined
8943,httpd,UNKNOWN,"/* util_ldap_post_config() will be called twice. Don't bother
     * going through all of the initialization on the first call
     * because it will just be thrown away.*/",undetermined
8944,httpd,UNKNOWN,"/*
         * If we are using shared memory caching and the cache file already
         * exists then delete it.  Otherwise we are going to run into problems
         * creating the shared memory.
         */",undetermined
8945,httpd,UNKNOWN,"/*
     * initializing cache if we don't already have a shm address
     */",undetermined
8946,httpd,UNKNOWN,/* merge config in all vhost */,undetermined
8947,httpd,UNKNOWN,"/* log the LDAP SDK used
     */",undetermined
8948,httpd,UNKNOWN,"/*
     * Initialize SSL support, and log the result for the benefit of the admin.
     *
     * If SSL is not supported it is not necessarily an error, as the
     * application may not want to use it.
     */",undetermined
8949,httpd,UNKNOWN,/* ssl_supported is really a global setting */,undetermined
8950,httpd,UNKNOWN,/* Initialize the rebind callback's cross reference list. */,undetermined
8951,httpd,UNKNOWN,/* create dir config */,undetermined
8952,httpd,UNKNOWN,/* merge dir config */,undetermined
8953,httpd,UNKNOWN,/* create server config */,undetermined
8954,httpd,UNKNOWN,/* merge server config */,undetermined
8955,httpd,UNKNOWN,/* command table */,undetermined
8956,httpd,UNKNOWN,/* set up request processing hooks */,undetermined
8957,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8958,httpd,UNKNOWN,"/*
 * util_ldap_cache.c: LDAP cache things
 *
 * Original code from auth_ldap module for Apache v1.3:
 * Copyright 1998, 1999 Enbridge Pipelines Inc.
 * Copyright 1999-2001 Dave Carrigan
 */",undetermined
8959,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8960,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8961,httpd,UNKNOWN,/* Cache functions for search nodes */,undetermined
8962,httpd,UNKNOWN,/* safety check */,undetermined
8963,httpd,UNKNOWN,/* copy vals */,undetermined
8964,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8965,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8966,httpd,UNKNOWN,/* ------------------------------------------------------------------ */,undetermined
8967,httpd,UNKNOWN,/* Remove any existing shm segment with this name. */,undetermined
8968,httpd,UNKNOWN,/* Determine the usable size of the shm segment. */,undetermined
8969,httpd,UNKNOWN,"/* This will create a rmm ""handler"" to get into the shared memory area */",undetermined
8970,httpd,UNKNOWN,/* APR_HAS_LDAP */,undetermined
8971,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
8972,httpd,UNKNOWN,"/**
 * @file  util_ldap_cache.h
 * @brief This switches LDAP support on or off.
 */",undetermined
8973,httpd,UNKNOWN,/* this whole thing disappears if LDAP is not enabled */,undetermined
8974,httpd,UNKNOWN,"/*
 * LDAP Cache Manager
 */",undetermined
8975,httpd,UNKNOWN,/* Pointer to the payload */,undetermined
8976,httpd,UNKNOWN,/* Time node was added to cache */,undetermined
8977,httpd,UNKNOWN,/* Size of cache array */,undetermined
8978,httpd,UNKNOWN,/* Maximum number of cache entries */,undetermined
8979,httpd,UNKNOWN,/* Current number of cache entries */,undetermined
8980,httpd,UNKNOWN,/* Used to keep track of when cache becomes 3/4 full */,undetermined
8981,httpd,UNKNOWN,/* Time that the cache became 3/4 full */,undetermined
8982,httpd,UNKNOWN,/* Func to hash the payload */,undetermined
8983,httpd,UNKNOWN,/* Func to compare two payloads */,undetermined
8984,httpd,UNKNOWN,/* Func to alloc mem and copy payload to new mem */,undetermined
8985,httpd,UNKNOWN,/* Func to free mem used by the payload */,undetermined
8986,httpd,UNKNOWN,/* Func to display the payload contents */,undetermined
8987,httpd,UNKNOWN,/* No. of times the cache has been purged */,undetermined
8988,httpd,UNKNOWN,/* Average time to purge the cache */,undetermined
8989,httpd,UNKNOWN,/* Time of the last purge */,undetermined
8990,httpd,UNKNOWN,"/* Number of elements purged in last purge. This is not
                                   obvious: it won't be 3/4 the size of the cache if
                                   there were a lot of expired entries. */",undetermined
8991,httpd,UNKNOWN,/* Number of fetches */,undetermined
8992,httpd,UNKNOWN,/* Number of cache hits */,undetermined
8993,httpd,UNKNOWN,/* Number of inserts */,undetermined
8994,httpd,UNKNOWN,/* Number of removes */,undetermined
8995,httpd,UNKNOWN,"/*
 * LDAP Cache
 */",undetermined
8996,httpd,UNKNOWN,"/*
 * Maintain a cache of LDAP URLs that the server handles. Each node in
 * the cache contains the search cache for that URL, and a compare cache
 * for the URL. The compare cash is populated when doing require group
 * compares.
 */",undetermined
8997,httpd,UNKNOWN,"/*
 * When a group is found, subgroups are stored in the group's cache entry.
 */",undetermined
8998,httpd,UNKNOWN,"/*
 * We cache every successful search and bind operation, using the username
 * as the key. Each node in the cache contains the returned DN, plus the
 * password used to bind.
 */",undetermined
8999,httpd,UNKNOWN,/* Cache key */,undetermined
9000,httpd,UNKNOWN,/* DN returned from search */,undetermined
9001,httpd,UNKNOWN,"/* The most recently used bind password;
                                           NULL if the bind failed */",undetermined
9002,httpd,UNKNOWN,/* Time of last successful bind */,undetermined
9003,httpd,UNKNOWN,/* Values of queried attributes */,undetermined
9004,httpd,UNKNOWN,/* Number of queried attributes */,undetermined
9005,httpd,UNKNOWN,"/*
 * We cache every successful compare operation, using the DN, attrib, and
 * value as the key.
 */",undetermined
9006,httpd,UNKNOWN,"/* DN, attrib and value combine to be the key */",undetermined
9007,httpd,UNKNOWN,/* 0 if no sgl processing yet. 1 if sgl has been processed (even if SGL is NULL). Saves repeat work on leaves. */,undetermined
9008,httpd,UNKNOWN,"/*
 * We cache every successful compare dn operation, using the dn in the require
 * statement and the dn fetched based on the client-provided username.
 */",undetermined
9009,httpd,UNKNOWN,/* The DN in the require dn statement */,undetermined
9010,httpd,UNKNOWN,/* The DN found in the search */,undetermined
9011,httpd,UNKNOWN,"/*
 * Function prototypes for LDAP cache
 */",undetermined
9012,httpd,UNKNOWN,/* util_ldap_cache.c */,undetermined
9013,httpd,UNKNOWN,/* util_ldap_cache_mgr.c */,undetermined
9014,httpd,UNKNOWN,"/* Cache alloc and free function, dealing or not with shm */",undetermined
9015,httpd,UNKNOWN,/* Cache managing function */,undetermined
9016,httpd,UNKNOWN,/* APR_HAS_LDAP */,undetermined
9017,httpd,UNKNOWN,/* APU_LDAP_CACHE_H */,undetermined
9018,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9019,httpd,UNKNOWN,"/*
 * util_ldap_cache_mgr.c: LDAP cache manager things
 *
 * Original code from auth_ldap module for Apache v1.3:
 * Copyright 1998, 1999 Enbridge Pipelines Inc.
 * Copyright 1999-2001 Dave Carrigan
 */",undetermined
9020,httpd,UNKNOWN,/* only here until strdup is gone */,undetermined
9021,httpd,UNKNOWN,/* here till malloc is gone */,undetermined
9022,httpd,UNKNOWN,/* Free in shared memory */,undetermined
9023,httpd,UNKNOWN,/* Cache shm is not used */,undetermined
9024,httpd,UNKNOWN,/* allocate from shared memory */,undetermined
9025,httpd,UNKNOWN,/* Cache shm is not used */,undetermined
9026,httpd,UNKNOWN,/* allocate from shared memory */,undetermined
9027,httpd,UNKNOWN,/* Cache shm is not used */,undetermined
9028,httpd,UNKNOWN,"/*
 * Duplicate a subgroupList from one compare entry to another.
 * Returns: ptr to a new copy of the subgroupList or NULL if allocation failed.
 */",undetermined
9029,httpd,UNKNOWN,"/* We ran out of SHM, delete the strings we allocated for the SGL */",undetermined
9030,httpd,UNKNOWN,/* We were able to allocate new strings for all the subgroups */,undetermined
9031,httpd,UNKNOWN,"/*
 * Delete an entire subgroupList.
 */",undetermined
9032,httpd,UNKNOWN,"/*
 * Computes the hash on a set of strings. The first argument is the number
 * of strings to hash, the rest of the args are strings.
 * Algorithm taken from glibc.
 */",undetermined
9033,httpd,UNKNOWN,"/*
  Purges a cache that has gotten full. We keep track of the time that we
  added the entry that made the cache 3/4 full, then delete all entries
  that were added before that time. It's pretty simplistic, but time to
  purge is only O(n), which is more important.
*/",undetermined
9034,httpd,UNKNOWN,"/*
 * create caches
 */",undetermined
9035,httpd,UNKNOWN,/* create the three caches */,undetermined
9036,httpd,UNKNOWN,/* check that all the caches initialised successfully */,undetermined
9037,httpd,UNKNOWN,"/* The contents of this structure will be duplicated in shared
           memory during the insert.  So use stack memory rather than
           pool memory to avoid a memory leak. */",undetermined
9038,httpd,UNKNOWN,/* This frees cache in the right way even if !APR_HAS_SHARED_MEMORY or !st->cache_rmm */,undetermined
9039,httpd,UNKNOWN,"/*
 * Insert an item into the cache.
 * *** Does not catch duplicates!!! ***
 */",undetermined
9040,httpd,UNKNOWN,/* sanity check */,undetermined
9041,httpd,UNKNOWN,"/* check if we are full - if so, try purge */",undetermined
9042,httpd,UNKNOWN,"/* if the purge was not effective, we leave now to avoid an overflow */",undetermined
9043,httpd,UNKNOWN,"/*
         * XXX: The cache management should be rewritten to work
         * properly when LDAPSharedCacheSize is too small.
         */",undetermined
9044,httpd,UNKNOWN,"/*
             * We have not even reached fullmark, trigger a complete purge.
             * This is still better than not being able to add new entries
             * at all.
             */",undetermined
9045,httpd,UNKNOWN,/* Take a copy of the payload before proceeeding. */,undetermined
9046,httpd,UNKNOWN,"/*
         * XXX: The cache management should be rewritten to work
         * properly when LDAPSharedCacheSize is too small.
         */",undetermined
9047,httpd,UNKNOWN,"/*
             * We have not even reached fullmark, trigger a complete purge.
             * This is still better than not being able to add new entries
             * at all.
             */",undetermined
9048,httpd,UNKNOWN,/* populate the entry */,undetermined
9049,httpd,UNKNOWN,"/* if we reach the full mark, note the time we did so
     * for the benefit of the purge function
     */",undetermined
9050,httpd,UNKNOWN,"/* If p is null, it means that we couldn't find the node, so just return */",undetermined
9051,httpd,UNKNOWN,"/* We found the node, and it's the first in the list */",undetermined
9052,httpd,UNKNOWN,/* We found the node and it's not the first in the list */,undetermined
9053,httpd,UNKNOWN,/* APR_HAS_LDAP */,undetermined
9054,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9055,httpd,UNKNOWN,"/*
 * byterange_filter.c --- HTTP byterange filter and friends.
 */",undetermined
9056,httpd,UNKNOWN,/* for sscanf */,undetermined
9057,httpd,UNKNOWN,"/* For errors detected in basic auth common
                                 * support code... */",undetermined
9058,httpd,UNKNOWN,/* For apr_date_parse_http and APR_DATE_BAD */,undetermined
9059,httpd,UNKNOWN,"/*
 * Returns: number of ranges (merged) or -1 for no-good
 */",undetermined
9060,httpd,UNKNOWN,"/*
     * Check for Range request-header (HTTP/1.1) or Request-Range for
     * backwards-compatibility with second-draft Luotonen/Franks
     * byte-ranges (e.g. Netscape Navigator 2-3).
     *
     * We support this form, with Request-Range, and (farther down) we
     * send multipart/x-byteranges instead of multipart/byteranges for
     * Request-Range based requests to work around a bug in Netscape
     * Navigator 2-3 and MSIE 3.
     */",undetermined
9061,httpd,UNKNOWN,/* is content already a single range? */,undetermined
9062,httpd,UNKNOWN,/* is content already a multiple range? */,undetermined
9063,httpd,UNKNOWN,"/*
     * Check the If-Range header for Etag or Date.
     */",undetermined
9064,httpd,UNKNOWN,"/*
         * Per RFC 2616 14.35.1: If there is at least one syntactically invalid
         * byte-range-spec, we must ignore the whole header.
         */",undetermined
9065,httpd,UNKNOWN,"/* In the form ""-5"" */",undetermined
9066,httpd,UNKNOWN,"/* ""5-"" */",undetermined
9067,httpd,UNKNOWN,"/*
                 * special case: 0-
                 *   ignore all other ranges provided
                 *   return as a single range: 0-
                 */",undetermined
9068,httpd,UNKNOWN,/* new set */,undetermined
9069,httpd,UNKNOWN,/* new set again */,undetermined
9070,httpd,UNKNOWN,"/* If all ranges are unsatisfiable, we should return 416 */",undetermined
9071,httpd,UNKNOWN,"/*
     * create the merged table now, now that we know we need it
     */",undetermined
9072,httpd,UNKNOWN,"/*
 * Here we try to be compatible with clients that want multipart/x-byteranges
 * instead of multipart/byteranges (also see above), as per HTTP/1.1. We
 * look for the Request-Range header (e.g. Netscape 2 and 3) as an indication
 * that the browser supports an older protocol. We also check User-Agent
 * for Microsoft Internet Explorer 3, which needs this as well.
 */",undetermined
9073,httpd,UNKNOWN,"/*
     * Once we know that start and end are >= 0 convert everything to apr_uint64_t.
     * See the comments in apr_brigade_partition why.
     * In short apr_off_t (for values >= 0)and apr_size_t fit into apr_uint64_t.
     */",undetermined
9074,httpd,UNKNOWN,/* we know that no bucket has undefined length (-1) */,undetermined
9075,httpd,UNKNOWN,"/*
     * Iterate through the brigade until reaching EOS or a bucket with
     * unknown length.
     */",undetermined
9076,httpd,UNKNOWN,"/*
     * Don't attempt to do byte range work if this brigade doesn't
     * contain an EOS, or if any of the buckets has an unknown length;
     * this avoids the cases where it is expensive to perform
     * byteranging (i.e. may require arbitrary amounts of memory).
     */",undetermined
9077,httpd,UNKNOWN,"/* No Ranges or we hit a limit? We have nothing to do, get out of the way. */",undetermined
9078,httpd,UNKNOWN,/* this brigade holds what we will be sending */,undetermined
9079,httpd,UNKNOWN,/* Is ap_make_content_type required here? */,undetermined
9080,httpd,UNKNOWN,"/* if we have no type for the content, do our best */",undetermined
9081,httpd,UNKNOWN,"/*
         * For single range requests, we must produce Content-Range header.
         * Otherwise, we need to produce the multipart boundaries.
         */",undetermined
9082,httpd,UNKNOWN,"/*
             * Every now and then, pass what we have down the filter chain.
             * In this case, the content-length filter cannot calculate and
             * set the content length and we must remove any Content-Length
             * header already present.
             */",undetermined
9083,httpd,UNKNOWN,/* bsend is assumed to be empty if we get here. */,undetermined
9084,httpd,UNKNOWN,/* add the final boundary */,undetermined
9085,httpd,UNKNOWN,/* we're done with the original content - all of our data is in bsend. */,undetermined
9086,httpd,UNKNOWN,/* send our multipart output */,undetermined
9087,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9088,httpd,UNKNOWN,"/*
 * chunk_filter.c --- HTTP/1.1 chunked transfer encoding filter.
 */",undetermined
9089,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
9090,httpd,UNKNOWN,/* For index_of_response().  Grump. */,undetermined
9091,httpd,UNKNOWN,"/*
 * A pointer to this is used to memorize in the filter context that a bad
 * gateway error bucket had been seen. It is used as an invented unique pointer.
 */",undetermined
9092,httpd,UNKNOWN,"/* XXX: chunk_hdr must remain at this scope since it is used in a
         *      transient bucket.
         */",undetermined
9093,httpd,UNKNOWN,/* enough space for the snprintf below */,undetermined
9094,httpd,UNKNOWN,/* there shouldn't be anything after the eos */,undetermined
9095,httpd,UNKNOWN,"/*
                 * We had a broken backend. Memorize this in the filter
                 * context.
                 */",undetermined
9096,httpd,UNKNOWN,/* unknown amount of data (e.g. a pipe) */,undetermined
9097,httpd,UNKNOWN,"/*
                     * There may be a new next bucket representing the
                     * rest of the data stream on which a read() may
                     * block so we pass down what we have so far.
                     */",undetermined
9098,httpd,UNKNOWN,"/* If there was nothing in this bucket then we can
                     * safely move on to the next one without pausing
                     * to pass down what we have counted up so far.
                     */",undetermined
9099,httpd,UNKNOWN,"/*
         * XXX: if there aren't very many bytes at this point it may
         * be a good idea to set them aside and return for more,
         * unless we haven't finished counting this brigade yet.
         */",undetermined
9100,httpd,UNKNOWN,"/* if there are content bytes, then wrap them in a chunk */",undetermined
9101,httpd,UNKNOWN,"/*
             * Insert the chunk header, specifying the number of bytes in
             * the chunk.
             */",undetermined
9102,httpd,UNKNOWN,"/*
             * Insert the end-of-chunk CRLF before an EOS or
             * FLUSH bucket, or appended to the brigade
             */",undetermined
9103,httpd,UNKNOWN,"/* RFC 2616, Section 3.6.1
         *
         * If there is an EOS bucket, then prefix it with:
         *   1) the last-chunk marker (""0"" CRLF)
         *   2) the trailer
         *   3) the end-of-chunked body CRLF
         *
         * We only do this if we have not seen an error bucket with
         * status HTTP_BAD_GATEWAY. We have memorized an
         * error bucket that we had seen in the filter context.
         * The error bucket with status HTTP_BAD_GATEWAY indicates that the
         * connection to the backend (mod_proxy) broke in the middle of the
         * response. In order to signal the client that something went wrong
         * we do not create the last-chunk marker and set c->keepalive to
         * AP_CONN_CLOSE in the core output filter.
         *
         * XXX: it would be nice to combine this with the end-of-chunk
         * marker above, but this is a bit more straight-forward for
         * now.
         */",undetermined
9104,httpd,UNKNOWN,/* XXX: (2) trailers ... does not yet exist */,undetermined
9105,httpd,UNKNOWN,/* <trailers> */,undetermined
9106,httpd,UNKNOWN,/* pass the brigade to the next filter. */,undetermined
9107,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9108,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
9109,httpd,UNKNOWN,/* For index_of_response().  Grump. */,undetermined
9110,httpd,UNKNOWN,/* Handles for core filters */,undetermined
9111,httpd,UNKNOWN,"/* If we are using an MPM That Supports Async Connections,
 * use a different processing function
 */",undetermined
9112,httpd,UNKNOWN,/* Stolen from mod_proxy.c */,undetermined
9113,httpd,UNKNOWN,"/*
     * The http module shouldn't return anything other than
     * ""http"" (the default) or ""https"".
     */",undetermined
9114,httpd,UNKNOWN,/* process the request if it was read without error */,undetermined
9115,httpd,UNKNOWN,"/* After the call to ap_process_request, the
                 * request pool may have been deleted.  We set
                 * r=NULL here to ensure that any dereference
                 * of r that might be added later in this function
                 * will result in a segfault immediately instead
                 * of nondeterministic failures later.
                 */",undetermined
9116,httpd,UNKNOWN,/* Something went wrong; close the connection */,undetermined
9117,httpd,UNKNOWN,/* ap_read_request failed - client may have closed */,undetermined
9118,httpd,UNKNOWN,"/*
     * Read and process each request found on our connection
     * until no requests are left or we decide to close.
     */",undetermined
9119,httpd,UNKNOWN,/* process the request if it was read without error */,undetermined
9120,httpd,UNKNOWN,"/* After the call to ap_process_request, the
             * request pool will have been deleted.  We set
             * r=NULL here to ensure that any dereference
             * of r that might be added later in this function
             * will result in a segfault immediately instead
             * of nondeterministic failures later.
             */",undetermined
9121,httpd,UNKNOWN,/* Go straight to select() to wait for the next request */,undetermined
9122,httpd,UNKNOWN,"/* Send HTTP pong, without Allow header */",undetermined
9123,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
9124,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
9125,httpd,UNKNOWN,/* create per-server config structure */,undetermined
9126,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
9127,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9128,httpd,UNKNOWN,/* register hooks */,undetermined
9129,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9130,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
9131,httpd,UNKNOWN,/* For index_of_response().  Grump. */,undetermined
9132,httpd,UNKNOWN,"/* Generate the human-readable hex representation of an apr_uint64_t
 * (basically a faster version of 'sprintf(""%llx"")')
 */",undetermined
9133,httpd,UNKNOWN,"/*
 * Construct an entity tag (ETag) from resource information.  If it's a real
 * file, build in some of the file characteristics.  If the modification time
 * is newer than (request-time minus 1 second), mark the ETag as weak - it
 * could be modified again in as short an interval.  We rationalize the
 * modification time we're given to keep it from being in the future.
 */",undetermined
9134,httpd,UNKNOWN,"/*
     * If it's a file (or we wouldn't be here) and no ETags
     * should be set for files, return an empty string and
     * note it for the header-sender to ignore.
     */",undetermined
9135,httpd,UNKNOWN,"/*
     * Make an ETag header out of various pieces of information. We use
     * the last-modified date and, if we have a real file, the
     * length and inode number - note that this doesn't have to match
     * the content-length (i.e. includes), it just has to be unique
     * for the file.
     *
     * If the request was made within a second of the last-modified date,
     * we send a weak tag instead of a strong one, since it could
     * be modified again later in the second, and the validation
     * would be incorrect.
     */",undetermined
9136,httpd,UNKNOWN,"/*
         * ETag gets set to [W/]""inode-size-mtime"", modulo any
         * FileETag keywords.
         */",undetermined
9137,httpd,UNKNOWN,"/*
         * Not a file document, so just use the mtime: [W/]""mtime""
         */",undetermined
9138,httpd,UNKNOWN,"/* If we get a blank etag back, don't set the header. */",undetermined
9139,httpd,UNKNOWN,"/* If we have a variant list validator (vlv) due to the
         * response being negotiated, then we create a structured
         * entity tag which merges the variant etag with the variant
         * list validator (vlv).  This merging makes revalidation
         * somewhat safer, ensures that caches which can deal with
         * Vary will (eventually) be updated if the set of variants is
         * changed, and is also a protocol requirement for transparent
         * content negotiation.
         */",undetermined
9140,httpd,UNKNOWN,"/* if the variant list validator is weak, we make the whole
         * structured etag weak.  If we would not, then clients could
         * have problems merging range responses if we have different
         * variants with the same non-globally-unique strong etag.
         */",undetermined
9141,httpd,UNKNOWN,"/* If we get a blank etag back, don't append vlv and stop now. */",undetermined
9142,httpd,UNKNOWN,/* merge variant_etag and vlv into a structured etag */,undetermined
9143,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9144,httpd,UNKNOWN,"/*
 * http_filter.c --- HTTP routines which either filters or deal with filters.
 */",undetermined
9145,httpd,UNKNOWN,/* for sscanf */,undetermined
9146,httpd,UNKNOWN,"/* For errors detected in basic auth common
                                 * support code... */",undetermined
9147,httpd,UNKNOWN,/* For apr_date_parse_http and APR_DATE_BAD */,undetermined
9148,httpd,UNKNOWN,/* bail out if some error in the HTTP input filter happens */,undetermined
9149,httpd,UNKNOWN,"/* If chunked encoding / content-length are corrupt, we may treat parts
     * of this request's body as the next one's headers.
     * To be safe, disable keep-alive.
     */",undetermined
9150,httpd,UNKNOWN,"/*
     * As the brigade b should have been requested in mode AP_MODE_GETLINE
     * all buckets in this brigade are already some type of memory
     * buckets (due to the needed scanning for LF in mode AP_MODE_GETLINE)
     * or META buckets.
     */",undetermined
9151,httpd,UNKNOWN,/* Sanity check. Should never happen. See above. */,undetermined
9152,httpd,UNKNOWN,"/*
     * As all buckets are already some type of memory buckets or META buckets
     * (see above), we only need to check the last byte in the last data bucket.
     */",undetermined
9153,httpd,UNKNOWN,/* we got the data we want */,undetermined
9154,httpd,UNKNOWN,"/* If we got a zero-length data bucket, we try the next one */",undetermined
9155,httpd,UNKNOWN,/* We had no data in this brigade */,undetermined
9156,httpd,UNKNOWN,/* Line is complete. So reset ctx for next round. */,undetermined
9157,httpd,UNKNOWN,/* Saveguard ourselves against underflows */,undetermined
9158,httpd,UNKNOWN,"/*
     * Check if there is space left in ctx->chunk_ln. If not, then either
     * the chunk size is insane or we have chunk-extensions. Ignore both
     * by discarding the remaining part of the line via
     * get_remaining_chunk_line. Only bail out if the line is too long.
     */",undetermined
9159,httpd,UNKNOWN,"/*
         * Check if we really got a full line. If yes the
         * last char in the just read buffer must be LF.
         * If not advance the buffer and return APR_EAGAIN.
         * We do not start processing until we have the
         * full line.
         */",undetermined
9160,httpd,UNKNOWN,/* Check if the remaining data in the brigade has the LF */,undetermined
9161,httpd,UNKNOWN,/* Line is complete. So reset ctx->pos for next round. */,undetermined
9162,httpd,UNKNOWN,"/* This is the HTTP_INPUT filter for HTTP requests and responses from
 * proxied servers (mod_proxy).  It handles chunked and content-length
 * bodies.  This can only be inserted/used after the headers
 * are successfully parsed.
 */",undetermined
9163,httpd,UNKNOWN,/* just get out of the way of things we don't want. */,undetermined
9164,httpd,UNKNOWN,"/* LimitRequestBody does not apply to proxied responses.
         * Consider implementing this check in its own filter.
         * Would adding a directive to limit the size of proxied
         * responses be useful?
         */",undetermined
9165,httpd,UNKNOWN,"/* test lenp, because it gives another case we can handle */",undetermined
9166,httpd,UNKNOWN,"/* Something that isn't in HTTP, unless some future
                 * edition defines new transfer encodings, is unsupported.
                 */",undetermined
9167,httpd,UNKNOWN,"/* Protects against over/underflow, non-digit chars in the
             * string (excluding leading space) (the endstr checks)
             * and a negative number. */",undetermined
9168,httpd,UNKNOWN,"/* If we have a limit in effect and we know the C-L ahead of
             * time, stop it here if it is invalid.
             */",undetermined
9169,httpd,UNKNOWN,"/* If we don't have a request entity indicated by the headers, EOS.
         * (BODY_NONE is a valid intermediate state due to trailers,
         *  but it isn't a valid starting state.)
         *
         * RFC 2616 Section 4.4 note 5 states that connection-close
         * is invalid for a request entity - request bodies must be
         * denoted by C-L or T-E: chunked.
         *
         * Note that since the proxy uses this filter to handle the
         * proxied *response*, proxy responses MUST be exempt.
         */",undetermined
9170,httpd,UNKNOWN,"/* Since we're about to read data, send 100-Continue if needed.
         * Only valid on chunked and C-L bodies where the C-L is > 0. */",undetermined
9171,httpd,UNKNOWN,"/* if we send an interim response, we're no longer
                 * in a state of expecting one.
                 */",undetermined
9172,httpd,UNKNOWN,/* We can't read the chunk until after sending 100 if required. */,undetermined
9173,httpd,UNKNOWN,/* for timeout */,undetermined
9174,httpd,UNKNOWN,/* Detect chunksize error (such as overflow) */,undetermined
9175,httpd,UNKNOWN,"/* Reset it in case we have to
                                     * come back here later */",undetermined
9176,httpd,UNKNOWN,/* Handle trailers by calling ap_get_mime_headers again! */,undetermined
9177,httpd,UNKNOWN,/* We need to read the CRLF after the chunk.  */,undetermined
9178,httpd,UNKNOWN,"/* If we get an error, then leave */",undetermined
9179,httpd,UNKNOWN,"/*
                     * We really don't care whats on this line. If it is RFC
                     * compliant it should be only \r\n. If there is more
                     * before we just ignore it as long as we do not get over
                     * the limit for request lines.
                     */",undetermined
9180,httpd,UNKNOWN,/* Read the real chunk line. */,undetermined
9181,httpd,UNKNOWN,/* Test timeout */,undetermined
9182,httpd,UNKNOWN,/* Detect chunksize error (such as overflow) */,undetermined
9183,httpd,UNKNOWN,"/* Reset it in case we have to
                                         * come back here later */",undetermined
9184,httpd,UNKNOWN,/* Handle trailers by calling ap_get_mime_headers again! */,undetermined
9185,httpd,UNKNOWN,/* Ensure that the caller can not go over our boundary point. */,undetermined
9186,httpd,UNKNOWN,/* How many bytes did we just read? */,undetermined
9187,httpd,UNKNOWN,"/* If this happens, we have a bucket of unknown length.  Die because
     * it means our assumptions have changed. */",undetermined
9188,httpd,UNKNOWN,"/* If we have no more bytes remaining on a C-L request,
     * save the callter a roundtrip to discover EOS.
     */",undetermined
9189,httpd,UNKNOWN,/* We have a limit in effect. */,undetermined
9190,httpd,UNKNOWN,"/* FIXME: Note that we might get slightly confused on chunked inputs
         * as we'd need to compensate for the chunk lengths which may not
         * really count.  This seems to be up for interpretation.  */",undetermined
9191,httpd,UNKNOWN,"/**
 * Parse a chunk extension, detect overflow.
 * There are two error cases:
 *  1) If the conversion would require too many bits, a -1 is returned.
 *  2) If the conversion used the correct number of bits, but an overflow
 *     caused only the sign bit to flip, then that negative number is
 *     returned.
 * In general, any negative number can be considered an overflow error.
 */",undetermined
9192,httpd,UNKNOWN,"/*
         * Detect invalid character at beginning. This also works for empty
         * chunk size lines.
         */",undetermined
9193,httpd,UNKNOWN,/* Skip leading zeros */,undetermined
9194,httpd,UNKNOWN,/* overflow */,undetermined
9195,httpd,UNKNOWN,"/* Send a single HTTP header field to the client.  Note that this function
 * is used in calls to table_do(), so their interfaces are co-dependent.
 * In other words, don't change this one without checking table_do in alloc.c.
 * It returns true unless there was a write error of some kind.
 */",undetermined
9196,httpd,UNKNOWN,/* !APR_CHARSET_EBCDIC */,undetermined
9197,httpd,UNKNOWN,"/* This routine is called by apr_table_do and merges all instances of
 * the passed field values into a single array that will be further
 * processed by some later routine.  Originally intended to help split
 * and recombine multiple Vary fields, though it is generic to any field
 * consisting of comma/space-separated tokens.
 */",undetermined
9198,httpd,UNKNOWN,/* Find a non-empty fieldname */,undetermined
9199,httpd,UNKNOWN,"/* Now add it to values if it isn't already represented.
         * Could be replaced by a ap_array_strcasecmp() if we had one.
         */",undetermined
9200,httpd,UNKNOWN,/* if not found */,undetermined
9201,httpd,UNKNOWN,"/*
 * Since some clients choke violently on multiple Vary fields, or
 * Vary fields with duplicate tokens, combine any multiples and remove
 * any duplicates.
 */",undetermined
9202,httpd,UNKNOWN,"/* Extract all Vary fields from the headers_out, separate each into
     * its comma-separated fieldname values, and then add them to varies
     * if not already present in the array.
     */",undetermined
9203,httpd,UNKNOWN,"/* If we found any, replace old Vary fields with unique-ified value */",undetermined
9204,httpd,UNKNOWN,"/* Send a request's HTTP response headers to the client.
 */",undetermined
9205,httpd,UNKNOWN,"/* For each field, generate
     *    name "": "" value CRLF
     */",undetermined
9206,httpd,UNKNOWN,"/* Confirm that the status line is well-formed and matches r->status.
 * If they don't match, a filter may have negated the status line set by a
 * handler.
 * Zap r->status_line if bad.
 */",undetermined
9207,httpd,UNKNOWN,"/* Since we passed the above check, we know that length three
         * is equivalent to only a 3 digit numeric http status.
         * RFC2616 mandates a trailing space, let's add it.
         */",undetermined
9208,httpd,UNKNOWN,"/*
 * Determine the protocol to use for the response. Potentially downgrade
 * to HTTP/1.0 in some situations and/or turn off keepalives.
 *
 * also prepare r->status_line.
 */",undetermined
9209,httpd,UNKNOWN,/* no such thing as a response protocol */,undetermined
9210,httpd,UNKNOWN,/* Note that we must downgrade before checking for force responses. */,undetermined
9211,httpd,UNKNOWN,"/* kludge around broken browsers when indicated by force-response-1.0
     */",undetermined
9212,httpd,UNKNOWN,"/* fill ""bb"" with a barebones/initial HTTP response header */",undetermined
9213,httpd,UNKNOWN,/* there are no headers to send */,undetermined
9214,httpd,UNKNOWN,/* Output the HTTP/1.x Status-Line and the Date and Server fields */,undetermined
9215,httpd,UNKNOWN,"/*
     * keep the set-by-proxy server and date headers, otherwise
     * generate a new server header / date header
     */",undetermined
9216,httpd,UNKNOWN,"/*
             * proxy_date needs to be const. So use date for the creation of
             * our own Date header and pass it over to proxy_date later to
             * avoid a compiler warning.
             */",undetermined
9217,httpd,UNKNOWN,"/*
         * Date and Server are less interesting, use TRACE5 for them while
         * using TRACE4 for the other headers.
         */",undetermined
9218,httpd,UNKNOWN,/* unset so we don't send them again */,undetermined
9219,httpd,UNKNOWN,/* Avoid bogosity */,undetermined
9220,httpd,UNKNOWN,/* init to avoid gcc -Wall warning */,undetermined
9221,httpd,UNKNOWN,/* Get the original request */,undetermined
9222,httpd,UNKNOWN,/* XXX: should be = REQUEST_CHUNKED_PASS */,undetermined
9223,httpd,UNKNOWN,/* always 32 extra bytes to catch chunk header exceptions */,undetermined
9224,httpd,UNKNOWN,/* Add an extra 8192 for chunk headers */,undetermined
9225,httpd,UNKNOWN,/* only while we have enough for a chunked header */,undetermined
9226,httpd,UNKNOWN,/* discard_rest_of_request_body into our buffer */,undetermined
9227,httpd,UNKNOWN,"/* Now we recreate the request, and echo it back */",undetermined
9228,httpd,UNKNOWN,"/* If configured to accept a body, echo the body */",undetermined
9229,httpd,UNKNOWN,"/*
         * If we see an EOC bucket it is a signal that we should get out
         * of the way doing nothing.
         */",undetermined
9230,httpd,UNKNOWN,"/*
     * Now that we are ready to send a response, we need to combine the two
     * header field tables into a single table.  If we don't do this, our
     * later attempts to set or unset a given fieldname might be bypassed.
     */",undetermined
9231,httpd,UNKNOWN,"/*
     * Remove the 'Vary' header field if the client can't handle it.
     * Since this will have nasty effects on HTTP/1.1 caches, force
     * the response into HTTP/1.0 mode.
     *
     * Note: the force-response-1.0 should come before the call to
     *       basic_http_header_check()
     */",undetermined
9232,httpd,UNKNOWN,"/*
     * Now remove any ETag response header field if earlier processing
     * says so (such as a 'FileETag None' directive).
     */",undetermined
9233,httpd,UNKNOWN,/* determine the protocol and whether we should use keepalives. */,undetermined
9234,httpd,UNKNOWN,"/*
     * Control cachability for non-cachable responses if not already set by
     * some other part of the server configuration.
     */",undetermined
9235,httpd,UNKNOWN,"/* This is a hack, but I can't find anyway around it.  The idea is that
     * we don't want to send out 0 Content-Lengths if it is a head request.
     * This happens when modules try to outsmart the server, and return
     * if they see a HEAD request.  Apache 1.3 handlers were supposed to
     * just return in that situation, and the core handled the HEAD.  In
     * 2.0, if a handler returns, then the core sends an EOS bucket down
     * the filter stack, and the content-length filter computes a C-L of
     * zero and that gets put in the headers, and we end up sending a
     * zero C-L to the client.  We can't just remove the C-L filter,
     * because well behaved 2.0 handlers will send their data down the stack,
     * and we will compute a real C-L for the head request. RBB
     */",undetermined
9236,httpd,UNKNOWN,/* Whatever follows is real body stuff... */,undetermined
9237,httpd,UNKNOWN,"/* We can't add this filter until we have already sent the headers.
         * If we add it before this point, then the headers will be chunked
         * as well, and that is just wrong.
         */",undetermined
9238,httpd,UNKNOWN,"/* Don't remove this filter until after we have added the CHUNK filter.
     * Otherwise, f->next won't be the CHUNK filter and thus the first
     * brigade won't be chunked properly.
     */",undetermined
9239,httpd,UNKNOWN,"/* In HTTP/1.1, any method can have a body.  However, most GET handlers
 * wouldn't know what to do with a request body if they received one.
 * This helper routine tests for and reads any message body in the request,
 * simply discarding whatever it receives.  We need to do this because
 * failing to read the request body would cause it to be interpreted
 * as the next request on a persistent connection.
 *
 * Since we return an error status if the request is malformed, this
 * routine should be called at the beginning of a no-body handler, e.g.,
 *
 *    if ((retval = ap_discard_request_body(r)) != OK) {
 *        return retval;
 *    }
 */",undetermined
9240,httpd,UNKNOWN,"/* Sometimes we'll get in a state where the input handling has
     * detected an error where we want to drop the connection, so if
     * that's the case, don't read the data as that is what we're trying
     * to avoid.
     *
     * This function is also a no-op on a subrequest.
     */",undetermined
9241,httpd,UNKNOWN,"/* FIXME: If we ever have a mapping from filters (apr_status_t)
             * to HTTP error codes, this would be a good place for them.
             *
             * If we received the special case AP_FILTER_ERROR, it means
             * that the filters have already handled this error.
             * Otherwise, we should assume we have a bad request.
             */",undetermined
9242,httpd,UNKNOWN,/* These are metadata buckets. */,undetermined
9243,httpd,UNKNOWN,"/* We MUST read because in case we have an unknown-length
             * bucket or one that morphs, we want to exhaust it.
             */",undetermined
9244,httpd,UNKNOWN,"/* Here we deal with getting the request message body from the client.
 * Whether or not the request contains a body is signaled by the presence
 * of a non-zero Content-Length or by a Transfer-Encoding: chunked.
 *
 * Note that this is more complicated than it was in Apache 1.1 and prior
 * versions, because chunked support means that the module does less.
 *
 * The proper procedure is this:
 *
 * 1. Call ap_setup_client_block() near the beginning of the request
 *    handler. This will set up all the necessary properties, and will
 *    return either OK, or an error code. If the latter, the module should
 *    return that error code. The second parameter selects the policy to
 *    apply if the request message indicates a body, and how a chunked
 *    transfer-coding should be interpreted. Choose one of
 *
 *    REQUEST_NO_BODY          Send 413 error if message has any body
 *    REQUEST_CHUNKED_ERROR    Send 411 error if body without Content-Length
 *    REQUEST_CHUNKED_DECHUNK  If chunked, remove the chunks for me.
 *    REQUEST_CHUNKED_PASS     If chunked, pass the chunk headers with body.
 *
 *    In order to use the last two options, the caller MUST provide a buffer
 *    large enough to hold a chunk-size line, including any extensions.
 *
 * 2. When you are ready to read a body (if any), call ap_should_client_block().
 *    This will tell the module whether or not to read input. If it is 0,
 *    the module should assume that there is no message body to read.
 *
 * 3. Finally, call ap_get_client_block in a loop. Pass it a buffer and its size.
 *    It will put data into the buffer (not necessarily a full buffer), and
 *    return the length of the input block. When it is done reading, it will
 *    return 0 if EOF, or -1 if there was an error.
 *    If an error occurs on input, we force an end to keepalive.
 *
 *    This step also sends a 100 Continue response to HTTP/1.1 clients if appropriate.
 */",undetermined
9245,httpd,UNKNOWN,/* Make sure ap_getline() didn't leave any droppings. */,undetermined
9246,httpd,UNKNOWN,/* First check if we have already read the request body */,undetermined
9247,httpd,UNKNOWN,"/* get_client_block is called in a loop to get the request message body.
 * This is quite simple if the client includes a content-length
 * (the normal case), but gets messy if the body is chunked. Note that
 * r->remaining is used to maintain state across calls and that
 * r->read_length is the total number of bytes given to the caller
 * across all invocations.  It is messy because we have to be careful not
 * to read past the data provided by the client, since these reads block.
 * Returns 0 on End-of-body, -1 on error or premature chunk end.
 *
 */",undetermined
9248,httpd,UNKNOWN,"/* We lose the failure code here.  This is why ap_get_client_block should
     * not be used.
     */",undetermined
9249,httpd,UNKNOWN,"/* if we actually fail here, we want to just return and
         * stop trying to read data from the client.
         */",undetermined
9250,httpd,UNKNOWN,"/* If this fails, it means that a filter is written incorrectly and that
     * it needs to learn how to properly handle APR_BLOCK_READ requests by
     * returning data when requested.
     */",undetermined
9251,httpd,UNKNOWN,"/* Check to see if EOS in the brigade.
     *
     * If so, we have to leave a nugget for the *next* ap_get_client_block
     * call to return 0.
     */",undetermined
9252,httpd,UNKNOWN,/* XXX yank me? */,undetermined
9253,httpd,UNKNOWN,/* Context struct for ap_http_outerror_filter */,undetermined
9254,httpd,UNKNOWN,/* Filter to handle any error buckets on output */,undetermined
9255,httpd,UNKNOWN,/* Create context if none is present */,undetermined
9256,httpd,UNKNOWN,"/*
             * Start of error handling state tree. Just one condition
             * right now :)
             */",undetermined
9257,httpd,UNKNOWN,/* stream aborted and we have not ended it yet */,undetermined
9258,httpd,UNKNOWN,/* Detect EOC buckets and memorize this in the context. */,undetermined
9259,httpd,UNKNOWN,"/*
     * Remove all data buckets that are in a brigade after an EOC bucket
     * was seen, as an EOC bucket tells us that no (further) resource
     * and protocol data should go out to the client. OTOH meta buckets
     * are still welcome as they might trigger needed actions down in
     * the chain (e.g. in network filters like SSL).
     * Remark 1: It is needed to dump ALL data buckets in the brigade
     *           since an filter in between might have inserted data
     *           buckets BEFORE the EOC bucket sent by the original
     *           sender and we do NOT want this data to be sent.
     * Remark 2: Dumping all data buckets here does not necessarily mean
     *           that no further data is send to the client as:
     *           1. Network filters like SSL can still be triggered via
     *              meta buckets to talk with the client e.g. for a
     *              clean shutdown.
     *           2. There could be still data that was buffered before
     *              down in the chain that gets flushed by a FLUSH or an
     *              EOS bucket.
     */",undetermined
9260,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9261,httpd,UNKNOWN,"/*
 * http_protocol.c --- routines which directly communicate with the client.
 *
 * Code originally by Rob McCool; much redone by Robert S. Thau
 * and the Apache Software Foundation.
 */",undetermined
9262,httpd,UNKNOWN,/* for sscanf */,undetermined
9263,httpd,UNKNOWN,"/* For errors detected in basic auth common
                                 * support code... */",undetermined
9264,httpd,UNKNOWN,/* For apr_date_parse_http and APR_DATE_BAD */,undetermined
9265,httpd,UNKNOWN,"/* New Apache routine to map status codes into array indicies
 *  e.g.  100 -> 0,  101 -> 1,  200 -> 2 ...
 * The number of status lines must equal the value of
 * RESPONSE_CODES (httpd.h) and must be listed in order.
 * No gaps are allowed between X00 and the largest Xnn
 * for any X (see ap_index_of_response).
 * When adding a new code here, add a define to httpd.h
 * as well.
 */",undetermined
9266,httpd,UNKNOWN,/* 209 */,undetermined
9267,httpd,UNKNOWN,/* 210 */,undetermined
9268,httpd,UNKNOWN,/* 211 */,undetermined
9269,httpd,UNKNOWN,/* 212 */,undetermined
9270,httpd,UNKNOWN,/* 213 */,undetermined
9271,httpd,UNKNOWN,/* 214 */,undetermined
9272,httpd,UNKNOWN,/* 215 */,undetermined
9273,httpd,UNKNOWN,/* 216 */,undetermined
9274,httpd,UNKNOWN,/* 217 */,undetermined
9275,httpd,UNKNOWN,/* 218 */,undetermined
9276,httpd,UNKNOWN,/* 219 */,undetermined
9277,httpd,UNKNOWN,/* 220 */,undetermined
9278,httpd,UNKNOWN,/* 221 */,undetermined
9279,httpd,UNKNOWN,/* 222 */,undetermined
9280,httpd,UNKNOWN,/* 223 */,undetermined
9281,httpd,UNKNOWN,/* 224 */,undetermined
9282,httpd,UNKNOWN,/* 225 */,undetermined
9283,httpd,UNKNOWN,/* 306 */,undetermined
9284,httpd,UNKNOWN,/* 418 */,undetermined
9285,httpd,UNKNOWN,/* 419 */,undetermined
9286,httpd,UNKNOWN,/* 420 */,undetermined
9287,httpd,UNKNOWN,/* 421 */,undetermined
9288,httpd,UNKNOWN,/* 425 */,undetermined
9289,httpd,UNKNOWN,/* 427 */,undetermined
9290,httpd,UNKNOWN,/* 430 */,undetermined
9291,httpd,UNKNOWN,/* 509 */,undetermined
9292,httpd,UNKNOWN,"/* The index of the first bit field that is used to index into a limit
 * bitmask. M_INVALID + 1 to METHOD_NUMBER_LAST.
 */",undetermined
9293,httpd,UNKNOWN,"/* The max method number. Method numbers are used to shift bitmasks,
 * so this cannot exceed 63, and all bits high is equal to -1, which is a
 * special flag, so the last bit used has index 62.
 */",undetermined
9294,httpd,UNKNOWN,"/* The following convoluted conditional determines whether or not
     * the current connection should remain persistent after this response
     * (a.k.a. HTTP Keep-Alive) and whether or not the output message
     * body should use the HTTP/1.1 chunked transfer-coding.  In English,
     *
     *   IF  we have not marked this connection as errored;
     *   and the client isn't expecting 100-continue (PR47087 - more
     *       input here could be the client continuing when we're
     *       closing the request).
     *   and the response body has a defined length due to the status code
     *       being 304 or 204, the request method being HEAD, already
     *       having defined Content-Length or Transfer-Encoding: chunked, or
     *       the request version being HTTP/1.1 and thus capable of being set
     *       as chunked [we know the (r->chunked = 1) side-effect is ugly];
     *   and the server configuration enables keep-alive;
     *   and the server configuration has a reasonable inter-request timeout;
     *   and there is no maximum # requests or the max hasn't been reached;
     *   and the response status does not require a close;
     *   and the response generator has not already indicated close;
     *   and the client did not request non-persistence (Connection: close);
     *   and    we haven't been configured to ignore the buggy twit
     *       or they're a buggy twit coming through a HTTP/1.1 proxy
     *   and    the client is requesting an HTTP/1.0-style keep-alive
     *       or the client claims to be HTTP/1.1 compliant (perhaps a proxy);
     *   and this MPM process is not already exiting
     *   THEN we can be persistent, which requires more headers be output.
     *
     * Note that the condition evaluation order is extremely important.
     */",undetermined
9295,httpd,UNKNOWN,"/* THIS CODE IS CORRECT, see above. */",undetermined
9296,httpd,UNKNOWN,"/* If they sent a Keep-Alive token, send one back */",undetermined
9297,httpd,UNKNOWN,"/* Otherwise, we need to indicate that we will be closing this
     * connection immediately after the current response.
     *
     * We only really need to send ""close"" to HTTP/1.1 clients, but we
     * always send it anyway, because a broken proxy may identify itself
     * as HTTP/1.0, but pass our request along with our HTTP/1.1 tag
     * to a HTTP/1.1 client. Better safe than sorry.
     */",undetermined
9298,httpd,UNKNOWN,"/*
     * If we had previously been a keepalive connection and this
     * is the last one, then bump up the number of keepalives
     * we've had
     */",undetermined
9299,httpd,UNKNOWN,"/* A server MUST use the strong comparison function (see section 13.3.3)
     * to compare the entity tags in If-Match.
     */",undetermined
9300,httpd,UNKNOWN,"/* All of our comparisons must be in seconds, because that's the
         * highest time resolution the HTTP specification allows.
         */",undetermined
9301,httpd,UNKNOWN,/* weak matches not allowed with Range requests */,undetermined
9302,httpd,UNKNOWN,"/* See section 13.3.3 for rules on how to determine if two entities tags
         * match. The weak comparison function can only be used with GET or HEAD
         * requests.
         */",undetermined
9303,httpd,UNKNOWN,"/* All of our comparisons must be in seconds, because that's the
         * highest time resolution the HTTP specification allows.
         */",undetermined
9304,httpd,UNKNOWN,/* weak matches not allowed with Range requests */,undetermined
9305,httpd,UNKNOWN,"/* All of our comparisons must be in seconds, because that's the
             * highest time resolution the HTTP specification allows.
             */",undetermined
9306,httpd,UNKNOWN,/* weak matches not allowed with Range requests */,undetermined
9307,httpd,UNKNOWN,/* unset by default */,undetermined
9308,httpd,UNKNOWN,"/* Check for conditional requests --- note that we only want to do
     * this if we are successful so far and we are not processing a
     * subrequest or an ErrorDocument.
     *
     * The order of the checks is important, since ETag checks are supposed
     * to be more accurate than checks relative to the modification time.
     * However, not all documents are guaranteed to *have* ETags, and some
     * might have Last-Modified values w/o ETags, so this gets a little
     * complicated.
     */",undetermined
9309,httpd,UNKNOWN,"/* If an If-Match request-header field was given
     * AND the field value is not ""*"" (meaning match anything)
     * AND if our strong ETag does not match any entity tag in that field,
     *     respond with a status of 412 (Precondition Failed).
     */",undetermined
9310,httpd,UNKNOWN,"/* Else if a valid If-Unmodified-Since request-header field was given
     * AND the requested resource has been modified since the time
     * specified in this field, then the server MUST
     *     respond with a status of 412 (Precondition Failed).
     */",undetermined
9311,httpd,UNKNOWN,"/* If an If-None-Match request-header field was given
     * AND the field value is ""*"" (meaning match anything)
     *     OR our ETag matches any of the entity tags in that field, fail.
     *
     * If the request method was GET or HEAD, failure means the server
     *    SHOULD respond with a 304 (Not Modified) response.
     * For all other request methods, failure means the server MUST
     *    respond with a status of 412 (Precondition Failed).
     *
     * GET or HEAD allow weak etag comparison, all other methods require
     * strong comparison.  We can only use weak if it's not a range request.
     */",undetermined
9312,httpd,UNKNOWN,"/* If a valid If-Modified-Since request-header field was given
     * AND it is a GET or HEAD request
     * AND the requested resource has not been modified since the time
     * specified in this field, then the server MUST
     *    respond with a status of 304 (Not Modified).
     * A date later than the server's current request time is invalid.
     */",undetermined
9313,httpd,UNKNOWN,"/* If an If-Range and an Range header is present, we must return
     * 200 OK. The byterange filter will convert it to a range response.
     */",undetermined
9314,httpd,UNKNOWN,"/**
 * Singleton registry of additional methods. This maps new method names
 * such as ""MYGET"" to methnums, which are int offsets into bitmasks.
 *
 * This follows the same technique as standard M_GET, M_POST, etc. These
 * are dynamically assigned when modules are loaded and <Limit GET MYGET>
 * directives are processed.
 */",undetermined
9315,httpd,UNKNOWN,/* internal function to register one method/number pair */,undetermined
9316,httpd,UNKNOWN,"/* This internal function is used to clear the method registry
 * and reset the cur_method_number counter.
 */",undetermined
9317,httpd,UNKNOWN,"/* put all the standard methods into the registry hash to ease the
       mapping operations between name and number */",undetermined
9318,httpd,UNKNOWN,"/* Check if the method was previously registered.  If it was
     * return the associated method number.
     */",undetermined
9319,httpd,UNKNOWN,"/* The method registry  has run out of dynamically
         * assignable method numbers. Log this and return M_INVALID.
         */",undetermined
9320,httpd,UNKNOWN,"/* Note: the following code was generated by the ""shilka"" tool from
       the ""cocom"" parsing/compilation toolkit. It is an optimized lookup
       based on analysis of the input keywords. Postprocessing was done
       on the shilka output, but the basic structure and analysis is
       from there. Should new HTTP methods be added, then manual insertion
       into this code is fine, or simply re-running the shilka tool on
       the appropriate input. */",undetermined
9321,httpd,UNKNOWN,"/* Note: it is also quite reasonable to just use our method_registry,
       but I'm assuming (probably incorrectly) we want more speed here
       (based on the optimizations the previous code was doing). */",undetermined
9322,httpd,UNKNOWN,/* NOTREACHED */,undetermined
9323,httpd,UNKNOWN,"/* Get the method number associated with the given string, assumed to
 * contain an HTTP method.  Returns M_INVALID if not recognized.
 *
 * This is the first step toward placing method names in a configurable
 * list.  Hopefully it (and other routines) can eventually be moved to
 * something like a mod_http_methods.c, complete with config stuff.
 */",undetermined
9324,httpd,UNKNOWN,/* check if the method has been dynamically registered */,undetermined
9325,httpd,UNKNOWN,"/*
 * Turn a known method number into a name.
 */",undetermined
9326,httpd,UNKNOWN,"/* scan through the hash table, looking for a value that matches
       the provided method number. */",undetermined
9327,httpd,UNKNOWN,/* it wasn't found in the hash */,undetermined
9328,httpd,UNKNOWN,"/* The index is found by its offset from the x00 code of each level.
 * Although this is fast, it will need to be replaced if some nutcase
 * decides to define a high-numbered code before the lower numbers.
 * If that sad event occurs, replace the code below with a linear search
 * from status_lines[shortcut[i]] to status_lines[shortcut[i+1]-1];
 * or use NULL to fill the gaps.
 */",undetermined
9329,httpd,UNKNOWN,/* Below 100 is illegal for HTTP status */,undetermined
9330,httpd,UNKNOWN,/* status unknown (falls in gap) */,undetermined
9331,httpd,UNKNOWN,/* 600 or above is also illegal */,undetermined
9332,httpd,UNKNOWN,"/* Build the Allow field-value from the request handler method mask.
 */",undetermined
9333,httpd,UNKNOWN,/* For TRACE below */,undetermined
9334,httpd,UNKNOWN,/* the M_GET method actually refers to two methods */,undetermined
9335,httpd,UNKNOWN,/* TRACE is tested on a per-server basis */,undetermined
9336,httpd,UNKNOWN,"/* ### this is rather annoying. we should enforce registration of
       ### these methods */",undetermined
9337,httpd,UNKNOWN,"/* the request finalization will send an EOS, which will flush all
     * the headers out (including the Allow header)
     */",undetermined
9338,httpd,UNKNOWN,"/* construct and return the default error message for a given
 * HTTP defined error code
 */",undetermined
9339,httpd,UNKNOWN,/* HTTP_INTERNAL_SERVER_ERROR */,undetermined
9340,httpd,UNKNOWN,"/*
         * This comparison to expose error-notes could be modified to
         * use a configuration directive and export based on that
         * directive.  For now ""*"" is used to designate an error-notes
         * that is totally safe for any user to see (ie lacks paths,
         * database passwords, etc.)
         */",undetermined
9341,httpd,UNKNOWN,"/*
         * It would be nice to give the user the information they need to
         * fix the problem directly since many users don't have access to
         * the error_log (think University sites) even though they can easily
         * get this error by misconfiguring an htaccess file.  However, the
         * e error notes tend to include the real file pathname in this case,
         * which some people consider to be a breach of privacy.  Until we
         * can figure out a way to remove the pathname, leave this commented.
         *
         * if ((error_notes = apr_table_get(r->notes,
         *                                  ""error-notes"")) != NULL) {
         *     return(apr_pstrcat(p, error_notes, ""<p />\n"", NULL);
         * }
         * else {
         *     return """";
         * }
         */",undetermined
9342,httpd,UNKNOWN,"/* We should have named this send_canned_response, since it is used for any
 * response that can be generated by the server from the request record.
 * This includes all 204 (no content), 3xx (redirect), 4xx (client error),
 * and 5xx (server error) messages that have not been redirected to another
 * handler via the ErrorDocument feature.
 */",undetermined
9343,httpd,UNKNOWN,"/* At this point, we are starting the response over, so we have to reset
     * this value.
     */",undetermined
9344,httpd,UNKNOWN,"/* and we need to get rid of any RESOURCE filters that might be lurking
     * around, thinking they are in the middle of the original request
     */",undetermined
9345,httpd,UNKNOWN,"/*
     * It's possible that the Location field might be in r->err_headers_out
     * instead of r->headers_out; use the latter if possible, else the
     * former.
     */",undetermined
9346,httpd,UNKNOWN,"/* We need to special-case the handling of 204 and 304 responses,
     * since they have specific HTTP requirements and do not include a
     * message body.  Note that being assbackwards here is not an option.
     */",undetermined
9347,httpd,UNKNOWN,"/* For all HTTP/1.x responses for which we generate the message,
         * we need to avoid inheriting the ""normal status"" header fields
         * that may have been set by the request handler before the
         * error or redirect, except for Location on external redirects.
         */",undetermined
9348,httpd,UNKNOWN,"/* avoids coredump when printing, below */",undetermined
9349,httpd,UNKNOWN,"/* avoid adding default
                                                 * charset later
                                                 */",undetermined
9350,httpd,UNKNOWN,"/*
         * We have a custom response output. This should only be
         * a text-string to write back. But if the ErrorDocument
         * was a local redirect and the requested resource failed
         * for any reason, the custom_response will still hold the
         * redirect URL. We don't really want to output this URL
         * as a text message, so first check the custom response
         * string to ensure that it is a text-string (using the
         * same test used in ap_die(), i.e. does it start with a "").
         *
         * If it's not a text string, we've got a recursive error or
         * an external redirect.  If it's a recursive error, ap_die passes
         * us the second error code so we can write both, and has already
         * backed up to the original error.  If it's an external redirect,
         * it hasn't happened yet; we may never know if it fails.
         */",undetermined
9351,httpd,UNKNOWN,"/* Accept a status_line set by a module, but only if it begins
         * with the correct 3 digit status code
         */",undetermined
9352,httpd,UNKNOWN,"/* Since we passed the above check, we know that length three
                 * is equivalent to only a 3 digit numeric http status.
                 * RFC2616 mandates a trailing space, let's add it.
                 * If we have an empty reason phrase, we also add ""Unknown Reason"".
                 */",undetermined
9353,httpd,UNKNOWN,/* folks decided they didn't want the error code in the H1 text */,undetermined
9354,httpd,UNKNOWN,"/* can't count on a charset filter being in place here,
         * so do ebcdic->ascii translation explicitly (if needed)
         */",undetermined
9355,httpd,UNKNOWN,"/*
 * Create a new method list with the specified number of preallocated
 * extension slots.
 */",undetermined
9356,httpd,UNKNOWN,"/*
 * Make a copy of a method list (primarily for subrequests that may
 * subsequently change it; don't want them changing the parent's, too!).
 */",undetermined
9357,httpd,UNKNOWN,"/*
 * Return true if the specified HTTP method is in the provided
 * method list.
 */",undetermined
9358,httpd,UNKNOWN,"/*
     * If it's one of our known methods, use the shortcut and check the
     * bitmask.
     */",undetermined
9359,httpd,UNKNOWN,"/*
     * Otherwise, see if the method name is in the array or string names
     */",undetermined
9360,httpd,UNKNOWN,"/*
 * Add the specified method to a method list (if it isn't already there).
 */",undetermined
9361,httpd,UNKNOWN,"/*
     * If it's one of our known methods, use the shortcut and use the
     * bitmask.
     */",undetermined
9362,httpd,UNKNOWN,"/*
     * Otherwise, see if the method name is in the array of string names.
     */",undetermined
9363,httpd,UNKNOWN,"/*
 * Remove the specified method from a method list.
 */",undetermined
9364,httpd,UNKNOWN,"/*
     * If it's a known methods, either builtin or registered
     * by a module, use the bitmask.
     */",undetermined
9365,httpd,UNKNOWN,"/*
     * Otherwise, see if the method name is in the array of string names.
     */",undetermined
9366,httpd,UNKNOWN,"/*
 * Reset a method list to be completely empty.
 */",undetermined
9367,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9368,httpd,UNKNOWN,"/*
 * http_request.c: functions to get and process requests
 *
 * Rob McCool 3/21/93
 *
 * Thoroughly revamped by rst for Apache.  NB this file reads
 * best from the bottom up.
 *
 */",undetermined
9369,httpd,UNKNOWN,"/*****************************************************************
 *
 * Mainline request processing...
 */",undetermined
9370,httpd,UNKNOWN,"/* XXX A cleaner and faster way to do this might be to pass the request_rec
 * down the filter chain as a parameter.  It would need to change for
 * subrequest vs. main request filters; perhaps the subrequest filter could
 * make the switch.
 */",undetermined
9371,httpd,UNKNOWN,"/*
         * Check if we still have the ap_http_header_filter in place. If
         * this is the case we should not ignore AP_FILTER_ERROR here because
         * it means that we have not sent any response at all and never
         * will. This is bad. Sent an internal server error instead.
         */",undetermined
9372,httpd,UNKNOWN,"/*
         * If next != NULL then we left the while above because of
         * next->frec == ap_http_header_filter
         */",undetermined
9373,httpd,UNKNOWN,"/*
     * The following takes care of Apache redirects to custom response URLs
     * Note that if we are already dealing with the response to some other
     * error condition, we just report on the original error, and give up on
     * any attempt to handle the other thing ""intelligently""...
     */",undetermined
9374,httpd,UNKNOWN,/* Get back to original error */,undetermined
9375,httpd,UNKNOWN,"/* The recursive error was caused by an ErrorDocument specifying
             * an internal redirect to a bad URI.  ap_internal_redirect has
             * changed the filter chains to point to the ErrorDocument's
             * request_rec.  Back out those changes so we can safely use the
             * original failing request_rec to send the canned error message.
             *
             * ap_send_error_response gets rid of existing resource filters
             * on the output side, so we can skip those.
             */",undetermined
9376,httpd,UNKNOWN,/* Do NOT retry the custom thing! */,undetermined
9377,httpd,UNKNOWN,"/*
     * This test is done here so that none of the auth modules needs to know
     * about proxy authentication.  They treat it like normal auth, and then
     * we tweak the status.
     */",undetermined
9378,httpd,UNKNOWN,"/* If we don't want to keep the connection, make sure we mark that the
     * connection is not eligible for keepalive.  If we want to keep the
     * connection, be sure that the request body (if any) has been read.
     */",undetermined
9379,httpd,UNKNOWN,"/*
     * Two types of custom redirects --- plain text, and URLs. Plain text has
     * a leading '""', so the URL code, here, is triggered on its absence
     */",undetermined
9380,httpd,UNKNOWN,"/*
             * The URL isn't local, so lets drop through the rest of this
             * apache code, and continue with the usual REDIRECT handler.
             * But note that the client will ultimately see the wrong
             * status...
             */",undetermined
9381,httpd,UNKNOWN,"/* Do NOT send HTTP_NOT_MODIFIED for
                                         * error documents! */",undetermined
9382,httpd,UNKNOWN,"/*
             * This redirect needs to be a GET no matter what the original
             * method was.
             */",undetermined
9383,httpd,UNKNOWN,"/*
             * Provide a special method for modules to communicate
             * more informative (than the plain canned) messages to us.
             * Propagate them to ErrorDocuments via the ERROR_NOTES variable:
             */",undetermined
9384,httpd,UNKNOWN,"/*
             * Dumb user has given us a bad url to redirect to --- fake up
             * dying with a recursive server error...
             */",undetermined
9385,httpd,UNKNOWN,"/*
             * Error or empty brigade: There is no data present in the input
             * filter
             */",undetermined
9386,httpd,UNKNOWN,"/* Send an EOR bucket through the output filter chain.  When
     * this bucket is destroyed, the request will be logged and
     * its pool will be freed
     */",undetermined
9387,httpd,UNKNOWN,"/* From here onward, it is no longer safe to reference r
     * or r->pool, because r->pool may have been destroyed
     * already by the EOR bucket's cleanup function.
     */",undetermined
9388,httpd,UNKNOWN,"/* Give quick handlers a shot at serving the request on the fast
     * path, bypassing all of the other Apache hooks.
     *
     * This hook was added to enable serving files out of a URI keyed
     * content cache ( e.g., Mike Abbott's Quick Shortcut Cache,
     * described here: http://oss.sgi.com/projects/apache/mod_qsc.html )
     *
     * It may have other uses as well, such as routing requests directly to
     * content handlers that have the ability to grok HTTP and do their
     * own access checking, etc (e.g. servlet engines).
     *
     * Use this hook with extreme care and only if you know what you are
     * doing.
     */",undetermined
9389,httpd,UNKNOWN,/* Not a look-up request */,undetermined
9390,httpd,UNKNOWN,"/* TODO: Should move these steps into a generic function, so modules
         * working on a suspended request can also call _ENTRY again.
         */",undetermined
9391,httpd,UNKNOWN,"/* e.g., something not in storage like TRACE */",undetermined
9392,httpd,UNKNOWN,"/*
             * Notice a timeout as an error message. This might be
             * valuable for detecting clients with broken network
             * connections or possible DoS attacks.
             *
             * It is still safe to use r / r->pool here as the eor bucket
             * could not have been destroyed in the event of a timeout.
             */",undetermined
9393,httpd,UNKNOWN,"/*
     * A whole lot of this really ought to be shared with http_protocol.c...
     * another missing cleanup.  It's particularly inappropriate to be
     * setting header_only, etc., here.
     */",undetermined
9394,httpd,UNKNOWN,"/* Must have prev and next pointers set before calling create_request
     * hook.
     */",undetermined
9395,httpd,UNKNOWN,/* Inherit the rest of the protocol info... */,undetermined
9396,httpd,UNKNOWN,/* We can only read it once */,undetermined
9397,httpd,UNKNOWN,"/* If this is a subrequest, the filter chain may contain a
         * mixture of filters specific to the old request (r), and
         * some inherited from r->main.  Here, inherit that filter
         * chain, and remove all those which are specific to the old
         * request; ensuring the subreq filter is left in place. */",undetermined
9398,httpd,UNKNOWN,"/* To remove the filter, first set f->r to the *new*
                 * request_rec, so that ->output_filters on 'new' is
                 * changed (if necessary) when removing the filter. */",undetermined
9399,httpd,UNKNOWN,"/* Stop at the protocol filters.  If a protocol filter has
             * been newly installed for this resource, better leave it
             * in place, though it's probably a misconfiguration or
             * filter bug to get into this state. */",undetermined
9400,httpd,UNKNOWN,"/* If this is not a subrequest, clear out all
         * resource-specific filters. */",undetermined
9401,httpd,UNKNOWN,"/* Begin by presuming any module can make its own path_info assumptions,
     * until some module interjects and changes the value.
     */",undetermined
9402,httpd,UNKNOWN,"/*
     * XXX: hmm.  This is because mod_setenvif and mod_unique_id really need
     * to do their thing on internal redirects as well.  Perhaps this is a
     * misnamed function.
     */",undetermined
9403,httpd,UNKNOWN,/* XXX: Is this function is so bogus and fragile that we deep-6 it? */,undetermined
9404,httpd,UNKNOWN,"/* We need to tell POOL_DEBUG that we're guaranteeing that rr->pool
     * will exist as long as r->pool.  Otherwise we run into troubles because
     * some values in this request will be allocated in r->pool, and others in
     * rr->pool.
     */",undetermined
9405,httpd,UNKNOWN,"/* copy output headers from subrequest, but leave negotiation headers */",undetermined
9406,httpd,UNKNOWN,"/* If any filters pointed at the now-defunct rr, we must point them
     * at our ""new"" instance of r.  In particular, some of rr's structures
     * will now be bogus (say rr->headers_out).  If a filter tried to modify
     * their f->r structure when it is pointing to rr, the real request_rec
     * will not get updated.  Fix that here.
     */",undetermined
9407,httpd,UNKNOWN,"/*
         * We need to check if we now have the SUBREQ_CORE filter in our filter
         * chain. If this is the case we need to remove it since we are NO
         * subrequest. But we need to keep in mind that the SUBREQ_CORE filter
         * does not necessarily need to be the first filter in our chain. So we
         * need to go through the chain. But we only need to walk up the chain
         * until the proto_output_filters as the SUBREQ_CORE filter is below the
         * protocol filters.
         */",undetermined
9408,httpd,UNKNOWN,"/* ap_die was already called, if an error occured */",undetermined
9409,httpd,UNKNOWN,/* Not a look-up request */,undetermined
9410,httpd,UNKNOWN,"/* This function is designed for things like actions or CGI scripts, when
 * using AddHandler, and you want to preserve the content type across
 * an internal redirect.
 */",undetermined
9411,httpd,UNKNOWN,"/* ap_die was already called, if an error occured */",undetermined
9412,httpd,UNKNOWN,"/*
     * Get rid of any current settings if requested; not just the
     * well-known methods but any extensions as well.
     */",undetermined
9413,httpd,UNKNOWN,"/*
     * Get rid of any current settings if requested; not just the
     * well-known methods but any extensions as well.
     */",undetermined
9414,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9415,httpd,UNKNOWN,"/*
 * http_mime.c: Sends/gets MIME headers for requests
 *
 * Rob McCool
 *
 */",undetermined
9416,httpd,UNKNOWN,"/* XXXX - fix me / EBCDIC
 *        there was a cludge here which would use its
 *        own version apr_isascii(). Indicating that
 *        on some platforms that might be needed.
 *
 *        #define OS_ASC(c) (c)             -- for mere mortals
 *     or
 *        #define OS_ASC(c) (ebcdic2ascii[c]) -- for dino's
 *
 *        #define apr_isascii(c) ((OS_ASC(c) & 0x80) == 0)
 */",undetermined
9417,httpd,UNKNOWN,"/* XXXXX - fix me - See note with NOT_PROXY
 */",undetermined
9418,httpd,UNKNOWN,"/* Information to which an extension can be mapped
 */",undetermined
9419,httpd,UNKNOWN,/* Additional AddTyped stuff */,undetermined
9420,httpd,UNKNOWN,/* Added with AddEncoding... */,undetermined
9421,httpd,UNKNOWN,/* Added with AddLanguage... */,undetermined
9422,httpd,UNKNOWN,/* Added with AddHandler... */,undetermined
9423,httpd,UNKNOWN,/* Added with AddCharset... */,undetermined
9424,httpd,UNKNOWN,/* Added with AddInputFilter... */,undetermined
9425,httpd,UNKNOWN,/* Added with AddOutputFilter... */,undetermined
9426,httpd,UNKNOWN,"/* Map from extension name to
                                      * extension_info structure */",undetermined
9427,httpd,UNKNOWN,"/* A simple list, walked once */",undetermined
9428,httpd,UNKNOWN,/* Language if no AddLanguage ext found */,undetermined
9429,httpd,UNKNOWN,"/* Extensions to include in multiview matching
                           * for filenames, e.g. Filters and Handlers
                           */",undetermined
9430,httpd,UNKNOWN,"/* If set to 0, only use filename.
                           * If set to 1, append PATH_INFO to filename for
                           *   lookups.
                           * If set to 2, this value is unset and is
                           *   effectively 0.
                           */",undetermined
9431,httpd,UNKNOWN,"/*
 * Overlay one hash table of extension_mappings onto another
 */",undetermined
9432,httpd,UNKNOWN,"/* Member is the offset within an extension_info of the pointer to reset
 */",undetermined
9433,httpd,UNKNOWN,"/* We may not be merging the tables, but if we potentially will change
         * an exinfo member, then we are about to trounce it anyways.
         * We must have a copy for safety.
         */",undetermined
9434,httpd,UNKNOWN,"/*
 * As RemoveType should also override the info from TypesConfig, we add an
 * empty string as type instead of actually removing the type.
 */",undetermined
9435,httpd,UNKNOWN,"/*
 * Note handler names are un-added with each per_dir_config merge.
 * This keeps the association from being inherited, but not
 * from being re-added at a subordinate level.
 */",undetermined
9436,httpd,UNKNOWN,"/* The sole bit of server configuration that the MIME module has is
 * the name of its config file, so...
 */",undetermined
9437,httpd,UNKNOWN,/* skip prefixed white space */,undetermined
9438,httpd,UNKNOWN,/* initialize ctp */,undetermined
9439,httpd,UNKNOWN,/* getting a type */,undetermined
9440,httpd,UNKNOWN,/* skip the '/' */,undetermined
9441,httpd,UNKNOWN,/* getting a subtype */,undetermined
9442,httpd,UNKNOWN,/* getting parameters */,undetermined
9443,httpd,UNKNOWN,/* skip the ';' */,undetermined
9444,httpd,UNKNOWN,"/*
 * find_ct is the hook routine for determining content-type and other
 * MIME-related metadata.  It assumes that r->filename has already been
 * set and stat has been called for r->finfo.  It also assumes that the
 * non-path base file name is not the empty string unless it is a dir.
 */",undetermined
9445,httpd,UNKNOWN,"/* If use_path_info is explicitly set to on (value & 1 == 1), append. */",undetermined
9446,httpd,UNKNOWN,"/* Always drop the path leading up to the file name.
     */",undetermined
9447,httpd,UNKNOWN,"/* The exception list keeps track of those filename components that
     * are not associated with extensions indicating metadata.
     * The base name is always the first exception (i.e., ""txt.html"" has
     * a basename of ""txt"" even though it might look like an extension).
     * Leading dots are considered to be part of the base name (a file named
     * "".png"" is likely not a png file but just a hidden file called png).
     */",undetermined
9448,httpd,UNKNOWN,"/* Parse filename extensions which can be in any order
     */",undetermined
9449,httpd,UNKNOWN,"/* ignore empty extensions ""bad..html"" */",undetermined
9450,httpd,UNKNOWN,"/* Save the ext in extcase before converting it to lower case.
         */",undetermined
9451,httpd,UNKNOWN,/* empty string is treated as special case for RemoveType */,undetermined
9452,httpd,UNKNOWN,"/* XXX should eliminate duplicate entities
                     *
                     * ah no. Order is important and double encoding is neither
                     * forbidden nor impossible. -- nd
                     */",undetermined
9453,httpd,UNKNOWN,"/* The following extensions are not 'Found'.  That is, they don't
             * make any contribution to metadata negotiation, so they must have
             * been explicitly requested by name.
             */",undetermined
9454,httpd,UNKNOWN,"/* XXX Two significant problems; 1, we don't check to see if we are
             * setting redundant filters.    2, we insert these in the types
             * config hook, which may be too early (dunno.)
             */",undetermined
9455,httpd,UNKNOWN,"/*
     * Need to set a notes entry on r for unrecognized elements.
     * Somebody better claim them!  If we did absolutely nothing,
     * skip the notes to alert mod_negotiation we are clueless.
     */",undetermined
9456,httpd,UNKNOWN,"/* Set default language, if none was specified by the extensions
     * and we have a DefaultLanguage setting in force
     */",undetermined
9457,httpd,UNKNOWN,"/*
     * this hook seems redundant ... is there any reason a type checker isn't
     * allowed to do this already?  I'd think that fixups in general would be
     * the last opportunity to get the filters right.
     * ap_hook_insert_filter(mime_insert_filters,NULL,NULL,APR_HOOK_MIDDLE);
     */",undetermined
9458,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
9459,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
9460,httpd,UNKNOWN,/* create per-server config structure */,undetermined
9461,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
9462,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9463,httpd,UNKNOWN,/* register hooks */,undetermined
9464,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9465,httpd,UNKNOWN,/* Internal redirect -- fake-up a pseudo-request */,undetermined
9466,httpd,UNKNOWN,"/* This redirect needs to be a GET no matter what the original
         * method was.
         */",undetermined
9467,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
9468,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
9469,httpd,UNKNOWN,/* create per-server config structure */,undetermined
9470,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
9471,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9472,httpd,UNKNOWN,/* register hooks */,undetermined
9473,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9474,httpd,UNKNOWN,"/*
 * mod_autoindex.c: Handles the on-the-fly html index generation
 *
 * Rob McCool
 * 3/23/93
 *
 * Adapted to Apache by rst.
 *
 * Version sort added by Martin Pool <mbp@humbug.org.au>.
 */",undetermined
9475,httpd,UNKNOWN,"/****************************************************************
 *
 * Handling configuration directives...
 */",undetermined
9476,httpd,UNKNOWN,/* Indexing options */,undetermined
9477,httpd,UNKNOWN,"/*
 * Define keys for sorting.
 */",undetermined
9478,httpd,UNKNOWN,/* Sort by file name (default) */,undetermined
9479,httpd,UNKNOWN,/* Last modification date */,undetermined
9480,httpd,UNKNOWN,"/* Size (absolute, not as displayed) */",undetermined
9481,httpd,UNKNOWN,/* Description */,undetermined
9482,httpd,UNKNOWN,/* String containing _all_ valid K_ opts */,undetermined
9483,httpd,UNKNOWN,/* String containing _all_ valid D_ opts */,undetermined
9484,httpd,UNKNOWN,"/*
 * These are the dimensions of the default icons supplied with Apache.
 */",undetermined
9485,httpd,UNKNOWN,"/*
 * Other default dimensions.
 */",undetermined
9486,httpd,UNKNOWN,"/*
 * This routine puts the standard HTML header at the top of the index page.
 * We include the DOCTYPE because we may be using features therefrom (i.e.,
 * HEIGHT and WIDTH attributes on the icons if we're FancyIndexing).
 */",undetermined
9487,httpd,UNKNOWN,/* Lose closing paren */,undetermined
9488,httpd,UNKNOWN,"/*
 * Add description text for a filename pattern.  If the pattern has
 * wildcards already (or we need to add them), add leading and
 * trailing wildcards to it to ensure substring processing.  If the
 * pattern contains a '/' anywhere, force wildcard matching mode,
 * add a slash to the prefix so that ""bar/bletch"" won't be matched
 * by ""foobar/bletch"", and make a note that there's a delimiter;
 * the matching routine simplifies to just the actual filename
 * whenever it can.  This allows definitions in parent directories
 * to be made for files in subordinate ones using relative paths.
 */",undetermined
9489,httpd,UNKNOWN,"/*
 * Absent a strcasestr() function, we have to force wildcards on
 * systems for which ""AAA"" and ""aaa"" mean the same file.
 */",undetermined
9490,httpd,UNKNOWN,"/*
         * If the current directory explicitly says 'no options' then we also
         * clear any incremental mods from being inheritable further down.
         */",undetermined
9491,httpd,UNKNOWN,"/*
         * If there were any nonincremental options selected for
         * this directory, they dominate and we don't inherit *anything.*
         * Contrariwise, we *do* inherit if the only settings here are
         * incremental ones.
         */",undetermined
9492,httpd,UNKNOWN,"/*
             * We may have incremental settings, so make sure we don't
             * inadvertently inherit an IndexOptions None from above.
             */",undetermined
9493,httpd,UNKNOWN,"/*
             * There are local nonincremental settings, which clear
             * all inheritance from above.  They *are* the new base settings.
             */",undetermined
9494,httpd,UNKNOWN,"/*
         * We're guaranteed that there'll be no overlap between
         * the add-options and the remove-options.
         */",undetermined
9495,httpd,UNKNOWN,"/*
     * Inherit the NameWidth settings if there aren't any specific to
     * the new location; otherwise we'll end up using the defaults set in the
     * config-rec creation routine.
     */",undetermined
9496,httpd,UNKNOWN,"/*
     * Likewise for DescriptionWidth.
     */",undetermined
9497,httpd,UNKNOWN,"/****************************************************************
 *
 * Looking things up in config entries...
 */",undetermined
9498,httpd,UNKNOWN,/* Structure used to hold entries when we're actually building an index */,undetermined
9499,httpd,UNKNOWN,/* Special cased for ^^DIRECTORY^^ and ^^BLANKICON^^ */,undetermined
9500,httpd,UNKNOWN,"/*
 * Look through the list of pattern/description pairs and return the first one
 * if any) that matches the filename in the request.  If multiple patterns
 * match, only the first one is used; since the order in the array is the
 * same as the order in which directives were processed, earlier matching
 * directives will dominate.
 */",undetermined
9501,httpd,UNKNOWN,"/*
     * If the filename includes a path, extract just the name itself
     * for the simple matches.
     */",undetermined
9502,httpd,UNKNOWN,"/*
         * Only use the full-path filename if the pattern contains '/'s.
         */",undetermined
9503,httpd,UNKNOWN,"/*
         * Make the comparison using the cheapest method; only do
         * wildcard checking if we must.
         */",undetermined
9504,httpd,UNKNOWN,/* !CASE_BLIND_FILESYSTEM */,undetermined
9505,httpd,UNKNOWN,"/*
         * On some platforms, the match must be case-blind.  This is really
         * a factor of the filesystem involved, but we can't detect that
         * reliably - so we have to granularise at the OS level.
         */",undetermined
9506,httpd,UNKNOWN,/* !CASE_BLIND_FILESYSTEM */,undetermined
9507,httpd,UNKNOWN,"/*****************************************************************
 *
 * Actually generating output
 */",undetermined
9508,httpd,UNKNOWN,"/*
 * Elements of the emitted document:
 *      Preamble
 *              Emitted unless SUPPRESS_PREAMBLE is set AND ap_run_sub_req
 *              succeeds for the (content_type == text/html) header file.
 *      Header file
 *              Emitted if found (and able).
 *      H1 tag line
 *              Emitted if a header file is NOT emitted.
 *      Directory stuff
 *              Always emitted.
 *      HR
 *              Emitted if FANCY_INDEXING is set.
 *      Readme file
 *              Emitted if found (and able).
 *      ServerSig
 *              Emitted if ServerSignature is not Off AND a readme file
 *              is NOT emitted.
 *      Postamble
 *              Emitted unless SUPPRESS_PREAMBLE is set AND ap_run_sub_req
 *              succeeds for the (content_type == text/html) readme file.
 */",undetermined
9509,httpd,UNKNOWN,"/*
 * emit a plain text file
 */",undetermined
9510,httpd,UNKNOWN,/* ###: better error here? */,undetermined
9511,httpd,UNKNOWN,"/*
 * Handle the preamble through the H1 tag line, inclusive.  Locate
 * the file with a subrequests.  Process text/html documents by actually
 * running the subrequest; text/xxx documents get copied verbatim,
 * and any other content type is ignored.  This means that a non-text
 * document (such as HEADER.gif) might get multiviewed as the result
 * instead of a text document, meaning nothing will be displayed, but
 * oh well.
 */",undetermined
9512,httpd,UNKNOWN,"/*
     * If there's a header file, send a subrequest to look for it.  If it's
     * found and html do the subrequest, otherwise handle it
     */",undetermined
9513,httpd,UNKNOWN,"/*
         * Check for the two specific cases we allow: text/html and
         * text/anything-else.  The former is allowed to be processed for
         * SSIs.
         */",undetermined
9514,httpd,UNKNOWN,/* Hope everything will work... */,undetermined
9515,httpd,UNKNOWN,"/* This is a hack, but I can't find any better way to do this.
                 * The problem is that we have already created the sub-request,
                 * but we just inserted the OLD_WRITE filter, and the
                 * sub-request needs to pass its data through the OLD_WRITE
                 * filter, or things go horribly wrong (missing data, data in
                 * the wrong order, etc).  To fix it, if you create a
                 * sub-request and then insert the OLD_WRITE filter before you
                 * run the request, you need to make sure that the sub-request
                 * data goes through the OLD_WRITE filter.  Just steal this
                 * code.  The long-term solution is to remove the ap_r*
                 * functions.
                 */",undetermined
9516,httpd,UNKNOWN,"/*
                 * If there's a problem running the subrequest, display the
                 * preamble if we didn't do it before -- the header file
                 * didn't get displayed.
                 */",undetermined
9517,httpd,UNKNOWN,/* It didn't work */,undetermined
9518,httpd,UNKNOWN,"/*
                 * If we can open the file, prefix it with the preamble
                 * regardless; since we'll be sending a <pre> block around
                 * the file's contents, any HTML header it had won't end up
                 * where it belongs.
                 */",undetermined
9519,httpd,UNKNOWN,/* Insert style id if stylesheet used */,undetermined
9520,httpd,UNKNOWN,"/*
 * Handle the Readme file through the postamble, inclusive.  Locate
 * the file with a subrequests.  Process text/html documents by actually
 * running the subrequest; text/xxx documents get copied verbatim,
 * and any other content type is ignored.  This means that a non-text
 * document (such as FOOTER.gif) might get multiviewed as the result
 * instead of a text document, meaning nothing will be displayed, but
 * oh well.
 */",undetermined
9521,httpd,UNKNOWN,"/*
     * If there's a readme file, send a subrequest to look for it.  If it's
     * found and a text file, handle it -- otherwise fall through and
     * pretend there's nothing there.
     */",undetermined
9522,httpd,UNKNOWN,"/*
         * Check for the two specific cases we allow: text/html and
         * text/anything-else.  The former is allowed to be processed for
         * SSIs.
         */",undetermined
9523,httpd,UNKNOWN,/* worked... */,undetermined
9524,httpd,UNKNOWN,"/*
                 * If we can open the file, suppress the signature.
                 */",undetermined
9525,httpd,UNKNOWN,/* Scan for line breaks for Tanmoy's secretary */,undetermined
9526,httpd,UNKNOWN,"/*
     * p->name is now the true parent URI.
     * testpath is a crafted lie, so that the syntax '/some/..'
     * (or simply '..')be used to describe 'up' from '/some/'
     * when processeing IndexIgnore, and Icon|Alt|Desc configs.
     */",undetermined
9527,httpd,UNKNOWN,"/* The output has always been to the parent.  Don't make ourself
     * our own parent (worthless cyclical reference).
     */",undetermined
9528,httpd,UNKNOWN,"/* IndexIgnore has always compared ""/thispath/.."" */",undetermined
9529,httpd,UNKNOWN,"/* Special alt text for parent dir to distinguish it from other directories
                   this is essential when trying to style this dir entry via AddAltClass */",undetermined
9530,httpd,UNKNOWN,"/* Dot is ignored, Parent is handled by make_parent_entry() */",undetermined
9531,httpd,UNKNOWN,"/*
     * On some platforms, the match must be case-blind.  This is really
     * a factor of the filesystem involved, but we can't detect that
     * reliably - so we have to granularise at the OS level.
     */",undetermined
9532,httpd,UNKNOWN,/* omit the trailing slash (1.3 compat) */,undetermined
9533,httpd,UNKNOWN,"/*
     * We don't need to take any special action for the file size key.
     * If we did, it would go here.
     */",undetermined
9534,httpd,UNKNOWN,"/*
     * If there's no DescriptionWidth in effect, default to the old
     * behaviour of adjusting the description size depending upon
     * what else is being displayed.  Otherwise, stick with the
     * setting.
     */",undetermined
9535,httpd,UNKNOWN,/* entities like &auml; count as one character */,undetermined
9536,httpd,UNKNOWN,/* Grump. */,undetermined
9537,httpd,UNKNOWN,/* Double Grump! */,undetermined
9538,httpd,UNKNOWN,"/*
 * Emit the anchor for the specified field.  If a field is the key for the
 * current request, the link changes its meaning to reverse the order when
 * selected again.  Non-active fields always start in ascending order.
 */",undetermined
9539,httpd,UNKNOWN,/* reverse? */,undetermined
9540,httpd,UNKNOWN,/* Emit table with style id */,undetermined
9541,httpd,UNKNOWN,"/*
         * Emit the guaranteed-at-least-one-space-between-columns byte.
         */",undetermined
9542,httpd,UNKNOWN,/* Even/Odd rows for IndexStyleSheet */,undetermined
9543,httpd,UNKNOWN,"/* Include alt text in class name, distinguish between odd and even rows */",undetermined
9544,httpd,UNKNOWN,/* Distinguish between odd and even rows */,undetermined
9545,httpd,UNKNOWN,"/*
             * The blank before the storm.. er, before the next field.
             */",undetermined
9546,httpd,UNKNOWN,"/*Length=""1975-04-07 01:23  "" (see 4 lines above) */",undetermined
9547,httpd,UNKNOWN,"/*
 * Compare two file entries according to the sort criteria.  The return
 * is essentially a signum function value.
 */",undetermined
9548,httpd,UNKNOWN,"/*
     * First, see if either of the entries is for the parent directory.
     * If so, that *always* sorts lower than anything else.
     */",undetermined
9549,httpd,UNKNOWN,"/*
     * Now see if one's a directory and one isn't, if we're set
     * isdir for FOLDERS_FIRST.
     */",undetermined
9550,httpd,UNKNOWN,"/*
     * All of our comparisons will be of the c1 entry against the c2 one,
     * so assign them appropriately to take care of the ordering.
     */",undetermined
9551,httpd,UNKNOWN,"/* names may identical when treated case-insensitively,
     * so always fall back on strcmp() flavors to put entries
     * in deterministic order.  This means that 'ABC' and 'abc'
     * will always appear in the same order, rather than
     * variably between 'ABC abc' and 'abc ABC' order.
     */",undetermined
9552,httpd,UNKNOWN,"/* The names may be identical in respects other other than
     * filename case when strnatcmp is used above, so fall back
     * to strcmp on conflicts so that fn1.01.zzz and fn1.1.zzz
     * are also sorted in a deterministic order.
     */",undetermined
9553,httpd,UNKNOWN,"/*
     * If there is no specific ordering defined for this directory,
     * default to ascending by filename.
     */",undetermined
9554,httpd,UNKNOWN,"/*
     * Figure out what sort of indexing (if any) we're supposed to use.
     *
     * If no QUERY_STRING was specified or client query strings have been
     * explicitly disabled.
     * If we are ignoring the client, suppress column sorting as well.
     */",undetermined
9555,httpd,UNKNOWN,"/* C= First Sort key Column (N, M, S, D) */",undetermined
9556,httpd,UNKNOWN,"/* O= Sort order (A, D) */",undetermined
9557,httpd,UNKNOWN,"/* F= Output Format (0 plain, 1 fancy (pre), 2 table) */",undetermined
9558,httpd,UNKNOWN,"/* V= Version sort (0, 1) */",undetermined
9559,httpd,UNKNOWN,/* P= wildcard pattern (*.foo) */,undetermined
9560,httpd,UNKNOWN,/* for efficiency */,undetermined
9561,httpd,UNKNOWN,"/* ignore the pattern, if it's bad. */",undetermined
9562,httpd,UNKNOWN,/* be correct */,undetermined
9563,httpd,UNKNOWN,/* Syntax error?  Ignore the remainder! */,undetermined
9564,httpd,UNKNOWN,/* Spew HTML preamble */,undetermined
9565,httpd,UNKNOWN,"/*
     * Since we don't know how many dir. entries there are, put them into a
     * linked list and then arrayificate them so qsort can use them.
     */",undetermined
9566,httpd,UNKNOWN,/* ignore un-stat()able files */,undetermined
9567,httpd,UNKNOWN,/* We want to explode symlinks here. */,undetermined
9568,httpd,UNKNOWN,/* We *must* have FNAME. */,undetermined
9569,httpd,UNKNOWN,"/* Something bad happened, skip this file. */",undetermined
9570,httpd,UNKNOWN,/* The formal handler... */,undetermined
9571,httpd,UNKNOWN,"/* OK, nothing easy.  Trot out the heavy artillery... */",undetermined
9572,httpd,UNKNOWN,"/* KLUDGE --- make the sub_req lookups happen in the right directory.
         * Fixing this in the sub_req_lookup functions themselves is difficult,
         * and would probably break virtual includes...
         */",undetermined
9573,httpd,UNKNOWN,/* dir config creater */,undetermined
9574,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
9575,httpd,UNKNOWN,/* server config */,undetermined
9576,httpd,UNKNOWN,/* merge server config */,undetermined
9577,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9578,httpd,UNKNOWN,/* register hooks */,undetermined
9579,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9580,httpd,UNKNOWN,"/*
 * http_script: keeps all script-related ramblings together.
 *
 * Compliant to CGI/1.1 spec
 *
 * Adapted by rst from original NCSA code by Rob McCool
 *
 * Apache adds some new env vars; REDIRECT_URL and REDIRECT_QUERY_STRING for
 * custom error responses, and DOCUMENT_ROOT because we found it useful.
 * It also adds SERVER_ADMIN - useful for scripts to know who to mail when
 * they fail.
 */",undetermined
9581,httpd,UNKNOWN,/* for RLIMIT stuff */,undetermined
9582,httpd,UNKNOWN,/* Read and discard the data in the brigade produced by a CGI script */,undetermined
9583,httpd,UNKNOWN,"/* KLUDGE --- for back-combatibility, we don't have to check ExecCGI
 * in ScriptAliased directories, which means we need to know if this
 * request came through ScriptAlias or not... so the Alias module
 * leaves a note for us.
 */",undetermined
9584,httpd,UNKNOWN,/* Configuration stuff */,undetermined
9585,httpd,UNKNOWN,"/* XXX Very expensive mainline case! Open, then getfileinfo! */",undetermined
9586,httpd,UNKNOWN,"/* ""%% [Wed Jun 19 10:53:21 1996] GET /cgi-bin/printenv HTTP/1.0"" */",undetermined
9587,httpd,UNKNOWN,"/* ""%% 500 /usr/local/apache/cgi-bin */",undetermined
9588,httpd,UNKNOWN,"/* Soak up stderr from a script and redirect it to the error log.
 */",undetermined
9589,httpd,UNKNOWN,"/* XXX Very expensive mainline case! Open, then getfileinfo! */",undetermined
9590,httpd,UNKNOWN,/* Soak up script output */,undetermined
9591,httpd,UNKNOWN,"/* ""%% [Wed Jun 19 10:53:21 1996] GET /cgi-bin/printenv HTTP/1.0"" */",undetermined
9592,httpd,UNKNOWN,"/* ""%% 500 /usr/local/apache/cgi-bin"" */",undetermined
9593,httpd,UNKNOWN,"/* This is the special environment used for running the ""exec cmd=""
 *   variety of SSI directives.
 */",undetermined
9594,httpd,UNKNOWN,"/* Escape the logged string because it may be something that
     * came in over the network.
     */",undetermined
9595,httpd,UNKNOWN,/* Under OS/2 need to use device con. */,undetermined
9596,httpd,UNKNOWN,"/* Transmute ourselves into the script.
     * NB only ISINDEX scripts get decoded arguments.
     */",undetermined
9597,httpd,UNKNOWN,"/* Something bad happened, tell the world. */",undetermined
9598,httpd,UNKNOWN,/* Bad things happened. Everyone should have cleaned up. */,undetermined
9599,httpd,UNKNOWN,"/* Do not process r->args if they contain an '=' assignment
         */",undetermined
9600,httpd,UNKNOWN,/* count the number of keywords */,undetermined
9601,httpd,UNKNOWN,"/* Everything is - 1 to account for the first parameter
     * which is the program name.
     */",undetermined
9602,httpd,UNKNOWN,/* Truncate args to prevent overrun */,undetermined
9603,httpd,UNKNOWN,"/* A CGI bucket type is needed to catch any output to stderr from the
 * script; see PR 22030. */",undetermined
9604,httpd,UNKNOWN,"/* Create a CGI bucket using pipes from script stdout 'out'
 * and stderr 'err', for request 'r'. */",undetermined
9605,httpd,UNKNOWN,/* Create the pollset */,undetermined
9606,httpd,UNKNOWN,/* script's stdout */,undetermined
9607,httpd,UNKNOWN,/* script's stderr */,undetermined
9608,httpd,UNKNOWN,/* Create a duplicate CGI bucket using given bucket data */,undetermined
9609,httpd,UNKNOWN,"/* Handle stdout from CGI child.  Duplicate of logic from the _read
 * method of the real APR pipe bucket implementation. */",undetermined
9610,httpd,UNKNOWN,/* XXX: check for failure? */,undetermined
9611,httpd,UNKNOWN,/* Change the current bucket to refer to what we read */,undetermined
9612,httpd,UNKNOWN,/* note the real buffer size */,undetermined
9613,httpd,UNKNOWN,"/* Read method of CGI bucket: polls on stderr and stdout of the child,
 * sending any stderr output immediately away to the error log. */",undetermined
9614,httpd,UNKNOWN,/* stdout */,undetermined
9615,httpd,UNKNOWN,/* stderr */,undetermined
9616,httpd,UNKNOWN,/* default to accept */,undetermined
9617,httpd,UNKNOWN,"/*
    if (!ap_suexec_enabled) {
        if (!ap_can_exec(&r->finfo))
            return log_scripterror(r, conf, HTTP_FORBIDDEN, 0,
                                   ""file permissions deny server execution"");
    }

*/",undetermined
9618,httpd,UNKNOWN,/* build the command line */,undetermined
9619,httpd,UNKNOWN,/* run the script in its own process */,undetermined
9620,httpd,UNKNOWN,"/* Transfer any put/post args, CERN style...
     * Note that we already ignore SIGPIPE in the core server.
     */",undetermined
9621,httpd,UNKNOWN,/* We can't do much with this. */,undetermined
9622,httpd,UNKNOWN,"/* If the child stopped, we still must read to EOS. */",undetermined
9623,httpd,UNKNOWN,/* read */,undetermined
9624,httpd,UNKNOWN,"/* Keep writing data to the child until done or too much time
             * elapses with no progress or an error occurs.
             */",undetermined
9625,httpd,UNKNOWN,"/* silly script stopped reading, soak up remaining message */",undetermined
9626,httpd,UNKNOWN,/* Is this flush really needed? */,undetermined
9627,httpd,UNKNOWN,/* Handle script return... */,undetermined
9628,httpd,UNKNOWN,"/*
             * ret could be HTTP_NOT_MODIFIED in the case that the CGI script
             * does not set an explicit status and ap_meets_conditions, which
             * is called by ap_scan_script_header_err_brigade, detects that
             * the conditions of the requests are met and the response is
             * not modified.
             * In this case set r->status and return OK in order to prevent
             * running through the error processing stack as this would
             * break with mod_cache, if the conditions had been set by
             * mod_cache itself to validate a stale entity.
             * BTW: We circumvent the error processing stack anyway if the
             * CGI script set an explicit status code (whatever it is) and
             * the only possible values for ret here are:
             *
             * HTTP_NOT_MODIFIED          (set by ap_meets_conditions)
             * HTTP_PRECONDITION_FAILED   (set by ap_meets_conditions)
             * HTTP_INTERNAL_SERVER_ERROR (if something went wrong during the
             * processing of the response of the CGI script, e.g broken headers
             * or a crashed CGI process).
             */",undetermined
9629,httpd,UNKNOWN,"/* For a redirect whether internal or not, discard any
             * remaining stdout from the script, and log any remaining
             * stderr output, as normal. */",undetermined
9630,httpd,UNKNOWN,"/* This redirect needs to be a GET no matter what the original
             * method was.
             */",undetermined
9631,httpd,UNKNOWN,"/* We already read the message body (if any), so don't allow
             * the redirected request to think it has one.  We can ignore
             * Transfer-Encoding, since we used REQUEST_CHUNKED_ERROR.
             */",undetermined
9632,httpd,UNKNOWN,"/* XXX: Note that if a script wants to produce its own Redirect
             * body, it now has to explicitly *say* ""Status: 302""
             */",undetermined
9633,httpd,UNKNOWN,/* nph */,undetermined
9634,httpd,UNKNOWN,"/* get rid of all filters up through protocol...  since we
         * haven't parsed off the headers, there is no way they can
         * work
         */",undetermined
9635,httpd,UNKNOWN,"/* don't soak up script output if errors occurred writing it
     * out...  otherwise, we prolong the life of the script when the
     * connection drops or we stopped sending output for some other
     * reason */",undetermined
9636,httpd,UNKNOWN,"/* NOT r->status, even if it has changed. */",undetermined
9637,httpd,UNKNOWN,"/*============================================================================
 *============================================================================
 * This is the beginning of the cgi filter code moved from mod_include. This
 *   is the code required to handle the ""exec"" SSI directive.
 *============================================================================
 *============================================================================*/",undetermined
9638,httpd,UNKNOWN,/* No hardwired path info or query allowed */,undetermined
9639,httpd,UNKNOWN,"/* Script gets parameters of the *document*, for back compatibility */",undetermined
9640,httpd,UNKNOWN,/* hard to get right; see mod_cgi.c */,undetermined
9641,httpd,UNKNOWN,"/* Force sub_req to be treated as a CGI request, even if ordinary
     * typing rules would have called it something else.
     */",undetermined
9642,httpd,UNKNOWN,/* Run it. */,undetermined
9643,httpd,UNKNOWN,/* run the script in its own process */,undetermined
9644,httpd,UNKNOWN,"/* We can't close the pipe here, because we may return before the
     * full CGI has been sent to the network.  That's okay though,
     * because we can rely on the pool to close the pipe for us.
     */",undetermined
9645,httpd,UNKNOWN,"/*============================================================================
 *============================================================================
 * This is the end of the cgi filter code moved from mod_include.
 *============================================================================
 *============================================================================*/",undetermined
9646,httpd,UNKNOWN,"/* Required by mod_include filter. This is how mod_cgi registers
         *   with mod_include to provide processing of the exec directive.
         */",undetermined
9647,httpd,UNKNOWN,"/* This is the means by which unusual (non-unix) os's may find alternate
     * means to run a given command (e.g. shebang/registry parsing on Win32)
     */",undetermined
9648,httpd,UNKNOWN,/* dir config creater */,undetermined
9649,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
9650,httpd,UNKNOWN,/* server config */,undetermined
9651,httpd,UNKNOWN,/* merge server config */,undetermined
9652,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9653,httpd,UNKNOWN,/* register hooks */,undetermined
9654,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9655,httpd,UNKNOWN,"/**
 * @file  mod_cgi.h
 * @brief CGI Script Execution Extension Module for Apache
 *
 * @defgroup MOD_CGI mod_cgi
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
9656,httpd,UNKNOWN,"/**
 * Registerable optional function to override CGI behavior;
 * Reprocess the command and arguments to execute the given CGI script.
 * @param cmd Pointer to the command to execute (may be overridden)
 * @param argv Pointer to the arguments to pass (may be overridden)
 * @param r The current request
 * @param p The pool to allocate correct cmd/argv elements within.
 * @param e_info pass e_info.cmd_type (Set to APR_SHELLCMD or APR_PROGRAM on entry)
                      and e_info.detached (Should the child start in detached state?)
 * @remark This callback may be registered by the os-specific module
 * to correct the command and arguments for apr_proc_create invocation
 * on a given os.  mod_cgi will call the function if registered.
 */",undetermined
9657,httpd,UNKNOWN,/* _MOD_CGI_H */,undetermined
9658,httpd,UNKNOWN,/** @} */,undetermined
9659,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9660,httpd,UNKNOWN,"/*
 * http_script: keeps all script-related ramblings together.
 *
 * Compliant to cgi/1.1 spec
 *
 * Adapted by rst from original NCSA code by Rob McCool
 *
 * Apache adds some new env vars; REDIRECT_URL and REDIRECT_QUERY_STRING for
 * custom error responses, and DOCUMENT_ROOT because we found it useful.
 * It also adds SERVER_ADMIN - useful for scripts to know who to mail when
 * they fail.
 */",undetermined
9661,httpd,UNKNOWN,/* ### should be tossed in favor of APR */,undetermined
9662,httpd,UNKNOWN,/* for sockaddr_un */,undetermined
9663,httpd,UNKNOWN,"/* The APR other-child API doesn't tell us how the daemon exited
 * (SIGSEGV vs. exit(1)).  The other-child maintenance function
 * needs to decide whether to restart the daemon after a failure
 * based on whether or not it exited due to a fatal startup error
 * or something that happened at steady-state.  This exit status
 * is unlikely to collide with exit signals.
 */",undetermined
9664,httpd,UNKNOWN,/* Read and discard the data in the brigade produced by a CGI script */,undetermined
9665,httpd,UNKNOWN,"/* This doer will only ever be called when we are sure that we have
 * a valid ugid.
 */",undetermined
9666,httpd,UNKNOWN,"/* KLUDGE --- for back-combatibility, we don't have to check ExecCGI
 * in ScriptAliased directories, which means we need to know if this
 * request came through ScriptAlias or not... so the Alias module
 * leaves a note for us.
 */",undetermined
9667,httpd,UNKNOWN,/* Configuration stuff */,undetermined
9668,httpd,UNKNOWN,/* get the pid of script created for prior request */,undetermined
9669,httpd,UNKNOWN,"/* DEFAULT_CGID_LISTENBACKLOG controls the max depth on the unix socket's
 * pending connection queue.  If a bunch of cgi requests arrive at about
 * the same time, connections from httpd threads/processes will back up
 * in the queue while the cgid process slowly forks off a child to process
 * each connection on the unix socket.  If the queue is too short, the
 * httpd process will get ECONNREFUSED when trying to connect.
 */",undetermined
9670,httpd,UNKNOWN,"/* DEFAULT_CONNECT_ATTEMPTS controls how many times we'll try to connect
 * to the cgi daemon from the thread/process handling the cgi request.
 * Generally we want to retry when we get ECONNREFUSED since it is
 * probably because the listen queue is full.  We need to try harder so
 * the client doesn't see it as a 503 error.
 *
 * Set this to 0 to continually retry until the connect works or Apache
 * terminates.
 */",undetermined
9671,httpd,UNKNOWN,"/* request type (CGI_REQ, SSI_REQ, etc.) */",undetermined
9672,httpd,UNKNOWN,"/* connection id; daemon uses this as a hash value
                            * to find the script pid when it is time for that
                            * process to be cleaned up
                            */",undetermined
9673,httpd,UNKNOWN,"/* sanity check for config problems leading to
                            * wrong cgid socket use
                            */",undetermined
9674,httpd,UNKNOWN,/* to stuff in server_rec */,undetermined
9675,httpd,UNKNOWN,"/* This routine is called to create the argument list to be passed
 * to the CGI script.  When suexec is enabled, the suexec path, user, and
 * group are the first three arguments to be passed; if not, all three
 * must be NULL.  The query info is split into separate arguments, where
 * ""+"" is the separator between keyword arguments.
 *
 * Do not process the args if they containing an '=' assignment.
 */",undetermined
9676,httpd,UNKNOWN,/* count the number of keywords */,undetermined
9677,httpd,UNKNOWN,/* Truncate args to prevent overrun */,undetermined
9678,httpd,UNKNOWN,"/* If apache is not terminating or restarting,
             * restart the cgid daemon
             */",undetermined
9679,httpd,UNKNOWN,"/* if MPM doesn't support query,
                           * assume we shouldn't restart daemon
                           */",undetermined
9680,httpd,UNKNOWN,/* don't do anything; server is stopping or restarting */,undetermined
9681,httpd,UNKNOWN,/* Restart the child cgid daemon process */,undetermined
9682,httpd,UNKNOWN,"/* we get here when pcgi is cleaned up; pcgi gets cleaned
             * up when pconf gets cleaned up
             */",undetermined
9683,httpd,UNKNOWN,/* send signal to daemon telling it to die */,undetermined
9684,httpd,UNKNOWN,"/* Remove the cgi socket, we must do it here in order to try and
             * guarantee the same permissions as when the socket was created.
             */",undetermined
9685,httpd,UNKNOWN,"/* deal with incomplete reads and signals
 * assume you really have to read buf_size bytes
 */",undetermined
9686,httpd,UNKNOWN,/* unexpected */,undetermined
9687,httpd,UNKNOWN,"/* deal with signals
 */",undetermined
9688,httpd,UNKNOWN,/* read the request header */,undetermined
9689,httpd,UNKNOWN,/* no more data sent for this request */,undetermined
9690,httpd,UNKNOWN,/* handle module indexes and such */,undetermined
9691,httpd,UNKNOWN,"/* Read the filename, argv0, uri, and args */",undetermined
9692,httpd,UNKNOWN,/* empty string if no args */,undetermined
9693,httpd,UNKNOWN,/* read the environment variables */,undetermined
9694,httpd,UNKNOWN,/* Write the request header */,undetermined
9695,httpd,UNKNOWN,/* write the environment variables */,undetermined
9696,httpd,UNKNOWN,"/* sure we got r, but don't call ap_log_rerror() because we don't
     * have r->headers_in and possibly other storage referenced by
     * ap_log_rerror()
     */",undetermined
9697,httpd,UNKNOWN,/* Close our copy of the listening sockets */,undetermined
9698,httpd,UNKNOWN,/* cgid should use its own suexec doer */,undetermined
9699,httpd,UNKNOWN,/* so that only Apache can use socket */,undetermined
9700,httpd,UNKNOWN,"/* can't fail, so can't clobber errno */",undetermined
9701,httpd,UNKNOWN,/* Not all flavors of unix use the current umask for AF_UNIX perms */,undetermined
9702,httpd,UNKNOWN,"/* if running as root, switch to configured user/group */",undetermined
9703,httpd,UNKNOWN,"/* The network has been shut down, no need to continue. Die gracefully */",undetermined
9704,httpd,UNKNOWN,"/* XXX apr_procattr_child_*_set() is creating an unnecessary
               * pipe between this process and the child being created...
               * It is cleaned up with the temporary pool for this request.
               */",undetermined
9705,httpd,UNKNOWN,"/* Something bad happened, tell the world.
             * ap_log_rerror() won't work because the header table used by
             * ap_log_rerror() hasn't been replicated in the phony r
             */",undetermined
9706,httpd,UNKNOWN,/* no process to clean up */,undetermined
9707,httpd,UNKNOWN,"/* We want to close sd2 for the new CGI process too.
            * If it is left open it'll make ap_pass_brigade() block
            * waiting for EOF if CGI forked something running long.
            * close(sd2) here should be okay, as CGI channel
            * is already dup()ed by apr_procattr_child_{in,out}_set()
            * above.
            */",undetermined
9708,httpd,UNKNOWN,"/* We have a valid identity, and can be sure that
                 * cgid_suexec_id_doer will return a valid ugid
                 */",undetermined
9709,httpd,UNKNOWN,"/* Bad things happened. Everyone should have cleaned up.
                 * ap_log_rerror() won't work because the header table used by
                 * ap_log_rerror() hasn't been replicated in the phony r
                 */",undetermined
9710,httpd,UNKNOWN,/* no process to clean up */,undetermined
9711,httpd,UNKNOWN,"/* If the script process was created, remember the pid for
         * later cleanup.  If the script process wasn't created, clear
         * out any prior pid with the same key.
         *
         * We don't want to leak storage for the key, so only allocate
         * a key if the key doesn't exist yet in the hash; there are
         * only a limited number of possible keys (one for each
         * possible thread in the server), so we can allocate a copy
         * of the key the first time a thread has a cgid request.
         * Note that apr_hash_set() only uses the storage passed in
         * for the key if it is adding the key to the hash for the
         * first time; new key storage isn't needed for replacing the
         * existing value of a key.
         */",undetermined
9712,httpd,UNKNOWN,/* should be <= 0 to distinguish from startup errors */,undetermined
9713,httpd,UNKNOWN,/* clear setting from previous generation */,undetermined
9714,httpd,UNKNOWN,"/* Required by mod_include filter. This is how mod_cgid registers
             *   with mod_include to provide processing of the exec directive.
             */",undetermined
9715,httpd,UNKNOWN,/* Make sure the pid is appended to the sockname */,undetermined
9716,httpd,UNKNOWN,"/* XXX Very expensive mainline case! Open, then getfileinfo! */",undetermined
9717,httpd,UNKNOWN,"/* ""%% [Wed Jun 19 10:53:21 1996] GET /cgid-bin/printenv HTTP/1.0"" */",undetermined
9718,httpd,UNKNOWN,"/* ""%% 500 /usr/local/apache/cgid-bin */",undetermined
9719,httpd,UNKNOWN,"/* XXX Very expensive mainline case! Open, then getfileinfo! */",undetermined
9720,httpd,UNKNOWN,/* Soak up script output */,undetermined
9721,httpd,UNKNOWN,"/* ""%% [Wed Jun 19 10:53:21 1996] GET /cgid-bin/printenv HTTP/1.0"" */",undetermined
9722,httpd,UNKNOWN,"/* ""%% 500 /usr/local/apache/cgid-bin"" */",undetermined
9723,httpd,UNKNOWN,/* 100 milliseconds */,undetermined
9724,httpd,UNKNOWN,/* we got connected! */,undetermined
9725,httpd,UNKNOWN,"/* gotta try again, but make sure the cgid daemon is still around */",undetermined
9726,httpd,UNKNOWN,"/****************************************************************
 *
 * Actual cgid handling...
 */",undetermined
9727,httpd,UNKNOWN,/* 10 ms */,undetermined
9728,httpd,UNKNOWN,"/* On AIX, for processes like mod_cgid's script children where
         * SIGCHLD is ignored, kill(pid,0) returns success for up to
         * one second after the script child exits, based on when a
         * daemon runs to clean up unnecessary process table entries.
         * getpgid() can report the proper info (-1/ESRCH) immediately.
         */",undetermined
9729,httpd,UNKNOWN,/* in case it isn't dead yet */,undetermined
9730,httpd,UNKNOWN,"/* we got a socket, and there is already a cleanup registered for it */",undetermined
9731,httpd,UNKNOWN,/* wait for pid of script */,undetermined
9732,httpd,UNKNOWN,/* default to accept */,undetermined
9733,httpd,UNKNOWN,"/*
    if (!ap_suexec_enabled) {
        if (!ap_can_exec(&r->finfo))
            return log_scripterror(r, conf, HTTP_FORBIDDEN, 0, APLOGNO(01267)
                                   ""file permissions deny server execution"");
    }
*/",undetermined
9734,httpd,UNKNOWN,"/* We are putting the socket discriptor into an apr_file_t so that we can
     * use a pipe bucket to send the data to the client.  APR will create
     * a cleanup for the apr_file_t which will close the socket, so we'll
     * get rid of the cleanup we registered when we created the socket.
     */",undetermined
9735,httpd,UNKNOWN,"/* Transfer any put/post args, CERN style...
     * Note that we already ignore SIGPIPE in the core server.
     */",undetermined
9736,httpd,UNKNOWN,/* We can't do much with this. */,undetermined
9737,httpd,UNKNOWN,"/* If the child stopped, we still must read to EOS. */",undetermined
9738,httpd,UNKNOWN,/* read */,undetermined
9739,httpd,UNKNOWN,"/* Keep writing data to the child until done or too much time
             * elapses with no progress or an error occurs.
             */",undetermined
9740,httpd,UNKNOWN,"/* silly script stopped reading, soak up remaining message */",undetermined
9741,httpd,UNKNOWN,"/* we're done writing, or maybe we didn't write at all;
     * force EOF on child's stdin so that the cgi detects end (or
     * absence) of data
     */",undetermined
9742,httpd,UNKNOWN,/* Handle script return... */,undetermined
9743,httpd,UNKNOWN,"/*
             * ret could be HTTP_NOT_MODIFIED in the case that the CGI script
             * does not set an explicit status and ap_meets_conditions, which
             * is called by ap_scan_script_header_err_brigade, detects that
             * the conditions of the requests are met and the response is
             * not modified.
             * In this case set r->status and return OK in order to prevent
             * running through the error processing stack as this would
             * break with mod_cache, if the conditions had been set by
             * mod_cache itself to validate a stale entity.
             * BTW: We circumvent the error processing stack anyway if the
             * CGI script set an explicit status code (whatever it is) and
             * the only possible values for ret here are:
             *
             * HTTP_NOT_MODIFIED          (set by ap_meets_conditions)
             * HTTP_PRECONDITION_FAILED   (set by ap_meets_conditions)
             * HTTP_INTERNAL_SERVER_ERROR (if something went wrong during the
             * processing of the response of the CGI script, e.g broken headers
             * or a crashed CGI process).
             */",undetermined
9744,httpd,UNKNOWN,/* Soak up all the script output */,undetermined
9745,httpd,UNKNOWN,"/* This redirect needs to be a GET no matter what the original
             * method was.
             */",undetermined
9746,httpd,UNKNOWN,"/* We already read the message body (if any), so don't allow
             * the redirected request to think it has one. We can ignore
             * Transfer-Encoding, since we used REQUEST_CHUNKED_ERROR.
             */",undetermined
9747,httpd,UNKNOWN,"/* XXX: Note that if a script wants to produce its own Redirect
             * body, it now has to explicitly *say* ""Status: 302""
             */",undetermined
9748,httpd,UNKNOWN,"/* get rid of all filters up through protocol...  since we
         * haven't parsed off the headers, there is no way they can
         * work
         */",undetermined
9749,httpd,UNKNOWN,"/* NOT r->status, even if it has changed. */",undetermined
9750,httpd,UNKNOWN,"/*============================================================================
 *============================================================================
 * This is the beginning of the cgi filter code moved from mod_include. This
 *   is the code required to handle the ""exec"" SSI directive.
 *============================================================================
 *============================================================================*/",undetermined
9751,httpd,UNKNOWN,/* No hardwired path info or query allowed */,undetermined
9752,httpd,UNKNOWN,"/* Script gets parameters of the *document*, for back compatibility */",undetermined
9753,httpd,UNKNOWN,/* hard to get right; see mod_cgi.c */,undetermined
9754,httpd,UNKNOWN,"/* Force sub_req to be treated as a CGI request, even if ordinary
     * typing rules would have called it something else.
     */",undetermined
9755,httpd,UNKNOWN,/* Run it. */,undetermined
9756,httpd,UNKNOWN,"/* This is the special environment used for running the ""exec cmd=""
 *   variety of SSI directives.
 */",undetermined
9757,httpd,UNKNOWN,"/* for this type of request, the script is invoked through an
     * intermediate shell process...  cleanup_script is only able
     * to knock out the shell process, not the actual script
     */",undetermined
9758,httpd,UNKNOWN,"/* We are putting the socket discriptor into an apr_file_t so that we can
     * use a pipe bucket to send the data to the client.  APR will create
     * a cleanup for the apr_file_t which will close the socket, so we'll
     * get rid of the cleanup we registered when we created the socket.
     */",undetermined
9759,httpd,UNKNOWN,"/*============================================================================
 *============================================================================
 * This is the end of the cgi filter code moved from mod_include.
 *============================================================================
 *============================================================================*/",undetermined
9760,httpd,UNKNOWN,/* dir config creater */,undetermined
9761,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
9762,httpd,UNKNOWN,/* server config */,undetermined
9763,httpd,UNKNOWN,/* merge server config */,undetermined
9764,httpd,UNKNOWN,/* command table */,undetermined
9765,httpd,UNKNOWN,/* register_handlers */,undetermined
9766,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9767,httpd,UNKNOWN,"/*
 * Info Module.  Display configuration information for the server and
 * all included modules.
 *
 * <Location /server-info>
 * SetHandler server-info
 * </Location>
 *
 * GET /server-info - Returns full configuration page for server and all modules
 * GET /server-info?server - Returns server configuration only
 * GET /server-info?module_name - Returns configuration for a single module
 * GET /server-info?list - Returns quick list of included modules
 * GET /server-info?config - Returns full configuration
 * GET /server-info?hooks - Returns a listing of the modules active for each hook
 *
 * Original Author:
 *   Rasmus Lerdorf <rasmus vex.net>, May 1996
 *
 * Modified By:
 *   Lou Langholtz <ldl usi.utah.edu>, July 1997
 *
 * Apache 2.0 Port:
 *   Ryan Morgan <rmorgan covalent.net>, August 2000
 *
 */",undetermined
9768,httpd,UNKNOWN,/* matching module name */,undetermined
9769,httpd,UNKNOWN,/* additional info */,undetermined
9770,httpd,UNKNOWN,/* current file name when doing -DDUMP_CONFIG */,undetermined
9771,httpd,UNKNOWN,/* file handle when doing -DDUMP_CONFIG */,undetermined
9772,httpd,UNKNOWN,/*XXX: should get something from apr_hooks.h instead */,undetermined
9773,httpd,UNKNOWN,/* just to get the right size */,undetermined
9774,httpd,UNKNOWN,"/*
 * hook_get_t is a pointer to a function that takes void as an argument and
 * returns a pointer to an apr_array_header_t.  The nasty WIN32 ifdef
 * is required to account for the fact that the ap_hook* calls all use
 * STDCALL calling convention.
 */",undetermined
9775,httpd,UNKNOWN,"/* TODO: Not all of these defines are getting set like they do in main.c.
     *       Missing some headers?
     */",undetermined
9776,httpd,UNKNOWN,/* This list displays the compiled in default paths: */,undetermined
9777,httpd,UNKNOWN,"/* Done, turn off timeout, close file and return */",undetermined
9778,httpd,UNKNOWN,/* dir config creater */,undetermined
9779,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
9780,httpd,UNKNOWN,/* server config */,undetermined
9781,httpd,UNKNOWN,/* merge server config */,undetermined
9782,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9783,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9784,httpd,UNKNOWN,"/* Status Module.  Display lots of internal data about how Apache is
 * performing and the state of all children processes.
 *
 * To enable this, add the following lines into any config file:
 *
 * <Location /server-status>
 * SetHandler server-status
 * </Location>
 *
 * You may want to protect this location by password or domain so no one
 * else can look at it.  Then you can access the statistics with a URL like:
 *
 * http://your_server_name/server-status
 *
 * /server-status - Returns page using tables
 * /server-status?notable - Returns page for browsers without table support
 * /server-status?refresh - Returns page with 1 second refresh
 * /server-status?refresh=6 - Returns page with refresh every 6 seconds
 * /server-status?auto - Returns page with data for automatic parsing
 *
 * Mark Cox, mark@ukweb.com, November 1995
 *
 * 12.11.95 Initial version for www.telescope.org
 * 13.3.96  Updated to remove rprintf's [Mark]
 * 18.3.96  Added CPU usage, process information, and tidied [Ben Laurie]
 * 18.3.96  Make extra Scoreboard variables #definable
 * 25.3.96  Make short report have full precision [Ben Laurie suggested]
 * 25.3.96  Show uptime better [Mark/Ben Laurie]
 * 29.3.96  Better HTML and explanation [Mark/Rob Hartill suggested]
 * 09.4.96  Added message for non-STATUS compiled version
 * 18.4.96  Added per child and per slot counters [Jim Jagielski]
 * 01.5.96  Table format, cleanup, even more spiffy data [Chuck Murcko/Jim J.]
 * 18.5.96  Adapted to use new rprintf() routine, incidentally fixing a missing
 *          piece in short reports [Ben Laurie]
 * 21.5.96  Additional Status codes (DNS and LOGGING only enabled if
 *          extended STATUS is enabled) [George Burgyan/Jim J.]
 * 10.8.98  Allow for extended status info at runtime (no more STATUS)
 *          [Jim J.]
 */",undetermined
9785,httpd,UNKNOWN,/* Implement 'ap_run_status_hook'. */,undetermined
9786,httpd,UNKNOWN,"/* ugh... need to know if we're running with a pthread implementation
 * such as linuxthreads that treats individual threads as distinct
 * processes; that affects how we add up CPU time in a process
 */",undetermined
9787,httpd,UNKNOWN,/* Format the number of bytes nicely */,undetermined
9788,httpd,UNKNOWN,/* Main handler for x-httpd-status requests */,undetermined
9789,httpd,UNKNOWN,/* ID values for command table */,undetermined
9790,httpd,UNKNOWN,/* see #defines above */,undetermined
9791,httpd,UNKNOWN,/* add another state for slots above the MaxRequestWorkers setting */,undetermined
9792,httpd,UNKNOWN,"/*
     * Simple table-driven form data set parser that lets you alter the header
     */",undetermined
9793,httpd,UNKNOWN,"/* XXX what about the counters for quiescing/seg faulted
             * processes?  should they be counted or not?  GLA
             */",undetermined
9794,httpd,UNKNOWN,/* HAVE_TIMES */,undetermined
9795,httpd,UNKNOWN,/* up_time in seconds */,undetermined
9796,httpd,UNKNOWN,/* Allow for OS/2 not having CPU stats */,undetermined
9797,httpd,UNKNOWN,/* !short_report */,undetermined
9798,httpd,UNKNOWN,/* Allow for OS/2 not having CPU stats */,undetermined
9799,httpd,UNKNOWN,/* short_report */,undetermined
9800,httpd,UNKNOWN,/* ap_extended_status */,undetermined
9801,httpd,UNKNOWN,"/*
         * These differ from 'busy' and 'ready' in how gracefully finishing
         * threads are counted. XXX: How to make this clear in the html?
         */",undetermined
9802,httpd,UNKNOWN,/* send the scoreboard 'table' out */,undetermined
9803,httpd,UNKNOWN,/* MPM sets per-worker pid and generation */,undetermined
9804,httpd,UNKNOWN,/* !no_table_report */,undetermined
9805,httpd,UNKNOWN,/* no_table_report */,undetermined
9806,httpd,UNKNOWN,/* for (j...) */,undetermined
9807,httpd,UNKNOWN,/* for (i...) */,undetermined
9808,httpd,UNKNOWN,/* if (ap_extended_status && !short_report) */,undetermined
9809,httpd,UNKNOWN,/* Run extension hooks to insert extra content. */,undetermined
9810,httpd,UNKNOWN,"/* When mod_status is loaded, default our ExtendedStatus to 'on'
     * other modules which prefer verbose scoreboards may play a similar game.
     * If left to their own requirements, mpm modules can make do with simple
     * scoreboard entries.
     */",undetermined
9811,httpd,UNKNOWN,/* We don't want to assume these are in */,undetermined
9812,httpd,UNKNOWN,/* any particular order in scoreboard.h */,undetermined
9813,httpd,UNKNOWN,/* work around buggy MPMs */,undetermined
9814,httpd,UNKNOWN,/* dir config creater */,undetermined
9815,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
9816,httpd,UNKNOWN,/* server config */,undetermined
9817,httpd,UNKNOWN,/* merge server config */,undetermined
9818,httpd,UNKNOWN,/* command table */,undetermined
9819,httpd,UNKNOWN,/* register_hooks */,undetermined
9820,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9821,httpd,UNKNOWN,"/**
 * @file  mod_status.h
 * @brief Status Report Extension Module to Apache
 *
 * @defgroup MOD_STATUS mod_status
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
9822,httpd,UNKNOWN,"/* short, non-HTML report requested */",undetermined
9823,httpd,UNKNOWN,/* HTML report without tables */,undetermined
9824,httpd,UNKNOWN,/* detailed report */,undetermined
9825,httpd,UNKNOWN,"/* Optional hooks which can insert extra content into the mod_status
 * output.  FLAGS will be set to the bitwise OR of any of the
 * AP_STATUS_* flags.
 *
 * Implementations of this hook should generate content using
 * functions in the ap_rputs/ap_rprintf family; each hook should
 * return OK or DECLINED. */",undetermined
9826,httpd,UNKNOWN,/** @} */,undetermined
9827,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9828,httpd,UNKNOWN,"/*
 * Create a configuration specific to this module for a server or directory
 * location, and fill it with the default settings.
 */",undetermined
9829,httpd,UNKNOWN,"/*
 * Respond to a callback to create configuration record for a server or
 * vhost environment.
 */",undetermined
9830,httpd,UNKNOWN,"/*
 * Respond to a callback to create a config record for a specific directory.
 */",undetermined
9831,httpd,UNKNOWN,"/*
 * Define the directives specific to this module.  This structure is referenced
 * later by the 'module' structure.
 */",undetermined
9832,httpd,UNKNOWN,"/* XXX - Another important reason not to allow this in .htaccess is that
     * the ap_[ug]name2id() is not thread-safe */",undetermined
9833,httpd,UNKNOWN,/* create per-dir config */,undetermined
9834,httpd,UNKNOWN,/* merge per-dir config */,undetermined
9835,httpd,UNKNOWN,/* server config */,undetermined
9836,httpd,UNKNOWN,/* merge server config */,undetermined
9837,httpd,UNKNOWN,/* command table */,undetermined
9838,httpd,UNKNOWN,/* register hooks */,undetermined
9839,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9840,httpd,UNKNOWN,"/**
 * @file mod_suexec.h
 * @brief SuExec Extension Module for Apache
 *
 * @defgroup MOD_SUEXEC mod_suexec
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
9841,httpd,UNKNOWN,/** @}*/,undetermined
9842,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984 AT&T
 *        All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9843,httpd,UNKNOWN,/* 10 plus one for standard output */,undetermined
9844,httpd,UNKNOWN,/* LIBSED_H */,undetermined
9845,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9846,httpd,UNKNOWN,"/*
 * mod_buffer.c --- Buffer the input and output filter stacks, collapse
 *                  many small buckets into fewer large buckets.
 */",undetermined
9847,httpd,UNKNOWN,/* size of the buffer */,undetermined
9848,httpd,UNKNOWN,/* has the size been set */,undetermined
9849,httpd,UNKNOWN,"/**
 * Buffer buckets being written to the output filter stack.
 */",undetermined
9850,httpd,UNKNOWN,/* first time in? create a context */,undetermined
9851,httpd,UNKNOWN,"/* buffering won't work on subrequests, it would be nice if
         * it did. Within subrequests, we have no EOS to check for,
         * so we don't know when to flush the buffer to the network
         */",undetermined
9852,httpd,UNKNOWN,/* Do nothing if asked to filter nothing. */,undetermined
9853,httpd,UNKNOWN,/* Empty buffer means we can potentially optimise below */,undetermined
9854,httpd,UNKNOWN,/* EOS means we are done. */,undetermined
9855,httpd,UNKNOWN,/* should we add an etag? */,undetermined
9856,httpd,UNKNOWN,/* pass the EOS across */,undetermined
9857,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
9858,httpd,UNKNOWN,/* A flush takes precedence over buffering */,undetermined
9859,httpd,UNKNOWN,/* pass the flush bucket across */,undetermined
9860,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
9861,httpd,UNKNOWN,/* metadata buckets are preserved as is */,undetermined
9862,httpd,UNKNOWN,"/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */",undetermined
9863,httpd,UNKNOWN,"/* is our buffer full?
         * If so, send what we have down the filter chain. If the buffer
         * gets full, we can no longer compute a content length.
         */",undetermined
9864,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
9865,httpd,UNKNOWN,"/* should break out of the loop, since our write to the client
                 * failed in some way. */",undetermined
9866,httpd,UNKNOWN,"/* at this point we are ready to buffer.
         * Buffering takes advantage of an optimisation in the handling of
         * bucket brigades. Heap buckets are always created at a fixed
         * size, regardless of the size of the data placed into them.
         * The apr_brigade_write() call will first try and pack the data
         * into any free space in the most recent heap bucket, before
         * allocating a new bucket if necessary.
         */",undetermined
9867,httpd,UNKNOWN,"/* further optimisation: if the buckets are already heap
             * buckets, and the buckets stay exactly APR_BUCKET_BUFF_SIZE
             * long (as they would be if we were reading bits of a
             * large bucket), then move the buckets instead of copying
             * them.
             */",undetermined
9868,httpd,UNKNOWN,"/**
 * Buffer buckets being read from the input filter stack.
 */",undetermined
9869,httpd,UNKNOWN,/* buffer on main requests only */,undetermined
9870,httpd,UNKNOWN,/* first time in? create a context */,undetermined
9871,httpd,UNKNOWN,/* just get out of the way of things we don't want. */,undetermined
9872,httpd,UNKNOWN,"/* if our buffer is empty, read off the network until the buffer is full */",undetermined
9873,httpd,UNKNOWN,"/* if an error was received, bail out now. If the error is
             * EAGAIN and we have not yet seen an EOS, we will definitely
             * be called again, at which point we will send our buffered
             * data. Instead of sending EAGAIN, some filters return an
             * empty brigade instead when data is not yet available. In
             * this case, pass through the APR_SUCCESS and emulate the
             * underlying filter.
             */",undetermined
9874,httpd,UNKNOWN,"/* if we see an EOS, we are done */",undetermined
9875,httpd,UNKNOWN,/* flush buckets clear the buffer */,undetermined
9876,httpd,UNKNOWN,/* pass metadata buckets through */,undetermined
9877,httpd,UNKNOWN,"/* read the bucket in, pack it into the buffer */",undetermined
9878,httpd,UNKNOWN,/* give the caller the data they asked for from the buffer */,undetermined
9879,httpd,UNKNOWN,"/* last bucket read, step out of the way */",undetermined
9880,httpd,UNKNOWN,/* unset */,undetermined
9881,httpd,UNKNOWN,/* default size */,undetermined
9882,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
9883,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
9884,httpd,UNKNOWN,/* create per-server config structure */,undetermined
9885,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
9886,httpd,UNKNOWN,/* command apr_table_t */,undetermined
9887,httpd,UNKNOWN,/* register hooks */,undetermined
9888,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9889,httpd,UNKNOWN,"/*
 * simple hokey charset recoding configuration module
 *
 * See mod_ebcdic and mod_charset for more thought-out examples.  This
 * one is just so Jeff can learn how a module works and experiment with
 * basic character set recoding configuration.
 *
 * !!!This is an extremely cheap ripoff of mod_charset.c from Russian Apache!!!
 */",undetermined
9890,httpd,UNKNOWN,/* size of translation buffer used on output */,undetermined
9891,httpd,UNKNOWN,/* size of translation buffer used on input */,undetermined
9892,httpd,UNKNOWN,"/* flush once there is no more than this much
                                  * space left in the translation buffer
                                  */",undetermined
9893,httpd,UNKNOWN,"/* we don't handle chars wider than this that straddle
                                  * two buckets
                                  */",undetermined
9894,httpd,UNKNOWN,"/* extended error status codes; this is used in addition to an apr_status_t to
 * track errors in the translation filter
 */",undetermined
9895,httpd,UNKNOWN,/* no error info yet; value must be 0 for easy init */,undetermined
9896,httpd,UNKNOWN,/* built-in restriction encountered */,undetermined
9897,httpd,UNKNOWN,/* incomplete multi-byte char at end of content */,undetermined
9898,httpd,UNKNOWN,/* something bad happened in a filter below xlate */,undetermined
9899,httpd,UNKNOWN,/* input data invalid */,undetermined
9900,httpd,UNKNOWN,/* registered name of the output translation filter */,undetermined
9901,httpd,UNKNOWN,/* registered name of input translation filter */,undetermined
9902,httpd,UNKNOWN,/* source encoding */,undetermined
9903,httpd,UNKNOWN,/* how to ship on wire */,undetermined
9904,httpd,UNKNOWN,/** module does ap_add_*_filter()? */,undetermined
9905,httpd,UNKNOWN,/** treat all mimetypes as text? */,undetermined
9906,httpd,UNKNOWN,"/* charset_filter_ctx_t is created for each filter instance; because the same
 * filter code is used for translating in both directions, we need this context
 * data to tell the filter which translation handle to use; it also can hold a
 * character which was split between buckets
 */",undetermined
9907,httpd,UNKNOWN,/* single-byte translation? */,undetermined
9908,httpd,UNKNOWN,/* extended error status */,undetermined
9909,httpd,UNKNOWN,/* we want to be able to build a complete char here */,undetermined
9910,httpd,UNKNOWN,/* has filter instance run before? */,undetermined
9911,httpd,UNKNOWN,/* should we pass brigades through unchanged? */,undetermined
9912,httpd,UNKNOWN,/* buffer for input filtering */,undetermined
9913,httpd,UNKNOWN,/* input buckets we couldn't finish translating */,undetermined
9914,httpd,UNKNOWN,/* used for passing downstream */,undetermined
9915,httpd,UNKNOWN,"/* charset_req_t is available via r->request_config if any translation is
 * being performed
 */",undetermined
9916,httpd,UNKNOWN,"/* If it is defined in the current container, use it.  Otherwise, use the one
     * from the enclosing container.
     */",undetermined
9917,httpd,UNKNOWN,"/* CharsetSourceEnc charset
 */",undetermined
9918,httpd,UNKNOWN,"/* CharsetDefault charset
 */",undetermined
9919,httpd,UNKNOWN,"/* CharsetOptions optionflag...
 */",undetermined
9920,httpd,UNKNOWN,"/* find_code_page() is a fixup hook that checks if the module is
 * configured and the input or output potentially need to be translated.
 * If so, context is initialized for the filters.
 */",undetermined
9921,httpd,UNKNOWN,/* S if subrequest */,undetermined
9922,httpd,UNKNOWN,/* R if redirect */,undetermined
9923,httpd,UNKNOWN,/* P if proxy */,undetermined
9924,httpd,UNKNOWN,"/* If we don't have a full directory configuration, bail out.
     */",undetermined
9925,httpd,UNKNOWN,/* catch proxy requests */,undetermined
9926,httpd,UNKNOWN,/* mod_rewrite indicators */,undetermined
9927,httpd,UNKNOWN,/* no translation when server and network charsets are set to the same value */,undetermined
9928,httpd,UNKNOWN,"/* Get storage for the request data and the output filter context.
     * We rarely need the input filter context, so allocate that separately.
     */",undetermined
9929,httpd,UNKNOWN,"/* Set up input translation.  Note: A request body can be included
         * with the OPTIONS method, but for now we don't set up translation
         * of it.
         */",undetermined
9930,httpd,UNKNOWN,"/* xlate_insert_filter() is a filter hook which decides whether or not
 * to insert a translation filter for the current request.
 */",undetermined
9931,httpd,UNKNOWN,/* Hey... don't be so quick to use reqinfo->dc here; reqinfo may be NULL */,undetermined
9932,httpd,UNKNOWN,"/* stuff that sucks that I know of:
 *
 * bucket handling:
 *  why create an eos bucket when we see it come down the stream?  just send the one
 *  passed as input...  news flash: this will be fixed when xlate_out_filter() starts
 *  using the more generic xlate_brigade()
 *
 * translation mechanics:
 *   we don't handle characters that straddle more than two buckets; an error
 *   will be generated
 */",undetermined
9933,httpd,UNKNOWN,"/* send_downstream() is passed the translated data; it puts it in a single-
 * bucket brigade and passes the brigade to the next filter
 */",undetermined
9934,httpd,UNKNOWN,"/* we don't handle chars this wide which straddle
                               * buckets
                               */",undetermined
9935,httpd,UNKNOWN,/* input buffer: */,undetermined
9936,httpd,UNKNOWN,/* output buffer: */,undetermined
9937,httpd,UNKNOWN,"/* Keep adding bytes from the input string to the saved string until we
     *    1) finish the input char
     *    2) get an error
     * or 3) run out of bytes to add
     */",undetermined
9938,httpd,UNKNOWN,"/* code isn't smart enough to handle chars
                               * straddling more than two buckets
                               */",undetermined
9939,httpd,UNKNOWN,"/* We must ensure not to process more than what would fit in the
         * remaining of the destination buffer, including terminating NULL */",undetermined
9940,httpd,UNKNOWN,"/* chk_filter_chain() is called once per filter instance; it tries to
 * determine if the current filter instance should be disabled because
 * its translation is incompatible with the translation of an existing
 * instance of the translate filter
 *
 * Example bad scenario:
 *
 *   configured filter chain for the request:
 *     INCLUDES XLATEOUT(8859-1->UTS-16)
 *   configured filter chain for the subrequest:
 *     XLATEOUT(8859-1->UTS-16)
 *
 *   When the subrequest is processed, the filter chain will be
 *     XLATEOUT(8859-1->UTS-16) XLATEOUT(8859-1->UTS-16)
 *   This makes no sense, so the instance of XLATEOUT added for the
 *   subrequest will be noop-ed.
 *
 * Example good scenario:
 *
 *   configured filter chain for the request:
 *     INCLUDES XLATEOUT(8859-1->UTS-16)
 *   configured filter chain for the subrequest:
 *     XLATEOUT(IBM-1047->8859-1)
 *
 *   When the subrequest is processed, the filter chain will be
 *     XLATEOUT(IBM-1047->8859-1) XLATEOUT(8859-1->UTS-16)
 *   This makes sense, so the instance of XLATEOUT added for the
 *   subrequest will be left alone and it will translate from
 *   IBM-1047->8859-1.
 */",undetermined
9941,httpd,UNKNOWN,"/* walk the filter chain; see if it makes sense for our filter to
     * do any translation
     */",undetermined
9942,httpd,UNKNOWN,"/* incompatible translation
                     * if our filter instance is incompatible with an instance
                     * already in place, noop our instance
                     * Notes:
                     * . We are only willing to noop our own instance.
                     * . It is possible to noop another instance which has not
                     *   yet run, but this is not currently implemented.
                     *   Hopefully it will not be needed.
                     * . It is not possible to noop an instance which has
                     *   already run.
                     */",undetermined
9943,httpd,UNKNOWN,"/* xlate_brigade() is used to filter request and response bodies
 *
 * we'll stop when one of the following occurs:
 * . we run out of buckets
 * . we run out of space in the output buffer
 * . we hit an error or metadata
 *
 * inputs:
 *   bb:               brigade to process
 *   buffer:           storage to hold the translated characters
 *   buffer_avail:     size of buffer
 *   (and a few more uninteresting parms)
 *
 * outputs:
 *   return value:     APR_SUCCESS or some error code
 *   bb:               we've removed any buckets representing the
 *                     translated characters; the eos bucket, if
 *                     present, will be left in the brigade
 *   buffer:           filled in with translated characters
 *   buffer_avail:     updated with the bytes remaining
 *   hit_eos:          did we hit an EOS bucket?
 */",undetermined
9944,httpd,UNKNOWN,/* set to NULL only to quiet some gcc */,undetermined
9945,httpd,UNKNOWN,/* total bytes read from current bucket */,undetermined
9946,httpd,UNKNOWN,/* bytes left in current bucket */,undetermined
9947,httpd,UNKNOWN,/* no bytes left to process in the current bucket... */,undetermined
9948,httpd,UNKNOWN,/* for axing when we're done reading it */,undetermined
9949,httpd,UNKNOWN,"/* We've got data, so translate it. */",undetermined
9950,httpd,UNKNOWN,"/* Rats... we need to finish a partial character from the previous
                 * bucket.
                 *
                 * Strangely, finish_partial_char() increments the input buffer
                 * pointer but does not increment the output buffer pointer.
                 */",undetermined
9951,httpd,UNKNOWN,/* partial character at end of input */,undetermined
9952,httpd,UNKNOWN,"/* We need to save the final byte(s) for next time; we can't
                     * convert it until we look at the next bucket.
                     */",undetermined
9953,httpd,UNKNOWN,/* bad input byte or partial char too big to store */,undetermined
9954,httpd,UNKNOWN,"/* if any data remains in the current bucket, split there */",undetermined
9955,httpd,UNKNOWN,"/* Leave the eos bucket in the brigade for reporting to
             * subsequent filters.
             */",undetermined
9956,httpd,UNKNOWN,"/* Oops... we have a partial char from the previous bucket
                 * that won't be completed because there's no more data.
                 */",undetermined
9957,httpd,UNKNOWN,"/* xlate_out_filter() handles (almost) arbitrary conversions from one charset
 * to another...
 * translation is determined in the fixup hook (find_code_page), which is
 * where the filter's context data is set up... the context data gives us
 * the translation handle
 */",undetermined
9958,httpd,UNKNOWN,"/* this is SetOutputFilter path; grab the preallocated context,
         * if any; note that if we decided not to do anything in an earlier
         * handler, we won't even have a reqinfo
         */",undetermined
9959,httpd,UNKNOWN,"/* prevent SNAFU if user coded us twice
                                         * in the filter chain; we can't have two
                                         * instances using the same context
                                         */",undetermined
9960,httpd,UNKNOWN,/* no idea how to translate; don't do anything */,undetermined
9961,httpd,UNKNOWN,"/* Check the mime type to see if translation should be performed.
     */",undetermined
9962,httpd,UNKNOWN,"/* On an EBCDIC machine, be willing to translate mod_autoindex-
         * generated output.  Otherwise, it doesn't look too cool.
         *
         * XXX This isn't a perfect fix because this doesn't trigger us
         * to convert from the charset of the source code to ASCII.  The
         * general solution seems to be to allow a generator to set an
         * indicator in the r specifying that the body is coded in the
         * implementation character set (i.e., the charset of the source
         * code).  This would get several different types of documents
         * translated properly: mod_autoindex output, mod_status output,
         * mod_info output, hard-coded error documents, etc.
         */",undetermined
9963,httpd,UNKNOWN,/* filter never ran before */,undetermined
9964,httpd,UNKNOWN,"/* We're not converting between two single-byte charsets, so unset
             * Content-Length since it is unlikely to remain the same.
             */",undetermined
9965,httpd,UNKNOWN,/* no bytes left to process in the current bucket... */,undetermined
9966,httpd,UNKNOWN,"/* XXX yuck, but that tells us to send
                                 * eos down; when we minimize our bb construction
                                 * we'll fix this crap */",undetermined
9967,httpd,UNKNOWN,"/* Oops... we have a partial char from the previous bucket
                     * that won't be completed because there's no more data.
                     */",undetermined
9968,httpd,UNKNOWN,/* for axing when we're done reading it */,undetermined
9969,httpd,UNKNOWN,"/* get ready for when we access the
                                          * next bucket */",undetermined
9970,httpd,UNKNOWN,/* Try to fill up our tmp buffer with translated data. */,undetermined
9971,httpd,UNKNOWN,/* maybe we just hit the end of a pipe (len = 0) ? */,undetermined
9972,httpd,UNKNOWN,"/* Rats... we need to finish a partial character from the previous
                 * bucket.
                 */",undetermined
9973,httpd,UNKNOWN,/* Update input ptr and len after consuming some bytes */,undetermined
9974,httpd,UNKNOWN,/* partial character at end of input */,undetermined
9975,httpd,UNKNOWN,"/* We need to save the final byte(s) for next time; we can't
                     * convert it until we look at the next bucket.
                     */",undetermined
9976,httpd,UNKNOWN,/* bad input byte or partial char too big to store */,undetermined
9977,httpd,UNKNOWN,"/* It is time to flush, as there is not enough space left in the
             * current output buffer to bother with converting more data.
             */",undetermined
9978,httpd,UNKNOWN,/* tmp is now empty */,undetermined
9979,httpd,UNKNOWN,/* gotta write out what we converted */,undetermined
9980,httpd,UNKNOWN,"/* this is SetInputFilter path; grab the preallocated context,
         * if any; note that if we decided not to do anything in an earlier
         * handler, we won't even have a reqinfo
         */",undetermined
9981,httpd,UNKNOWN,"/* prevent SNAFU if user coded us twice
                                        * in the filter chain; we can't have two
                                        * instances using the same context
                                        */",undetermined
9982,httpd,UNKNOWN,/* no idea how to translate; don't do anything */,undetermined
9983,httpd,UNKNOWN,/* filter never ran before */,undetermined
9984,httpd,UNKNOWN,"/* A Content-Length header is present, but it won't be valid after
             * conversion because we're not converting between two single-byte
             * charsets.  This will affect most CGI scripts and may affect
             * some modules.
             * Content-Length can't be unset here because that would break
             * being able to read the request body.
             * Processing of chunked request bodies is not impacted by this
             * filter since the the length was not declared anyway.
             */",undetermined
9985,httpd,UNKNOWN,/* first use the leftovers */,undetermined
9986,httpd,UNKNOWN,"/* move anything leftover into our context for next time;
             * we don't currently ""set aside"" since the data came from
             * down below, but I suspect that for long-term we need to
             * do that
             */",undetermined
9987,httpd,UNKNOWN,/* do we have output? */,undetermined
9988,httpd,UNKNOWN,"/* make sure we insert at the head, because there may be
             * an eos bucket already there, and the eos bucket should
             * come after the data
             */",undetermined
9989,httpd,UNKNOWN,"/* XXX need to get some more data... what if the last brigade
             * we got had only the first byte of a multibyte char?  we need
             * to grab more data from the network instead of returning an
             * empty brigade
             */",undetermined
9990,httpd,UNKNOWN,"/* If we have any metadata at the head of ctx->bb, go ahead and move it
         * onto the end of bb to be returned to our caller.
         */",undetermined
9991,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
9992,httpd,UNKNOWN,"/*
 * mod_data.c --- Turn the response into an rfc2397 data URL, suitable for
 *                displaying as inline content on a page.
 */",undetermined
9993,httpd,UNKNOWN,"/**
 * Create a data URL as follows:
 *
 * data:[<mime-type>;][charset=<charset>;]base64,<payload>
 *
 * Where:
 *
 * mime-type: The mime type of the original response.
 * charset: The optional character set corresponding to the mime type.
 * payload: A base64 version of the response body.
 *
 * The content type of the response is set to text/plain.
 *
 * The Content-Length header, if present, is updated with the new content
 * length based on the increase in size expected from the base64 conversion.
 * If the Content-Length header is too large to fit into an int, we remove
 * the Content-Length header instead.
 */",undetermined
9994,httpd,UNKNOWN,/* first time in? create a context */,undetermined
9995,httpd,UNKNOWN,"/* base64-ing won't work on subrequests, it would be nice if
         * it did. Within subrequests, we have no EOS to check for,
         * so we don't know when to flush the tail to the network.
         */",undetermined
9996,httpd,UNKNOWN,/* Do nothing if asked to filter nothing. */,undetermined
9997,httpd,UNKNOWN,/* buffer big enough for 8000 encoded bytes (6000 raw bytes) and terminator */,undetermined
9998,httpd,UNKNOWN,/* EOS means we are done. */,undetermined
9999,httpd,UNKNOWN,/* write away the tail */,undetermined
10000,httpd,UNKNOWN,/* pass the EOS across */,undetermined
10001,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
10002,httpd,UNKNOWN,/* pass any stray buckets after the EOS down the stack */,undetermined
10003,httpd,UNKNOWN,"/* flush what we can, we can't flush the tail until EOS */",undetermined
10004,httpd,UNKNOWN,/* pass the flush bucket across */,undetermined
10005,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
10006,httpd,UNKNOWN,/* metadata buckets are preserved as is */,undetermined
10007,httpd,UNKNOWN,"/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */",undetermined
10008,httpd,UNKNOWN,/* make sure we don't read more than 6000 bytes at a time */,undetermined
10009,httpd,UNKNOWN,/* size will never be more than 6000 bytes */,undetermined
10010,httpd,UNKNOWN,/* fill up and write out our overflow buffer if partially used */,undetermined
10011,httpd,UNKNOWN,/* write the main base64 chunk */,undetermined
10012,httpd,UNKNOWN,/* save away any tail in the overflow buffer */,undetermined
10013,httpd,UNKNOWN,/* pass what we have down the chain */,undetermined
10014,httpd,UNKNOWN,"/* should break out of the loop, since our write to the client
                 * failed in some way. */",undetermined
10015,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
10016,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
10017,httpd,UNKNOWN,/* create per-server config structure */,undetermined
10018,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
10019,httpd,UNKNOWN,/* command apr_table_t */,undetermined
10020,httpd,UNKNOWN,/* register hooks */,undetermined
10021,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10022,httpd,UNKNOWN,"/*
 * mod_deflate.c: Perform deflate content-encoding on the fly
 *
 * Written by Ian Holsman, Justin Erenkrantz, and Nick Kew
 */",undetermined
10023,httpd,UNKNOWN,"/*
 * Portions of this software are based upon zlib code by Jean-loup Gailly
 * (zlib functions gz_open and gzwrite, check_header)
 */",undetermined
10024,httpd,UNKNOWN,/* zlib flags */,undetermined
10025,httpd,UNKNOWN,/* bit 0 set: file probably ascii text */,undetermined
10026,httpd,UNKNOWN,/* bit 1 set: header CRC present */,undetermined
10027,httpd,UNKNOWN,/* bit 2 set: extra field present */,undetermined
10028,httpd,UNKNOWN,/* bit 3 set: original file name present */,undetermined
10029,httpd,UNKNOWN,/* bit 4 set: file comment present */,undetermined
10030,httpd,UNKNOWN,/* bits 5..7: reserved */,undetermined
10031,httpd,UNKNOWN,"/* RFC 1952 Section 2.3 defines the gzip header:
 *
 * +---+---+---+---+---+---+---+---+---+---+
 * |ID1|ID2|CM |FLG|     MTIME     |XFL|OS |
 * +---+---+---+---+---+---+---+---+---+---+
 */",undetermined
10032,httpd,UNKNOWN,/* mtime */,undetermined
10033,httpd,UNKNOWN,/* Unix OS_CODE */,undetermined
10034,httpd,UNKNOWN,/* magic header */,undetermined
10035,httpd,UNKNOWN,/* windowsize is negative to suppress Zlib header */,undetermined
10036,httpd,UNKNOWN,"/* Check whether a request is gzipped, so we can un-gzip it.
 * If a request has multiple encodings, we need the gzip
 * to be the outermost non-identity encoding.
 */",undetermined
10037,httpd,UNKNOWN,/* the output filter has two tables and a content_encoding to check */,undetermined
10038,httpd,UNKNOWN,/* check the usual/simple case first */,undetermined
10039,httpd,UNKNOWN,"/* If the outermost encoding isn't gzip, there's nowt
             * we can do.  So only check the last non-identity token
             */",undetermined
10040,httpd,UNKNOWN,/* gzip:identity or other:identity */,undetermined
10041,httpd,UNKNOWN,/* seen all tokens */,undetermined
10042,httpd,UNKNOWN,/* strip the token and find the next one */,undetermined
10043,httpd,UNKNOWN,/* found a non-identity token */,undetermined
10044,httpd,UNKNOWN,"/*
     * If we have dealt with the headers above but content_encoding was set
     * before sync it with the new value in the hdrs table as
     * r->content_encoding takes precedence later on in the http_header_filter
     * and hence would destroy what we have just set in the hdrs table.
     */",undetermined
10045,httpd,UNKNOWN,"/* Outputs a long in LSB order to the given file
 * only the bottom 4 bits are required for the deflate file format.
 */",undetermined
10046,httpd,UNKNOWN,"/* Inputs a string and returns a long.
 */",undetermined
10047,httpd,UNKNOWN,/* Number of validation bytes (CRC and length) after the compressed data */,undetermined
10048,httpd,UNKNOWN,"/* Do not update ctx->crc, see comment in flush_libz_buffer */",undetermined
10049,httpd,UNKNOWN,"/* Do update ctx->crc, see comment in flush_libz_buffer */",undetermined
10050,httpd,UNKNOWN,"/*
              * Do we need to update ctx->crc? Usually this is the case for
              * inflate action where we need to do a crc on the output, whereas
              * in the deflate case we need to do a crc on the input
              */",undetermined
10051,httpd,UNKNOWN,"/*
          * We can ignore Z_BUF_ERROR because:
          * When we call libz_func we can assume that
          *
          * - avail_in is zero (due to the surrounding code that calls
          *   flush_libz_buffer)
          * - avail_out is non zero due to our actions some lines above
          *
          * So the only reason for Z_BUF_ERROR is that the internal libz
          * buffers are now empty and thus we called libz_func one time
          * too often. This does not hurt. It simply says that we are done.
          */",undetermined
10052,httpd,UNKNOWN,"/* ETag must be unique among the possible representations, so a change
 * to content-encoding requires a corresponding change to the ETag.
 * This routine appends -transform (e.g., -gzip) to the entity-tag
 * value inside the double-quotes if an ETag has already been set
 * and its value already contains double-quotes. PR 39727
 */",undetermined
10053,httpd,UNKNOWN,/* copy etag to newtag up to last quote */,undetermined
10054,httpd,UNKNOWN,/* append dash to newtag */,undetermined
10055,httpd,UNKNOWN,/* copy transform to newtag */,undetermined
10056,httpd,UNKNOWN,/* append quote to newtag */,undetermined
10057,httpd,UNKNOWN,/* null terminate newtag */,undetermined
10058,httpd,UNKNOWN,/* Do nothing if asked to filter nothing. */,undetermined
10059,httpd,UNKNOWN,"/* If we don't have a context, we need to ensure that it is okay to send
     * the deflated content.  If we have a context, that means we've done
     * this before and we liked it.
     * This could be not so nice if we always fail.  But, if we succeed,
     * we're in better shape.
     */",undetermined
10060,httpd,UNKNOWN,/* We have checked above that bb is not empty */,undetermined
10061,httpd,UNKNOWN,"/*
             * If we already know the size of the response, we can skip
             * compression on responses smaller than the compression overhead.
             * However, if we compress, we must initialize deflate_out before
             * calling ap_pass_brigade() for the first time.  Otherwise the
             * headers will be sent to the client without
             * ""Content-Encoding: gzip"".
             */",undetermined
10062,httpd,UNKNOWN,/* 50 is for Content-Encoding and Vary headers and ETag suffix */,undetermined
10063,httpd,UNKNOWN,"/*
         * Only work on main request, not subrequests,
         * that are not a 204 response with no content
         * and are not tagged with the no-gzip env variable
         * and not a partial response to a Range request.
         */",undetermined
10064,httpd,UNKNOWN,"/* Some browsers might have problems with content types
         * other than text/html, so set gzip-only-text/html
         * (with browsermatch) for them
         */",undetermined
10065,httpd,UNKNOWN,"/* Let's see what our current Content-Encoding is.
         * If it's already encoded, don't compress again.
         * (We could, but let's not.)
         */",undetermined
10066,httpd,UNKNOWN,/* stolen from mod_negotiation: */,undetermined
10067,httpd,UNKNOWN,"/* Otherwise, skip token */",undetermined
10068,httpd,UNKNOWN,"/* Even if we don't accept this request based on it not having
         * the Accept-Encoding, we need to note that we were looking
         * for this header and downstream proxies should be aware of that.
         */",undetermined
10069,httpd,UNKNOWN,"/* force-gzip will just force it out regardless if the browser
         * can actually do anything with it.
         */",undetermined
10070,httpd,UNKNOWN,"/* if they don't have the line, then they can't play */",undetermined
10071,httpd,UNKNOWN,"/* skip parameters, XXX: ;q=foo evaluation? */",undetermined
10072,httpd,UNKNOWN,/* retrieve next token */,undetermined
10073,httpd,UNKNOWN,/* No acceptable token found. */,undetermined
10074,httpd,UNKNOWN,"/* At this point we have decided to filter the content. Let's try to
         * to initialize zlib (except for 304 responses, where we will only
         * send out the headers).
         */",undetermined
10075,httpd,UNKNOWN,"/*
                 * Remove ourselves as it does not make sense to return:
                 * We are not able to init libz and pass data down the chain
                 * uncompressed.
                 */",undetermined
10076,httpd,UNKNOWN,"/*
             * Register a cleanup function to ensure that we cleanup the internal
             * libz resources.
             */",undetermined
10077,httpd,UNKNOWN,"/* Set the filter init flag so subsequent invocations know we are
             * active.
             */",undetermined
10078,httpd,UNKNOWN,"/*
         * Zlib initialization worked, so we can now change the important
         * content metadata before sending the response out.
         */",undetermined
10079,httpd,UNKNOWN,"/* If the entire Content-Encoding is ""identity"", we can replace it. */",undetermined
10080,httpd,UNKNOWN,/* Fix r->content_encoding if it was set before */,undetermined
10081,httpd,UNKNOWN,"/* For a 304 response, only change the headers */",undetermined
10082,httpd,UNKNOWN,/* add immortal gzip header */,undetermined
10083,httpd,UNKNOWN,/* initialize deflate output buffer */,undetermined
10084,httpd,UNKNOWN,"/* Hmm.  We've run through the filter init before as we have a ctx,
         * but we never initialized.  We probably have a dangling ref.  Bail.
         */",undetermined
10085,httpd,UNKNOWN,"/*
         * Optimization: If we are a HEAD request and bytes_sent is not zero
         * it means that we have passed the content-length filter once and
         * have more data to sent. This means that the content-length filter
         * could not determine our content-length for the response to the
         * HEAD request anyway (the associated GET request would deliver the
         * body in chunked encoding) and we can stop compressing.
         */",undetermined
10086,httpd,UNKNOWN,/* should be zero already anyway */,undetermined
10087,httpd,UNKNOWN,/* flush the remaining data from the zlib buffers */,undetermined
10088,httpd,UNKNOWN,/* leave notes for logging */,undetermined
10089,httpd,UNKNOWN,/* No need for cleanup any longer */,undetermined
10090,httpd,UNKNOWN,"/* Remove EOS from the old list, and insert into the new. */",undetermined
10091,httpd,UNKNOWN,"/* Okay, we've seen the EOS.
             * Time to pass it along down the chain.
             */",undetermined
10092,httpd,UNKNOWN,/* flush the remaining data from the zlib buffers */,undetermined
10093,httpd,UNKNOWN,/* Remove flush bucket from old brigade anf insert into the new. */,undetermined
10094,httpd,UNKNOWN,"/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */",undetermined
10095,httpd,UNKNOWN,/* read */,undetermined
10096,httpd,UNKNOWN,/* This crc32 function is from zlib. */,undetermined
10097,httpd,UNKNOWN,/* write */,undetermined
10098,httpd,UNKNOWN,"/* We just lost const-ness,
                                                      * but we'll just have to
                                                      * trust zlib */",undetermined
10099,httpd,UNKNOWN,/* Send what we have right now to the next filter. */,undetermined
10100,httpd,UNKNOWN,/* This is the deflate input filter (inflates).  */,undetermined
10101,httpd,UNKNOWN,/* just get out of the way of things we don't want. */,undetermined
10102,httpd,UNKNOWN,/* only work on main request/no subrequests */,undetermined
10103,httpd,UNKNOWN,/* We can't operate on Content-Ranges */,undetermined
10104,httpd,UNKNOWN,"/* Check whether request body is gzipped.
         *
         * If it is, we're transforming the contents, invalidating
         * some request headers including Content-Encoding.
         *
         * If not, we just remove ourself.
         */",undetermined
10105,httpd,UNKNOWN,/* zero length body? step aside */,undetermined
10106,httpd,UNKNOWN,/* We didn't get the magic bytes. */,undetermined
10107,httpd,UNKNOWN,/* We can't handle flags for now. */,undetermined
10108,httpd,UNKNOWN,/* initialize deflate output buffer */,undetermined
10109,httpd,UNKNOWN,/* What about APR_EAGAIN errors? */,undetermined
10110,httpd,UNKNOWN,/* Move everything to the returning brigade. */,undetermined
10111,httpd,UNKNOWN,/* Move everything to the returning brigade. */,undetermined
10112,httpd,UNKNOWN,/* sanity check - data after completed compressed body and before eos? */,undetermined
10113,httpd,UNKNOWN,/* read */,undetermined
10114,httpd,UNKNOWN,/* pass through zlib inflate. */,undetermined
10115,httpd,UNKNOWN,/* Is the remaining 8 bytes already in the avail stream? */,undetermined
10116,httpd,UNKNOWN,"/* FIXME: We need to grab the 8 verification bytes
                     * from the wire! */",undetermined
10117,httpd,UNKNOWN,"/* If we are about to return nothing for a 'blocking' read and we have
     * some data in our zlib buffer, flush it out so we can return something.
     */",undetermined
10118,httpd,UNKNOWN,/* Filter to inflate for a content-transforming proxy.  */,undetermined
10119,httpd,UNKNOWN,/* Do nothing if asked to filter nothing. */,undetermined
10120,httpd,UNKNOWN,"/*
         * Only work on main request, not subrequests,
         * that are not a 204 response with no content
         * and not a partial response to a Range request,
         * and only when Content-Encoding ends in gzip.
         */",undetermined
10121,httpd,UNKNOWN,"/*
         * At this point we have decided to filter the content, so change
         * important content metadata before sending any response out.
         * Content-Encoding was already reset by the check_gzip() call.
         */",undetermined
10122,httpd,UNKNOWN,"/* For a 304 response, only change the headers */",undetermined
10123,httpd,UNKNOWN,"/*
             * Remove ourselves as it does not make sense to return:
             * We are not able to init libz and pass data down the chain
             * compressed.
             */",undetermined
10124,httpd,UNKNOWN,"/*
         * Register a cleanup function to ensure that we cleanup the internal
         * libz resources.
         */",undetermined
10125,httpd,UNKNOWN,/* initialize inflate output buffer */,undetermined
10126,httpd,UNKNOWN,"/*
             * We are really done now. Ensure that we never return here, even
             * if a second EOS bucket falls down the chain. Thus remove
             * ourselves.
             */",undetermined
10127,httpd,UNKNOWN,/* should be zero already anyway */,undetermined
10128,httpd,UNKNOWN,"/*
             * Flush the remaining data from the zlib buffers. It is correct
             * to use Z_SYNC_FLUSH in this case and not Z_FINISH as in the
             * deflate case. In the inflate case Z_FINISH requires to have a
             * large enough output buffer to put ALL data in otherwise it
             * fails, whereas in the deflate case you can empty a filled output
             * buffer and call it again until no more output can be created.
             */",undetermined
10129,httpd,UNKNOWN,/* No need for cleanup any longer */,undetermined
10130,httpd,UNKNOWN,"/* Remove EOS from the old list, and insert into the new. */",undetermined
10131,httpd,UNKNOWN,"/*
             * Okay, we've seen the EOS.
             * Time to pass it along down the chain.
             */",undetermined
10132,httpd,UNKNOWN,/* flush the remaining data from the zlib buffers */,undetermined
10133,httpd,UNKNOWN,/* Remove flush bucket from old brigade anf insert into the new. */,undetermined
10134,httpd,UNKNOWN,"/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */",undetermined
10135,httpd,UNKNOWN,/* read */,undetermined
10136,httpd,UNKNOWN,/* first bucket contains zlib header */,undetermined
10137,httpd,UNKNOWN,/* pass through zlib inflate. */,undetermined
10138,httpd,UNKNOWN,/* Saved copy_size bytes */,undetermined
10139,httpd,UNKNOWN,"/*
                 * There is nothing worth consuming for zlib left, because it is
                 * either garbage data or the data has been copied to the
                 * validation buffer (processing validation data is no business
                 * for zlib). So set ctx->stream.avail_in to zero to indicate
                 * this to the following while loop.
                 */",undetermined
10140,httpd,UNKNOWN,/* Send what we have right now to the next filter. */,undetermined
10141,httpd,UNKNOWN,"/*
                 * We have inflated all data. Now try to capture the
                 * validation bytes. We may not have them all available
                 * right now, but capture what is there.
                 */",undetermined
10142,httpd,UNKNOWN,/* dir config creater */,undetermined
10143,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
10144,httpd,UNKNOWN,/* server config */,undetermined
10145,httpd,UNKNOWN,/* merge server config */,undetermined
10146,httpd,UNKNOWN,/* command table */,undetermined
10147,httpd,UNKNOWN,/* register hooks */,undetermined
10148,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10149,httpd,UNKNOWN,"/*
 * mod_ext_filter allows Unix-style filters to filter http content.
 */",undetermined
10150,httpd,UNKNOWN,"/* list of IMTs we process (well, just one for now) */",undetermined
10151,httpd,UNKNOWN,/* IMT of filtered output */,undetermined
10152,httpd,UNKNOWN,/* if admin coded something... */,undetermined
10153,httpd,UNKNOWN,/* if admin coded something... */,undetermined
10154,httpd,UNKNOWN,"/* move past leading "" */",undetermined
10155,httpd,UNKNOWN,/* find true end of args string (accounting for escaped quotes) */,undetermined
10156,httpd,UNKNOWN,"/* copy *just* the arg string for parsing, */",undetermined
10157,httpd,UNKNOWN,"/* move past trailing "" */",undetermined
10158,httpd,UNKNOWN,/* parse and tokenize the args. */,undetermined
10159,httpd,UNKNOWN,/* simple path */,undetermined
10160,httpd,UNKNOWN,/* Allocate space for two argv pointers and parse the args. */,undetermined
10161,httpd,UNKNOWN,/* end of args */,undetermined
10162,httpd,UNKNOWN,"/* During request processing, we find information about the filter
     * by looking up the filter name provided by core server in our
     * hash table.  But the core server has normalized the filter
     * name by converting it to lower case.  Thus, when adding the
     * filter to our hash table we have to use lower case as well.
     */",undetermined
10163,httpd,UNKNOWN,"/* Nasty parsing...  I wish I could simply use ap_getword_white()
         * here and then look at the token, but ap_getword_white() doesn't
         * do the right thing when we have cmd=""word word word""
         */",undetermined
10164,httpd,UNKNOWN,"/* parsing is done...  register the filter
     */",undetermined
10165,httpd,UNKNOWN,/* XXX need a way to ensure uniqueness among all filters */,undetermined
10166,httpd,UNKNOWN,/* XXX need a way to ensure uniqueness among all filters */,undetermined
10167,httpd,UNKNOWN,/* we set the field wrong somehow */,undetermined
10168,httpd,UNKNOWN,/* same as SetInputFilter/SetOutputFilter */,undetermined
10169,httpd,UNKNOWN,"/* otherwise, we're out of sync with APR */",undetermined
10170,httpd,UNKNOWN,"/* otherwise, we're out of sync with APR */",undetermined
10171,httpd,UNKNOWN,"/* otherwise, we're out of sync with APR */",undetermined
10172,httpd,UNKNOWN,/* if at least one limit defined */,undetermined
10173,httpd,UNKNOWN,"/* init_ext_filter_process: get the external filter process going
 * This is per-filter-instance (i.e., per-request) initialization.
 */",undetermined
10174,httpd,UNKNOWN,/* stderr in child */,undetermined
10175,httpd,UNKNOWN,"/* add standard CGI variables as well as DOCUMENT_URI, DOCUMENT_PATH_INFO,
     * and QUERY_STRING_UNESCAPED
     */",undetermined
10176,httpd,UNKNOWN,/* QUERY_STRING is added by ap_add_cgi_vars */,undetermined
10177,httpd,UNKNOWN,/* environment */,undetermined
10178,httpd,UNKNOWN,"/* We don't want the handle to the child's stdin inherited by any
     * other processes created by httpd.  Otherwise, when we close our
     * handle, the child won't see EOF because another handle will still
     * be open.
     */",undetermined
10179,httpd,UNKNOWN,/* other mechanism */,undetermined
10180,httpd,UNKNOWN,/* look for the user-defined filter */,undetermined
10181,httpd,UNKNOWN,/* wrong IMT for us; don't mess with the output */,undetermined
10182,httpd,UNKNOWN,/* an environment variable that enables the filter isn't set; bail */,undetermined
10183,httpd,UNKNOWN,/* an environment variable that disables the filter is set; bail */,undetermined
10184,httpd,UNKNOWN,"/* nasty, but needed to avoid confusing the browser
             */",undetermined
10185,httpd,UNKNOWN,"/* drain_available_output():
 *
 * if any data is available from the filter, read it and append it
 * to the the bucket brigade
 */",undetermined
10186,httpd,UNKNOWN,"/* we should never get here; if we do, a bogus error message would be
     * the least of our problems
     */",undetermined
10187,httpd,UNKNOWN,"/* XXX handle blocking conditions here...  if we block, we need
             * to read data from the child process and pass it down to the
             * next filter!
             */",undetermined
10188,httpd,UNKNOWN,/* some error such as APR_TIMEUP */,undetermined
10189,httpd,UNKNOWN,/* APR_FILES_AS_SOCKETS */,undetermined
10190,httpd,UNKNOWN,"/* Yuck... I'd really like to wait until I can read
                 * or write, but instead I have to sleep and try again
                 */",undetermined
10191,httpd,UNKNOWN,/* 100 milliseconds */,undetermined
10192,httpd,UNKNOWN,/* APR_FILES_AS_SOCKETS */,undetermined
10193,httpd,UNKNOWN,"/* ef_unified_filter:
 *
 * runs the bucket brigade bb through the filter and puts the result into
 * bb, dropping the previous content of bb (the input)
 */",undetermined
10194,httpd,UNKNOWN,"/* Good cast, we just tested len isn't negative */",undetermined
10195,httpd,UNKNOWN,"/* close the child's stdin to signal that no more data is coming;
         * that will cause the child to finish generating output
         */",undetermined
10196,httpd,UNKNOWN,"/* since we've seen eos and closed the child's stdin, set the proper pipe
         * timeout; we don't care if we don't return from apr_file_read() for a while...
         */",undetermined
10197,httpd,UNKNOWN,"/* should not occur, because we have an APR timeout in place */",undetermined
10198,httpd,UNKNOWN,"/* Match behaviour of HTTP_IN if filter is re-invoked after
         * hitting EOS: give back another EOS. */",undetermined
10199,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10200,httpd,UNKNOWN,"/**
 * @brief is a filter provider, as defined and implemented by mod_filter.
 *
 * The struct is a linked list, with dispatch criteria
 * defined for each filter.  The provider implementation itself is a
 * (2.0-compatible) ap_filter_rec_t* frec.
 */",undetermined
10201,httpd,UNKNOWN,/** The filter that implements this provider */,undetermined
10202,httpd,UNKNOWN,/** The next provider in the list */,undetermined
10203,httpd,UNKNOWN,/** we need provider_ctx to save ctx values set by providers in filter_init */,undetermined
10204,httpd,UNKNOWN,"/* normal, operational use */",undetermined
10205,httpd,UNKNOWN,/* mod_diagnostics level */,undetermined
10206,httpd,UNKNOWN,"/* if anyone errors out here, so do we */",undetermined
10207,httpd,UNKNOWN,/* the filter init function set a ctx - we need to record it */,undetermined
10208,httpd,UNKNOWN,/* Check registered providers in order */,undetermined
10209,httpd,UNKNOWN,/* Handle 'content-type;charset=...' correctly */,undetermined
10210,httpd,UNKNOWN,/* condition matches this provider */,undetermined
10211,httpd,UNKNOWN,"/* check protocol
             *
             * FIXME:
             * This is a quick hack and almost certainly buggy.
             * The idea is that by putting this in mod_filter, we relieve
             * filter implementations of the burden of fixing up HTTP headers
             * for cases that are routinely affected by filters.
             *
             * Default is ALWAYS to do nothing, so as not to tread on the
             * toes of filters which want to do it themselves.
             *
             */",undetermined
10212,httpd,UNKNOWN,/* some specific things can't happen in a proxy */,undetermined
10213,httpd,UNKNOWN,/* can't use this provider; try next */,undetermined
10214,httpd,UNKNOWN,/* can't use this provider; try next */,undetermined
10215,httpd,UNKNOWN,/* things that are invalidated if the filter transforms content */,undetermined
10216,httpd,UNKNOWN,/* no-cache is for a filter that has different effect per-hit */,undetermined
10217,httpd,UNKNOWN,/* restore range header we saved earlier */,undetermined
10218,httpd,UNKNOWN,/* No provider matched */,undetermined
10219,httpd,UNKNOWN,/* look up a handler function if we haven't already set it */,undetermined
10220,httpd,UNKNOWN,"/* call the content filter with its own context, then restore our
     * context
     */",undetermined
10221,httpd,UNKNOWN,/* Fixup the args: it's really pname that's optional */,undetermined
10222,httpd,UNKNOWN,/* Find provider */,undetermined
10223,httpd,UNKNOWN,/* Now set flags from our args */,undetermined
10224,httpd,UNKNOWN,"/* fname has been declared with DeclareFilter, so we can look it up */",undetermined
10225,httpd,UNKNOWN,"/* or if provider is mod_filter itself, we can also look it up */",undetermined
10226,httpd,UNKNOWN,"/* if provider has been registered, we can look it up */",undetermined
10227,httpd,UNKNOWN,/* add to end of chain */,undetermined
10228,httpd,UNKNOWN,/* add to start of chain */,undetermined
10229,httpd,UNKNOWN,/* remove from chain */,undetermined
10230,httpd,UNKNOWN,/* Empty the chain */,undetermined
10231,httpd,UNKNOWN,"/** IG: Add a NULL provider to the beginning so that
                      *  we can ensure that we'll empty everything before
                      *  this when doing config merges later */",undetermined
10232,httpd,UNKNOWN,/* initialise chain with this arg */,undetermined
10233,httpd,UNKNOWN,/** IG: Prepend a NULL provider to the beginning as above */,undetermined
10234,httpd,UNKNOWN,/* add to end */,undetermined
10235,httpd,UNKNOWN,/* construct fname from name */,undetermined
10236,httpd,UNKNOWN,"/* check whether this is already registered, in which case
     * it's already in the filter chain
     */",undetermined
10237,httpd,UNKNOWN,"/* If it's the first time through, add to filterchain */",undetermined
10238,httpd,UNKNOWN,"/* back compatibility, need to parse multiple components in filter name */",undetermined
10239,httpd,UNKNOWN,"/** IG: Now that we've merged to the final config, go one last time
     *  through the chain, and prune out the NULL filters */",undetermined
10240,httpd,UNKNOWN,/** Filter out merged chain resets */,undetermined
10241,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10242,httpd,UNKNOWN,/* helper for Latin1 <-> entity encoding */,undetermined
10243,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
10244,httpd,UNKNOWN,/* !APR_CHARSET_EBCDIC */,undetermined
10245,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                 Types and Structures
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10246,httpd,UNKNOWN,/* sll used for string expansion */,undetermined
10247,httpd,UNKNOWN,/* conditional expression parser stuff */,undetermined
10248,httpd,UNKNOWN,/* main parser states */,undetermined
10249,httpd,UNKNOWN,/* quote character value (or \0) */,undetermined
10250,httpd,UNKNOWN,/* parse position of partial matches */,undetermined
10251,httpd,UNKNOWN,/* name of the current directive */,undetermined
10252,httpd,UNKNOWN,/* length of the current directive name */,undetermined
10253,httpd,UNKNOWN,/* currently parsed argument */,undetermined
10254,httpd,UNKNOWN,/* all arguments */,undetermined
10255,httpd,UNKNOWN,/* NULL if there wasn't a regex yet */,undetermined
10256,httpd,UNKNOWN,"/* use ap_expr or legacy mod_include
                                    expression parser? */",undetermined
10257,httpd,UNKNOWN,/* NULL if there wasn't an ap_expr yet */,undetermined
10258,httpd,UNKNOWN,/* for use by ap_expr_eval_ctx */,undetermined
10259,httpd,UNKNOWN,/* for use by ap_expr_eval_ctx */,undetermined
10260,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                  Debugging Utilities
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10261,httpd,UNKNOWN,"/* it is possible to call this function within the parser loop, to see
     * how the tree is built. That way, we must cleanup after us to dump
     * always the whole tree
     */",undetermined
10262,httpd,UNKNOWN,/* DEBUG_INCLUDE */,undetermined
10263,httpd,UNKNOWN,/* !DEBUG_INCLUDE */,undetermined
10264,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                 Static Module Data
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10265,httpd,UNKNOWN,/* global module structure */,undetermined
10266,httpd,UNKNOWN,/* function handlers for include directives */,undetermined
10267,httpd,UNKNOWN,/* forward declaration of handler registry */,undetermined
10268,httpd,UNKNOWN,"/* Sentinel value to store in subprocess_env for items that
 * shouldn't be evaluated until/unless they're actually used
 */",undetermined
10269,httpd,UNKNOWN,/* default values */,undetermined
10270,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |            Environment/Expansion Functions
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10271,httpd,UNKNOWN,"/*
 * decodes a string containing html entities or numeric character references.
 * 's' is overwritten with the decoded string.
 * If 's' is syntatically incorrect, then the followed fixups will be made:
 *   unknown entities will be left undecoded;
 *   references to unused numeric characters will be deleted.
 *   In particular, &#00; will not be decoded, but will be deleted.
 */",undetermined
10272,httpd,UNKNOWN,/* maximum length of any ISO-LATIN-1 HTML entity name. */,undetermined
10273,httpd,UNKNOWN,"/* The following is a shrinking transformation, therefore safe. */",undetermined
10274,httpd,UNKNOWN,/* 0 */,undetermined
10275,httpd,UNKNOWN,/* 1 */,undetermined
10276,httpd,UNKNOWN,/* 2 */,undetermined
10277,httpd,UNKNOWN,/* 3 */,undetermined
10278,httpd,UNKNOWN,/* 4 */,undetermined
10279,httpd,UNKNOWN,/* 5 */,undetermined
10280,httpd,UNKNOWN,/* 6 */,undetermined
10281,httpd,UNKNOWN,"/* Do a fast scan through the string until we find anything
     * that needs more complicated handling
     */",undetermined
10282,httpd,UNKNOWN,/* find end of entity */,undetermined
10283,httpd,UNKNOWN,/* treat as normal data */,undetermined
10284,httpd,UNKNOWN,/* is it numeric ? */,undetermined
10285,httpd,UNKNOWN,/* no data to output */,undetermined
10286,httpd,UNKNOWN,/* wrong length */,undetermined
10287,httpd,UNKNOWN,/* skip it */,undetermined
10288,httpd,UNKNOWN,/* unknown */,undetermined
10289,httpd,UNKNOWN,"/* Handle $0 .. $9 from the last regex evaluated.
         * The choice of returning NULL strings on not-found,
         * v.s. empty strings on an empty match is deliberate.
         */",undetermined
10290,httpd,UNKNOWN,/* This particular subpattern was not used by the regex */,undetermined
10291,httpd,UNKNOWN,"/* keep legacy ""env"" semantics */",undetermined
10292,httpd,UNKNOWN,"/*
     * We could also make the SSI vars available as %{...} style variables
     * (AP_EXPR_FUNC_VAR), but this would create problems if we ever want
     * to cache parsed expressions for performance reasons.
     */",undetermined
10293,httpd,UNKNOWN,"/*
 * Do variable substitution on strings
 *
 * (Note: If out==NULL, this function allocs a buffer for the resulting
 * string from ctx->pool. The return value is always the parsed string)
 */",undetermined
10294,httpd,UNKNOWN,"/* sanity check, out && !length is not supported */",undetermined
10295,httpd,UNKNOWN,/* fast exit */,undetermined
10296,httpd,UNKNOWN,"/* well, actually something to do */",undetermined
10297,httpd,UNKNOWN,/* loop for specials */,undetermined
10298,httpd,UNKNOWN,/* prepare next entry */,undetermined
10299,httpd,UNKNOWN,"/*
         * escaped character
         */",undetermined
10300,httpd,UNKNOWN,"/*
         * variable expansion
         */",undetermined
10301,httpd,UNKNOWN,/* *p == '$' */,undetermined
10302,httpd,UNKNOWN,/* empty name results in a copy of '$' in the output string */,undetermined
10303,httpd,UNKNOWN,/* check the remainder */,undetermined
10304,httpd,UNKNOWN,/* assemble result */,undetermined
10305,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |              Conditional Expression Parser
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10306,httpd,UNKNOWN,/* Skip leading white space */,undetermined
10307,httpd,UNKNOWN,/* the default type */,undetermined
10308,httpd,UNKNOWN,"/* if last token was ACCESS, this token is STRING */",undetermined
10309,httpd,UNKNOWN,"/* It's a string or regex token
     * Now search for the next token, which finishes this string
     */",undetermined
10310,httpd,UNKNOWN,/* Create Parse Tree */,undetermined
10311,httpd,UNKNOWN,"/* uncomment this to see how the tree a built:
         *
         * DEBUG_DUMP_TREE(ctx, root);
         */",undetermined
10312,httpd,UNKNOWN,/* Evaluate Parse Tree */,undetermined
10313,httpd,UNKNOWN,/* short circuit evaluation */,undetermined
10314,httpd,UNKNOWN,/* should not happen */,undetermined
10315,httpd,UNKNOWN,/* 400 and higher are considered access denied */,undetermined
10316,httpd,UNKNOWN,"/* same as above, but use common ap_expr syntax / API */",undetermined
10317,httpd,UNKNOWN,"/* ap_expr_exec_ctx() does not care about re->have_match but only about
         * re->source
         */",undetermined
10318,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                    Action Handlers
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10319,httpd,UNKNOWN,"/*
 * Extract the next tag name and value.
 * If there are no more tags, set the tag name to NULL.
 * The tag value is html decoded if dodecode is non-zero.
 * The tag value may be NULL if there is no tag value..
 */",undetermined
10320,httpd,UNKNOWN,/* be safe; only files in this directory or below allowed */,undetermined
10321,httpd,UNKNOWN,"/* note: it is okay to pass NULL for the ""next filter"" since
               we never attempt to ""run"" this sub request. */",undetermined
10322,httpd,UNKNOWN,"/* note: it is okay to pass NULL for the ""next filter"" since
           we never attempt to ""run"" this sub request. */",undetermined
10323,httpd,UNKNOWN,"/*
 * <!--#include virtual|file=""..."" [onerror|virtual|file=""...""] ... -->
 *
 * Output each file/virtual in turn until one of them returns an error.
 * On error, ignore all further file/virtual attributes until we reach
 * an onerror attribute, where we make an attempt to serve the onerror
 * virtual url. If onerror fails, or no onerror is present, the default
 * error string is inserted into the stream.
 */",undetermined
10324,httpd,UNKNOWN,/* be safe; only files in this directory or below allowed */,undetermined
10325,httpd,UNKNOWN,"/* See the Kludge in includes_filter for why.
         * Basically, it puts a bread crumb in here, then looks
         * for the crumb later to see if its been here.
         */",undetermined
10326,httpd,UNKNOWN,"/* onerror threw an error, give up completely */",undetermined
10327,httpd,UNKNOWN,"/* Do *not* destroy the subrequest here; it may have allocated
         * variables in this r->subprocess_env in the subrequest's
         * r->pool, so that pool must survive as long as this request.
         * Yes, this is a memory leak. */",undetermined
10328,httpd,UNKNOWN,"/*
 * <!--#echo [decoding=""...""] [encoding=""...""] var=""..."" [decoding=""...""]
 *  [encoding=""...""] var=""..."" ... -->
 */",undetermined
10329,httpd,UNKNOWN,/* do nothing */,undetermined
10330,httpd,UNKNOWN,/* do nothing */,undetermined
10331,httpd,UNKNOWN,"/*
 * <!--#config [timefmt=""...""] [sizefmt=""...""] [errmsg=""...""]
 *             [echomsg=""...""] -->
 */",undetermined
10332,httpd,UNKNOWN,"/*
 * <!--#fsize virtual|file=""..."" [virtual|file=""...""] ... -->
 */",undetermined
10333,httpd,UNKNOWN,/* omit the \0 terminator */,undetermined
10334,httpd,UNKNOWN,"/*
 * <!--#flastmod virtual|file=""..."" [virtual|file=""...""] ... -->
 */",undetermined
10335,httpd,UNKNOWN,"/*
 * <!--#if expr=""..."" -->
 */",undetermined
10336,httpd,UNKNOWN,"/*
 * <!--#elif expr=""..."" -->
 */",undetermined
10337,httpd,UNKNOWN,"/*
 * <!--#else -->
 */",undetermined
10338,httpd,UNKNOWN,"/*
 * <!--#endif -->
 */",undetermined
10339,httpd,UNKNOWN,"/*
 * <!--#set var=""..."" value=""..."" ... -->
 */",undetermined
10340,httpd,UNKNOWN,"/* we need to use the 'main' request pool to set notes as that is
     * a notes lifetime
     */",undetermined
10341,httpd,UNKNOWN,/* do nothing */,undetermined
10342,httpd,UNKNOWN,/* do nothing */,undetermined
10343,httpd,UNKNOWN,"/*
 * <!--#printenv -->
 */",undetermined
10344,httpd,UNKNOWN,/* get key */,undetermined
10345,httpd,UNKNOWN,/* get value */,undetermined
10346,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |               Main Includes-Filter Engine
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10347,httpd,UNKNOWN,"/* This is an implementation of the BNDM search algorithm.
 *
 * Fast and Flexible String Matching by Combining Bit-parallelism and
 * Suffix Automata (2001)
 * Gonzalo Navarro, Mathieu Raffinot
 *
 * http://www-igm.univ-mlv.fr/~raffinot/ftp/jea2001.ps.gz
 *
 * Initial code submitted by Sascha Schumann.
 */",undetermined
10348,httpd,UNKNOWN,/* Precompile the bndm_t data structure. */,undetermined
10349,httpd,UNKNOWN,"/* Implements the BNDM search algorithm (as described above).
 *
 * h  - the string to look in
 * hl - length of the string to look for
 * t  - precompiled bndm structure against the pattern
 *
 * Returns the count of character that is the first match or hl if no
 * match is found.
 */",undetermined
10350,httpd,UNKNOWN,/* pi: p initial */,undetermined
10351,httpd,UNKNOWN,/* compare window right to left. point to the first char */,undetermined
10352,httpd,UNKNOWN,"/*
 * returns the index position of the first byte of start_seq (or the len of
 * the buffer as non-match)
 */",undetermined
10353,httpd,UNKNOWN,/* try partial match at the end of the buffer (below) */,undetermined
10354,httpd,UNKNOWN,"/* try fast bndm search over the buffer
         * (hopefully the whole start sequence can be found in this buffer)
         */",undetermined
10355,httpd,UNKNOWN,"/* wow, found it. ready. */",undetermined
10356,httpd,UNKNOWN,"/* ok, the pattern can't be found as whole in the buffer,
             * check the end for a partial match
             */",undetermined
10357,httpd,UNKNOWN,/* found a possible start_seq start */,undetermined
10358,httpd,UNKNOWN,/* partial match found. Store the info for the next round */,undetermined
10359,httpd,UNKNOWN,"/* we must try all combinations; consider (e.g.) SSIStartTag ""--->""
         * and a string data of ""--.-"" and the end of the buffer
         */",undetermined
10360,httpd,UNKNOWN,/* no match */,undetermined
10361,httpd,UNKNOWN,"/*
 * returns the first byte *after* the partial (or final) match.
 *
 * If we had to trick with the start_seq start, 'release' returns the
 * number of chars of the start_seq which appeared not to be part of a
 * full tag and may have to be passed down the filter chain.
 */",undetermined
10362,httpd,UNKNOWN,/* full match */,undetermined
10363,httpd,UNKNOWN,/* the whole buffer is a partial match */,undetermined
10364,httpd,UNKNOWN,"/* No match so far, but again:
         * We must try all combinations, since the start_seq is a random
         * user supplied string
         *
         * So: look if the first char of start_seq appears somewhere within
         * the current partial match. If it does, try to start a match that
         * begins with this offset. (This can happen, if a strange
         * start_seq like ""---->"" spans buffers)
         */",undetermined
10365,httpd,UNKNOWN,"/* if a matching beginning char was found, try to match the
                 * remainder of the old buffer.
                 */",undetermined
10366,httpd,UNKNOWN,"/* yeah, another partial match found in the *old*
                         * buffer, now test the *current* buffer for
                         * continuing match
                         */",undetermined
10367,httpd,UNKNOWN,/* work hard to find a match ;-) */,undetermined
10368,httpd,UNKNOWN,"/* no match at all, release all (wrongly) matched chars so far */",undetermined
10369,httpd,UNKNOWN,"/*
 * returns the position after the directive
 */",undetermined
10370,httpd,UNKNOWN,"/* we have to consider the case of missing space between directive
             * and end_seq (be somewhat lenient), e.g. <!--#printenv-->
             */",undetermined
10371,httpd,UNKNOWN,/* found delimiter whitespace */,undetermined
10372,httpd,UNKNOWN,"/* full match, we're done */",undetermined
10373,httpd,UNKNOWN,"/* partial match, the buffer is too small to match fully */",undetermined
10374,httpd,UNKNOWN,/* no match. continue normal parsing */,undetermined
10375,httpd,UNKNOWN,/* continue immediately with the next state */,undetermined
10376,httpd,UNKNOWN,/* normalize directive name */,undetermined
10377,httpd,UNKNOWN,/* get a rid of a gcc warning about unhandled enumerations */,undetermined
10378,httpd,UNKNOWN,"/*
 * find out whether the next token is (a possible) end_seq or an argument
 */",undetermined
10379,httpd,UNKNOWN,/* skip leading WS */,undetermined
10380,httpd,UNKNOWN,/* buffer doesn't consist of whitespaces only */,undetermined
10381,httpd,UNKNOWN,"/*
 * test the stream for end_seq. If it doesn't match at all, it must be an
 * argument
 */",undetermined
10382,httpd,UNKNOWN,"/* bingo, full match */",undetermined
10383,httpd,UNKNOWN,"/* partial match, the buffer is too small to match fully */",undetermined
10384,httpd,UNKNOWN,"/* no match. It must be an argument string then
     * The caller should cleanup and rewind to the reparse point
     */",undetermined
10385,httpd,UNKNOWN,"/*
 * extract name=value from the buffer
 * A pcre-pattern could look (similar to):
 * name\s*(?:=\s*([""'`]?)value\1(?>\s*))?
 */",undetermined
10386,httpd,UNKNOWN,"/*
         * create argument structure and append it to the current list
         */",undetermined
10387,httpd,UNKNOWN,"/* check whether it's a valid one. If it begins with a quote, we
         * can safely assume, someone forgot the name of the argument
         */",undetermined
10388,httpd,UNKNOWN,/* continue immediately with next state */,undetermined
10389,httpd,UNKNOWN,/* continue with next state immediately */,undetermined
10390,httpd,UNKNOWN,/* no value */,undetermined
10391,httpd,UNKNOWN,/* buffer doesn't consist of whitespaces only */,undetermined
10392,httpd,UNKNOWN,/* continue with next state immediately */,undetermined
10393,httpd,UNKNOWN,"/*
         * The value is still the raw input string. Finally clean it up.
         */",undetermined
10394,httpd,UNKNOWN,/* strip quote escaping \ from the string */,undetermined
10395,httpd,UNKNOWN,/* get a rid of a gcc warning about unhandled enumerations */,undetermined
10396,httpd,UNKNOWN,/* partial match of something */,undetermined
10397,httpd,UNKNOWN,"/*
 * This is the main loop over the current bucket brigade.
 */",undetermined
10398,httpd,UNKNOWN,/* magic pointer for sentinel use */,undetermined
10399,httpd,UNKNOWN,/* fast exit */,undetermined
10400,httpd,UNKNOWN,"/* we may crash, since already cleaned up; hand over the responsibility
     * to the next filter;-)
     */",undetermined
10401,httpd,UNKNOWN,/* All stuff passed along has to be put into that brigade */,undetermined
10402,httpd,UNKNOWN,/* initialization for this loop */,undetermined
10403,httpd,UNKNOWN,/* loop over the current bucket brigade */,undetermined
10404,httpd,UNKNOWN,/* handle meta buckets before reading any data */,undetermined
10405,httpd,UNKNOWN,"/* Hit end of stream, time for cleanup ... But wait!
                 * Perhaps we're not ready yet. We may have to loop one or
                 * two times again to finish our work. In that case, we
                 * just re-insert the EOS bucket to allow for an extra loop.
                 *
                 * PARSE_EXECUTE means, we've hit a directive just before the
                 *    EOS, which is now waiting for execution.
                 *
                 * PARSE_DIRECTIVE_POSTTAIL means, we've hit a directive with
                 *    no argument and no space between directive and end_seq
                 *    just before the EOS. (consider <!--#printenv--> as last
                 *    or only string within the stream). This state, however,
                 *    just cleans up and turns itself to PARSE_EXECUTE, which
                 *    will be passed through within the next (and actually
                 *    last) round.
                 */",undetermined
10406,httpd,UNKNOWN,/* END OF STREAM */,undetermined
10407,httpd,UNKNOWN,/* enough is enough ... */,undetermined
10408,httpd,UNKNOWN,/* read the current bucket data */,undetermined
10409,httpd,UNKNOWN,"/* zero length bucket, fetch next one */",undetermined
10410,httpd,UNKNOWN,"/*
         * it's actually a data containing bucket, start/continue parsing
         */",undetermined
10411,httpd,UNKNOWN,/* no current tag; search for start sequence */,undetermined
10412,httpd,UNKNOWN,/* now delete the start_seq stuff from the remaining bucket */,undetermined
10413,httpd,UNKNOWN,/* full match */,undetermined
10414,httpd,UNKNOWN,/* pass pre-tag stuff */,undetermined
10415,httpd,UNKNOWN,/* we're currently looking for the end of the start sequence */,undetermined
10416,httpd,UNKNOWN,/* check if we mismatched earlier and have to release some chars */,undetermined
10417,httpd,UNKNOWN,/* any match */,undetermined
10418,httpd,UNKNOWN,/* now delete the start_seq stuff from the remaining bucket */,undetermined
10419,httpd,UNKNOWN,/* final match */,undetermined
10420,httpd,UNKNOWN,/* pass pre-tag stuff */,undetermined
10421,httpd,UNKNOWN,/* we're currently grabbing the directive name */,undetermined
10422,httpd,UNKNOWN,/* time for cleanup? */,undetermined
10423,httpd,UNKNOWN,/* skip WS and find out what comes next (arg or end_seq) */,undetermined
10424,httpd,UNKNOWN,/* skipped whitespaces */,undetermined
10425,httpd,UNKNOWN,/* currently parsing name[=val] */,undetermined
10426,httpd,UNKNOWN,/* time for cleanup? */,undetermined
10427,httpd,UNKNOWN,/* try to match end_seq at current pos. */,undetermined
10428,httpd,UNKNOWN,/* full match */,undetermined
10429,httpd,UNKNOWN,/* no match */,undetermined
10430,httpd,UNKNOWN,/* PARSE_ARG must reparse at the beginning */,undetermined
10431,httpd,UNKNOWN,/* partial match */,undetermined
10432,httpd,UNKNOWN,"/* now execute the parsed directive, cleanup the space and
         * start again with PARSE_PRE_HEAD
         */",undetermined
10433,httpd,UNKNOWN,"/* if there was an error, it was already logged; just stop here */",undetermined
10434,httpd,UNKNOWN,/* cleanup */,undetermined
10435,httpd,UNKNOWN,"/* Oooof. Done here, start next round */",undetermined
10436,httpd,UNKNOWN,/* switch(ctx->state) */,undetermined
10437,httpd,UNKNOWN,/* while(brigade) */,undetermined
10438,httpd,UNKNOWN,/* End of stream. Final cleanup */,undetermined
10439,httpd,UNKNOWN,/* cleanup our temporary memory */,undetermined
10440,httpd,UNKNOWN,/* don't forget to finally insert the EOS bucket */,undetermined
10441,httpd,UNKNOWN,"/* if something's left over, pass it along */",undetermined
10442,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                     Runtime Hooks
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10443,httpd,UNKNOWN,"/* When our xbithack value isn't set to full or our platform isn't
     * providing group-level protection bits or our group-level bits do not
     * have group-execite on, we will set the no_local_copy value to 1 so
     * that we will not send 304s.
     */",undetermined
10444,httpd,UNKNOWN,"/* Don't allow ETag headers to be generated - see RFC2616 - 13.3.4.
     * We don't know if we are going to be including a file or executing
     * a program - in either case a strong ETag header will likely be invalid.
     */",undetermined
10445,httpd,UNKNOWN,/* create context for this filter */,undetermined
10446,httpd,UNKNOWN,/* runtime data */,undetermined
10447,httpd,UNKNOWN,"/* Kludge --- for nested includes, we want to keep the subprocess
         * environment of the base document (for compatibility); that means
         * torquing our own last_modified date as well so that the
         * LAST_MODIFIED variable gets reset to the proper value if the
         * nested document resets <!--#config timefmt -->.
         */",undetermined
10448,httpd,UNKNOWN,"/* we're not a nested include, so we create an initial
         * environment */",undetermined
10449,httpd,UNKNOWN,"/* Always unset the content-length.  There is no way to know if
     * the content will be modified at some point by send_parsed_content.
     * It is very possible for us to not find any content in the first
     * 9k of the file, but still have to modify the content of the file.
     * If we are going to pass the file through send_parsed_content, then
     * the content-length should just be unset.
     */",undetermined
10450,httpd,UNKNOWN,"/* Always unset the Last-Modified field - see RFC2616 - 13.3.4.
     * We don't know if we are going to be including a file or executing
     * a program which may change the Last-Modified header or make the
     * content completely dynamic.  Therefore, we can't support these
     * headers.
     *
     * Exception: XBitHack full means we *should* set the
     * Last-Modified field.
     *
     * SSILastModified on means we *should* set the Last-Modified field
     * if not present, or respect an existing value if present.
     */",undetermined
10451,httpd,UNKNOWN,"/* Must we respect the last modified header? By default, no */",undetermined
10452,httpd,UNKNOWN,"/* update the last modified if we have a valid time, and only if
         * we don't already have a valid last modified.
         */",undetermined
10453,httpd,UNKNOWN,/* Assure the platform supports Group protections */,undetermined
10454,httpd,UNKNOWN,/* add QUERY stuff to env cause it ain't yet */,undetermined
10455,httpd,UNKNOWN,/* These OS's don't support xbithack. This is being worked on. */,undetermined
10456,httpd,UNKNOWN,"/* We always return declined, because the default handler actually
     * serves the file.  All we have to do is add the filter.
     */",undetermined
10457,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |                Configuration Handling
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10458,httpd,UNKNOWN,/* be consistent. (See below in set_default_end_tag) */,undetermined
10459,httpd,UNKNOWN,/* sanity check. The parser may fail otherwise */,undetermined
10460,httpd,UNKNOWN,"/*
 * +-------------------------------------------------------+
 * |                                                       |
 * |        Module Initialization and Configuration
 * |                                                       |
 * +-------------------------------------------------------+
 */",undetermined
10461,httpd,UNKNOWN,/* dir config creater */,undetermined
10462,httpd,UNKNOWN,/* dir config merger */,undetermined
10463,httpd,UNKNOWN,/* server config */,undetermined
10464,httpd,UNKNOWN,/* merge server config */,undetermined
10465,httpd,UNKNOWN,/* command apr_table_t */,undetermined
10466,httpd,UNKNOWN,/* register hooks */,undetermined
10467,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10468,httpd,UNKNOWN,"/**
 * @file mod_include.h
 * @brief Server Side Include Filter Extension Module for Apache
 *
 * @defgroup MOD_INCLUDE mod_include
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
10469,httpd,UNKNOWN,"/*
 * Constants used for ap_ssi_get_tag_and_value's decode parameter
 */",undetermined
10470,httpd,UNKNOWN,"/*
 * Constants used for ap_ssi_parse_string's leave_name parameter
 */",undetermined
10471,httpd,UNKNOWN,"/*
 * This macro creates a bucket which contains an error message and appends it
 * to the current pass brigade
 */",undetermined
10472,httpd,UNKNOWN,"/*
 * These constants are used to set or clear flag bits.
 */",undetermined
10473,httpd,UNKNOWN,/* Printing conditional lines. */,undetermined
10474,httpd,UNKNOWN,/* Conditional eval'd to true. */,undetermined
10475,httpd,UNKNOWN,/* Sizes displayed in bytes.   */,undetermined
10476,httpd,UNKNOWN,/* No Exec in current context. */,undetermined
10477,httpd,UNKNOWN,"/*
 * The public SSI context structure
 */",undetermined
10478,httpd,UNKNOWN,"/* permanent pool, use this for creating bucket data */",undetermined
10479,httpd,UNKNOWN,/* temp pool; will be cleared after the execution of every directive */,undetermined
10480,httpd,UNKNOWN,/* See the SSI_FLAG_XXXXX definitions. */,undetermined
10481,httpd,UNKNOWN,/* nesting of *invisible* ifs */,undetermined
10482,httpd,UNKNOWN,"/* if true, the current buffer will be passed down the filter chain before
     * continuing with next input bucket and the variable will be reset to
     * false.
     */",undetermined
10483,httpd,UNKNOWN,/* argument counter (of the current directive) */,undetermined
10484,httpd,UNKNOWN,/* currently configured error string */,undetermined
10485,httpd,UNKNOWN,/* currently configured time format */,undetermined
10486,httpd,UNKNOWN,/* the current request */,undetermined
10487,httpd,UNKNOWN,"/* pointer to internal (non-public) data, don't touch */",undetermined
10488,httpd,UNKNOWN,/* MOD_INCLUDE */,undetermined
10489,httpd,UNKNOWN,/** @} */,undetermined
10490,httpd,UNKNOWN,"/*      Copyright (c) 2003-11, WebThing Ltd
 *      Copyright (c) 2011-, The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10491,httpd,UNKNOWN,"/*      GO_FASTER
        You can #define GO_FASTER to disable trace logging.
*/",undetermined
10492,httpd,UNKNOWN,/* libxml2 */,undetermined
10493,httpd,UNKNOWN,/* globals set once at startup */,undetermined
10494,httpd,UNKNOWN,/*#define DEFAULT_DOCTYPE fpi_html */,undetermined
10495,httpd,UNKNOWN,/* This is always utf-8 on entry.  We can convert charset within FLUSH */,undetermined
10496,httpd,UNKNOWN,/* append null byte */,undetermined
10497,httpd,UNKNOWN,/* parse the text for URLs */,undetermined
10498,httpd,UNKNOWN,"/* not sure if this should force-flush
         * (i.e. can one cdata section come in multiple calls?)
         */",undetermined
10499,httpd,UNKNOWN,/* enforce html */,undetermined
10500,httpd,UNKNOWN,/* enforce html legacy */,undetermined
10501,httpd,UNKNOWN,"/* TODO - implement HTML ""allowed here"" using the stack */",undetermined
10502,httpd,UNKNOWN,/* nah.  Keeping the stack is too much overhead */,undetermined
10503,httpd,UNKNOWN,"/* having dumped it, we can re-use the memory */",undetermined
10504,httpd,UNKNOWN,/* enforce html */,undetermined
10505,httpd,UNKNOWN,/* enforce html legacy */,undetermined
10506,httpd,UNKNOWN,"/* TODO - implement HTML ""allowed here"" */",undetermined
10507,httpd,UNKNOWN,/* cross off the number still needed */,undetermined
10508,httpd,UNKNOWN,/* fallthrough - required implies valid */,undetermined
10509,httpd,UNKNOWN,/* it fits in the existing space */,undetermined
10510,httpd,UNKNOWN,/* URIs only want one match unless overridden in the config */,undetermined
10511,httpd,UNKNOWN,/* reset here since we're working per-rule */,undetermined
10512,httpd,UNKNOWN,"/* write the attribute, using pcharacters to html-escape
                   anything that needs it in the value.
                */",undetermined
10513,httpd,UNKNOWN,/* if there are more required attributes than we found then complain */,undetermined
10514,httpd,UNKNOWN,/* find content=... string */,undetermined
10515,httpd,UNKNOWN,"/* if it doesn't contain ""content"", ignore, don't crash! */",undetermined
10516,httpd,UNKNOWN,/* condition is unsatisfied */,undetermined
10517,httpd,UNKNOWN,/* don't use empty from-pattern */,undetermined
10518,httpd,UNKNOWN,/* evaluate p->cond; continue if unsatisfied */,undetermined
10519,httpd,UNKNOWN,/* create new urlmap with memcpy and append to map */,undetermined
10520,httpd,UNKNOWN,/* interpolate from if flagged to do so */,undetermined
10521,httpd,UNKNOWN,/* interpolate to if flagged to do so */,undetermined
10522,httpd,UNKNOWN,"/* defer dealing with charset_out until after sniffing charset_in
         * so we can support setting one to t'other.
         */",undetermined
10523,httpd,UNKNOWN,"/* pass on flush, except at start where it would cause
                 * headers to be sent before doc sniffing
                 */",undetermined
10524,httpd,UNKNOWN,"/* if we wanted a non-default charset_out, insert the
                     * xml2enc filter now that we've sniffed it
                     */",undetermined
10525,httpd,UNKNOWN,"/* Normal case, everything worked, utf-8 output */",undetermined
10526,httpd,UNKNOWN,"/*ap_fflush(ctxt->f->next, ctxt->bb);        // uncomment for debug */",undetermined
10527,httpd,UNKNOWN,/* ret->interp = 1; */,undetermined
10528,httpd,UNKNOWN,/* don't initialise links and events until they get set/used */,undetermined
10529,httpd,UNKNOWN,/* don't merge declarations - just use the most specific */,undetermined
10530,httpd,UNKNOWN,"/* back-compatibility: support old-style ENV expressions
         * by converting to ap_expr syntax.
         *
         * 1. var --> env(var)
         * 2. var=val --> env(var)=val
         * 3. !var --> !env(var)
         * 4. !var=val --> env(var)!=val
         */",undetermined
10531,httpd,UNKNOWN,"/* we got a substitution.  Check for the case (3) above
            * that the regexp gets wrong: a negation without a comparison.
            */",undetermined
10532,httpd,UNKNOWN,"/* the args look OK, so let's use them */",undetermined
10533,httpd,UNKNOWN,/* old_expr only needs to last the life of the config phase */,undetermined
10534,httpd,UNKNOWN,"/* move this to pre_config so old_expr is available to interpret
     * old-style conditions on URL maps.
     */",undetermined
10535,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10536,httpd,UNKNOWN,/* no subrequests. */,undetermined
10537,httpd,UNKNOWN,/* rl is in kilo bytes / second  */,undetermined
10538,httpd,UNKNOWN,/* remove ourselves */,undetermined
10539,httpd,UNKNOWN,"/* first run, init stuff */",undetermined
10540,httpd,UNKNOWN,/* calculate how many bytes / interval we want to send */,undetermined
10541,httpd,UNKNOWN,"/* speed is bytes / second, so, how many  (speed / 1000 % interval) */",undetermined
10542,httpd,UNKNOWN,/* Find where we 'stop' going full speed. */,undetermined
10543,httpd,UNKNOWN,"/* run after mod_deflate etc etc, but not at connection level, ie, mod_ssl. */",undetermined
10544,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
10545,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
10546,httpd,UNKNOWN,/* create per-server config structure */,undetermined
10547,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
10548,httpd,UNKNOWN,/* command apr_table_t */,undetermined
10549,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10550,httpd,UNKNOWN,"/* Create a set of AP_RL_DECLARE(type), AP_RL_DECLARE_NONSTD(type) and
 * AP_RL_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
10551,httpd,UNKNOWN,"/* TODO: Make these Optional Functions, so that module load order doesn't matter. */",undetermined
10552,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10553,httpd,UNKNOWN,"/*
         * Sometimes we'll get in a state where the input handling has
         * detected an error where we want to drop the connection, so if
         * that's the case, don't read the data as that is what we're trying
         * to avoid.
         *
         * This function is also a no-op on a subrequest.
         */",undetermined
10554,httpd,UNKNOWN,/* copy headers from in to out if configured */,undetermined
10555,httpd,UNKNOWN,"/* last modified defaults to now, unless otherwise set on the way in */",undetermined
10556,httpd,UNKNOWN,"/* reflect the content length, if present */",undetermined
10557,httpd,UNKNOWN,"/* reflect the content type, if present */",undetermined
10558,httpd,UNKNOWN,/* These are metadata buckets. */,undetermined
10559,httpd,UNKNOWN,"/*
                 * We MUST read because in case we have an unknown-length
                 * bucket or one that morphs, we want to exhaust it.
                 */",undetermined
10560,httpd,UNKNOWN,/* no way to know what type of error occurred */,undetermined
10561,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10562,httpd,UNKNOWN,/* timeout for reading the req hdrs in secs */,undetermined
10563,httpd,UNKNOWN,/* max timeout for req hdrs in secs */,undetermined
10564,httpd,UNKNOWN,/* min rate for reading req hdrs in bytes/s */,undetermined
10565,httpd,UNKNOWN,/* timeout for reading the req body in secs */,undetermined
10566,httpd,UNKNOWN,/* max timeout for req body in secs */,undetermined
10567,httpd,UNKNOWN,/* min rate for reading req body in bytes/s */,undetermined
10568,httpd,UNKNOWN,/* this struct is used both as conn_config and as filter context */,undetermined
10569,httpd,UNKNOWN,"/*
 * Append bbIn to bbOut and merge small buckets, to avoid DoS by high memory
 * usage
 */",undetermined
10570,httpd,UNKNOWN,"/* For this read, the normal keep-alive timeout must be used */",undetermined
10571,httpd,UNKNOWN,/* set new timeout */,undetermined
10572,httpd,UNKNOWN,/* no timeout set */,undetermined
10573,httpd,UNKNOWN,"/*
         * For a blocking AP_MODE_GETLINE read, apr_brigade_split_line()
         * would loop until a whole line has been read. As this would make it
         * impossible to enforce a total timeout, we only do non-blocking
         * reads.
         */",undetermined
10574,httpd,UNKNOWN,"/* Haven't got a whole line yet, save what we have ... */",undetermined
10575,httpd,UNKNOWN,/* ... and wait for more */,undetermined
10576,httpd,UNKNOWN,/* mode != AP_MODE_GETLINE */,undetermined
10577,httpd,UNKNOWN,"/*
         * If we allow a normal lingering close, the client may keep this
         * process/thread busy for another 30s (MAX_SECS_TO_LINGER).
         * Therefore we tell ap_lingering_close() to shorten this period to
         * 2s (SECONDS_TO_LINGER).
         */",undetermined
10578,httpd,UNKNOWN,"/*
         * Also, we must not allow keep-alive requests, as
         * ap_finalize_protocol() may ignore our error status (if the timeout
         * happened on a request body that is discarded).
         */",undetermined
10579,httpd,UNKNOWN,/* disabled for this vhost */,undetermined
10580,httpd,UNKNOWN,"/* we are not handling the connection, we just do initialization */",undetermined
10581,httpd,UNKNOWN,/* either disabled for this connection or a CONNECT request */,undetermined
10582,httpd,UNKNOWN,/* not configured for this connection */,undetermined
10583,httpd,UNKNOWN,"/*
     * mod_ssl is AP_FTYPE_CONNECTION + 5 and mod_reqtimeout needs to
     * be called before mod_ssl. Otherwise repeated reads during the ssl
     * handshake can prevent the timeout from triggering.
     */",undetermined
10584,httpd,UNKNOWN,"/*
     * mod_reqtimeout needs to be called before ap_process_http_request (which
     * is run at APR_HOOK_REALLY_LAST) but after all other protocol modules.
     * This ensures that it only influences normal http connections and not
     * e.g. mod_ftp. Also, if mod_reqtimeout used the pre_connection hook, it
     * would be inserted on mod_proxy's backend connections.
     */",undetermined
10585,httpd,UNKNOWN,/* create per-dir config structures */,undetermined
10586,httpd,UNKNOWN,/* merge  per-dir config structures */,undetermined
10587,httpd,UNKNOWN,/* create per-server config structures */,undetermined
10588,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
10589,httpd,UNKNOWN,/* table of config file commands */,undetermined
10590,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10591,httpd,UNKNOWN,"/*
 * mod_request.c --- HTTP routines to set aside or process request bodies.
 */",undetermined
10592,httpd,UNKNOWN,"/* For errors detected in basic auth common
                                 * support code... */",undetermined
10593,httpd,UNKNOWN,/* Handles for core filters */,undetermined
10594,httpd,UNKNOWN,"/**
 * This is the KEEP_BODY_INPUT filter for HTTP requests, for times when the
 * body should be set aside for future use by other modules.
 */",undetermined
10595,httpd,UNKNOWN,/* must we step out of the way? */,undetermined
10596,httpd,UNKNOWN,/* fail fast if the content length exceeds keep body */,undetermined
10597,httpd,UNKNOWN,"/* Protects against over/underflow, non-digit chars in the
             * string (excluding leading space) (the endstr checks)
             * and a negative number. */",undetermined
10598,httpd,UNKNOWN,"/* If we have a limit in effect and we know the C-L ahead of
             * time, stop it here if it is invalid.
             */",undetermined
10599,httpd,UNKNOWN,"/* get the brigade from upstream, and read it in to get its length */",undetermined
10600,httpd,UNKNOWN,/* does the length take us over the limit? */,undetermined
10601,httpd,UNKNOWN,/* pass any errors downstream */,undetermined
10602,httpd,UNKNOWN,"/* all is well, set aside the buckets */",undetermined
10603,httpd,UNKNOWN,"/**
 * Initialisation of filter to handle a kept body on subrequests.
 *
 * If a body is to be reinserted into a subrequest, any chunking will have
 * been removed from the body during storage. We need to change the request
 * from Transfer-Encoding: chunked to an explicit Content-Length.
 */",undetermined
10604,httpd,UNKNOWN,"/**
 * Filter to handle a kept body on subrequests.
 *
 * If a body has been previously kept by the request, and if a subrequest wants
 * to re-insert the body into the request, this input filter makes it happen.
 */",undetermined
10605,httpd,UNKNOWN,/* just get out of the way of things we don't want. */,undetermined
10606,httpd,UNKNOWN,/* set up the context if it does not already exist */,undetermined
10607,httpd,UNKNOWN,"/* kept_body is finished, send next filter */",undetermined
10608,httpd,UNKNOWN,"/* send all of the kept_body, but no more */",undetermined
10609,httpd,UNKNOWN,/* send part of the kept_body */,undetermined
10610,httpd,UNKNOWN,"/* As above; this should not fail since the bucket has
             * a known length, but just to be sure, this takes
             * care of uncopyable buckets that do somehow manage
             * to slip through.  */",undetermined
10611,httpd,UNKNOWN,/* XXX: check for failure? */,undetermined
10612,httpd,UNKNOWN,"/**
 * Check whether this filter is not already present.
 */",undetermined
10613,httpd,UNKNOWN,"/**
 * Insert filter hook.
 *
 * Add the KEEP_BODY filter to the request, if the admin wants to keep
 * the body using the KeptBodySize directive.
 *
 * As a precaution, any pre-existing instances of either the kept_body or
 * keep_body filters will be removed before the filter is added.
 *
 * @param r The request
 */",undetermined
10614,httpd,UNKNOWN,"/**
 * Remove the kept_body and keep body filters from this specific request.
 */",undetermined
10615,httpd,UNKNOWN,/* unset */,undetermined
10616,httpd,UNKNOWN,/* don't by default */,undetermined
10617,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
10618,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
10619,httpd,UNKNOWN,/* create per-server config structure */,undetermined
10620,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
10621,httpd,UNKNOWN,/* command apr_table_t */,undetermined
10622,httpd,UNKNOWN,/* register hooks */,undetermined
10623,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10624,httpd,UNKNOWN,/* Context for filter invocation for single HTTP request */,undetermined
10625,httpd,UNKNOWN,"/* This function will be call back from libsed functions if there is any error
 * happend during execution of sed scripts
 */",undetermined
10626,httpd,UNKNOWN,"/* This function will be call back from libsed functions if there is any
 * compilation error.
 */",undetermined
10627,httpd,UNKNOWN,"/* clear the temporary pool (used for transient buckets)
 */",undetermined
10628,httpd,UNKNOWN,"/* alloc_outbuf
 * allocate output buffer
 */",undetermined
10629,httpd,UNKNOWN,"/* append_bucket
 * Allocate a new bucket from buf and sz and append to ctx->bb
 */",undetermined
10630,httpd,UNKNOWN,/* We are not using transient bucket */,undetermined
10631,httpd,UNKNOWN,/* We are using transient bucket */,undetermined
10632,httpd,UNKNOWN,"/*
 * flush_output_buffer
 * Flush the  output data (stored in ctx->outbuf)
 */",undetermined
10633,httpd,UNKNOWN,"/* This is a call back function. When libsed wants to generate the output,
 * this function will be invoked.
 */",undetermined
10634,httpd,UNKNOWN,"/* dummy is basically filter context. Context is passed during invocation
     * of sed_eval_buffer
     */",undetermined
10635,httpd,UNKNOWN,/* buffer is now full */,undetermined
10636,httpd,UNKNOWN,/* old buffer is now used so allocate new buffer */,undetermined
10637,httpd,UNKNOWN,"/* if size is bigger than the allocated buffer directly add to output
         * brigade */",undetermined
10638,httpd,UNKNOWN,/* pool might get clear after append_bucket */,undetermined
10639,httpd,UNKNOWN,"/* Compile a sed expression. Compiled context is saved in sed_cfg->sed_cmds.
 * Memory required for compilation context is allocated from cmd->pool.
 */",undetermined
10640,httpd,UNKNOWN,/* sed eval cleanup function */,undetermined
10641,httpd,UNKNOWN,"/* Initialize sed filter context. If successful then context is set in f->ctx
 */",undetermined
10642,httpd,UNKNOWN,"/* Create the context. Call sed_init_eval. libsed will generated
     * output by calling sed_write_output and generates any error by
     * invoking log_sed_errf.
     */",undetermined
10643,httpd,UNKNOWN,/* Entry function for Sed output filter */,undetermined
10644,httpd,UNKNOWN,/* No sed expressions */,undetermined
10645,httpd,UNKNOWN,/* no need to run sed filter for Head requests */,undetermined
10646,httpd,UNKNOWN,"/* Here is the main logic. Iterate through all the buckets, read the
     * content of the bucket, call sed_eval_buffer on the data.
     * sed_eval_buffer will read the data line by line, run filters on each
     * line. sed_eval_buffer will generates the output by calling
     * sed_write_output which will add the output to ctx->bb. At the end of
     * the loop, ctx->bb is passed to the next filter in chain. At the end of
     * the data, if new line is not found then sed_eval_buffer will store the
     * data in its own buffer.
     *
     * Once eos bucket is found then sed_finalize_eval will flush the rest of
     * the data. If there is no new line in last line of data, new line is
     * appended (that is a solaris sed behavior). libsed's internal memory for
     * evaluation is allocated on request's pool so it will be cleared once
     * request is over.
     *
     * If flush bucket is found then append the the flush bucket to ctx->bb
     * and pass it to next filter. There may be some data which will still be
     * in sed's internal buffer which can't be flushed until new line
     * character is arrived.
     */",undetermined
10647,httpd,UNKNOWN,/* Now clean up the internal sed buffer */,undetermined
10648,httpd,UNKNOWN,/* Insert the eos bucket to ctx->bb brigade */,undetermined
10649,httpd,UNKNOWN,/* Entry function for Sed input filter */,undetermined
10650,httpd,UNKNOWN,/* No sed expression */,undetermined
10651,httpd,UNKNOWN,/* XXX : Should we filter the sub requests too */,undetermined
10652,httpd,UNKNOWN,"/* Here is the logic :
     * Read the readbytes data from next level fiter into bbinp. Loop through
     * the buckets in bbinp and read the data from buckets and invoke
     * sed_eval_buffer on the data. libsed will generate its output using
     * sed_write_output which will add data in ctx->bb. Do it until it have
     * atleast one bucket bucket in ctx->bb. At the end of data eos bucket
     * should be there.
     *
     * Once eos bucket is seen, then invoke sed_finalize_eval to clear the
     * output. If the last byte of data is not a new line character then sed
     * will add a new line to the data that is default sed behaviour. Note
     * that using this filter with POST data, caller may not expect this
     * behaviour.
     *
     * If next level fiter generate the flush bucket, we can't do much about
     * it. If we want to return the flush bucket in brigade bb (to the caller)
     * the question is where to add it?
     */",undetermined
10653,httpd,UNKNOWN,/* read the bytes from next level filter */,undetermined
10654,httpd,UNKNOWN,/* eos bucket. Clear the internal sed buffers */,undetermined
10655,httpd,UNKNOWN,/* What should we do with flush bucket */,undetermined
10656,httpd,UNKNOWN,/* dir config creater */,undetermined
10657,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
10658,httpd,UNKNOWN,/* server config */,undetermined
10659,httpd,UNKNOWN,/* merge server config */,undetermined
10660,httpd,UNKNOWN,/* command table */,undetermined
10661,httpd,UNKNOWN,/* register hooks */,undetermined
10662,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10663,httpd,UNKNOWN,"/*
 * mod_substitute.c: Perform content rewriting on the fly
 */",undetermined
10664,httpd,UNKNOWN,"/*
 * We want to limit the memory usage in a way that is predictable. Therefore
 * we limit the resulting length of the line to this value.
 */",undetermined
10665,httpd,UNKNOWN,"/*
     * Simple optimization. If we only have one pattern, then
     * we can safely avoid the overhead of flattening
     */",undetermined
10666,httpd,UNKNOWN,"/*
                 * we should NEVER see this, because we should never
                 * be passed any, but ""handle"" it just in case.
                 */",undetermined
10667,httpd,UNKNOWN,"/*
                     * space_left counts how many bytes we have left until the
                     * line length reaches AP_SUBST_MAX_LINE_LENGTH.
                     */",undetermined
10668,httpd,UNKNOWN,/* get offset into buff for pattern */,undetermined
10669,httpd,UNKNOWN,"/*
                             * We are flattening the buckets here, meaning
                             * that we don't do the fast bucket splits.
                             * Instead we copy over what the buckets would
                             * contain and use them. This is slow, since we
                             * are constanting allocing space and copying
                             * strings.
                             */",undetermined
10670,httpd,UNKNOWN,"/*
                             * The string before the match but after the
                             * previous match (if any) has length 'len'.
                             * Check if we still have space for this string and
                             * the replacement string.
                             */",undetermined
10671,httpd,UNKNOWN,"/*
                             * We now split off the string before the match
                             * as its own bucket, then isolate the matched
                             * string and delete it.
                             */",undetermined
10672,httpd,UNKNOWN,"/*
                             * Finally, we create a bucket that contains the
                             * replacement...
                             */",undetermined
10673,httpd,UNKNOWN,/* ... and insert it */,undetermined
10674,httpd,UNKNOWN,/* now we need to adjust buff for all these changes */,undetermined
10675,httpd,UNKNOWN,"/* XXX: we should check for AP_MAX_BUCKETS here and
                             * XXX: call ap_pass_brigade accordingly
                             */",undetermined
10676,httpd,UNKNOWN,"/*
                             * We want the behaviour to be predictable.
                             * Therefore we try to always error out if the
                             * line length is larger than the limit,
                             * regardless of the content of the line. So,
                             * let's check if the remaining non-matching
                             * string does not exceed the limit.
                             */",undetermined
10677,httpd,UNKNOWN,/* copy bytes before the match */,undetermined
10678,httpd,UNKNOWN,/* add replacement string */,undetermined
10679,httpd,UNKNOWN,/* acount for string before the match */,undetermined
10680,httpd,UNKNOWN,"/*
                         * reset to past what we just did. pos now maps to b
                         * again
                         */",undetermined
10681,httpd,UNKNOWN,"/* Copy result plus the part after the last match into
                         * a bucket.
                         */",undetermined
10682,httpd,UNKNOWN,"/*
     * First time around? Create the saved bb that we used for each pass
     * through. Note that we can also get here when we explicitly clear ctx,
     * for error handling
     */",undetermined
10683,httpd,UNKNOWN,"/*
         * Create all the temporary brigades we need and reuse them to avoid
         * creating them over and over again from r->pool which would cost a
         * lot of memory in some cases.
         */",undetermined
10684,httpd,UNKNOWN,"/*
         * Everything to be passed to the next filter goes in
         * here, our pass brigade.
         */",undetermined
10685,httpd,UNKNOWN,/* Create our temporary pool only once */,undetermined
10686,httpd,UNKNOWN,"/*
     * Shortcircuit processing
     */",undetermined
10687,httpd,UNKNOWN,"/*
     * Here's the concept:
     *  Read in the data and look for newlines. Once we
     *  find a full ""line"", add it to our working brigade.
     *  If we've finished reading the brigade and we have
     *  any left over data (not a ""full"" line), store that
     *  for the next pass.
     *
     * Note: anything stored in ctx->linebb for sure does not have
     * a newline char, so we don't concat that bb with the
     * new bb, since we would spending time searching for the newline
     * in data we know it doesn't exist. So instead, we simply scan
     * our current bb and, if we see a newline, prepend ctx->linebb
     * to the front of it. This makes the code much less straight-
     * forward (otherwise we could APR_BRIGADE_CONCAT(ctx->linebb, bb)
     * and just scan for newlines and not bother with needing to know
     * when ctx->linebb needs to be reset) but also faster. We'll take
     * the speed.
     *
     * Note: apr_brigade_split_line would be nice here, but we
     * really can't use it since we need more control and we want
     * to re-use already read bucket data.
     *
     * See mod_include if still confused :)
     */",undetermined
10688,httpd,UNKNOWN,"/*
             * if we see the EOS, then we need to pass along everything we
             * have. But if the ctx->linebb isn't empty, then we need to add
             * that to the end of what we'll be passing.
             */",undetermined
10689,httpd,UNKNOWN,"/*
         * No need to handle FLUSH buckets separately as we call
         * ap_pass_brigade anyway at the end of the loop.
         */",undetermined
10690,httpd,UNKNOWN,"/*
             * We have actual ""data"" so read in as much as we can and start
             * scanning and splitting from our read buffer
             */",undetermined
10691,httpd,UNKNOWN,/* split *after* the newline */,undetermined
10692,httpd,UNKNOWN,"/*
                         * We've likely read more data, so bypass rereading
                         * bucket data and continue scanning through this
                         * buffer
                         */",undetermined
10693,httpd,UNKNOWN,"/*
                         * we need b to be updated for future potential
                         * splitting
                         */",undetermined
10694,httpd,UNKNOWN,"/*
                         * Hey, we found a newline! Don't forget the old
                         * stuff that needs to be added to the front. So we
                         * add the split bucket to the end, flatten the whole
                         * bb, morph the whole shebang into a bucket which is
                         * then added to the tail of the newline bb.
                         */",undetermined
10695,httpd,UNKNOWN,"/* Avoid pflattening further lines, we will
                                 * abort later on anyway.
                                 */",undetermined
10696,httpd,UNKNOWN,"/*
                         * Count how many buckets we have in ctx->passbb
                         * so far. Yes, this is correct we count ctx->passbb
                         * and not ctx->pattbb as we do not reset num on every
                         * iteration.
                         */",undetermined
10697,httpd,UNKNOWN,"/*
                         * If the number of buckets in ctx->passbb reaches an
                         * ""insane"" level, we consume much memory for all the
                         * buckets as such. So lets flush them down the chain
                         * in this case and thus clear ctx->passbb. This frees
                         * the buckets memory for further processing.
                         * Usually this condition should not become true, but
                         * it is a safety measure for edge cases.
                         */",undetermined
10698,httpd,UNKNOWN,"/*
                         * no newline in whatever is left of this buffer so
                         * tuck data away and get next bucket
                         */",undetermined
10699,httpd,UNKNOWN,/* Anything left we want to save/setaside for the next go-around */,undetermined
10700,httpd,UNKNOWN,"/*
         * Provide ap_save_brigade with an existing empty brigade
         * (ctx->linesbb) to avoid creating a new one.
         */",undetermined
10701,httpd,UNKNOWN,/* re-use */,undetermined
10702,httpd,UNKNOWN,/* first see if we can compile the regex */,undetermined
10703,httpd,UNKNOWN,/* init the new entries */,undetermined
10704,httpd,UNKNOWN,/* dir config creater */,undetermined
10705,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
10706,httpd,UNKNOWN,/* server config */,undetermined
10707,httpd,UNKNOWN,/* merge server config */,undetermined
10708,httpd,UNKNOWN,/* command table */,undetermined
10709,httpd,UNKNOWN,/* register hooks */,undetermined
10710,httpd,UNKNOWN,"/*      Copyright (c) 2007-11, WebThing Ltd
 *      Copyright (c) 2011-, The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10711,httpd,UNKNOWN,/* libxml2 */,undetermined
10712,httpd,UNKNOWN,"/*
 * XXX: Check all those ap_assert()s ans replace those that should not happen
 * XXX: with AP_DEBUG_ASSERT and those that may happen with proper error
 * XXX: handling.
 */",undetermined
10713,httpd,UNKNOWN,"/* set up a ready-initialised ctx to convert to enc, and insert filter */",undetermined
10714,httpd,UNKNOWN,/* we'll initialise later by sniffing */,undetermined
10715,httpd,UNKNOWN,/* This needs to operate only when we're using htmlParser */,undetermined
10716,httpd,UNKNOWN,"/* Different modules may apply different rules here.  Ho, hum.  */",undetermined
10717,httpd,UNKNOWN,/* found a starting element. Strip all that comes before. */,undetermined
10718,httpd,UNKNOWN,/* initialise to shut compiler warnings up */,undetermined
10719,httpd,UNKNOWN,"/* If we've got it in the HTTP headers, there's nothing to do */",undetermined
10720,httpd,UNKNOWN,"/* to sniff, first we look for BOM */",undetermined
10721,httpd,UNKNOWN,"/* If none of the above, look for a META-thingey */",undetermined
10722,httpd,UNKNOWN,"/* also we're probably about to invalidate it, so we remove it. */",undetermined
10723,httpd,UNKNOWN,/* get markers on the start and end of the match */,undetermined
10724,httpd,UNKNOWN,/* now set length of useful buf for start-of-data hooks */,undetermined
10725,httpd,UNKNOWN,/* cut out the <meta> we're invalidating */,undetermined
10726,httpd,UNKNOWN,/* and leave a string */,undetermined
10727,httpd,UNKNOWN,/* either it's set to something we found or it's still the default */,undetermined
10728,httpd,UNKNOWN,"/* Aaargh!  libxml2 has undocumented <META-crap> support.  So this fails
     * if metafix is not active.  Have to make it conditional.
     *
     * No, that means no-metafix breaks things.  Deal immediately with
     * this particular instance of metafix.
     */",undetermined
10729,httpd,UNKNOWN,/* Unsupported charset. Can we get (iconv) support through apr_xlate? */,undetermined
10730,httpd,UNKNOWN,/* Use configuration default as a last resort */,undetermined
10731,httpd,UNKNOWN,/* log error about configuring this */,undetermined
10732,httpd,UNKNOWN,"/* only act if starts-with ""text/"" or contains ""xml"" */",undetermined
10733,httpd,UNKNOWN,/* append to any data left over from last time */,undetermined
10734,httpd,UNKNOWN,/* some kind of initialisation required */,undetermined
10735,httpd,UNKNOWN,/* Turn all this off when post-processing */,undetermined
10736,httpd,UNKNOWN,"/* if we don't have enough data to sniff but more's to come, wait */",undetermined
10737,httpd,UNKNOWN,/* not enough data to sniff.  Wait for more */,undetermined
10738,httpd,UNKNOWN,/* flatten it into a NULL-terminated string */,undetermined
10739,httpd,UNKNOWN,/* FIXME: hook here for rewriting start-of-data? */,undetermined
10740,httpd,UNKNOWN,"/* nah, we only have one action here - call it inline */",undetermined
10741,httpd,UNKNOWN,"/* we might change the Content-Length, so let's force its re-calculation */",undetermined
10742,httpd,UNKNOWN,/* consume the data we just sniffed */,undetermined
10743,httpd,UNKNOWN,/* we need to omit any <meta> we just invalidated */,undetermined
10744,httpd,UNKNOWN,/* move the data back to bb */,undetermined
10745,httpd,UNKNOWN,/* send remaining data */,undetermined
10746,httpd,UNKNOWN,/* data bucket */,undetermined
10747,httpd,UNKNOWN,/* we have dangling data.  Flatten it. */,undetermined
10748,httpd,UNKNOWN,"/* this is only what we've already tried to convert.
                     * The brigade is exhausted.
                     * Save remaining data for next time round
                     */",undetermined
10749,httpd,UNKNOWN,/* remove the data we've just read */,undetermined
10750,httpd,UNKNOWN,/* can't destroy until finished with the data */,undetermined
10751,httpd,UNKNOWN,"/* OK, we've got some input we can use in [buf,bytes] */",undetermined
10752,httpd,UNKNOWN,"/* nothing was converted last time!
                         * break out of this loop! 
                         */",undetermined
10753,httpd,UNKNOWN,"/* If outbuf too small, go round again.
                                       * If it was inbuf, we'll break out when
                                       * we test ctx->bytes == ctx->bblen
                                       */",undetermined
10754,httpd,UNKNOWN,/* try skipping one bad byte */,undetermined
10755,httpd,UNKNOWN,"/* Erk!  What's this?
                         * Bail out, flush, and hope to eat the buf raw
                         */",undetermined
10756,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10757,httpd,UNKNOWN,/* declarations to deal with WIN32 compile-flag-in-source-code crap */,undetermined
10758,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T
 *        All Rights Reserved
 *
 * University Copyright- Copyright (c) 1982, 1986, 1988
 * The Regents of the University of California
 * All Rights Reserved
 *
 * University Acknowledgment- Portions of this document are derived from
 * software developed by the University of California, Berkeley, and its
 * contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10759,httpd,UNKNOWN,/* Code moved from regexp.h */,undetermined
10760,httpd,UNKNOWN,"/*
*/",undetermined
10761,httpd,UNKNOWN,/* No error */,undetermined
10762,httpd,UNKNOWN,/* used for non-ascii characters in brackets */,undetermined
10763,httpd,UNKNOWN,/* make nulls match so test fails */,undetermined
10764,httpd,UNKNOWN,/* get 2'nd number */,undetermined
10765,httpd,UNKNOWN,/* one number */,undetermined
10766,httpd,UNKNOWN,/* Drop through to default to use \ to turn off special chars */,undetermined
10767,httpd,UNKNOWN,/* XXX : Basant : what extra */,undetermined
10768,httpd,UNKNOWN,/* int reglength = (int)(ep - expbuf); */,undetermined
10769,httpd,UNKNOWN,/* fast check for first character */,undetermined
10770,httpd,UNKNOWN,/* regular algorithm */,undetermined
10771,httpd,UNKNOWN,/* int value of *ep */,undetermined
10772,httpd,UNKNOWN,/* 32 + 2 */,undetermined
10773,httpd,UNKNOWN,/* 16 + 2 */,undetermined
10774,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T
 *        All Rights Reserved
 *
 * University Copyright- Copyright (c) 1982, 1986, 1988
 * The Regents of the University of California
 * All Rights Reserved
 *
 * University Acknowledgment- Portions of this document are derived from
 * software developed by the University of California, Berkeley, and its
 * contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10775,httpd,UNKNOWN,/* Regular expression starts with ^ */,undetermined
10776,httpd,UNKNOWN,/* braces count */,undetermined
10777,httpd,UNKNOWN,/* _REGEXP_H */,undetermined
10778,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984 AT&T
 *        All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10779,httpd,UNKNOWN,/* _SED_H */,undetermined
10780,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984 AT&T
 *        All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10781,httpd,UNKNOWN,"/*
 * sed_init_commands
 */",undetermined
10782,httpd,UNKNOWN,"/*
 * sed_destroy_commands
 */",undetermined
10783,httpd,UNKNOWN,"/*
 * sed_compile_string
 */",undetermined
10784,httpd,UNKNOWN,"/*
 * sed_compile_file
 */",undetermined
10785,httpd,UNKNOWN,"/*
 * sed_get_finalize_error
 */",undetermined
10786,httpd,UNKNOWN,/* Empty branch chain is not a issue */,undetermined
10787,httpd,UNKNOWN,"/*
 * sed_canbe_finalized
 */",undetermined
10788,httpd,UNKNOWN,"/*
 * check_finalized
 */",undetermined
10789,httpd,UNKNOWN,/* Empty branch chain is not a issue */,undetermined
10790,httpd,UNKNOWN,"/*
 * dechain
 */",undetermined
10791,httpd,UNKNOWN,"/*
 * fcomp
 */",undetermined
10792,httpd,UNKNOWN,"/*
 * rline
 */",undetermined
10793,httpd,UNKNOWN,/* XXX extremely inefficient 1 byte reads */,undetermined
10794,httpd,UNKNOWN,"/*
 * address
 */",undetermined
10795,httpd,UNKNOWN,"/*
 * text
 */",undetermined
10796,httpd,UNKNOWN,"/*
     * Strip off indentation from text to be inserted.
     */",undetermined
10797,httpd,UNKNOWN,/* overflowed the buffer */,undetermined
10798,httpd,UNKNOWN,"/*
         * Strip off indentation from text to be inserted.
         */",undetermined
10799,httpd,UNKNOWN,"/*
 * search
 */",undetermined
10800,httpd,UNKNOWN,"/*
 * ycomp
 */",undetermined
10801,httpd,UNKNOWN,/* integer value of char c */,undetermined
10802,httpd,UNKNOWN,"/*
 * comple
 */",undetermined
10803,httpd,UNKNOWN,"/*
 * alloc_reptr
 */",undetermined
10804,httpd,UNKNOWN,"/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984 AT&T
 *        All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10805,httpd,UNKNOWN,"/*
 * grow_buffer
 */",undetermined
10806,httpd,UNKNOWN,"/* Avoid number of times realloc is called. It could cause huge memory
     * requirement if line size is huge e.g 2 MB */",undetermined
10807,httpd,UNKNOWN,/* Align it to 4 KB boundary */,undetermined
10808,httpd,UNKNOWN,"/*
 * grow_line_buffer
 */",undetermined
10809,httpd,UNKNOWN,"/*
 * grow_hold_buffer
 */",undetermined
10810,httpd,UNKNOWN,"/*
 * grow_gen_buffer
 */",undetermined
10811,httpd,UNKNOWN,"/*
 * appendmem_to_linebuf
 */",undetermined
10812,httpd,UNKNOWN,"/*
 * append_to_linebuf
 */",undetermined
10813,httpd,UNKNOWN,/* Copy string including null character */,undetermined
10814,httpd,UNKNOWN,/* lspend will now point to NULL character */,undetermined
10815,httpd,UNKNOWN,"/*
 * copy_to_linebuf
 */",undetermined
10816,httpd,UNKNOWN,"/*
 * append_to_holdbuf
 */",undetermined
10817,httpd,UNKNOWN,/* hspend will now point to NULL character */,undetermined
10818,httpd,UNKNOWN,"/*
 * copy_to_holdbuf
 */",undetermined
10819,httpd,UNKNOWN,"/*
 * append_to_genbuf
 */",undetermined
10820,httpd,UNKNOWN,/* *gspend will now point to NULL character */,undetermined
10821,httpd,UNKNOWN,"/*
 * copy_to_genbuf
 */",undetermined
10822,httpd,UNKNOWN,"/*
 * sed_init_eval
 */",undetermined
10823,httpd,UNKNOWN,"/*
 * sed_reset_eval
 */",undetermined
10824,httpd,UNKNOWN,/* assume we're evaluating only one file/stream */,undetermined
10825,httpd,UNKNOWN,"/*
 * sed_destroy_eval
 */",undetermined
10826,httpd,UNKNOWN,"/* eval->linebuf, eval->holdbuf, eval->genbuf and eval->inar are allocated
     * on pool. It will be freed when pool will be freed */",undetermined
10827,httpd,UNKNOWN,"/*
 * sed_eval_file
 */",undetermined
10828,httpd,UNKNOWN,"/*
 * sed_eval_buffer
 */",undetermined
10829,httpd,UNKNOWN,/* Commands were not finalized properly. */,undetermined
10830,httpd,UNKNOWN,/* Process leftovers */,undetermined
10831,httpd,UNKNOWN,/* This might be the last line; delay its processing */,undetermined
10832,httpd,UNKNOWN,/* replace new line character with NULL */,undetermined
10833,httpd,UNKNOWN,/* Save the leftovers for later */,undetermined
10834,httpd,UNKNOWN,"/*
 * sed_finalize_eval
 */",undetermined
10835,httpd,UNKNOWN,/* Process leftovers */,undetermined
10836,httpd,UNKNOWN,"/* Code can probably reach here when last character in output
             * buffer is not a newline.
             */",undetermined
10837,httpd,UNKNOWN,/* Assure space for NULL */,undetermined
10838,httpd,UNKNOWN,"/*
 * execute
 */",undetermined
10839,httpd,UNKNOWN,"/*
 * match
 */",undetermined
10840,httpd,UNKNOWN,"/*
 * substitute
 */",undetermined
10841,httpd,UNKNOWN,/* Flags if any substitution was made */,undetermined
10842,httpd,UNKNOWN,"/*
 * dosub
 */",undetermined
10843,httpd,UNKNOWN,/* expand genbuf and set the sp appropriately */,undetermined
10844,httpd,UNKNOWN,"/*
 * place
 */",undetermined
10845,httpd,UNKNOWN,"/*
 * command
 */",undetermined
10846,httpd,UNKNOWN,/* 32 bytes enough to store 64 bit integer in decimal */,undetermined
10847,httpd,UNKNOWN,"/*
 * arout
 */",undetermined
10848,httpd,UNKNOWN,"/*
 * wline
 */",undetermined
10849,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10850,httpd,UNKNOWN,/* read */,undetermined
10851,httpd,UNKNOWN,/* write */,undetermined
10852,httpd,UNKNOWN,"/* Q: is there any advantage to passing a brigade for each bucket?
     * A: obviously, it can cut down server resource consumption, if this
     * experimental module was fed a file of 4MB, it would be using 8MB for
     * the 'read' buckets and the 'write' buckets.
     *
     * Note it is more efficient to consume (destroy) each bucket as it's
     * processed above than to do a single cleanup down here.  In any case,
     * don't let our caller pass the same buckets to us, twice;
     */",undetermined
10853,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10854,httpd,UNKNOWN,"/*
 * An example input filter - this converts input to upper case. Note that
 * because of the moment it gets inserted it does NOT convert request headers.
 */",undetermined
10855,httpd,UNKNOWN,"/* It is tempting to do this...
         * APR_BUCKET_REMOVE(pB);
         * APR_BRIGADE_INSERT_TAIL(pbbOut,pB);
         * and change the case of the bucket data, but that would be wrong
         * for a file or socket buffer, for example...
         */",undetermined
10856,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
10857,httpd,UNKNOWN,"/*
 * Apache example module.  Provide demonstrations of how modules do things.
 * It is not meant to be used in a production server.  Since it participates
 * in all of the processing phases, it could conceivable interfere with
 * the proper operation of other modules -- particularly the ones related
 * to security.
 *
 * In the interest of brevity, all functions and structures internal to
 * this module, but which may have counterparts in *real* modules, are
 * prefixed with 'x_' instead of 'example_'.
 *
 * To use mod_example_hooks, configure the Apache build with
 * --enable-example and compile.  Set up a <Location> block in your
 * configuration file like so:
 *
 * <Location /example>
 *    SetHandler example-hooks-handler
 * </Location>
 *
 * When you look at that location on your server, you will see a backtrace of
 * the callbacks that have been invoked up to that point.  See the ErrorLog for
 * more information on code paths that  touch mod_example_hooks.
 *
 * IMPORTANT NOTES
 * ===============
 *
 * Do NOT use this module on a production server. It attaches itself to every
 * phase of the server runtime operations including startup, shutdown and
 * request processing, and produces copious amounts of logging data.  This will
 * negatively affect server performance.
 *
 * Do NOT use mod_example_hooks as the basis for your own code.  This module
 * implements every callback hook offered by the Apache core, and your
 * module will almost certainly not have to implement this much.  If you
 * want a simple module skeleton to start development, use apxs -g.
 *
 * XXX TO DO XXX
 * =============
 *
 * * Enable HTML backtrace entries for more callbacks that are not directly
 *   associated with a request
 * * Make sure every callback that posts an HTML backtrace entry does so in the *   right category, so nothing gets overwritten
 * * Implement some logic to show what happens in the parent, and what in the
 *   child(ren)
 */",undetermined
10858,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10859,httpd,UNKNOWN,/*                                                                          */,undetermined
10860,httpd,UNKNOWN,/* Data declarations.                                                       */,undetermined
10861,httpd,UNKNOWN,/*                                                                          */,undetermined
10862,httpd,UNKNOWN,/* Here are the static cells and structure declarations private to our      */,undetermined
10863,httpd,UNKNOWN,/* module.                                                                  */,undetermined
10864,httpd,UNKNOWN,/*                                                                          */,undetermined
10865,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10866,httpd,UNKNOWN,"/*
 * Sample configuration record.  Used for both per-directory and per-server
 * configuration data.
 *
 * It's perfectly reasonable to have two different structures for the two
 * different environments.  The same command handlers will be called for
 * both, though, so the handlers need to be able to tell them apart.  One
 * possibility is for both structures to start with an int which is 0 for
 * one and 1 for the other.
 *
 * Note that while the per-directory and per-server configuration records are
 * available to most of the module handlers, they should be treated as
 * READ-ONLY by all except the command and merge handlers.  Sometimes handlers
 * are handed a record that applies to the current location by implication or
 * inheritance, and modifying it will change the rules for other locations.
 */",undetermined
10867,httpd,UNKNOWN,"/* Environment to which record applies
                                 * (directory, server, or combination).
                                 */",undetermined
10868,httpd,UNKNOWN,/* Shouldn't ever happen. */,undetermined
10869,httpd,UNKNOWN,"/* Boolean: ""Example"" directive declared
                                 * here?
                                 */",undetermined
10870,httpd,UNKNOWN,"/* Boolean: did we inherit an ""Example""? */",undetermined
10871,httpd,UNKNOWN,/* Pointer to trace string. */,undetermined
10872,httpd,UNKNOWN,/* Location to which this record applies. */,undetermined
10873,httpd,UNKNOWN,"/*
 * String pointer to hold the startup trace. No harm working with a global until
 * the server is (may be) multi-threaded.
 */",undetermined
10874,httpd,UNKNOWN,"/*
 * Declare ourselves so the configuration routines can find and know us.
 * We'll fill it in at the end of the module.
 */",undetermined
10875,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10876,httpd,UNKNOWN,/*                                                                          */,undetermined
10877,httpd,UNKNOWN,/* The following pseudo-prototype declarations illustrate the parameters    */,undetermined
10878,httpd,UNKNOWN,/* passed to command handlers for the different types of directive          */,undetermined
10879,httpd,UNKNOWN,/* syntax.  If an argument was specified in the directive definition        */,undetermined
10880,httpd,UNKNOWN,"/* (look for ""command_rec"" below), it's available to the command handler    */",undetermined
10881,httpd,UNKNOWN,/* via the (void *) info field in the cmd_parms argument passed to the      */,undetermined
10882,httpd,UNKNOWN,/* handler (cmd->info for the examples below).                              */,undetermined
10883,httpd,UNKNOWN,/*                                                                          */,undetermined
10884,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10885,httpd,UNKNOWN,"/*
 * Command handler for a NO_ARGS directive.  Declared in the command_rec
 * list with
 *   AP_INIT_NO_ARGS(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_NO_ARGS(cmd_parms *cmd, void *mconfig);
 */",undetermined
10886,httpd,UNKNOWN,"/*
 * Command handler for a RAW_ARGS directive.  The ""args"" argument is the text
 * of the commandline following the directive itself.  Declared in the
 * command_rec list with
 *   AP_INIT_RAW_ARGS(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_RAW_ARGS(cmd_parms *cmd, void *mconfig,
 *                                    const char *args);
 */",undetermined
10887,httpd,UNKNOWN,"/*
 * Command handler for a FLAG directive.  The single parameter is passed in
 * ""bool"", which is either zero or not for Off or On respectively.
 * Declared in the command_rec list with
 *   AP_INIT_FLAG(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_FLAG(cmd_parms *cmd, void *mconfig, int bool);
 */",undetermined
10888,httpd,UNKNOWN,"/*
 * Command handler for a TAKE1 directive.  The single parameter is passed in
 * ""word1"".  Declared in the command_rec list with
 *   AP_INIT_TAKE1(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE1(cmd_parms *cmd, void *mconfig,
 *                                 char *word1);
 */",undetermined
10889,httpd,UNKNOWN,"/*
 * Command handler for a TAKE2 directive.  TAKE2 commands must always have
 * exactly two arguments.  Declared in the command_rec list with
 *   AP_INIT_TAKE2(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE2(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2);
 */",undetermined
10890,httpd,UNKNOWN,"/*
 * Command handler for a TAKE3 directive.  Like TAKE2, these must have exactly
 * three arguments, or the parser complains and doesn't bother calling us.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE3(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE3(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2, char *word3);
 */",undetermined
10891,httpd,UNKNOWN,"/*
 * Command handler for a TAKE12 directive.  These can take either one or two
 * arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE12(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE12(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2);
 */",undetermined
10892,httpd,UNKNOWN,"/*
 * Command handler for a TAKE123 directive.  A TAKE123 directive can be given,
 * as might be expected, one, two, or three arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE123(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE123(cmd_parms *cmd, void *mconfig,
 *                                   char *word1, char *word2, char *word3);
 */",undetermined
10893,httpd,UNKNOWN,"/*
 * Command handler for a TAKE13 directive.  Either one or three arguments are
 * permitted - no two-parameters-only syntax is allowed.
 * - word2 and word3 are NULL pointers if only one argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE13(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE13(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */",undetermined
10894,httpd,UNKNOWN,"/*
 * Command handler for a TAKE23 directive.  At least two and as many as three
 * arguments must be specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE23(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_TAKE23(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */",undetermined
10895,httpd,UNKNOWN,"/*
 * Command handler for a ITERATE directive.
 * - Handler is called once for each of n arguments given to the directive.
 * - word1 points to each argument in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE(cmd_parms *cmd, void *mconfig,
 *                                   char *word1);
 */",undetermined
10896,httpd,UNKNOWN,"/*
 * Command handler for a ITERATE2 directive.
 * - Handler is called once for each of the second and subsequent arguments
 *   given to the directive.
 * - word1 is the same for each call for a particular directive instance (the
 *   first argument).
 * - word2 points to each of the second and subsequent arguments in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE2(""directive"", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE2(cmd_parms *cmd, void *mconfig,
 *                                    char *word1, char *word2);
 */",undetermined
10897,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10898,httpd,UNKNOWN,/*                                                                          */,undetermined
10899,httpd,UNKNOWN,"/* These routines are strictly internal to this module, and support its     */",undetermined
10900,httpd,UNKNOWN,/* operation.  They are not referenced by any external portion of the       */,undetermined
10901,httpd,UNKNOWN,/* server.                                                                  */,undetermined
10902,httpd,UNKNOWN,/*                                                                          */,undetermined
10903,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10904,httpd,UNKNOWN,"/*
 * Locate our directory configuration record for the current request.
 */",undetermined
10905,httpd,UNKNOWN,"/*
 * The following utility routines are not used in the module. Don't
 * compile them so -Wall doesn't complain about functions that are
 * defined but not used.
 */",undetermined
10906,httpd,UNKNOWN,"/*
 * Locate our server configuration record for the specified server.
 */",undetermined
10907,httpd,UNKNOWN,"/*
 * Likewise for our configuration record for the specified request.
 */",undetermined
10908,httpd,UNKNOWN,/* if 0 */,undetermined
10909,httpd,UNKNOWN,"/*
 * Likewise for our configuration record for a connection.
 */",undetermined
10910,httpd,UNKNOWN,"/*
 * You *could* change the following if you wanted to see the calling
 * sequence reported in the server's error_log, but beware - almost all of
 * these co-routines are called for every single request, and the impact
 * on the size (and readability) of the error_log is considerable.
 */",undetermined
10911,httpd,UNKNOWN,"/*
 * This utility routine traces the hooks called when the server starts up.
 * It leaves a trace in a global variable, so it should not be called from
 * a hook handler that runs in a multi-threaded situation.
 */",undetermined
10912,httpd,UNKNOWN,"/*
     * If we weren't passed a configuration record, we can't figure out to
     * what location this call applies.  This only happens for co-routines
     * that don't operate in a particular directory or server context.  If we
     * got a valid record, extract the location (directory or server) to which
     * it applies.
     */",undetermined
10913,httpd,UNKNOWN,"/*
     * Make sure that we start with a valid string, even if we have never been
     * called.
     */",undetermined
10914,httpd,UNKNOWN,"/*
 * This utility route traces the hooks called as a request is handled.
 * It takes the current request as argument
 */",undetermined
10915,httpd,UNKNOWN,"/*
 * This utility routine traces the hooks called while processing a
 * Connection. Its trace is kept in the pool notes of the pool associated
 * with the Connection.
 */",undetermined
10916,httpd,UNKNOWN,"/*
 * Key to get and set the userdata.  We should be able to get away
 * with a constant key, since in prefork mode the process will have
 * the connection and its pool to itself entirely, and in
 * multi-threaded mode each connection will have its own pool.
 */",undetermined
10917,httpd,UNKNOWN,/* Find existing notes and copy */,undetermined
10918,httpd,UNKNOWN,/* Tack addon onto copy */,undetermined
10919,httpd,UNKNOWN,"/*
     * Stash copy back into pool notes.  This call has a cleanup
     * parameter, but we're not using it because the string has been
     * allocated from that same pool.  There is also an unused return
     * value: we have nowhere to communicate any error that might
     * occur, and will have to check for the existence of this data on
     * the other end.
     */",undetermined
10920,httpd,UNKNOWN,"/*
     * Since we have no request or connection to trace, or any idea
     * from where this routine was called, there's really not much we
     * can do.  If we are not logging everything by way of the
     * EXAMPLE_LOG_EACH constant, do nothing in this routine.
     */",undetermined
10921,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10922,httpd,UNKNOWN,/* We prototyped the various syntax for command handlers (routines that     */,undetermined
10923,httpd,UNKNOWN,/* are called when the configuration parser detects a directive declared    */,undetermined
10924,httpd,UNKNOWN,"/* by our module) earlier.  Now we actually declare a ""real"" routine that   */",undetermined
10925,httpd,UNKNOWN,"/* will be invoked by the parser when our ""real"" directive is               */",undetermined
10926,httpd,UNKNOWN,/* encountered.                                                             */,undetermined
10927,httpd,UNKNOWN,/*                                                                          */,undetermined
10928,httpd,UNKNOWN,"/* If a command handler encounters a problem processing the directive, it   */",undetermined
10929,httpd,UNKNOWN,/* signals this fact by returning a non-NULL pointer to a string            */,undetermined
10930,httpd,UNKNOWN,/* describing the problem.                                                  */,undetermined
10931,httpd,UNKNOWN,/*                                                                          */,undetermined
10932,httpd,UNKNOWN,/* The magic return value DECLINE_CMD is used to deal with directives       */,undetermined
10933,httpd,UNKNOWN,/* that might be declared by multiple modules.  If the command handler      */,undetermined
10934,httpd,UNKNOWN,"/* returns NULL, the directive was processed; if it returns DECLINE_CMD,    */",undetermined
10935,httpd,UNKNOWN,/* the next module (if any) that declares the directive is given a chance   */,undetermined
10936,httpd,UNKNOWN,"/* at it.  If it returns any other value, it's treated as the text of an    */",undetermined
10937,httpd,UNKNOWN,/* error message.                                                           */,undetermined
10938,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10939,httpd,UNKNOWN,"/*
 * Command handler for the NO_ARGS ""Example"" directive.  All we do is mark the
 * call in the trace log, and flag the applicability of the directive to the
 * current location in that location's configuration record.
 */",undetermined
10940,httpd,UNKNOWN,"/*
     * ""Example Wuz Here""
     */",undetermined
10941,httpd,UNKNOWN,"/*
 * This function gets called to create a per-directory configuration
 * record.  This will be called for the ""default"" server environment, and for
 * each directory for which the parser finds any of our directives applicable.
 * If a directory doesn't have any of our directives involved (i.e., they
 * aren't in the .htaccess file, or a <Location>, <Directory>, or related
 * block), this routine will *not* be called - the configuration for the
 * closest ancestor is used.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */",undetermined
10942,httpd,UNKNOWN,"/*
     * Allocate the space for our record from the pool supplied.
     */",undetermined
10943,httpd,UNKNOWN,"/*
     * Now fill in the defaults.  If there are any `parent' configuration
     * records, they'll get merged as part of a separate callback.
     */",undetermined
10944,httpd,UNKNOWN,"/*
     * Finally, add our trace to the callback list.
     */",undetermined
10945,httpd,UNKNOWN,"/*
 * This function gets called to merge two per-directory configuration
 * records.  This is typically done to cope with things like .htaccess files
 * or <Location> directives for directories that are beneath one for which a
 * configuration record was already created.  The routine has the
 * responsibility of creating a new record and merging the contents of the
 * other two into it appropriately.  If the module doesn't declare a merge
 * routine, the record for the closest ancestor location (that has one) is
 * used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */",undetermined
10946,httpd,UNKNOWN,"/*
     * Some things get copied directly from the more-specific record, rather
     * than getting merged.
     */",undetermined
10947,httpd,UNKNOWN,"/*
     * Others, like the setting of the `congenital' flag, get ORed in.  The
     * setting of that particular flag, for instance, is TRUE if it was ever
     * true anywhere in the upstream configuration.
     */",undetermined
10948,httpd,UNKNOWN,"/*
     * If we're merging records for two different types of environment (server
     * and directory), mark the new record appropriately.  Otherwise, inherit
     * the current value.
     */",undetermined
10949,httpd,UNKNOWN,"/*
     * Now just record our being called in the trace list.  Include the
     * locations we were asked to merge.
     */",undetermined
10950,httpd,UNKNOWN,"/*
 * This function gets called to create a per-server configuration
 * record.  It will always be called for the ""default"" server.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */",undetermined
10951,httpd,UNKNOWN,"/*
     * As with the x_create_dir_config() reoutine, we allocate and fill
     * in an empty record.
     */",undetermined
10952,httpd,UNKNOWN,"/*
     * Note that we were called in the trace list.
     */",undetermined
10953,httpd,UNKNOWN,"/*
 * This function gets called to merge two per-server configuration
 * records.  This is typically done to cope with things like virtual hosts and
 * the default server configuration  The routine has the responsibility of
 * creating a new record and merging the contents of the other two into it
 * appropriately.  If the module doesn't declare a merge routine, the more
 * specific existing record is used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */",undetermined
10954,httpd,UNKNOWN,"/*
     * Our inheritance rules are our own, and part of our module's semantics.
     * Basically, just note whence we came.
     */",undetermined
10955,httpd,UNKNOWN,"/*
     * Trace our call, including what we were asked to merge.
     */",undetermined
10956,httpd,UNKNOWN,"/*--------------------------------------------------------------------------*
 *                                                                          *
 * Now let's declare routines for each of the callback hooks in order.      *
 * (That's the order in which they're listed in the callback list, *not     *
 * the order in which the server calls them!  See the command_rec           *
 * declaration near the bottom of this file.)  Note that these may be       *
 * called for situations that don't relate primarily to our function - in   *
 * other words, the fixup handler shouldn't assume that the request has     *
 * to do with ""example"" stuff.                                              *
 *                                                                          *
 * With the exception of the content handler, all of our routines will be   *
 * called for each request, unless an earlier handler from another module   *
 * aborted the sequence.                                                    *
 *                                                                          *
 * There are three types of hooks (see include/ap_config.h):                *
 *                                                                          *
 * VOID      : No return code, run all handlers declared by any module      *
 * RUN_FIRST : Run all handlers until one returns something other           *
 *             than DECLINED. Hook runner result is result of last callback *
 * RUN_ALL   : Run all handlers until one returns something other than OK   *
 *             or DECLINED. The hook runner returns that other value. If    *
 *             all hooks run, the hook runner returns OK.                   *
 *                                                                          *
 * Handlers that are declared as ""int"" can return the following:            *
 *                                                                          *
 *  OK          Handler accepted the request and did its thing with it.     *
 *  DECLINED    Handler took no action.                                     *
 *  HTTP_mumble Handler looked at request and found it wanting.             *
 *                                                                          *
 * See include/httpd.h for a list of HTTP_mumble status codes.  Handlers    *
 * that are not declared as int return a valid pointer, or NULL if they     *
 * DECLINE to handle their phase for that specific request.  Exceptions, if *
 * any, are noted with each routine.                                        *
 *--------------------------------------------------------------------------*/",undetermined
10957,httpd,UNKNOWN,"/*
 * This routine is called before the server processes the configuration
 * files.  There is no return value.
 */",undetermined
10958,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10959,httpd,UNKNOWN,"/*
 * This routine is called after the server processes the configuration
 * files.  At this point the module may review and adjust its configuration
 * settings in relation to one another and report any problems.  On restart,
 * this routine will be called twice, once in the startup process (which
 * exits shortly after this phase) and once in the running server process.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */",undetermined
10960,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10961,httpd,UNKNOWN,"/*
 * This routine is called when the -t command-line option is supplied.
 * It executes only once, in the startup process, after the check_config
 * phase and just before the process exits.  At this point the module
 * may output any information useful in configuration testing.
 *
 * This is a VOID hook: all defined handlers get called.
 */",undetermined
10962,httpd,UNKNOWN,"/*
 * This routine is called to perform any module-specific log file
 * openings. It is invoked just before the post_config phase
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */",undetermined
10963,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10964,httpd,UNKNOWN,"/*
 * This routine is called after the server finishes the configuration
 * process.  At this point the module may review and adjust its configuration
 * settings in relation to one another and report any problems.  On restart,
 * this routine will be called only once, in the running server process.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */",undetermined
10965,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10966,httpd,UNKNOWN,"/*
 * All our process-death routine does is add its trace to the log.
 */",undetermined
10967,httpd,UNKNOWN,"/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */",undetermined
10968,httpd,UNKNOWN,"/*
 * All our process initialiser does is add its trace to the log.
 *
 * This is a VOID hook: all defined handlers get called.
 */",undetermined
10969,httpd,UNKNOWN,"/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */",undetermined
10970,httpd,UNKNOWN,"/*
 * The hook runner for ap_hook_http_scheme is aliased to ap_http_scheme(),
 * a routine that the core and other modules call when they need to know
 * the URL scheme for the request.  For instance, mod_ssl returns ""https""
 * if the server_rec associated with the request has SSL enabled.
 *
 * This hook was named 'ap_hook_http_method' in httpd 2.0.
 *
 * This is a RUN_FIRST hook: the first handler to return a non NULL
 * value aborts the handler chain.  The http_core module inserts a
 * fallback handler (with APR_HOOK_REALLY_LAST preference) that returns
 * ""http"".
 */",undetermined
10971,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10972,httpd,UNKNOWN,/* We have no claims to make about the request scheme */,undetermined
10973,httpd,UNKNOWN,"/*
 * The runner for this hook is aliased to ap_default_port(), which the
 * core and other modules call when they need to know the default port
 * for a particular server.  This is used for instance to omit the
 * port number from a Redirect response Location header URL if the port
 * number is equal to the default port for the service (like 80 for http).
 *
 * This is a RUN_FIRST hook: the first handler to return a non-zero
 * value is the last one executed.  The http_core module inserts a
 * fallback handler (with APR_HOOK_REALLY_LAST order specifier) that
 * returns 80.
 */",undetermined
10974,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10975,httpd,UNKNOWN,"/*
 * This routine is called just before the handler gets invoked. It allows
 * a module to insert a previously defined filter into the filter chain.
 *
 * No filter has been defined by this module, so we just log the call
 * and exit.
 *
 * This is a VOID hook: all defined handlers get called.
 */",undetermined
10976,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
10977,httpd,UNKNOWN,"/*
 * This routine is called to insert a previously defined error filter into
 * the filter chain as the request is being processed.
 *
 * For the purpose of this example, we don't have a filter to insert,
 * so just add to the trace and exit.
 *
 * This is a VOID hook: all defined handlers get called.
 */",undetermined
10978,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10979,httpd,UNKNOWN,/*                                                                          */,undetermined
10980,httpd,UNKNOWN,"/* Now we declare our content handlers, which are invoked when the server   */",undetermined
10981,httpd,UNKNOWN,/* encounters a document which our module is supposed to have a chance to   */,undetermined
10982,httpd,UNKNOWN,"/* see.  (See mod_mime's SetHandler and AddHandler directives, and the      */",undetermined
10983,httpd,UNKNOWN,"/* mod_info and mod_status examples, for more details.)                     */",undetermined
10984,httpd,UNKNOWN,/*                                                                          */,undetermined
10985,httpd,UNKNOWN,/* Since content handlers are dumping data directly into the connection     */,undetermined
10986,httpd,UNKNOWN,"/* (using the r*() routines, such as rputs() and rprintf()) without         */",undetermined
10987,httpd,UNKNOWN,"/* intervention by other parts of the server, they need to make             */",undetermined
10988,httpd,UNKNOWN,/* sure any accumulated HTTP headers are sent first.  This is done by       */,undetermined
10989,httpd,UNKNOWN,"/* calling send_http_header().  Otherwise, no header will be sent at all,   */",undetermined
10990,httpd,UNKNOWN,/* and the output sent to the client will actually be HTTP-uncompliant.     */,undetermined
10991,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
10992,httpd,UNKNOWN,"/*
 * Sample content handler.  All this does is display the call list that has
 * been built up so far.
 *
 * This routine gets called for every request, unless another handler earlier
 * in the callback chain has already handled the request. It is up to us to
 * test the request_rec->handler field and see whether we are meant to handle
 * this request.
 *
 * The content handler gets to write directly to the client using calls like
 * ap_rputs() and ap_rprintf()
 *
 * This is a RUN_FIRST hook.
 */",undetermined
10993,httpd,UNKNOWN,"/*
     * Add our trace to the log, and whether we get to write
     * content for this request.
     */",undetermined
10994,httpd,UNKNOWN,"/* If it's not for us, get out as soon as possible. */",undetermined
10995,httpd,UNKNOWN,"/*
     * Set the Content-type header. Note that we do not actually have to send
     * the headers: this is done by the http core.
     */",undetermined
10996,httpd,UNKNOWN,"/*
     * If we're only supposed to send header information (HEAD request), we're
     * already there.
     */",undetermined
10997,httpd,UNKNOWN,"/*
     * Now send our actual output.  Since we tagged this as being
     * ""text/html"", we need to embed any HTML.
     */",undetermined
10998,httpd,UNKNOWN,"/*
     * We're all done, so cancel the timeout we set.  Since this is probably
     * the end of the request we *could* assume this would be done during
     * post-processing - but it's possible that another handler might be
     * called and inherit our outstanding timer.  Not good; to each its own.
     */",undetermined
10999,httpd,UNKNOWN,"/*
     * We did what we wanted to do, so tell the rest of the server we
     * succeeded.
     */",undetermined
11000,httpd,UNKNOWN,"/*
 * The quick_handler hook presents modules with a very powerful opportunity to
 * serve their content in a very early request phase.  Note that this handler
 * can not serve any requests from the file system because hooks like
 * map_to_storage have not run.  The quick_handler hook also runs before any
 * authentication and access control.
 *
 * This hook is used by mod_cache to serve cached content.
 *
 * This is a RUN_FIRST hook. Return OK if you have served the request,
 * DECLINED if you want processing to continue, or a HTTP_* error code to stop
 * processing the request.
 */",undetermined
11001,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
11002,httpd,UNKNOWN,"/*
 * This routine is called just after the server accepts the connection,
 * but before it is handed off to a protocol module to be served.  The point
 * of this hook is to allow modules an opportunity to modify the connection
 * as soon as possible. The core server uses this phase to setup the
 * connection record based on the type of connection that is being used.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11003,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
11004,httpd,UNKNOWN,"/* This routine is used to actually process the connection that was received.
 * Only protocol modules should implement this hook, as it gives them an
 * opportunity to replace the standard HTTP processing with processing for
 * some other protocol.  Both echo and POP3 modules are available as
 * examples.
 *
 * This is a RUN_FIRST hook.
 */",undetermined
11005,httpd,UNKNOWN,"/*
 * This routine is called after the request has been read but before any other
 * phases have been processed.  This allows us to make decisions based upon
 * the input header fields.
 *
 * This is a HOOK_VOID hook.
 */",undetermined
11006,httpd,UNKNOWN,"/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */",undetermined
11007,httpd,UNKNOWN,"/*
 * This routine is called after the request has been read but before any other
 * phases have been processed.  This allows us to make decisions based upon
 * the input header fields.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11008,httpd,UNKNOWN,"/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */",undetermined
11009,httpd,UNKNOWN,"/*
 * This routine gives our module an opportunity to translate the URI into an
 * actual filename.  If we don't do anything special, the server's default
 * rules (Alias directives and the like) will continue to be followed.
 *
 * This is a RUN_FIRST hook.
 */",undetermined
11010,httpd,UNKNOWN,"/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */",undetermined
11011,httpd,UNKNOWN,"/*
 * This routine maps r->filename to a physical file on disk.  Useful for
 * overriding default core behavior, including skipping mapping for
 * requests that are not file based.
 *
 * This is a RUN_FIRST hook.
 */",undetermined
11012,httpd,UNKNOWN,"/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */",undetermined
11013,httpd,UNKNOWN,"/*
 * this routine gives our module another chance to examine the request
 * headers and to take special action. This is the first phase whose
 * hooks' configuration directives can appear inside the <Directory>
 * and similar sections, because at this stage the URI has been mapped
 * to the filename. For example this phase can be used to block evil
 * clients, while little resources were wasted on these.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11014,httpd,UNKNOWN,"/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */",undetermined
11015,httpd,UNKNOWN,"/*
 * This routine is called to check for any module-specific restrictions placed
 * upon the requested resource.  (See the mod_access_compat module for an
 * example.)
 *
 * This is a RUN_ALL hook. The first handler to return a status other than OK
 * or DECLINED (for instance, HTTP_FORBIDDEN) aborts the callback chain.
 */",undetermined
11016,httpd,UNKNOWN,"/*
 * This routine is called to check the authentication information sent with
 * the request (such as looking up the user in a database and verifying that
 * the [encrypted] password sent matches the one in the database).
 *
 * This is a RUN_FIRST hook. The return value is OK, DECLINED, or some
 * HTTP_mumble error (typically HTTP_UNAUTHORIZED).
 */",undetermined
11017,httpd,UNKNOWN,"/*
     * Don't do anything except log the call.
     */",undetermined
11018,httpd,UNKNOWN,"/*
 * This routine is called to check to see if the resource being requested
 * requires authorisation.
 *
 * This is a RUN_FIRST hook. The return value is OK, DECLINED, or
 * HTTP_mumble.  If we return OK, no other modules are called during this
 * phase.
 *
 * If *all* modules return DECLINED, the request is aborted with a server
 * error.
 */",undetermined
11019,httpd,UNKNOWN,"/*
     * Log the call and return OK, or access will be denied (even though we
     * didn't actually do anything).
     */",undetermined
11020,httpd,UNKNOWN,"/*
 * This routine is called to determine and/or set the various document type
 * information bits, like Content-type (via r->content_type), language, et
 * cetera.
 *
 * This is a RUN_FIRST hook.
 */",undetermined
11021,httpd,UNKNOWN,"/*
     * Log the call, but don't do anything else - and report truthfully that
     * we didn't do anything.
     */",undetermined
11022,httpd,UNKNOWN,"/*
 * This routine is called to perform any module-specific fixing of header
 * fields, et cetera.  It is invoked just before any content-handler.
 *
 * This is a RUN_ALL HOOK.
 */",undetermined
11023,httpd,UNKNOWN,"/*
     * Log the call and exit.
     */",undetermined
11024,httpd,UNKNOWN,"/*
 * This routine is called to perform any module-specific logging activities
 * over and above the normal server things.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11025,httpd,UNKNOWN,"/*
 * This routine is called to find out under which user id to run suexec
 * Unless our module runs CGI programs, there is no reason for us to
 * mess with this information.
 *
 * This is a RUN_FIRST hook. The return value is a pointer to an
 * ap_unix_identity_t or NULL.
 */",undetermined
11026,httpd,UNKNOWN,"/*
 * This routine is called to create a connection. This hook is implemented
 * by the Apache core: there is no known reason a module should override
 * it.
 *
 * This is a RUN_FIRST hook.
 *
 * Return NULL to decline, a valid conn_rec pointer to accept.
 */",undetermined
11027,httpd,UNKNOWN,"/*
 * This hook is defined in server/core.c, but it is not actually called
 * or documented.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11028,httpd,UNKNOWN,"/* We have nothing to do here but trace the call, and no context
     * in which to trace it.
     */",undetermined
11029,httpd,UNKNOWN,"/*
 * This routine gets called shortly after the request_rec structure
 * is created. It provides the opportunity to manipulae the request
 * at a very early stage.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11030,httpd,UNKNOWN,"/*
     * We have a request_rec, but it is not filled in enough to give
     * us a usable configuration. So, add a trace without context.
     */",undetermined
11031,httpd,UNKNOWN,"/*
 * This routine gets called during the startup of the MPM.
 * No known existing module implements this hook.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11032,httpd,UNKNOWN,"/*
 * This hook gets run periodically by a maintenance function inside
 * the MPM. Its exact purpose is unknown and undocumented at this time.
 *
 * This is a RUN_ALL hook.
 */",undetermined
11033,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11034,httpd,UNKNOWN,/*                                                                          */,undetermined
11035,httpd,UNKNOWN,/* Which functions are responsible for which hooks in the server.           */,undetermined
11036,httpd,UNKNOWN,/*                                                                          */,undetermined
11037,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11038,httpd,UNKNOWN,"/*
 * Each function our module provides to handle a particular hook is
 * specified here.  The functions are registered using
 * ap_hook_foo(name, predecessors, successors, position)
 * where foo is the name of the hook.
 *
 * The args are as follows:
 * name         -> the name of the function to call.
 * predecessors -> a list of modules whose calls to this hook must be
 *                 invoked before this module.
 * successors   -> a list of modules whose calls to this hook must be
 *                 invoked after this module.
 * position     -> The relative position of this module.  One of
 *                 APR_HOOK_FIRST, APR_HOOK_MIDDLE, or APR_HOOK_LAST.
 *                 Most modules will use APR_HOOK_MIDDLE.  If multiple
 *                 modules use the same relative position, Apache will
 *                 determine which to call first.
 *                 If your module relies on another module to run first,
 *                 or another module running after yours, use the
 *                 predecessors and/or successors.
 *
 * The number in brackets indicates the order in which the routine is called
 * during request processing.  Note that not all routines are necessarily
 * called (such as if a resource doesn't have access restrictions).
 * The actual delivery of content to the browser [9] is not handled by
 * a hook; see the handler declarations below.
 */",undetermined
11039,httpd,UNKNOWN,/* [1] post read_request handling */,undetermined
11040,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11041,httpd,UNKNOWN,/*                                                                          */,undetermined
11042,httpd,UNKNOWN,/* All of the routines have been declared now.  Here's the list of          */,undetermined
11043,httpd,UNKNOWN,"/* directives specific to our module, and information about where they      */",undetermined
11044,httpd,UNKNOWN,/* may appear and how the command parser should pass them to us for         */,undetermined
11045,httpd,UNKNOWN,/* processing.  Note that care must be taken to ensure that there are NO    */,undetermined
11046,httpd,UNKNOWN,/* collisions of directive names between modules.                           */,undetermined
11047,httpd,UNKNOWN,/*                                                                          */,undetermined
11048,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11049,httpd,UNKNOWN,"/*
 * List of directives specific to our module.
 */",undetermined
11050,httpd,UNKNOWN,/* directive name */,undetermined
11051,httpd,UNKNOWN,/* config action routine */,undetermined
11052,httpd,UNKNOWN,/* argument to include in call */,undetermined
11053,httpd,UNKNOWN,/* where available */,undetermined
11054,httpd,UNKNOWN,/* directive description */,undetermined
11055,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11056,httpd,UNKNOWN,/*                                                                          */,undetermined
11057,httpd,UNKNOWN,"/* Finally, the list of callback routines and data structures that provide  */",undetermined
11058,httpd,UNKNOWN,/* the static hooks into our module from the other parts of the server.     */,undetermined
11059,httpd,UNKNOWN,/*                                                                          */,undetermined
11060,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
11061,httpd,UNKNOWN,"/*
 * Module definition for configuration.  If a particular callback is not
 * needed, replace its routine name below with the word NULL.
 */",undetermined
11062,httpd,UNKNOWN,/* per-directory config creator */,undetermined
11063,httpd,UNKNOWN,/* dir config merger */,undetermined
11064,httpd,UNKNOWN,/* server config creator */,undetermined
11065,httpd,UNKNOWN,/* server config merger */,undetermined
11066,httpd,UNKNOWN,/* command table */,undetermined
11067,httpd,UNKNOWN,/* set up other request processing hooks */,undetermined
11068,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11069,httpd,UNKNOWN,"/*
 *  mod_example_ipc -- Apache sample module
 *
 * This module illustrates the use in an Apache 2.x module of the Interprocess
 * Communications routines that come with APR. It is example code, and not meant
 * to be used in a production server.
 *
 * To play with this sample module first compile it into a DSO file and install
 * it into Apache's modules directory by running:
 *
 *    $ /path/to/apache2/bin/apxs -c -i mod_example_ipc.c
 *
 * Then activate it in Apache's httpd.conf file for instance for the URL
 * /example_ipc in as follows:
 *
 *    #   httpd.conf
 *    LoadModule example_ipc_module modules/mod_example_ipc.so
 *    <Location /example_ipc>
 *    SetHandler example_ipc
 *    </Location>
 *
 * Then restart Apache via
 *
 *    $ /path/to/apache2/bin/apachectl restart
 *
 * The module allocates a counter in shared memory, which is incremented by the
 * request handler under a mutex. After installation, activate the handler by
 * hitting the URL configured above with ab at various concurrency levels to see
 * how mutex contention affects server performance.
 */",undetermined
11070,httpd,UNKNOWN,/* Number of microseconds to camp out on the mutex */,undetermined
11071,httpd,UNKNOWN,/* Maximum number of times we camp out before giving up */,undetermined
11072,httpd,UNKNOWN,/* Number of microseconds the handler sits on the lock once acquired. */,undetermined
11073,httpd,UNKNOWN,/* Pointer to shared memory block */,undetermined
11074,httpd,UNKNOWN,"/* Shared memory file name, used on some systems */",undetermined
11075,httpd,UNKNOWN,/* Lock around shared memory segment access */,undetermined
11076,httpd,UNKNOWN,/* Data structure for shared memory block */,undetermined
11077,httpd,UNKNOWN,/* More fields if necessary */,undetermined
11078,httpd,UNKNOWN,"/*
 * Clean up the shared memory block. This function is registered as
 * cleanup function for the configuration pool, which gets called
 * on restarts. It assures that the new children will not talk to a stale
 * shared memory segment.
 */",undetermined
11079,httpd,UNKNOWN,"/*
 * This routine is called in the parent; we must register our
 * mutex type before the config is processed so that users can
 * adjust the mutex settings using the Mutex directive.
 */",undetermined
11080,httpd,UNKNOWN,"/*
 * This routine is called in the parent, so we'll set up the shared
 * memory segment and mutex here.
 */",undetermined
11081,httpd,UNKNOWN,"/*
     * Do nothing if we are not creating the final configuration.
     * The parent process gets initialized a couple of times as the
     * server starts up, and we don't want to create any more mutexes
     * and shared memory segments than we're actually going to use.
     */",undetermined
11082,httpd,UNKNOWN,"/*
     * The shared memory allocation routines take a file name.
     * Depending on system-specific implementation of these
     * routines, that file may or may not actually be created. We'd
     * like to store those files in the operating system's designated
     * temporary directory, which APR can point us to.
     */",undetermined
11083,httpd,UNKNOWN,/* Create the shared memory segment */,undetermined
11084,httpd,UNKNOWN,"/*
     * Create a unique filename using our pid. This information is
     * stashed in the global variable so the children inherit it.
     */",undetermined
11085,httpd,UNKNOWN,/* Now create that segment */,undetermined
11086,httpd,UNKNOWN,"/* Created it, now let's zero it out */",undetermined
11087,httpd,UNKNOWN,/* Create global mutex */,undetermined
11088,httpd,UNKNOWN,"/*
     * Destroy the shm segment when the configuration pool gets destroyed. This
     * happens on server restarts. The parent will then (above) allocate a new
     * shm segment that the new children will bind to.
     */",undetermined
11089,httpd,UNKNOWN,"/*
 * This routine gets called when a child inits. We use it to attach
 * to the shared memory segment, and reinitialize the mutex.
 */",undetermined
11090,httpd,UNKNOWN,"/*
     * Re-open the mutex for the child. Note we're reusing
     * the mutex pointer global here.
     */",undetermined
11091,httpd,UNKNOWN,"/* There's really nothing else we can do here, since This
         * routine doesn't return a status. If this ever goes wrong,
         * it will turn Apache into a fork bomb. Let's hope it never
         * will.
         */",undetermined
11092,httpd,UNKNOWN,"/* Ugly, but what else? */",undetermined
11093,httpd,UNKNOWN,/* The sample content handler */,undetermined
11094,httpd,UNKNOWN,"/*
     * The main function of the handler, aside from sending the
     * status page to the client, is to increment the counter in
     * the shared memory segment. This action needs to be mutexed
     * out using the global mutex.
     */",undetermined
11095,httpd,UNKNOWN,"/*
     * First, acquire the lock. This code is a lot more involved than
     * it usually needs to be, because the process based trylock
     * routine is not implemented on unix platforms. I left it in to
     * show how it would work if trylock worked, and for situations
     * and platforms where trylock works.
     */",undetermined
11096,httpd,UNKNOWN,/* Get out of the loop */,undetermined
11097,httpd,UNKNOWN,"/* If it's not implemented, just hang in the mutex. */",undetermined
11098,httpd,UNKNOWN,/* Out of the loop */,undetermined
11099,httpd,UNKNOWN,"/* Some error, log and bail */",undetermined
11100,httpd,UNKNOWN,/* Out of the loop without having the lock */,undetermined
11101,httpd,UNKNOWN,"/* Some other error, log and bail */",undetermined
11102,httpd,UNKNOWN,/* Out of the loop without having the lock */,undetermined
11103,httpd,UNKNOWN,"/*
         * The only way to get to this point is if the trylock worked
         * and returned BUSY. So, bump the time and try again
         */",undetermined
11104,httpd,UNKNOWN,/* Lock acquisition loop */,undetermined
11105,httpd,UNKNOWN,"/* Sleep for a millisecond to make it a little harder for
     * httpd children to acquire the lock.
     */",undetermined
11106,httpd,UNKNOWN,/* Increment the counter */,undetermined
11107,httpd,UNKNOWN,/* Send a page with our pid and the new value of the counter. */,undetermined
11108,httpd,UNKNOWN,"/*
             * Send a page saying that we couldn't get the lock. Don't say
             * what the counter is, because without the lock the value could
             * race.
             */",undetermined
11109,httpd,UNKNOWN,/* r->header_only */,undetermined
11110,httpd,UNKNOWN,/* Release the lock */,undetermined
11111,httpd,UNKNOWN,"/* Swallowing the result because what are we going to do with it at
     * this stage?
     */",undetermined
11112,httpd,UNKNOWN,/* Dispatch list for API hooks */,undetermined
11113,httpd,UNKNOWN,/* create per-dir    config structures */,undetermined
11114,httpd,UNKNOWN,/* merge  per-dir    config structures */,undetermined
11115,httpd,UNKNOWN,/* create per-server config structures */,undetermined
11116,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
11117,httpd,UNKNOWN,/* table of config file commands       */,undetermined
11118,httpd,UNKNOWN,/* register hooks                      */,undetermined
11119,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11120,httpd,UNKNOWN,/* compensate for NULL */,undetermined
11121,httpd,UNKNOWN,"/* initial pass only, please - in the name of efficiency */",undetermined
11122,httpd,UNKNOWN,/* Deliberate trailing space - filling in string on WRITE passes */,undetermined
11123,httpd,UNKNOWN,"/* each subsequent WRITE pass, let's update what we echoed */",undetermined
11124,httpd,UNKNOWN,/* Get a single line of input from the client */,undetermined
11125,httpd,UNKNOWN,/* Something horribly wrong happened.  Someone didn't block! */,undetermined
11126,httpd,UNKNOWN,/* Make sure the data is flushed to the client */,undetermined
11127,httpd,UNKNOWN,/* Announce our intent to loop */,undetermined
11128,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
11129,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
11130,httpd,UNKNOWN,/* create per-server config structure */,undetermined
11131,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
11132,httpd,UNKNOWN,/* command apr_table_t */,undetermined
11133,httpd,UNKNOWN,/* register hooks */,undetermined
11134,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11135,httpd,UNKNOWN,"/*
 * mod_bucketeer.c: split buckets whenever we find a control-char
 *
 * Written by Ian Holsman
 *
 */",undetermined
11136,httpd,UNKNOWN,/* ^B */,undetermined
11137,httpd,UNKNOWN,/* ^P */,undetermined
11138,httpd,UNKNOWN,/* ^F */,undetermined
11139,httpd,UNKNOWN,"/* If have a context, it means we've done this before successfully. */",undetermined
11140,httpd,UNKNOWN,/* We're cool with filtering this. */,undetermined
11141,httpd,UNKNOWN,"/* Okay, we've seen the EOS.
             * Time to pass it along down the chain.
             */",undetermined
11142,httpd,UNKNOWN,"/*
             * Ignore flush buckets for the moment..
             * we decide what to stream
             */",undetermined
11143,httpd,UNKNOWN,/* metadata bucket */,undetermined
11144,httpd,UNKNOWN,/* read */,undetermined
11145,httpd,UNKNOWN,/* XXX: really should append this to the next 'real' bucket */,undetermined
11146,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11147,httpd,UNKNOWN,"/*
 * Originally written @ Covalent by Jim Jagielski
 */",undetermined
11148,httpd,UNKNOWN,"/*
 * mod_dumpio.c:
 *  Think of this as a filter sniffer for Apache 2.x. It logs
 *  all filter data right before and after it goes out on the
 *  wire (BUT right before SSL encoded or after SSL decoded).
 *  It can produce a *huge* amount of data.
 */",undetermined
11149,httpd,UNKNOWN,"/* consider up to 80 additional characters, and factor the longest
 * line length of all \xNN sequences; log_error cannot record more
 * than MAX_STRING_LEN characters.
 */",undetermined
11150,httpd,UNKNOWN,"/*
 * Workhorse function: simply log to the current error_log
 * info about the data in the bucket as well as the data itself
 */",undetermined
11151,httpd,UNKNOWN,"/* XXX: Seriously flawed; we do not pay attention to embedded
                 * \0's in the request body, these should be escaped; however,
                 * the logging function already performs a significant amount
                 * of escaping, and so any escaping would be double-escaped.
                 * The coding solution is to throw away the current logic
                 * within ap_log_error, and introduce new vformatter %-escapes
                 * for escaping text, and for binary text (fixed len strings).
                 */",undetermined
11152,httpd,UNKNOWN,"/*
         * If we ever see an EOS, make sure to FLUSH.
         */",undetermined
11153,httpd,UNKNOWN,"/*
 * We know that SSL is CONNECTION + 5
 */",undetermined
11154,httpd,UNKNOWN,/* create per-dir    config structures */,undetermined
11155,httpd,UNKNOWN,/* merge  per-dir    config structures */,undetermined
11156,httpd,UNKNOWN,/* create per-server config structures */,undetermined
11157,httpd,UNKNOWN,/* merge  per-server config structures */,undetermined
11158,httpd,UNKNOWN,/* table of config file commands       */,undetermined
11159,httpd,UNKNOWN,/* register hooks                      */,undetermined
11160,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11161,httpd,UNKNOWN,/* for apr_text_header */,undetermined
11162,httpd,UNKNOWN,/* already registered */,undetermined
11163,httpd,UNKNOWN,"/* start at 1, and count up */",undetermined
11164,httpd,UNKNOWN,/* first: locate the namespace in the namespace table */,undetermined
11165,httpd,UNKNOWN,/* not our property (the namespace matched none of ours) */,undetermined
11166,httpd,UNKNOWN,/* second: look for the property in the liveprop specs */,undetermined
11167,httpd,UNKNOWN,"/* not our property (same namespace, but no matching prop name) */",undetermined
11168,httpd,UNKNOWN,/* map the provider-local NS into a global NS index */,undetermined
11169,httpd,UNKNOWN,/* assert: should not reach this point */,undetermined
11170,httpd,UNKNOWN,/* register the namespace URIs */,undetermined
11171,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11172,httpd,UNKNOWN,"/*
 * DAV extension module for Apache 2.0.*
 *
 * This module is repository-independent. It depends on hooks provided by a
 * repository implementation.
 *
 * APACHE ISSUES:
 *   - within a DAV hierarchy, if an unknown method is used and we default
 *     to Apache's implementation, it sends back an OPTIONS with the wrong
 *     set of methods -- there is NO HOOK for us.
 *     therefore: we need to manually handle the HTTP_METHOD_NOT_ALLOWED
 *       and HTTP_NOT_IMPLEMENTED responses (not ap_send_error_response).
 *   - process_mkcol_body() had to dup code from ap_setup_client_block().
 *   - it would be nice to get status lines from Apache for arbitrary
 *     status codes
 *   - it would be nice to be able to extend Apache's set of response
 *     codes so that it doesn't return 500 when an unknown code is placed
 *     into r->status.
 *   - http_vhost functions should apply ""const"" to their params
 *
 * DESIGN NOTES:
 *   - For PROPFIND, we batch up the entire response in memory before
 *     sending it. We may want to reorganize around sending the information
 *     as we suck it in from the propdb. Alternatively, we should at least
 *     generate a total Content-Length if we're going to buffer in memory
 *     so that we can keep the connection open.
 */",undetermined
11173,httpd,UNKNOWN,/* for apr_is* */,undetermined
11174,httpd,UNKNOWN,/* ### what is the best way to set this? */,undetermined
11175,httpd,UNKNOWN,/* used to denote that mod_dav will be handling this request */,undetermined
11176,httpd,UNKNOWN,/* per-dir configuration */,undetermined
11177,httpd,UNKNOWN,/* per-server configuration */,undetermined
11178,httpd,UNKNOWN,/* forward-declare for use in configuration lookup */,undetermined
11179,httpd,UNKNOWN,/* DAV methods */,undetermined
11180,httpd,UNKNOWN,"/* DBG0(""dav_init_handler""); */",undetermined
11181,httpd,UNKNOWN,/* Register DAV methods */,undetermined
11182,httpd,UNKNOWN,/* ### this isn't used at the moment... */,undetermined
11183,httpd,UNKNOWN,/* ### nothing to merge right now... */,undetermined
11184,httpd,UNKNOWN,/* NOTE: dir==NULL creates the default per-dir config */,undetermined
11185,httpd,UNKNOWN,/* clean up the directory to remove any trailing slash */,undetermined
11186,httpd,UNKNOWN,"/* DBG3(""dav_merge_dir_config: new=%08lx  base=%08lx  overrides=%08lx"",
       (long)newconf, (long)base, (long)overrides); */",undetermined
11187,httpd,UNKNOWN,"/* assert: conf->provider_name != NULL
       (otherwise, DAV is disabled, and we wouldn't be here) */",undetermined
11188,httpd,UNKNOWN,"/* assert: conf->provider != NULL
       (checked when conf->provider_name is set) */",undetermined
11189,httpd,UNKNOWN,"/*
 * Command handler for the DAV directive, which is TAKE1.
 */",undetermined
11190,httpd,UNKNOWN,/* lookup and cache the actual provider now */,undetermined
11191,httpd,UNKNOWN,"/* by the time they use it, the provider should be loaded and
               registered with us. */",undetermined
11192,httpd,UNKNOWN,"/*
 * Command handler for the DAVDepthInfinity directive, which is FLAG.
 */",undetermined
11193,httpd,UNKNOWN,"/*
 * Command handler for DAVMinTimeout directive, which is TAKE1
 */",undetermined
11194,httpd,UNKNOWN,"/*
** dav_error_response()
**
** Send a nice response back to the user. In most cases, Apache doesn't
** allow us to provide details in the body about what happened. This
** function allows us to completely specify the response body.
**
** ### this function is not logging any errors! (e.g. the body)
*/",undetermined
11195,httpd,UNKNOWN,/* begin the response now... */,undetermined
11196,httpd,UNKNOWN,/* the response has been sent. */,undetermined
11197,httpd,UNKNOWN,"/*
     * ### Use of DONE obviates logging..!
     */",undetermined
11198,httpd,UNKNOWN,"/*
 * Send a ""standardized"" error response based on the error's namespace & tag
 */",undetermined
11199,httpd,UNKNOWN,/* ### should move this namespace somewhere (with the others!) */,undetermined
11200,httpd,UNKNOWN,/* here's our mod_dav specific tag: */,undetermined
11201,httpd,UNKNOWN,/* the response has been sent. */,undetermined
11202,httpd,UNKNOWN,"/*
     * ### Use of DONE obviates logging..!
     */",undetermined
11203,httpd,UNKNOWN,"/*
 * Apache's URI escaping does not replace '&' since that is a valid character
 * in a URI (to form a query section). We must explicitly handle it so that
 * we can embed the URI into an XML document.
 */",undetermined
11204,httpd,UNKNOWN,/* check the easy case... */,undetermined
11205,httpd,UNKNOWN,"/* there was a '&', so more work is needed... sigh. */",undetermined
11206,httpd,UNKNOWN,"/*
     * Note: this is a teeny bit of overkill since we know there are no
     * '<' or '>' characters, but who cares.
     */",undetermined
11207,httpd,UNKNOWN,"/* Write a complete RESPONSE object out as a <DAV:repsonse> xml
   element.  Data is sent into brigade BB, which is auto-flushed into
   OUTPUT filter stack.  Use POOL for any temporary allocations.

   [Presumably the <multistatus> tag has already been written;  this
   routine is shared by dav_send_multistatus and dav_stream_response.]
*/",undetermined
11208,httpd,UNKNOWN,"/* use the Status-Line text from Apache.  Note, this will
       * default to 500 Internal Server Error if first->status
       * is not a known (or valid) status code.
       */",undetermined
11209,httpd,UNKNOWN,/* assume this includes <propstat> and is quoted properly */,undetermined
11210,httpd,UNKNOWN,"/*
       * We supply the description, so we know it doesn't have to
       * have any escaping/encoding applied to it.
       */",undetermined
11211,httpd,UNKNOWN,"/* Factorized helper function: prep request_rec R for a multistatus
   response and write <multistatus> tag into BB, destined for
   R->output_filters.  Use xml NAMESPACES in initial tag, if
   non-NULL. */",undetermined
11212,httpd,UNKNOWN,/* Set the correct status and Content-Type */,undetermined
11213,httpd,UNKNOWN,/* Send the headers and actual multistatus response now... */,undetermined
11214,httpd,UNKNOWN,/* Finish a multistatus response started by dav_begin_multistatus: */,undetermined
11215,httpd,UNKNOWN,/* indicate the end of the response body */,undetermined
11216,httpd,UNKNOWN,/* deliver whatever might be remaining in the brigade */,undetermined
11217,httpd,UNKNOWN,"/*
 * dav_log_err()
 *
 * Write error information to the log.
 */",undetermined
11218,httpd,UNKNOWN,/* Log the errors */,undetermined
11219,httpd,UNKNOWN,/* ### should have a directive to log the first or all */,undetermined
11220,httpd,UNKNOWN,"/*
 * dav_handle_err()
 *
 * Handle the standard error processing. <err> must be non-NULL.
 *
 * <response> is set by the following:
 *   - dav_validate_request()
 *   - dav_add_lock()
 *   - repos_hooks->remove_resource
 *   - repos_hooks->move_resource
 *   - repos_hooks->copy_resource
 *   - vsn_hooks->update
 */",undetermined
11221,httpd,UNKNOWN,/* log the errors */,undetermined
11222,httpd,UNKNOWN,/* our error messages are safe; tell Apache this */,undetermined
11223,httpd,UNKNOWN,"/* Didn't get a multistatus response passed in, but we still
           might be able to generate a standard <D:error> response.
           Search the error stack for an errortag. */",undetermined
11224,httpd,UNKNOWN,/* send the multistatus and tell Apache the request/response is DONE. */,undetermined
11225,httpd,UNKNOWN,/* handy function for return values of methods that (may) create things */,undetermined
11226,httpd,UNKNOWN,/* did the target resource already exist? */,undetermined
11227,httpd,UNKNOWN,/* Apache will supply a default message */,undetermined
11228,httpd,UNKNOWN,"/* Per HTTP/1.1, S10.2.2: add a Location header to contain the
     * URI that was created. */",undetermined
11229,httpd,UNKNOWN,"/* Convert locn to an absolute URI, and return in Location header */",undetermined
11230,httpd,UNKNOWN,/* ### insert an ETag header? see HTTP/1.1 S10.2.2 */,undetermined
11231,httpd,UNKNOWN,"/* Apache doesn't allow us to set a variable body for HTTP_CREATED, so
     * we must manufacture the entire response. */",undetermined
11232,httpd,UNKNOWN,/* ### move to dav_util? */,undetermined
11233,httpd,UNKNOWN,"/* The caller will return an HTTP_BAD_REQUEST. This will augment the
     * default message that Apache provides. */",undetermined
11234,httpd,UNKNOWN,"/* default is ""T"" */",undetermined
11235,httpd,UNKNOWN,"/* The caller will return an HTTP_BAD_REQUEST. This will augment the
     * default message that Apache provides. */",undetermined
11236,httpd,UNKNOWN,"/* resolve a request URI to a resource descriptor.
 *
 * If label_allowed != 0, then allow the request target to be altered by
 * a Label: header.
 *
 * If use_checked_in is true, then the repository provider should return
 * the resource identified by the DAV:checked-in property of the resource
 * identified by the Request-URI.
 */",undetermined
11237,httpd,UNKNOWN,"/* if the request target can be overridden, get any target selector */",undetermined
11238,httpd,UNKNOWN,/* assert: conf->provider != NULL */,undetermined
11239,httpd,UNKNOWN,/* resolve the resource */,undetermined
11240,httpd,UNKNOWN,"/* Note: this shouldn't happen, but just be sure... */",undetermined
11241,httpd,UNKNOWN,/* ### maybe use HTTP_INTERNAL_SERVER_ERROR */,undetermined
11242,httpd,UNKNOWN,/* ### hmm. this doesn't feel like the right place or thing to do */,undetermined
11243,httpd,UNKNOWN,"/* if there were any input headers requiring a Vary header in the response,
     * add it now */",undetermined
11244,httpd,UNKNOWN,/* open the thing lazily */,undetermined
11245,httpd,UNKNOWN,"/**
 * @return  1 if valid content-range,
 *          0 if no content-range,
 *         -1 if malformed content-range
 */",undetermined
11246,httpd,UNKNOWN,/* malformed header */,undetermined
11247,httpd,UNKNOWN,/* detect invalid ranges */,undetermined
11248,httpd,UNKNOWN,/* we now have a valid range */,undetermined
11249,httpd,UNKNOWN,/* handle the GET method */,undetermined
11250,httpd,UNKNOWN,"/* This method should only be called when the resource is not
     * visible to Apache. We will fetch the resource from the repository,
     * then create a subrequest for Apache to handle.
     */",undetermined
11251,httpd,UNKNOWN,/* label_allowed */,undetermined
11252,httpd,UNKNOWN,/* use_checked_in */,undetermined
11253,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11254,httpd,UNKNOWN,/* set up the HTTP headers for the response */,undetermined
11255,httpd,UNKNOWN,/* Handle conditional requests */,undetermined
11256,httpd,UNKNOWN,/* okay... time to deliver the content */,undetermined
11257,httpd,UNKNOWN,"/* validate resource/locks on POST, then pass to the default handler */",undetermined
11258,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11259,httpd,UNKNOWN,/* label_allowed */,undetermined
11260,httpd,UNKNOWN,/* use_checked_in */,undetermined
11261,httpd,UNKNOWN,/* Note: depth == 0. Implies no need for a multistatus response. */,undetermined
11262,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11263,httpd,UNKNOWN,/* handle the PUT method */,undetermined
11264,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11265,httpd,UNKNOWN,/* label_allowed */,undetermined
11266,httpd,UNKNOWN,/* use_checked_in */,undetermined
11267,httpd,UNKNOWN,"/* If not a file or collection resource, PUT not allowed */",undetermined
11268,httpd,UNKNOWN,/* Cannot PUT a collection */,undetermined
11269,httpd,UNKNOWN,"/*
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource does not exist (DAV_RESOURCE_NULL), then we must
     * check the resource *and* its parent. If the resource exists or is
     * a locknull resource, then we check only the resource.
     */",undetermined
11270,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11271,httpd,UNKNOWN,"/* RFC 2616 14.16: If we receive an invalid Content-Range we must
         * not use the content.
         */",undetermined
11272,httpd,UNKNOWN,/* make sure the resource can be modified (if versioning repository) */,undetermined
11273,httpd,UNKNOWN,/* not parent_only */,undetermined
11274,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11275,httpd,UNKNOWN,/* Create the new file in the repository */,undetermined
11276,httpd,UNKNOWN,/* ### assuming FORBIDDEN is probably not quite right... */,undetermined
11277,httpd,UNKNOWN,/* a range was provided. seek to the start */,undetermined
11278,httpd,UNKNOWN,/* XXX: should this actually be HTTP_BAD_REQUEST? */,undetermined
11279,httpd,UNKNOWN,"/* write whatever we read, until we see an error */",undetermined
11280,httpd,UNKNOWN,/* commit */,undetermined
11281,httpd,UNKNOWN,"/*
     * Ensure that we think the resource exists now.
     * ### eek. if an error occurred during the write and we did not commit,
     * ### then the resource might NOT exist (e.g. dav_fs_repos.c)
     */",undetermined
11282,httpd,UNKNOWN,/* restore modifiability of resources back to what they were */,undetermined
11283,httpd,UNKNOWN,/* undo if error */,undetermined
11284,httpd,UNKNOWN,/*unlock*/,undetermined
11285,httpd,UNKNOWN,/* check for errors now */,undetermined
11286,httpd,UNKNOWN,/* don't forget err2 */,undetermined
11287,httpd,UNKNOWN,/* just log a warning */,undetermined
11288,httpd,UNKNOWN,/* ### place the Content-Type and Content-Language into the propdb */,undetermined
11289,httpd,UNKNOWN,"/* The file creation was successful, but the locking failed. */",undetermined
11290,httpd,UNKNOWN,/* notify lock system that we have created/replaced a resource */,undetermined
11291,httpd,UNKNOWN,"/* The file creation was successful, but the locking failed. */",undetermined
11292,httpd,UNKNOWN,"/* NOTE: WebDAV spec, S8.7.1 states properties should be unaffected */",undetermined
11293,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED or HTTP_NO_CONTENT) */,undetermined
11294,httpd,UNKNOWN,"/* Use POOL to temporarily construct a dav_response object (from WRES
   STATUS, and PROPSTATS) and stream it via WRES's ctx->brigade. */",undetermined
11295,httpd,UNKNOWN,/* ### move this to dav_util? */,undetermined
11296,httpd,UNKNOWN,/* just drop some data into an dav_response */,undetermined
11297,httpd,UNKNOWN,/* handle the DELETE method */,undetermined
11298,httpd,UNKNOWN,"/* We don't use the request body right now, so torch it. */",undetermined
11299,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11300,httpd,UNKNOWN,/* label_allowed */,undetermined
11301,httpd,UNKNOWN,/* use_checked_in */,undetermined
11302,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11303,httpd,UNKNOWN,"/* 2518 says that depth must be infinity only for collections.
     * For non-collections, depth is ignored, unless it is an illegal value (1).
     */",undetermined
11304,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11305,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11306,httpd,UNKNOWN,"/*
    ** If any resources fail the lock/If: conditions, then we must fail
    ** the delete. Each of the failing resources will be listed within
    ** a DAV:multistatus body, wrapped into a 424 response.
    **
    ** Note that a failure on the resource itself does not generate a
    ** multistatus response -- only internal members/collections.
    */",undetermined
11307,httpd,UNKNOWN,"/* ### RFC 2518 s. 8.10.5 says to remove _all_ locks, not just those
     *     locked by the token(s) in the if_header.
     */",undetermined
11308,httpd,UNKNOWN,"/* if versioned resource, make sure parent is checked out */",undetermined
11309,httpd,UNKNOWN,/* parent_only */,undetermined
11310,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11311,httpd,UNKNOWN,/* try to remove the resource */,undetermined
11312,httpd,UNKNOWN,/* restore writability of parent back to what it was */,undetermined
11313,httpd,UNKNOWN,/* undo if error */,undetermined
11314,httpd,UNKNOWN,/*unlock*/,undetermined
11315,httpd,UNKNOWN,/* check for errors now */,undetermined
11316,httpd,UNKNOWN,/* just log a warning */,undetermined
11317,httpd,UNKNOWN,"/* ### HTTP_NO_CONTENT if no body, HTTP_OK if there is a body (some day) */",undetermined
11318,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11319,httpd,UNKNOWN,/* generate DAV:supported-method-set OPTIONS response */,undetermined
11320,httpd,UNKNOWN,/* show all supported methods */,undetermined
11321,httpd,UNKNOWN,/* check for support of specific methods */,undetermined
11322,httpd,UNKNOWN,/* go through attributes to find method name */,undetermined
11323,httpd,UNKNOWN,/* see if method is supported */,undetermined
11324,httpd,UNKNOWN,/* generate DAV:supported-live-property-set OPTIONS response */,undetermined
11325,httpd,UNKNOWN,"/* open lock database, to report on supported lock properties */",undetermined
11326,httpd,UNKNOWN,/* ### should open read-only */,undetermined
11327,httpd,UNKNOWN,/* open the property database (readonly) for the resource */,undetermined
11328,httpd,UNKNOWN,/* show all supported live properties */,undetermined
11329,httpd,UNKNOWN,/* check for support of specific live property */,undetermined
11330,httpd,UNKNOWN,/* go through attributes to find name and namespace */,undetermined
11331,httpd,UNKNOWN,/* default namespace to DAV: */,undetermined
11332,httpd,UNKNOWN,/* check for support of property */,undetermined
11333,httpd,UNKNOWN,/* generate DAV:supported-report-set OPTIONS response */,undetermined
11334,httpd,UNKNOWN,/* show all supported reports */,undetermined
11335,httpd,UNKNOWN,"/* Note: we presume reports->namespace is
                     * properly XML/URL quoted */",undetermined
11336,httpd,UNKNOWN,/* check for support of specific report */,undetermined
11337,httpd,UNKNOWN,/* go through attributes to find name and namespace */,undetermined
11338,httpd,UNKNOWN,/* default namespace to DAV: */,undetermined
11339,httpd,UNKNOWN,"/* Note: we presume reports->nmspace is
                                 * properly XML/URL quoted
                                 */",undetermined
11340,httpd,UNKNOWN,/* handle the SEARCH method */,undetermined
11341,httpd,UNKNOWN,"/* If no search provider, decline the request */",undetermined
11342,httpd,UNKNOWN,"/* This method should only be called when the resource is not
     * visible to Apache. We will fetch the resource from the repository,
     * then create a subrequest for Apache to handle.
     */",undetermined
11343,httpd,UNKNOWN,/* label_allowed */,undetermined
11344,httpd,UNKNOWN,/* use_checked_in */,undetermined
11345,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11346,httpd,UNKNOWN,/* set up the HTTP headers for the response */,undetermined
11347,httpd,UNKNOWN,/* okay... time to search the content */,undetermined
11348,httpd,UNKNOWN,"/* Let's validate XML and process walk function
     * in the hook function
     */",undetermined
11349,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11350,httpd,UNKNOWN,/* We have results in multi_status */,undetermined
11351,httpd,UNKNOWN,/* Should I pass namespace?? */,undetermined
11352,httpd,UNKNOWN,/* handle the OPTIONS method */,undetermined
11353,httpd,UNKNOWN,/* resolve the resource */,undetermined
11354,httpd,UNKNOWN,/* label_allowed */,undetermined
11355,httpd,UNKNOWN,/* use_checked_in */,undetermined
11356,httpd,UNKNOWN,/* parse any request body */,undetermined
11357,httpd,UNKNOWN,/* note: doc == NULL if no request body */,undetermined
11358,httpd,UNKNOWN,/* determine which providers are available */,undetermined
11359,httpd,UNKNOWN,/* DAV header additions registered by external modules */,undetermined
11360,httpd,UNKNOWN,"/* ###
     * MSFT Web Folders chokes if length of DAV header value > 63 characters!
     * To workaround that, we use separate DAV headers for versioning and
     * live prop provider namespace URIs.
     * ###
     */",undetermined
11361,httpd,UNKNOWN,"/*
     * If there is a versioning provider, generate DAV headers
     * for versioning options.
     */",undetermined
11362,httpd,UNKNOWN,"/*
     * Gather property set URIs from all the liveprop providers,
     * and generate a separate DAV header for each URI, to avoid
     * problems with long header lengths.
     */",undetermined
11363,httpd,UNKNOWN,/* this tells MSFT products to skip looking for FrontPage extensions */,undetermined
11364,httpd,UNKNOWN,"/*
     * Determine which methods are allowed on the resource.
     * Three cases:  resource is null (3), is lock-null (7.4), or exists.
     *
     * All cases support OPTIONS, and if there is a lock provider, LOCK.
     * (Lock-) null resources also support MKCOL and PUT.
     * Lock-null supports PROPFIND and UNLOCK.
     * Existing resources support lots of stuff.
     */",undetermined
11365,httpd,UNKNOWN,/* ### take into account resource type */,undetermined
11366,httpd,UNKNOWN,/* resource exists */,undetermined
11367,httpd,UNKNOWN,/* resource is lock-null. */,undetermined
11368,httpd,UNKNOWN,/* resource is null. */,undetermined
11369,httpd,UNKNOWN,/* ### internal error! */,undetermined
11370,httpd,UNKNOWN,"/* If there is a versioning provider, add versioning methods */",undetermined
11371,httpd,UNKNOWN,/* ### we might not support this DeltaV option */,undetermined
11372,httpd,UNKNOWN,"/* If there is a bindings provider, see if resource is bindable */",undetermined
11373,httpd,UNKNOWN,"/* If there is a search provider, set SEARCH in option */",undetermined
11374,httpd,UNKNOWN,/* additional methods registered by external modules */,undetermined
11375,httpd,UNKNOWN,/* Generate the Allow header */,undetermined
11376,httpd,UNKNOWN,"/* first, compute total length */",undetermined
11377,httpd,UNKNOWN,/* add 1 for comma or null */,undetermined
11378,httpd,UNKNOWN,"/* If there is search set_option_head function, set head */",undetermined
11379,httpd,UNKNOWN,"/* DASL: <DAV:basicsearch>
     * DASL: <http://foo.bar.com/syntax1>
     * DASL: <http://akuma.com/syntax2>
     */",undetermined
11380,httpd,UNKNOWN,"/* if there was no request body, then there is no response body */",undetermined
11381,httpd,UNKNOWN,/* ### this sends a Content-Type. the default OPTIONS does not. */,undetermined
11382,httpd,UNKNOWN,"/* ### the default (ap_send_http_options) returns OK, but I believe
         * ### that is because it is the default handler and nothing else
         * ### will run after the thing. */",undetermined
11383,httpd,UNKNOWN,/* handle each options request */,undetermined
11384,httpd,UNKNOWN,/* check for something we recognize first */,undetermined
11385,httpd,UNKNOWN,"/* if unrecognized option, pass to versioning provider */",undetermined
11386,httpd,UNKNOWN,/* send the options response */,undetermined
11387,httpd,UNKNOWN,/* send the headers and response body */,undetermined
11388,httpd,UNKNOWN,/* we've sent everything necessary to the client. */,undetermined
11389,httpd,UNKNOWN,/* just return if we built the thing already */,undetermined
11390,httpd,UNKNOWN,"/*
    ** Note: ctx->doc can only be NULL for DAV_PROPFIND_IS_ALLPROP. Since
    ** dav_get_allprops() does not need to do namespace translation,
    ** we're okay.
    **
    ** Note: we cast to lose the ""const"". The propdb won't try to change
    ** the resource, however, since we are opening readonly.
    */",undetermined
11391,httpd,UNKNOWN,/* ### do something with err! */,undetermined
11392,httpd,UNKNOWN,/* some props were expected on this collection/resource */,undetermined
11393,httpd,UNKNOWN,/* no props on this collection/resource */,undetermined
11394,httpd,UNKNOWN,/* ### what to do about closing the propdb on server failure? */,undetermined
11395,httpd,UNKNOWN,"/* at this point, ctx->scratchpool has been used to stream a
       single response.  this function fully controls the pool, and
       thus has the right to clear it for the next iteration of this
       callback. */",undetermined
11396,httpd,UNKNOWN,/* handle the PROPFIND method */,undetermined
11397,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11398,httpd,UNKNOWN,/* label_allowed */,undetermined
11399,httpd,UNKNOWN,/* use_checked_in */,undetermined
11400,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11401,httpd,UNKNOWN,"/* dav_get_depth() supplies additional information for the
         * default message. */",undetermined
11402,httpd,UNKNOWN,/* default is to DISALLOW these requests */,undetermined
11403,httpd,UNKNOWN,/* note: doc == NULL if no request body */,undetermined
11404,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11405,httpd,UNKNOWN,/* ### validate that only one of these three elements is present */,undetermined
11406,httpd,UNKNOWN,/* note: no request body implies allprop */,undetermined
11407,httpd,UNKNOWN,"/* ""propfind"" element must have one of the above three children */",undetermined
11408,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11409,httpd,UNKNOWN,/* ### should open read-only */,undetermined
11410,httpd,UNKNOWN,"/* if we have a lock database, then we can walk locknull resources */",undetermined
11411,httpd,UNKNOWN,"/* send <multistatus> tag, with all doc->namespaces attached.  */",undetermined
11412,httpd,UNKNOWN,"/* NOTE: we *cannot* leave out the doc's namespaces from the
       initial <multistatus> tag.  if a 404 was generated for an HREF,
       then we need to spit out the doc's namespaces for use by the
       404. Note that <response> elements will override these ns0,
       ns1, etc, but NOT within the <response> scope for the
       badprops. */",undetermined
11413,httpd,UNKNOWN,/* Have the provider walk the resource. */,undetermined
11414,httpd,UNKNOWN,"/* If an error occurred during the resource walk, there's
           basically nothing we can do but abort the connection and
           log an error.  This is one of the limitations of HTTP; it
           needs to ""know"" the entire status of the response before
           generating it, which is just impossible in these streamy
           response situations. */",undetermined
11415,httpd,UNKNOWN,/* the response has been sent. */,undetermined
11416,httpd,UNKNOWN,/* ### might be nice to sort by status code and description */,undetermined
11417,httpd,UNKNOWN,"/* nothing was assigned here yet, so make it a 424 */",undetermined
11418,httpd,UNKNOWN,/* ### we should use compute_desc if necessary... */,undetermined
11419,httpd,UNKNOWN,"/*
     * ### we probably need to revise the way we assemble the response...
     * ### this code assumes everything will return status==200.
     */",undetermined
11420,httpd,UNKNOWN,"/*
 * Call <func> for each context. This can stop when an error occurs, or
 * simply iterate through the whole list.
 *
 * Returns 1 if an error occurs (and the iteration is aborted). Returns 0
 * if all elements are processed.
 *
 * If <reverse> is true (non-zero), then the list is traversed in
 * reverse order.
 */",undetermined
11421,httpd,UNKNOWN,/* handle the PROPPATCH method */,undetermined
11422,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11423,httpd,UNKNOWN,/* label_allowed */,undetermined
11424,httpd,UNKNOWN,/* use_checked_in */,undetermined
11425,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11426,httpd,UNKNOWN,/* note: doc == NULL if no request body */,undetermined
11427,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11428,httpd,UNKNOWN,/* Check If-Headers and existing locks */,undetermined
11429,httpd,UNKNOWN,/* Note: depth == 0. Implies no need for a multistatus response. */,undetermined
11430,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11431,httpd,UNKNOWN,/* make sure the resource can be modified (if versioning repository) */,undetermined
11432,httpd,UNKNOWN,/* not parent_only */,undetermined
11433,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11434,httpd,UNKNOWN,/* undo any auto-checkout */,undetermined
11435,httpd,UNKNOWN,/*undo*/,undetermined
11436,httpd,UNKNOWN,/*unlock*/,undetermined
11437,httpd,UNKNOWN,/* ### what to do about closing the propdb on server failure? */,undetermined
11438,httpd,UNKNOWN,"/* ### validate ""live"" properties */",undetermined
11439,httpd,UNKNOWN,/* set up an array to hold property operation contexts */,undetermined
11440,httpd,UNKNOWN,"/* do a first pass to ensure that all ""remove"" properties exist */",undetermined
11441,httpd,UNKNOWN,/* Ignore children that are not set/remove */,undetermined
11442,httpd,UNKNOWN,"/* make sure that a ""prop"" child exists for set/remove */",undetermined
11443,httpd,UNKNOWN,/* undo any auto-checkout */,undetermined
11444,httpd,UNKNOWN,/*undo*/,undetermined
11445,httpd,UNKNOWN,/*unlock*/,undetermined
11446,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11447,httpd,UNKNOWN,/* for later use by dav_prop_log_errors() */,undetermined
11448,httpd,UNKNOWN,/* ### should test that we found at least one set/remove */,undetermined
11449,httpd,UNKNOWN,/* execute all of the operations */,undetermined
11450,httpd,UNKNOWN,/* generate a failure/success response */,undetermined
11451,httpd,UNKNOWN,/* make sure this gets closed! */,undetermined
11452,httpd,UNKNOWN,/* complete any auto-versioning */,undetermined
11453,httpd,UNKNOWN,/*unlock*/,undetermined
11454,httpd,UNKNOWN,/* log any errors that occurred */,undetermined
11455,httpd,UNKNOWN,/* ### should probably use something new to pass along this text... */,undetermined
11456,httpd,UNKNOWN,/* the response has been sent. */,undetermined
11457,httpd,UNKNOWN,"/* This is snarfed from ap_setup_client_block(). We could get pretty
     * close to this behavior by passing REQUEST_NO_BODY, but we need to
     * return HTTP_UNSUPPORTED_MEDIA_TYPE (while ap_setup_client_block
     * returns HTTP_REQUEST_ENTITY_TOO_LARGE). */",undetermined
11458,httpd,UNKNOWN,/* make sure to set the Apache request fields properly. */,undetermined
11459,httpd,UNKNOWN,/* Use this instead of Apache's default error string */,undetermined
11460,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11461,httpd,UNKNOWN,/* ### log something? */,undetermined
11462,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11463,httpd,UNKNOWN,"/*
     * Get rid of the body. this will call ap_setup_client_block(), but
     * our copy above has already verified its work.
     */",undetermined
11464,httpd,UNKNOWN,/* handle the MKCOL method */,undetermined
11465,httpd,UNKNOWN,/* handle the request body */,undetermined
11466,httpd,UNKNOWN,/* ### this may move lower once we start processing bodies */,undetermined
11467,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11468,httpd,UNKNOWN,/* label_allowed */,undetermined
11469,httpd,UNKNOWN,/* use_checked_in */,undetermined
11470,httpd,UNKNOWN,/* oops. something was already there! */,undetermined
11471,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11472,httpd,UNKNOWN,/* ### we should provide a specific error message! */,undetermined
11473,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks.
     *
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource does not exist (DAV_RESOURCE_NULL), then we must
     * check the resource *and* its parent. If the resource exists or is
     * a locknull resource, then we check only the resource.
     */",undetermined
11474,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11475,httpd,UNKNOWN,"/* if versioned resource, make sure parent is checked out */",undetermined
11476,httpd,UNKNOWN,/* parent_only */,undetermined
11477,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11478,httpd,UNKNOWN,/* try to create the collection */,undetermined
11479,httpd,UNKNOWN,/* restore modifiability of parent back to what it was */,undetermined
11480,httpd,UNKNOWN,/* undo if error */,undetermined
11481,httpd,UNKNOWN,/*unlock*/,undetermined
11482,httpd,UNKNOWN,/* check for errors now */,undetermined
11483,httpd,UNKNOWN,/* just log a warning */,undetermined
11484,httpd,UNKNOWN,"/* The directory creation was successful, but the locking failed. */",undetermined
11485,httpd,UNKNOWN,/* notify lock system that we have created/replaced a resource */,undetermined
11486,httpd,UNKNOWN,"/* The dir creation was successful, but the locking failed. */",undetermined
11487,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED) */,undetermined
11488,httpd,UNKNOWN,/* handle the COPY and MOVE methods */,undetermined
11489,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11490,httpd,UNKNOWN,/* label_allowed */,undetermined
11491,httpd,UNKNOWN,/* use_checked_in */,undetermined
11492,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11493,httpd,UNKNOWN,"/* If not a file or collection resource, COPY/MOVE not allowed */",undetermined
11494,httpd,UNKNOWN,/* ### allow COPY/MOVE of DeltaV resource types */,undetermined
11495,httpd,UNKNOWN,/* get the destination URI */,undetermined
11496,httpd,UNKNOWN,/* Look in headers provided by Netscape's Roaming Profiles */,undetermined
11497,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11498,httpd,UNKNOWN,/* must_be_absolute */,undetermined
11499,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11500,httpd,UNKNOWN,"/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */",undetermined
11501,httpd,UNKNOWN,"/* propagate the WWW-Authorization header up from the
             * subreq so the client sees it. */",undetermined
11502,httpd,UNKNOWN,/* ### how best to report this... */,undetermined
11503,httpd,UNKNOWN,/* Resolve destination resource */,undetermined
11504,httpd,UNKNOWN,/* label_allowed */,undetermined
11505,httpd,UNKNOWN,/* use_checked_in */,undetermined
11506,httpd,UNKNOWN,/* are the two resources handled by the same repository? */,undetermined
11507,httpd,UNKNOWN,"/* ### this message exposes some backend config, but screw it... */",undetermined
11508,httpd,UNKNOWN,/* get and parse the overwrite header value */,undetermined
11509,httpd,UNKNOWN,"/* dav_get_overwrite() supplies additional information for the
         * default message. */",undetermined
11510,httpd,UNKNOWN,/* quick failure test: if dest exists and overwrite is false. */,undetermined
11511,httpd,UNKNOWN,/* Supply some text for the error response body. */,undetermined
11512,httpd,UNKNOWN,/* are the source and destination the same? */,undetermined
11513,httpd,UNKNOWN,/* Supply some text for the error response body. */,undetermined
11514,httpd,UNKNOWN,"/* get and parse the Depth header value. ""0"" and ""infinity"" are legal. */",undetermined
11515,httpd,UNKNOWN,"/* dav_get_depth() supplies additional information for the
         * default message. */",undetermined
11516,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11517,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11518,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks for each resource in the source.
     * We will return a 424 response with a DAV:multistatus body.
     * The multistatus responses will contain the information about any
     * resource that fails the validation.
     *
     * We check the parent resource, too, since this is a MOVE. Moving the
     * resource effectively removes it from the parent collection, so we
     * must ensure that we have met the appropriate conditions.
     *
     * If a problem occurs with the Request-URI itself, then a plain error
     * (rather than a multistatus) will be returned.
     */",undetermined
11519,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks for destination. Note that we
     * use depth==infinity since the target (hierarchy) will be deleted
     * before the move/copy is completed.
     *
     * Note that we are overwriting the target, which implies a DELETE, so
     * we are subject to the error/response rules as a DELETE. Namely, we
     * will return a 424 error if any of the validations fail.
     * (see dav_method_delete() for more information)
     */",undetermined
11520,httpd,UNKNOWN,/* Supply some text for the error response body. */,undetermined
11521,httpd,UNKNOWN,"/* The destination must exist (since it contains the source), and
         * a condition above implies Overwrite==T. Obviously, we cannot
         * delete the Destination before the MOVE/COPY, as that would
         * delete the Source.
         */",undetermined
11522,httpd,UNKNOWN,/* Supply some text for the error response body. */,undetermined
11523,httpd,UNKNOWN,"/* ### for now, we don't need anything in the body */",undetermined
11524,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11525,httpd,UNKNOWN,/* remove any locks from the old resources */,undetermined
11526,httpd,UNKNOWN,"/*
     * ### this is Yet Another Traversal. if we do a rename(), then we
     * ### really don't have to do this in some cases since the inode
     * ### values will remain constant across the move. but we can't
     * ### know that fact from outside the provider :-(
     *
     * ### note that we now have a problem atomicity in the move/copy
     * ### since a failure after this would have removed locks (technically,
     * ### this is okay to do, but really...)
     */",undetermined
11527,httpd,UNKNOWN,/* ### this is wrong! it blasts direct locks on parent resources */,undetermined
11528,httpd,UNKNOWN,/* ### pass lockdb! */,undetermined
11529,httpd,UNKNOWN,"/* if this is a move, then the source parent collection will be modified */",undetermined
11530,httpd,UNKNOWN,/* parent_only */,undetermined
11531,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11532,httpd,UNKNOWN,"/*
     * Remember the initial state of the destination, so the lock system
     * can be notified as to how it changed.
     */",undetermined
11533,httpd,UNKNOWN,"/* In a MOVE operation, the destination is replaced by the source.
     * In a COPY operation, if the destination exists, is under version
     * control, and is the same resource type as the source,
     * then it should not be replaced, but modified to be a copy of
     * the source.
     */",undetermined
11534,httpd,UNKNOWN,"/* If the destination must be created or replaced,
     * make sure the parent collection is writable
     */",undetermined
11535,httpd,UNKNOWN,/*parent_only*/,undetermined
11536,httpd,UNKNOWN,"/* could not make destination writable:
             * if move, restore state of source parent
             */",undetermined
11537,httpd,UNKNOWN,/* undo */,undetermined
11538,httpd,UNKNOWN,/*unlock*/,undetermined
11539,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11540,httpd,UNKNOWN,"/* If source and destination parents are the same, then
     * use the same resource object, so status updates to one are reflected
     * in the other, when doing auto-versioning. Otherwise,
     * we may try to checkin the parent twice.
     */",undetermined
11541,httpd,UNKNOWN,"/* If destination is being replaced, remove it first
     * (we know Ovewrite must be TRUE). Then try to copy/move the resource.
     */",undetermined
11542,httpd,UNKNOWN,/* perform any auto-versioning cleanup */,undetermined
11543,httpd,UNKNOWN,/* undo if error */,undetermined
11544,httpd,UNKNOWN,/*unlock*/,undetermined
11545,httpd,UNKNOWN,/* undo if error */,undetermined
11546,httpd,UNKNOWN,/*unlock*/,undetermined
11547,httpd,UNKNOWN,/* check for error from remove/copy/move operations */,undetermined
11548,httpd,UNKNOWN,/* check for errors from auto-versioning */,undetermined
11549,httpd,UNKNOWN,/* just log a warning */,undetermined
11550,httpd,UNKNOWN,/* just log a warning */,undetermined
11551,httpd,UNKNOWN,/* propagate any indirect locks at the target */,undetermined
11552,httpd,UNKNOWN,/* notify lock system that we have created/replaced a resource */,undetermined
11553,httpd,UNKNOWN,"/* The move/copy was successful, but the locking failed. */",undetermined
11554,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED or HTTP_NO_CONTENT) */,undetermined
11555,httpd,UNKNOWN,"/* dav_method_lock:  Handler to implement the DAV LOCK method
 *    Returns appropriate HTTP_* response.
 */",undetermined
11556,httpd,UNKNOWN,"/* If no locks provider, decline the request */",undetermined
11557,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11558,httpd,UNKNOWN,/* label_allowed */,undetermined
11559,httpd,UNKNOWN,/* use_checked_in */,undetermined
11560,httpd,UNKNOWN,/* Check if parent collection exists */,undetermined
11561,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11562,httpd,UNKNOWN,"/*
     * Open writable. Unless an error occurs, we'll be
     * writing into the database.
     */",undetermined
11563,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11564,httpd,UNKNOWN,/* ### add a higher-level description to err? */,undetermined
11565,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks.
     *
     * If this will create a locknull resource, then the LOCK will affect
     * the parent collection (much like a PUT/MKCOL). For that case, we must
     * validate the parent resource's conditions.
     */",undetermined
11566,httpd,UNKNOWN,"/*
         * Refresh request
         * ### Assumption:  We can renew multiple locks on the same resource
         * ### at once. First harvest all the positive lock-tokens given in
         * ### the If header. Then modify the lock entries for this resource
         * ### with the new Timeout val.
         */",undetermined
11567,httpd,UNKNOWN,/* ### add a higher-level description to err? */,undetermined
11568,httpd,UNKNOWN,/* New lock request */,undetermined
11569,httpd,UNKNOWN,/* apply lower bound (if any) from DAVMinTimeout directive */,undetermined
11570,httpd,UNKNOWN,/* ### add a higher-level description to err? */,undetermined
11571,httpd,UNKNOWN,/* the response has been sent. */,undetermined
11572,httpd,UNKNOWN,"/* dav_method_unlock:  Handler to implement the DAV UNLOCK method
 *    Returns appropriate HTTP_* response.
 */",undetermined
11573,httpd,UNKNOWN,"/* If no locks provider, decline the request */",undetermined
11574,httpd,UNKNOWN,/* ### should provide more specifics... */,undetermined
11575,httpd,UNKNOWN,/* ### should provide more specifics... */,undetermined
11576,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11577,httpd,UNKNOWN,/* label_allowed */,undetermined
11578,httpd,UNKNOWN,/* use_checked_in */,undetermined
11579,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks.
     *
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource is a locknull resource, then the UNLOCK will affect
     * the parent collection (much like a delete). For that case, we must
     * validate the parent resource's conditions.
     */",undetermined
11580,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
11581,httpd,UNKNOWN,"/* ### RFC 2518 s. 8.11: If this resource is locked by locktoken,
     *     _all_ resources locked by locktoken are released.  It does not say
     *     resource has to be the root of an infinte lock.  Thus, an UNLOCK
     *     on any part of an infinte lock will remove the lock on all resources.
     *
     *     For us, if r->filename represents an indirect lock (part of an infinity lock),
     *     we must actually perform an UNLOCK on the direct lock for this resource.
     */",undetermined
11582,httpd,UNKNOWN,"/* if no versioning provider, decline the request */",undetermined
11583,httpd,UNKNOWN,/* ask repository module to resolve the resource */,undetermined
11584,httpd,UNKNOWN,/* label_allowed */,undetermined
11585,httpd,UNKNOWN,/* use_checked_in */,undetermined
11586,httpd,UNKNOWN,/* remember the pre-creation resource state */,undetermined
11587,httpd,UNKNOWN,/* parse the request body (may be a version-control element) */,undetermined
11588,httpd,UNKNOWN,/* note: doc == NULL if no request body */,undetermined
11589,httpd,UNKNOWN,/* get the version URI */,undetermined
11590,httpd,UNKNOWN,/* get version URI */,undetermined
11591,httpd,UNKNOWN,/* Check request preconditions */,undetermined
11592,httpd,UNKNOWN,"/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */",undetermined
11593,httpd,UNKNOWN,"/* if not versioning existing resource, must specify version to select */",undetermined
11594,httpd,UNKNOWN,/* cannot add resource to existing version history */,undetermined
11595,httpd,UNKNOWN,"/* resource must be unversioned and versionable, or version selector */",undetermined
11596,httpd,UNKNOWN,"/* the DeltaV spec says if resource is a version selector,
         * then VERSION-CONTROL is a no-op
         */",undetermined
11597,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11598,httpd,UNKNOWN,/* no body */,undetermined
11599,httpd,UNKNOWN,/* Check If-Headers and existing locks */,undetermined
11600,httpd,UNKNOWN,/* Note: depth == 0. Implies no need for a multistatus response. */,undetermined
11601,httpd,UNKNOWN,"/* if in versioned collection, make sure parent is checked out */",undetermined
11602,httpd,UNKNOWN,/* parent_only */,undetermined
11603,httpd,UNKNOWN,/* attempt to version-control the resource */,undetermined
11604,httpd,UNKNOWN,/*undo*/,undetermined
11605,httpd,UNKNOWN,/*unlock*/,undetermined
11606,httpd,UNKNOWN,/* revert writability of parent directory */,undetermined
11607,httpd,UNKNOWN,/*undo*/,undetermined
11608,httpd,UNKNOWN,/*unlock*/,undetermined
11609,httpd,UNKNOWN,/* just log a warning */,undetermined
11610,httpd,UNKNOWN,"/* if the resource is lockable, let lock system know of new resource */",undetermined
11611,httpd,UNKNOWN,"/* The resource creation was successful, but the locking failed. */",undetermined
11612,httpd,UNKNOWN,/* notify lock system that we have created/replaced a resource */,undetermined
11613,httpd,UNKNOWN,"/* The dir creation was successful, but the locking failed. */",undetermined
11614,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11615,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED) */,undetermined
11616,httpd,UNKNOWN,/*replaced*/,undetermined
11617,httpd,UNKNOWN,/* handle the CHECKOUT method */,undetermined
11618,httpd,UNKNOWN,"/* If no versioning provider, decline the request */",undetermined
11619,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11620,httpd,UNKNOWN,/* ### we want generic 403/409 XML reporting here */,undetermined
11621,httpd,UNKNOWN,/* ### DAV:must-not-have-label-and-apply-to-version */,undetermined
11622,httpd,UNKNOWN,/* strip_white */,undetermined
11623,httpd,UNKNOWN,"/* no href's is a DTD violation:
                       <!ELEMENT activity-set (href+ | new)>
                    */",undetermined
11624,httpd,UNKNOWN,/* This supplies additional info for the default msg. */,undetermined
11625,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11626,httpd,UNKNOWN,/*label_allowed*/,undetermined
11627,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11628,httpd,UNKNOWN,"/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must not already be checked out.
     */",undetermined
11629,httpd,UNKNOWN,"/* ### do lock checks, once behavior is defined */",undetermined
11630,httpd,UNKNOWN,/* Do the checkout */,undetermined
11631,httpd,UNKNOWN,/*auto_checkout*/,undetermined
11632,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11633,httpd,UNKNOWN,"/* if no working resource created, return OK,
     * else return CREATED with working resource URL in Location header
     */",undetermined
11634,httpd,UNKNOWN,/* no body */,undetermined
11635,httpd,UNKNOWN,/* handle the UNCHECKOUT method */,undetermined
11636,httpd,UNKNOWN,"/* If no versioning provider, decline the request */",undetermined
11637,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11638,httpd,UNKNOWN,/* label_allowed */,undetermined
11639,httpd,UNKNOWN,/* use_checked_in */,undetermined
11640,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11641,httpd,UNKNOWN,"/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must be checked out.
     */",undetermined
11642,httpd,UNKNOWN,"/* ### do lock checks, once behavior is defined */",undetermined
11643,httpd,UNKNOWN,/* Do the uncheckout */,undetermined
11644,httpd,UNKNOWN,/* no body */,undetermined
11645,httpd,UNKNOWN,/* handle the CHECKIN method */,undetermined
11646,httpd,UNKNOWN,"/* If no versioning provider, decline the request */",undetermined
11647,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11648,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11649,httpd,UNKNOWN,/* label_allowed */,undetermined
11650,httpd,UNKNOWN,/* use_checked_in */,undetermined
11651,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11652,httpd,UNKNOWN,"/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must be checked out.
     */",undetermined
11653,httpd,UNKNOWN,"/* ### do lock checks, once behavior is defined */",undetermined
11654,httpd,UNKNOWN,/* Do the checkin */,undetermined
11655,httpd,UNKNOWN,"/* If no versioning provider, or UPDATE not supported,
     * decline the request */",undetermined
11656,httpd,UNKNOWN,"/* dav_get_depth() supplies additional information for the
         * default message. */",undetermined
11657,httpd,UNKNOWN,/* parse the request body */,undetermined
11658,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11659,httpd,UNKNOWN,"/* check for label-name or version element, but not both */",undetermined
11660,httpd,UNKNOWN,/* get the href element */,undetermined
11661,httpd,UNKNOWN,/* a depth greater than zero is only allowed for a label */,undetermined
11662,httpd,UNKNOWN,/* get the target value (a label or a version URI) */,undetermined
11663,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11664,httpd,UNKNOWN,/* label_allowed */,undetermined
11665,httpd,UNKNOWN,/* use_checked_in */,undetermined
11666,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11667,httpd,UNKNOWN,"/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */",undetermined
11668,httpd,UNKNOWN,"/* if target is a version, resolve the version resource */",undetermined
11669,httpd,UNKNOWN,/* ### dav_lookup_uri only allows absolute URIs; is that OK? */,undetermined
11670,httpd,UNKNOWN,/* must_be_absolute */,undetermined
11671,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11672,httpd,UNKNOWN,"/* ### this assumes that dav_lookup_uri() only generates a status
             * ### that Apache can provide a status line for!! */",undetermined
11673,httpd,UNKNOWN,/* ### how best to report this... */,undetermined
11674,httpd,UNKNOWN,/* resolve version resource */,undetermined
11675,httpd,UNKNOWN,/* label_allowed */,undetermined
11676,httpd,UNKNOWN,/* use_checked_in */,undetermined
11677,httpd,UNKNOWN,"/* NULL out target, since we're using a version resource */",undetermined
11678,httpd,UNKNOWN,/* do the UPDATE operation */,undetermined
11679,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11680,httpd,UNKNOWN,/* no body */,undetermined
11681,httpd,UNKNOWN,/* context maintained during LABEL treewalk */,undetermined
11682,httpd,UNKNOWN,/* input: */,undetermined
11683,httpd,UNKNOWN,/* label being manipulated */,undetermined
11684,httpd,UNKNOWN,/* label operation */,undetermined
11685,httpd,UNKNOWN,/* version provider hooks */,undetermined
11686,httpd,UNKNOWN,"/* Check the state of the resource: must be a version or
     * non-checkedout version selector
     */",undetermined
11687,httpd,UNKNOWN,"/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */",undetermined
11688,httpd,UNKNOWN,/* do the label operation */,undetermined
11689,httpd,UNKNOWN,/* ### need utility routine to add response with description? */,undetermined
11690,httpd,UNKNOWN,"/* If no versioning provider, or the provider doesn't support
     * labels, decline the request */",undetermined
11691,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11692,httpd,UNKNOWN,/* label_allowed */,undetermined
11693,httpd,UNKNOWN,/* use_checked_in */,undetermined
11694,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11695,httpd,UNKNOWN,"/* dav_get_depth() supplies additional information for the
         * default message. */",undetermined
11696,httpd,UNKNOWN,/* parse the request body */,undetermined
11697,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11698,httpd,UNKNOWN,"/* check for add, set, or remove element */",undetermined
11699,httpd,UNKNOWN,/* get the label string */,undetermined
11700,httpd,UNKNOWN,/* do the label operation walk */,undetermined
11701,httpd,UNKNOWN,/* some sort of error occurred which terminated the walk */,undetermined
11702,httpd,UNKNOWN,"/* One or more resources had errors. If depth was zero, convert
         * response to simple error, else make sure there is an
         * overall error to pass to dav_handle_err()
         */",undetermined
11703,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11704,httpd,UNKNOWN,/* no body */,undetermined
11705,httpd,UNKNOWN,"/* If no versioning provider, decline the request */",undetermined
11706,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11707,httpd,UNKNOWN,"/* Ask repository module to resolve the resource.
     * First determine whether a Target-Selector header is allowed
     * for this report.
     */",undetermined
11708,httpd,UNKNOWN,/* use_checked_in */,undetermined
11709,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11710,httpd,UNKNOWN,/* set up defaults for the report response */,undetermined
11711,httpd,UNKNOWN,/* run report hook */,undetermined
11712,httpd,UNKNOWN,/* No data has been sent to client yet;  throw normal error. */,undetermined
11713,httpd,UNKNOWN,"/* If an error occurred during the report delivery, there's
           basically nothing we can do but abort the connection and
           log an error.  This is one of the limitations of HTTP; it
           needs to ""know"" the entire status of the response before
           generating it, which is just impossible in these streamy
           response situations. */",undetermined
11714,httpd,UNKNOWN,"/* if no versioning provider, or the provider does not support workspaces,
     * decline the request
     */",undetermined
11715,httpd,UNKNOWN,/* ask repository module to resolve the resource */,undetermined
11716,httpd,UNKNOWN,/* label_allowed */,undetermined
11717,httpd,UNKNOWN,/* use_checked_in */,undetermined
11718,httpd,UNKNOWN,/* parse the request body (must be a mkworkspace element) */,undetermined
11719,httpd,UNKNOWN,/* Check request preconditions */,undetermined
11720,httpd,UNKNOWN,"/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */",undetermined
11721,httpd,UNKNOWN,/* resource must not already exist */,undetermined
11722,httpd,UNKNOWN,/* ### what about locking? */,undetermined
11723,httpd,UNKNOWN,/* attempt to create the workspace */,undetermined
11724,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11725,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED) */,undetermined
11726,httpd,UNKNOWN,/*replaced*/,undetermined
11727,httpd,UNKNOWN,"/* if no versioning provider, or the provider does not support activities,
     * decline the request
     */",undetermined
11728,httpd,UNKNOWN,/* ask repository module to resolve the resource */,undetermined
11729,httpd,UNKNOWN,/* label_allowed */,undetermined
11730,httpd,UNKNOWN,/* use_checked_in */,undetermined
11731,httpd,UNKNOWN,/* MKACTIVITY does not have a defined request body. */,undetermined
11732,httpd,UNKNOWN,/* Check request preconditions */,undetermined
11733,httpd,UNKNOWN,"/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */",undetermined
11734,httpd,UNKNOWN,/* resource must not already exist */,undetermined
11735,httpd,UNKNOWN,"/* the provider must say whether the resource can be created as
       an activity, i.e. whether the location is ok.  */",undetermined
11736,httpd,UNKNOWN,/* ### what about locking? */,undetermined
11737,httpd,UNKNOWN,/* attempt to create the activity */,undetermined
11738,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11739,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED) */,undetermined
11740,httpd,UNKNOWN,/*replaced*/,undetermined
11741,httpd,UNKNOWN,/* ### */,undetermined
11742,httpd,UNKNOWN,"/* If no versioning provider, decline the request */",undetermined
11743,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11744,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11745,httpd,UNKNOWN,/* This supplies additional information for the default msg. */,undetermined
11746,httpd,UNKNOWN,/* strip_white */,undetermined
11747,httpd,UNKNOWN,"/* get a subrequest for the source, so that we can get a dav_resource
       for that source. */",undetermined
11748,httpd,UNKNOWN,/* must_be_absolute */,undetermined
11749,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11750,httpd,UNKNOWN,"/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */",undetermined
11751,httpd,UNKNOWN,/* ### how best to report this... */,undetermined
11752,httpd,UNKNOWN,/* label_allowed */,undetermined
11753,httpd,UNKNOWN,/* use_checked_in */,undetermined
11754,httpd,UNKNOWN,"/* ### check RFC. I believe the DAV:merge element may contain any
       ### element also allowed within DAV:checkout. need to extract them
       ### here, and pass them along.
       ### if so, then refactor the CHECKOUT method handling so we can reuse
       ### the code. maybe create a structure to hold CHECKOUT parameters
       ### which can be passed to the checkout() and merge() hooks. */",undetermined
11755,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11756,httpd,UNKNOWN,/* label_allowed */,undetermined
11757,httpd,UNKNOWN,/* use_checked_in */,undetermined
11758,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11759,httpd,UNKNOWN,/* ### check the source and target resources flags/types */,undetermined
11760,httpd,UNKNOWN,"/* ### do lock checks, once behavior is defined */",undetermined
11761,httpd,UNKNOWN,"/* set the Cache-Control header, per the spec */",undetermined
11762,httpd,UNKNOWN,/* ### correct? */,undetermined
11763,httpd,UNKNOWN,"/* Initialize these values for a standard MERGE response. If the MERGE
       is going to do something different (i.e. an error), then it must
       return a dav_error, and we'll reset these values properly. */",undetermined
11764,httpd,UNKNOWN,"/* ### should we do any preliminary response generation? probably not,
       ### because we may have an error, thus demanding something else in
       ### the response body. */",undetermined
11765,httpd,UNKNOWN,"/* Do the merge, including any response generation. */",undetermined
11766,httpd,UNKNOWN,/* ### is err->status the right error here? */,undetermined
11767,httpd,UNKNOWN,/* the response was fully generated by the merge() hook. */,undetermined
11768,httpd,UNKNOWN,/* ### urk. does this prevent logging? need to check... */,undetermined
11769,httpd,UNKNOWN,"/* If no bindings provider, decline the request */",undetermined
11770,httpd,UNKNOWN,/* Ask repository module to resolve the resource */,undetermined
11771,httpd,UNKNOWN,/* label_allowed */,undetermined
11772,httpd,UNKNOWN,/* use_checked_in */,undetermined
11773,httpd,UNKNOWN,/* Apache will supply a default error for this. */,undetermined
11774,httpd,UNKNOWN,/* get the destination URI */,undetermined
11775,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11776,httpd,UNKNOWN,/* must_be_absolute */,undetermined
11777,httpd,UNKNOWN,/* This supplies additional information for the default message. */,undetermined
11778,httpd,UNKNOWN,"/* ### Bindings protocol draft 02 says to return 507
             * ### (Cross Server Binding Forbidden); Apache already defines 507
             * ### as HTTP_INSUFFICIENT_STORAGE. So, for now, we'll return
             * ### HTTP_FORBIDDEN
             */",undetermined
11779,httpd,UNKNOWN,"/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */",undetermined
11780,httpd,UNKNOWN,/* ### how best to report this... */,undetermined
11781,httpd,UNKNOWN,/* resolve binding resource */,undetermined
11782,httpd,UNKNOWN,/* label_allowed */,undetermined
11783,httpd,UNKNOWN,/* use_checked_in */,undetermined
11784,httpd,UNKNOWN,/* are the two resources handled by the same repository? */,undetermined
11785,httpd,UNKNOWN,"/* ### this message exposes some backend config, but screw it... */",undetermined
11786,httpd,UNKNOWN,/* get and parse the overwrite header value */,undetermined
11787,httpd,UNKNOWN,"/* dav_get_overwrite() supplies additional information for the
         * default message. */",undetermined
11788,httpd,UNKNOWN,/* quick failure test: if dest exists and overwrite is false. */,undetermined
11789,httpd,UNKNOWN,/* are the source and destination the same? */,undetermined
11790,httpd,UNKNOWN,"/*
     * Check If-Headers and existing locks for destination. Note that we
     * use depth==infinity since the target (hierarchy) will be deleted
     * before the move/copy is completed.
     *
     * Note that we are overwriting the target, which implies a DELETE, so
     * we are subject to the error/response rules as a DELETE. Namely, we
     * will return a 424 error if any of the validations fail.
     * (see dav_method_delete() for more information)
     */",undetermined
11791,httpd,UNKNOWN,/* guard against creating circular bindings */,undetermined
11792,httpd,UNKNOWN,"/* The destination must exist (since it contains the source), and
         * a condition above implies Overwrite==T. Obviously, we cannot
         * delete the Destination before the BIND, as that would
         * delete the Source.
         */",undetermined
11793,httpd,UNKNOWN,/* prepare the destination collection for modification */,undetermined
11794,httpd,UNKNOWN,/* parent_only */,undetermined
11795,httpd,UNKNOWN,/* could not make destination writable */,undetermined
11796,httpd,UNKNOWN,"/* If target exists, remove it first (we know Ovewrite must be TRUE).
     * Then try to bind to the resource.
     */",undetermined
11797,httpd,UNKNOWN,/* restore parent collection states */,undetermined
11798,httpd,UNKNOWN,/* undo if error */,undetermined
11799,httpd,UNKNOWN,/* unlock */,undetermined
11800,httpd,UNKNOWN,/* check for error from remove/bind operations */,undetermined
11801,httpd,UNKNOWN,/* check for errors from reverting writability */,undetermined
11802,httpd,UNKNOWN,/* just log a warning */,undetermined
11803,httpd,UNKNOWN,/* return an appropriate response (HTTP_CREATED) */,undetermined
11804,httpd,UNKNOWN,/* ### spec doesn't say what happens when destination was replaced */,undetermined
11805,httpd,UNKNOWN,"/*
 * Response handler for DAV resources
 */",undetermined
11806,httpd,UNKNOWN,"/* Reject requests with an unescaped hash character, as these may
     * be more destructive than the user intended. */",undetermined
11807,httpd,UNKNOWN,/* ### do we need to do anything with r->proxyreq ?? */,undetermined
11808,httpd,UNKNOWN,"/*
     * ### anything else to do here? could another module and/or
     * ### config option ""take over"" the handler here? i.e. how do
     * ### we lock down this hierarchy so that we are the ultimate
     * ### arbiter? (or do we simply depend on the administrator
     * ### to avoid conflicting configurations?)
     */",undetermined
11809,httpd,UNKNOWN,"/*
     * Set up the methods mask, since that's one of the reasons this handler
     * gets called, and lower-level things may need the info.
     *
     * First, set the mask to the methods we handle directly.  Since by
     * definition we own our managed space, we unconditionally set
     * the r->allowed field rather than ORing our values with anything
     * any other module may have put in there.
     *
     * These are the HTTP-defined methods that we handle directly.
     */",undetermined
11810,httpd,UNKNOWN,"/*
     * These are the DAV methods we handle.
     */",undetermined
11811,httpd,UNKNOWN,"/*
     * These are methods that we don't handle directly, but let the
     * server's default handler do for us as our agent.
     */",undetermined
11812,httpd,UNKNOWN,"/* ### hrm. if we return HTTP_METHOD_NOT_ALLOWED, then an Allow header
     * ### is sent; it will need the other allowed states; since the default
     * ### handler is not called on error, then it doesn't add the other
     * ### allowed states, so we must
     */",undetermined
11813,httpd,UNKNOWN,"/* ### we might need to refine this for just where we return the error.
     * ### also, there is the issue with other methods (see ISSUES)
     */",undetermined
11814,httpd,UNKNOWN,/* dispatch the appropriate method handler */,undetermined
11815,httpd,UNKNOWN,/* BIND method */,undetermined
11816,httpd,UNKNOWN,/* DASL method */,undetermined
11817,httpd,UNKNOWN,"/* ### add'l methods for Advanced Collections, ACLs */",undetermined
11818,httpd,UNKNOWN,/* quickly ignore any HTTP/0.9 requests which aren't subreqs. */,undetermined
11819,httpd,UNKNOWN,"/* if DAV is not enabled, then we've got nothing to do */",undetermined
11820,httpd,UNKNOWN,"/* We are going to handle almost every request. In certain cases,
       the provider maps to the filesystem (thus, handle_get is
       FALSE), and core Apache will handle it. a For that case, we
       just return right away.  */",undetermined
11821,httpd,UNKNOWN,"/*
         * ### need some work to pull Content-Type and Content-Language
         * ### from the property database.
         */",undetermined
11822,httpd,UNKNOWN,"/*
         * If the repository hasn't indicated that it will handle the
         * GET method, then just punt.
         *
         * ### this isn't quite right... taking over the response can break
         * ### things like mod_negotiation. need to look into this some more.
         */",undetermined
11823,httpd,UNKNOWN,"/* ### this is wrong.  We should only be setting the r->handler for the
     * requests that mod_dav knows about.  If we set the handler for M_POST
     * requests, then CGI scripts that use POST will return the source for the
     * script.  However, mod_dav DOES handle POST, so something else needs
     * to be fixed.
     */",undetermined
11824,httpd,UNKNOWN,/* We are going to be handling the response for this resource. */,undetermined
11825,httpd,UNKNOWN,"/*---------------------------------------------------------------------------
 *
 * Configuration info for the module
 */",undetermined
11826,httpd,UNKNOWN,/* per directory/location */,undetermined
11827,httpd,UNKNOWN,"/* per directory/location, or per server */",undetermined
11828,httpd,UNKNOWN,"/* per directory/location, or per server */",undetermined
11829,httpd,UNKNOWN,/* dir config creater */,undetermined
11830,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
11831,httpd,UNKNOWN,/* server config */,undetermined
11832,httpd,UNKNOWN,/* merge server config */,undetermined
11833,httpd,UNKNOWN,/* command table */,undetermined
11834,httpd,UNKNOWN,/* register hooks */,undetermined
11835,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
11836,httpd,UNKNOWN,"/**
 * @file  mod_dav.h
 * @brief DAV extension module for Apache 2.0.*
 *
 * @defgroup MOD_DAV mod_dav
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
11837,httpd,UNKNOWN,/* for INT_MAX */,undetermined
11838,httpd,UNKNOWN,/* for time_t */,undetermined
11839,httpd,UNKNOWN,/* used for reading input blocks */,undetermined
11840,httpd,UNKNOWN,/* for the Depth: header */,undetermined
11841,httpd,UNKNOWN,"/* Create a set of DAV_DECLARE(type), DAV_DECLARE_NONSTD(type) and
 * DAV_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
11842,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** ERROR MANAGEMENT
*/",undetermined
11843,httpd,UNKNOWN,"/*
** dav_error structure.
**
** In most cases, mod_dav uses a pointer to a dav_error structure. If the
** pointer is NULL, then no error has occurred.
**
** In certain cases, a dav_error structure is directly used. In these cases,
** a status value of 0 means that an error has not occurred.
**
** Note: this implies that status != 0 whenever an error occurs.
**
** The desc field is optional (it may be NULL). When NULL, it typically
** implies that Apache has a proper description for the specified status.
*/",undetermined
11844,httpd,UNKNOWN,/* suggested HTTP status (0 for no error) */,undetermined
11845,httpd,UNKNOWN,/* DAV-specific error ID */,undetermined
11846,httpd,UNKNOWN,/* DAV:responsedescription and error log */,undetermined
11847,httpd,UNKNOWN,"/* APR error if any, or 0/APR_SUCCESS */",undetermined
11848,httpd,UNKNOWN,/* [optional] namespace of error */,undetermined
11849,httpd,UNKNOWN,/* name of error-tag */,undetermined
11850,httpd,UNKNOWN,/* previous error (in stack) */,undetermined
11851,httpd,UNKNOWN,"/*
** Create a new error structure. save_errno will be filled with the current
** errno value.
*/",undetermined
11852,httpd,UNKNOWN,"/*
** Create a new error structure with tagname and (optional) namespace;
** namespace may be NULL, which means ""DAV:"".
*/",undetermined
11853,httpd,UNKNOWN,"/*
** Push a new error description onto the stack of errors.
**
** This function is used to provide an additional description to an existing
** error.
**
** <status> should contain the caller's view of what the current status is,
** given the underlying error. If it doesn't have a better idea, then the
** caller should pass prev->status.
**
** <error_id> can specify a new error_id since the topmost description has
** changed.
*/",undetermined
11854,httpd,UNKNOWN,"/*
** Join two errors together.
**
** This function is used to add a new error stack onto an existing error so
** that subsequent errors can be reported after the first error.  It returns
** the correct error stack to use so that the caller can blindly call it
** without checking that both dest and src are not NULL.
** 
** <dest> is the error stack that the error will be added to.
**
** <src> is the error stack that will be appended.
*/",undetermined
11855,httpd,UNKNOWN,/* error ID values... */,undetermined
11856,httpd,UNKNOWN,/* IF: header errors */,undetermined
11857,httpd,UNKNOWN,/* general parsing error */,undetermined
11858,httpd,UNKNOWN,"/* multiple ""Not"" found */",undetermined
11859,httpd,UNKNOWN,/* unknown char in header */,undetermined
11860,httpd,UNKNOWN,/* no locktokens given */,undetermined
11861,httpd,UNKNOWN,/* in parsing tagged-list */,undetermined
11862,httpd,UNKNOWN,/* in no-tagged-list */,undetermined
11863,httpd,UNKNOWN,/* Prop DB errors */,undetermined
11864,httpd,UNKNOWN,/* major version was wrong */,undetermined
11865,httpd,UNKNOWN,/* prop is read-only */,undetermined
11866,httpd,UNKNOWN,/* writable db not avail */,undetermined
11867,httpd,UNKNOWN,/* prop not found */,undetermined
11868,httpd,UNKNOWN,/* could not open lockdb */,undetermined
11869,httpd,UNKNOWN,/* problem opening propdb */,undetermined
11870,httpd,UNKNOWN,/* problem exec'ing patch */,undetermined
11871,httpd,UNKNOWN,/* Predefined DB errors */,undetermined
11872,httpd,UNKNOWN,/* ### any to define?? */,undetermined
11873,httpd,UNKNOWN,/* Predefined locking system errors */,undetermined
11874,httpd,UNKNOWN,/* could not open lockdb */,undetermined
11875,httpd,UNKNOWN,/* no database defined */,undetermined
11876,httpd,UNKNOWN,/* DB is corrupt */,undetermined
11877,httpd,UNKNOWN,/* unknown State-token */,undetermined
11878,httpd,UNKNOWN,/* bad opaquelocktoken */,undetermined
11879,httpd,UNKNOWN,/* err saving locks */,undetermined
11880,httpd,UNKNOWN,"/*
** Some comments on Error ID values:
**
** The numbers do not necessarily need to be unique. Uniqueness simply means
** that two errors that have not been predefined above can be distinguished
** from each other. At the moment, mod_dav does not use this distinguishing
** feature, but it could be used in the future to collapse <response> elements
** into groups based on the error ID (and associated responsedescription).
**
** If a compute_desc is provided, then the error ID should be unique within
** the context of the compute_desc function (so the function can figure out
** what to filled into the desc).
**
** Basically, subsystems can ignore defining new error ID values if they want
** to. The subsystems *do* need to return the predefined errors when
** appropriate, so that mod_dav can figure out what to do. Subsystems can
** simply leave the error ID field unfilled (zero) if there isn't an error
** that must be placed there.
*/",undetermined
11881,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** HOOK STRUCTURES
**
** These are here for forward-declaration purposes. For more info, see
** the section title ""HOOK HANDLING"" for more information, plus each
** structure definition.
*/",undetermined
11882,httpd,UNKNOWN,/* forward-declare this structure */,undetermined
11883,httpd,UNKNOWN,/* ### deprecated name */,undetermined
11884,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** RESOURCE HANDLING
*/",undetermined
11885,httpd,UNKNOWN,"/*
** Resource Types:
** The base protocol defines only file and collection resources.
** The versioning protocol defines several additional resource types
** to represent artifacts of a version control system.
**
** This enumeration identifies the type of URL used to identify the
** resource. Since the same resource may have more than one type of
** URL which can identify it, dav_resource_type cannot be used
** alone to determine the type of the resource; attributes of the
** dav_resource object must also be consulted.
*/",undetermined
11886,httpd,UNKNOWN,"/* file or collection; could be
                                         * unversioned, or version selector,
                                         * or baseline selector */",undetermined
11887,httpd,UNKNOWN,/* version or baseline URL */,undetermined
11888,httpd,UNKNOWN,/* version or baseline history URL */,undetermined
11889,httpd,UNKNOWN,/* working resource URL */,undetermined
11890,httpd,UNKNOWN,/* workspace URL */,undetermined
11891,httpd,UNKNOWN,/* activity URL */,undetermined
11892,httpd,UNKNOWN,/* repository-private type */,undetermined
11893,httpd,UNKNOWN,"/*
** Opaque, repository-specific information for a resource.
*/",undetermined
11894,httpd,UNKNOWN,"/*
** Resource descriptor, generated by a repository provider.
**
** Note: the lock-null state is not explicitly represented here,
** since it may be expensive to compute. Use dav_get_resource_state()
** to determine whether a non-existent resource is a lock-null resource.
**
** A quick explanation of how the flags can apply to different resources:
**
** unversioned file or collection:
**     type       = DAV_RESOURCE_TYPE_REGULAR
**     exists     = ? (1 if exists)
**     collection = ? (1 if collection)
**     versioned  = 0
**     baselined  = 0
**     working    = 0
**
** version-controlled resource or configuration:
**     type       = DAV_RESOURCE_TYPE_REGULAR
**     exists     = 1
**     collection = ? (1 if collection)
**     versioned  = 1
**     baselined  = ? (1 if configuration)
**     working    = ? (1 if checked out)
**
** version/baseline history:
**     type       = DAV_RESOURCE_TYPE_HISTORY
**     exists     = 1
**     collection = 0
**     versioned  = 0
**     baselined  = 0
**     working    = 0
**
** version/baseline:
**     type       = DAV_RESOURCE_TYPE_VERSION
**     exists     = 1
**     collection = ? (1 if collection)
**     versioned  = 1
**     baselined  = ? (1 if baseline)
**     working    = 0
**
** working resource:
**     type       = DAV_RESOURCE_TYPE_WORKING
**     exists     = 1
**     collection = ? (1 if collection)
**     versioned  = 1
**     baselined  = 0
**     working    = 1
**
** workspace:
**     type       = DAV_RESOURCE_TYPE_WORKSPACE
**     exists     = ? (1 if exists)
**     collection = 1
**     versioned  = ? (1 if version-controlled)
**     baselined  = ? (1 if baseline-controlled)
**     working    = ? (1 if checked out)
**
** activity:
**     type       = DAV_RESOURCE_TYPE_ACTIVITY
**     exists     = ? (1 if exists)
**     collection = 0
**     versioned  = 0
**     baselined  = 0
**     working    = 0
*/",undetermined
11895,httpd,UNKNOWN,/* 0 => null resource */,undetermined
11896,httpd,UNKNOWN,"/* 0 => file; can be 1 for
                         * REGULAR, VERSION, and WORKING resources,
                         * and is always 1 for WORKSPACE */",undetermined
11897,httpd,UNKNOWN,"/* 0 => unversioned; can be 1 for
                         * REGULAR and WORKSPACE resources,
                         * and is always 1 for VERSION and WORKING */",undetermined
11898,httpd,UNKNOWN,"/* 0 => not baselined; can be 1 for
                         * REGULAR, VERSION, and WORKSPACE resources;
                         * versioned == 1 when baselined == 1 */",undetermined
11899,httpd,UNKNOWN,"/* 0 => not checked out; can be 1 for
                         * REGULAR and WORKSPACE resources,
                         * and is always 1 for WORKING */",undetermined
11900,httpd,UNKNOWN,/* the URI for this resource */,undetermined
11901,httpd,UNKNOWN,/* the provider's private info */,undetermined
11902,httpd,UNKNOWN,/* hooks used for this resource */,undetermined
11903,httpd,UNKNOWN,"/* When allocating items related specifically to this resource, the
       following pool should be used. Its lifetime will be at least as
       long as the dav_resource structure. */",undetermined
11904,httpd,UNKNOWN,"/*
** Lock token type. Lock providers define the details of a lock token.
** However, all providers are expected to at least be able to parse
** the ""opaquelocktoken"" scheme, which is represented by a uuid_t.
*/",undetermined
11905,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** BUFFER HANDLING
**
** These buffers are used as a lightweight buffer reuse mechanism. Apache
** provides sub-pool creation and destruction to much the same effect, but
** the sub-pools are a bit more general and heavyweight than these buffers.
*/",undetermined
11906,httpd,UNKNOWN,/* buffer for reuse; can grow to accomodate needed size */,undetermined
11907,httpd,UNKNOWN,/* how much has been allocated */,undetermined
11908,httpd,UNKNOWN,/* how much is currently being used */,undetermined
11909,httpd,UNKNOWN,/* buffer contents */,undetermined
11910,httpd,UNKNOWN,/* minimum size for buffer */,undetermined
11911,httpd,UNKNOWN,/* amount of pad when growing */,undetermined
11912,httpd,UNKNOWN,/* set the cur_len to the given size and ensure space is available */,undetermined
11913,httpd,UNKNOWN,/* initialize a buffer and copy the specified (null-term'd) string into it */,undetermined
11914,httpd,UNKNOWN,/* check that the buffer can accomodate <extra_needed> more bytes */,undetermined
11915,httpd,UNKNOWN,"/* append a string to the end of the buffer, adjust length */",undetermined
11916,httpd,UNKNOWN,"/* place a string on the end of the buffer, do NOT adjust length */",undetermined
11917,httpd,UNKNOWN,/* place some memory on the end of a buffer; do NOT adjust length */,undetermined
11918,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** HANDY UTILITIES
*/",undetermined
11919,httpd,UNKNOWN,/* contains results from one of the getprop functions */,undetermined
11920,httpd,UNKNOWN,/* <propstat> element text */,undetermined
11921,httpd,UNKNOWN,/* namespace decls for <response> elem */,undetermined
11922,httpd,UNKNOWN,/* holds the contents of a <response> element */,undetermined
11923,httpd,UNKNOWN,/* always */,undetermined
11924,httpd,UNKNOWN,/* optional description at <response> level */,undetermined
11925,httpd,UNKNOWN,/* use status if propresult.propstats is NULL. */,undetermined
11926,httpd,UNKNOWN,/* new subrequest */,undetermined
11927,httpd,UNKNOWN,/* potential error response */,undetermined
11928,httpd,UNKNOWN,/* defines type of property info a provider is to return */,undetermined
11929,httpd,UNKNOWN,"/* property is defined by this provider,
                                   but nothing was inserted because the
                                   (live) property is not defined for this
                                   resource (it may be present as a dead
                                   property). */",undetermined
11930,httpd,UNKNOWN,"/* property is recognized by this provider,
                                   but it is not supported, and cannot be
                                   treated as a dead property */",undetermined
11931,httpd,UNKNOWN,"/* a property name (empty elem) was
                                   inserted into the text block */",undetermined
11932,httpd,UNKNOWN,"/* a property name/value pair was inserted
                                   into the text block */",undetermined
11933,httpd,UNKNOWN,"/* a supported live property was added to
                                   the text block as a
                                   <DAV:supported-live-property> element */",undetermined
11934,httpd,UNKNOWN,/* ### this stuff is private to dav/fs/repos.c; move it... */,undetermined
11935,httpd,UNKNOWN,/* format a time string (buf must be at least DAV_TIMEBUF_SIZE chars) */,undetermined
11936,httpd,UNKNOWN,/* gather up all the CDATA into a single string */,undetermined
11937,httpd,UNKNOWN,"/*
** XML namespace handling
**
** This structure tracks namespace declarations (xmlns:prefix=""URI"").
** It maintains a one-to-many relationship of URIs-to-prefixes. In other
** words, one URI may be defined by many prefixes, but any specific
** prefix will specify only one URI.
**
** Prefixes using the ""g###"" pattern can be generated automatically if
** the caller does not have specific prefix requirements.
*/",undetermined
11938,httpd,UNKNOWN,/* map URIs to an available prefix */,undetermined
11939,httpd,UNKNOWN,/* map all prefixes to their URIs */,undetermined
11940,httpd,UNKNOWN,"/* counter for ""g###"" prefixes */",undetermined
11941,httpd,UNKNOWN,/* create an empty dav_xmlns_info structure */,undetermined
11942,httpd,UNKNOWN,"/* add a specific prefix/URI pair. the prefix/uri should have a lifetime
   at least that of xmlns->pool */",undetermined
11943,httpd,UNKNOWN,"/* add a URI (if not present); any prefix is acceptable and is returned.
   the uri should have a lifetime at least that xmlns->pool */",undetermined
11944,httpd,UNKNOWN,/* return the URI for a specified prefix (or NULL if the prefix is unknown) */,undetermined
11945,httpd,UNKNOWN,"/* return an available prefix for a specified URI (or NULL if the URI
   is unknown) */",undetermined
11946,httpd,UNKNOWN,/* generate xmlns declarations (appending into the given text) */,undetermined
11947,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** DAV PLUGINS
*/",undetermined
11948,httpd,UNKNOWN,/* ### docco ... */,undetermined
11949,httpd,UNKNOWN,"/*
** dav_provider
**
** This structure wraps up all of the hooks that a mod_dav provider can
** supply. The provider MUST supply <repos> and <propdb>. The rest are
** optional and should contain NULL if that feature is not supplied.
**
** Note that a provider cannot pick and choose portions from various
** underlying implementations (which was theoretically possible in
** mod_dav 1.0). There are too many dependencies between a dav_resource
** (defined by <repos>) and the other functionality.
**
** Live properties are not part of the dav_provider structure because they
** are handled through the APR_HOOK interface (to allow for multiple liveprop
** providers). The core always provides some properties, and then a given
** provider will add more properties.
**
** Some providers may need to associate a context with the dav_provider
** structure -- the ctx field is available for storing this context. Just
** leave it NULL if it isn't required.
*/",undetermined
11950,httpd,UNKNOWN,"/*
** gather_propsets: gather all live property propset-URIs
**
** The hook implementor should push one or more URIs into the specified
** array. These URIs are returned in the DAV: header to let clients know
** what sets of live properties are supported by the installation. mod_dav
** will place open/close angle brackets around each value (much like
** a Coded-URL); quotes and brackets should not be in the value.
**
** Example:    http://apache.org/dav/props/
**
** (of course, use your own domain to ensure a unique value)
*/",undetermined
11951,httpd,UNKNOWN,"/*
** find_liveprop: find a live property, returning a non-zero, unique,
**                opaque identifier.
**
** If the hook implementor determines the specified URI/name refers to
** one of its properties, then it should fill in HOOKS and return a
** non-zero value. The returned value is the ""property ID"" and will
** be passed to the various liveprop hook functions.
**
** Return 0 if the property is not defined by the hook implementor.
*/",undetermined
11952,httpd,UNKNOWN,"/*
** insert_all_liveprops: insert all (known) live property names/values.
**
** The hook implementor should append XML text to PHDR, containing liveprop
** names. If INSVALUE is true, then the property values should also be
** inserted into the output XML stream.
**
** The liveprop provider should insert *all* known and *defined* live
** properties on the specified resource. If a particular liveprop is
** not defined for this resource, then it should not be inserted.
*/",undetermined
11953,httpd,UNKNOWN,/* ### deprecated */,undetermined
11954,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** IF HEADER PROCESSING
**
** Here is the definition of the If: header from RFC 2518, S9.4:
**
**    If = ""If"" "":"" (1*No-tag-list | 1*Tagged-list)
**    No-tag-list = List
**    Tagged-list = Resource 1*List
**    Resource = Coded-URL
**    List = ""("" 1*([""Not""](State-token | ""["" entity-tag ""]"")) "")""
**    State-token = Coded-URL
**    Coded-URL = ""<"" absoluteURI "">""        ; absoluteURI from RFC 2616
**
** List corresponds to dav_if_state_list. No-tag-list corresponds to
** dav_if_header with uri==NULL. Tagged-list corresponds to a sequence of
** dav_if_header structures with (duplicate) uri==Resource -- one
** dav_if_header per state_list. A second Tagged-list will start a new
** sequence of dav_if_header structures with the new URI.
**
** A summary of the semantics, mapped into our structures:
**    - Chained dav_if_headers: OR
**    - Chained dav_if_state_lists: AND
**    - NULL uri matches all resources
*/",undetermined
11955,httpd,UNKNOWN,"/* the ""unknown"" state type; always matches false. */",undetermined
11956,httpd,UNKNOWN,"/* ""Not"" was applied */",undetermined
11957,httpd,UNKNOWN,/* used internally by the lock/etag validation */,undetermined
11958,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** LIVE PROPERTY HANDLING
*/",undetermined
11959,httpd,UNKNOWN,/* opaque type for PROPPATCH rollback information */,undetermined
11960,httpd,UNKNOWN,"/*
    ** Insert property information into a text block. The property to
    ** insert is identified by the propid value. The information to insert
    ** is identified by the ""what"" argument, as follows:
    **   DAV_PROP_INSERT_NAME
    **      property name, as an empty XML element
    **   DAV_PROP_INSERT_VALUE
    **      property name/value, as an XML element
    **   DAV_PROP_INSERT_SUPPORTED
    **      if the property is defined on the resource, then
    **      a DAV:supported-live-property element, as defined
    **      by the DeltaV extensions to RFC2518.
    **
    ** Providers should return DAV_PROP_INSERT_NOTDEF if the property is
    ** known and not defined for this resource, so should be handled as a
    ** dead property. If a provider recognizes, but does not support, a
    ** property, and does not want it handled as a dead property, it should
    ** return DAV_PROP_INSERT_NOTSUPP.
    **
    ** Returns one of DAV_PROP_INSERT_* based on what happened.
    **
    ** ### we may need more context... ie. the lock database
    */",undetermined
11961,httpd,UNKNOWN,"/*
    ** Determine whether a given property is writable.
    **
    ** ### we may want a different semantic. i.e. maybe it should be
    ** ### ""can we write <value> into this property?""
    **
    ** Returns 1 if the live property can be written, 0 if read-only.
    */",undetermined
11962,httpd,UNKNOWN,"/*
    ** This member defines the set of namespace URIs that the provider
    ** uses for its properties. When insert_all is called, it will be
    ** passed a list of integers that map from indices into this list
    ** to namespace IDs for output generation.
    **
    ** The last entry in this list should be a NULL value (sentinel).
    */",undetermined
11963,httpd,UNKNOWN,"/*
    ** ### this is not the final design. we want an open-ended way for
    ** ### liveprop providers to attach *new* properties. To this end,
    ** ### we'll have a ""give me a list of the props you define"", a way
    ** ### to check for a prop's existence, a way to validate a set/remove
    ** ### of a prop, and a way to execute/commit/rollback that change.
    */",undetermined
11964,httpd,UNKNOWN,"/*
    ** Validate that the live property can be assigned a value, and that
    ** the provided value is valid.
    **
    ** elem will point to the XML element that names the property. For
    ** example:
    **     <lp1:executable>T</lp1:executable>
    **
    ** The provider can access the cdata fields and the child elements
    ** to extract the relevant pieces.
    **
    ** operation is one of DAV_PROP_OP_SET or _DELETE.
    **
    ** The provider may return a value in *context which will be passed
    ** to each of the exec/commit/rollback functions. For example, this
    ** may contain an internal value which has been processed from the
    ** input element.
    **
    ** The provider must set defer_to_dead to true (non-zero) or false.
    ** If true, then the set/remove is deferred to the dead property
    ** database. Note: it will be set to zero on entry.
    */",undetermined
11965,httpd,UNKNOWN,/* ### doc... */,undetermined
11966,httpd,UNKNOWN,/* ### doc... */,undetermined
11967,httpd,UNKNOWN,/* ### doc... */,undetermined
11968,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
11969,httpd,UNKNOWN,"/*
** dav_liveprop_spec: specify a live property
**
** This structure is used as a standard way to determine if a particular
** property is a live property. Its use is not part of the mandated liveprop
** interface, but can be used by liveprop providers in conjuction with the
** utility routines below.
**
** spec->name == NULL is the defined end-sentinel for a list of specs.
*/",undetermined
11970,httpd,UNKNOWN,/* provider-local namespace index */,undetermined
11971,httpd,UNKNOWN,/* name of the property */,undetermined
11972,httpd,UNKNOWN,/* provider-local property ID */,undetermined
11973,httpd,UNKNOWN,/* is the property writable? */,undetermined
11974,httpd,UNKNOWN,"/*
** dav_liveprop_group: specify a group of liveprops
**
** This structure specifies a group of live properties, their namespaces,
** and how to handle them.
*/",undetermined
11975,httpd,UNKNOWN,/* ### docco */,undetermined
11976,httpd,UNKNOWN,/* ### docco */,undetermined
11977,httpd,UNKNOWN,/* ### docco */,undetermined
11978,httpd,UNKNOWN,/* ### docco */,undetermined
11979,httpd,UNKNOWN,/* ### docco */,undetermined
11980,httpd,UNKNOWN,/* ### docco */,undetermined
11981,httpd,UNKNOWN,"/*
** The following three functions are part of mod_dav's internal handling
** for the core WebDAV properties. They are not part of mod_dav's API.
*/",undetermined
11982,httpd,UNKNOWN,"/*
** Standard WebDAV Property Identifiers
**
** A live property provider does not need to use these; they are simply
** provided for convenience.
**
** Property identifiers need to be unique within a given provider, but not
** *across* providers (note: this uniqueness constraint was different in
** older versions of mod_dav).
**
** The identifiers start at 20000 to make it easier for providers to avoid
** conflicts with the standard properties. The properties are arranged
** alphabetically, and may be reordered from time to time (as properties
** are introduced).
**
** NOTE: there is no problem with reordering (e.g. binary compat) since the
** identifiers are only used within a given provider, which would pick up
** the entire set of changes upon a recompile.
*/",undetermined
11983,httpd,UNKNOWN,/* Standard WebDAV properties (RFC 2518) */,undetermined
11984,httpd,UNKNOWN,/* DeltaV properties (from the I-D (#14)) */,undetermined
11985,httpd,UNKNOWN,"/*
** Property Identifier Registration
**
** At the moment, mod_dav requires live property providers to ensure that
** each property returned has a unique value. For now, this is done through
** central registration (there are no known providers other than the default,
** so this remains manageable).
**
** WARNING: the TEST ranges should never be ""shipped"".
*/",undetermined
11986,httpd,UNKNOWN,/* ..10099. defined by mod_dav */,undetermined
11987,httpd,UNKNOWN,"/* ..10299.
                                           mod_dav filesystem provider. */",undetermined
11988,httpd,UNKNOWN,/* ..10399 */,undetermined
11989,httpd,UNKNOWN,/* ..10499 */,undetermined
11990,httpd,UNKNOWN,/* ..10599 */,undetermined
11991,httpd,UNKNOWN,/* Next: 10600 */,undetermined
11992,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** DATABASE FUNCTIONS
*/",undetermined
11993,httpd,UNKNOWN,"/* """" signals ""no namespace"" */",undetermined
11994,httpd,UNKNOWN,/* hook functions to enable pluggable databases */,undetermined
11995,httpd,UNKNOWN,"/*
    ** In bulk, define any namespaces that the values and their name
    ** elements may need.
    **
    ** Note: sometimes mod_dav will defer calling this until output_value
    ** returns found==1. If the output process needs the dav_xmlns_info
    ** filled for its work, then it will need to fill it on demand rather
    ** than depending upon this hook to fill in the structure.
    **
    ** Note: this will *always* be called during an output sequence. Thus,
    ** the provider may rely solely on using this to fill the xmlns info.
    */",undetermined
11996,httpd,UNKNOWN,"/*
    ** Output the value from the database (i.e. add an element name and
    ** the value into *phdr). Set *found based on whether the name/value
    ** was found in the propdb.
    **
    ** Note: it is NOT an error for the key/value pair to not exist.
    **
    ** The dav_xmlns_info passed to define_namespaces() is also passed to
    ** each output_value() call so that namespaces can be added on-demand.
    ** It can also be used to look up prefixes or URIs during the output
    ** process.
    */",undetermined
11997,httpd,UNKNOWN,"/*
    ** Build a mapping from ""global"" namespaces (stored in apr_xml_*)
    ** into provider-local namespace identifiers.
    **
    ** This mapping should be done once per set of namespaces, and the
    ** resulting mapping should be passed into the store() hook function.
    **
    ** Note: usually, there is just a single document/namespaces for all
    ** elements passed. However, the generality of creating multiple
    ** mappings and passing them to store() is provided here.
    **
    ** Note: this is only in preparation for a series of store() calls.
    ** As a result, the propdb must be open for read/write access when
    ** this function is called.
    */",undetermined
11998,httpd,UNKNOWN,"/*
    ** Store a property value for a given name. The value->combined field
    ** MUST be set for this call.
    **
    ** ### WARNING: current providers will quote the text within ELEM.
    ** ### this implies you can call this function only once with a given
    ** ### element structure (a second time will quote it again).
    */",undetermined
11999,httpd,UNKNOWN,/* remove a given property */,undetermined
12000,httpd,UNKNOWN,"/* returns 1 if the record specified by ""key"" exists; 0 otherwise */",undetermined
12001,httpd,UNKNOWN,"/*
    ** Iterate over the property names in the database.
    **
    ** iter->name.ns == iter->name.name == NULL when there are no more names.
    **
    ** Note: only one iteration may occur over the propdb at a time.
    */",undetermined
12002,httpd,UNKNOWN,"/*
    ** Rollback support: get rollback context, and apply it.
    **
    ** struct dav_deadprop_rollback is a provider-private structure; it
    ** should remember the name, and the name's old value (or the fact that
    ** the value was not present, and should be deleted if a rollback occurs).
    */",undetermined
12003,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12004,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** LOCK FUNCTIONS
*/",undetermined
12005,httpd,UNKNOWN,"/* Used to represent a Timeout header of ""Infinity"" */",undetermined
12006,httpd,UNKNOWN,"/*
** Opaque, provider-specific information for a lock database.
*/",undetermined
12007,httpd,UNKNOWN,"/*
** Opaque, provider-specific information for a lock record.
*/",undetermined
12008,httpd,UNKNOWN,"/*
** Lock database type. Lock providers are urged to implement a ""lazy"" open, so
** doing an ""open"" is cheap until something is actually needed from the DB.
*/",undetermined
12009,httpd,UNKNOWN,/* the hooks used for this lockdb */,undetermined
12010,httpd,UNKNOWN,/* was it opened readonly? */,undetermined
12011,httpd,UNKNOWN,/* lock asserted on this resource */,undetermined
12012,httpd,UNKNOWN,/* lock inherited from a parent */,undetermined
12013,httpd,UNKNOWN,/* most info is not filled in */,undetermined
12014,httpd,UNKNOWN,"/*
** dav_lock: hold information about a lock on a resource.
**
** This structure is used for both direct and indirect locks. A direct lock
** is a lock applied to a specific resource by the client. An indirect lock
** is one that is inherited from a parent resource by virtue of a non-zero
** Depth: header when the lock was applied.
**
** mod_dav records both types of locks in the lock database, managing their
** addition/removal as resources are moved about the namespace.
**
** Note that the lockdb is free to marshal this structure in any form that
** it likes.
**
** For a ""partial"" lock, the <rectype> and <locktoken> fields must be filled
** in. All other (user) fields should be zeroed. The lock provider will
** usually fill in the <info> field, and the <next> field may be used to
** construct a list of partial locks.
**
** The lock provider MUST use the info field to store a value such that a
** dav_lock structure can locate itself in the underlying lock database.
** This requirement is needed for refreshing: when an indirect dav_lock is
** refreshed, its reference to the direct lock does not specify the direct's
** resource, so the only way to locate the (refreshed, direct) lock in the
** database is to use the info field.
**
** Note that <is_locknull> only refers to the resource where this lock was
** found.
** ### hrm. that says the abstraction is wrong. is_locknull may disappear.
*/",undetermined
12015,httpd,UNKNOWN,/* type of lock record */,undetermined
12016,httpd,UNKNOWN,/* lock establishes a locknull resource */,undetermined
12017,httpd,UNKNOWN,/* ### put the resource in here? */,undetermined
12018,httpd,UNKNOWN,/* scope of the lock */,undetermined
12019,httpd,UNKNOWN,/* type of lock */,undetermined
12020,httpd,UNKNOWN,/* depth of the lock */,undetermined
12021,httpd,UNKNOWN,/* when the lock will timeout */,undetermined
12022,httpd,UNKNOWN,/* the token that was issued */,undetermined
12023,httpd,UNKNOWN,/* (XML) owner of the lock */,undetermined
12024,httpd,UNKNOWN,/* auth'd username owning lock */,undetermined
12025,httpd,UNKNOWN,/* private to the lockdb */,undetermined
12026,httpd,UNKNOWN,/* for managing a list of locks */,undetermined
12027,httpd,UNKNOWN,/* Property-related public lock functions */,undetermined
12028,httpd,UNKNOWN,/* LockDB-related public lock functions */,undetermined
12029,httpd,UNKNOWN,"/*
** flags:
**    0x0F -- reserved for <dav_lock_scope> values
**
**    other flags, detailed below
*/",undetermined
12030,httpd,UNKNOWN,/* validate just the resource */,undetermined
12031,httpd,UNKNOWN,/* validate resource AND its parent */,undetermined
12032,httpd,UNKNOWN,"/* add DAV:lockdiscovery into
                                           the 424 DAV:response */",undetermined
12033,httpd,UNKNOWN,"/* return 424 status, not 207 */",undetermined
12034,httpd,UNKNOWN,/* for internal use */,undetermined
12035,httpd,UNKNOWN,/* Lock-null related public lock functions */,undetermined
12036,httpd,UNKNOWN,"/* Lock provider hooks. Locking is optional, so there may be no
 * lock provider for a given repository.
 */",undetermined
12037,httpd,UNKNOWN,/* Return the supportedlock property for a resource */,undetermined
12038,httpd,UNKNOWN,"/* Parse a lock token URI, returning a lock token object allocated
     * in the given pool.
     */",undetermined
12039,httpd,UNKNOWN,"/* Format a lock token object into a URI string, allocated in
     * the given pool.
     *
     * Always returns non-NULL.
     */",undetermined
12040,httpd,UNKNOWN,"/* Compare two lock tokens.
     *
     * Result < 0  => lt1 < lt2
     * Result == 0 => lt1 == lt2
     * Result > 0  => lt1 > lt2
     */",undetermined
12041,httpd,UNKNOWN,"/* Open the provider's lock database.
     *
     * The provider may or may not use a ""real"" database for locks
     * (a lock could be an attribute on a resource, for example).
     *
     * The provider may choose to use the value of the DAVLockDB directive
     * (as returned by dav_get_lockdb_path()) to decide where to place
     * any storage it may need.
     *
     * The request storage pool should be associated with the lockdb,
     * so it can be used in subsequent operations.
     *
     * If ro != 0, only readonly operations will be performed.
     * If force == 0, the open can be ""lazy""; no subsequent locking operations
     * may occur.
     * If force != 0, locking operations will definitely occur.
     */",undetermined
12042,httpd,UNKNOWN,/* Indicates completion of locking operations */,undetermined
12043,httpd,UNKNOWN,/* Take a resource out of the lock-null state. */,undetermined
12044,httpd,UNKNOWN,"/*
    ** Create a (direct) lock structure for the given resource. A locktoken
    ** will be created.
    **
    ** The lock provider may store private information into lock->info.
    */",undetermined
12045,httpd,UNKNOWN,"/*
    ** Get the locks associated with the specified resource.
    **
    ** If resolve_locks is true (non-zero), then any indirect locks are
    ** resolved to their actual, direct lock (i.e. the reference to followed
    ** to the original lock).
    **
    ** The locks, if any, are returned as a linked list in no particular
    ** order. If no locks are present, then *locks will be NULL.
    */",undetermined
12046,httpd,UNKNOWN,/* resolve indirects to directs */,undetermined
12047,httpd,UNKNOWN,/* leave indirects partially filled */,undetermined
12048,httpd,UNKNOWN,/* fill out indirect locks */,undetermined
12049,httpd,UNKNOWN,"/*
    ** Find a particular lock on a resource (specified by its locktoken).
    **
    ** *lock will be set to NULL if the lock is not found.
    **
    ** Note that the provider can optimize the unmarshalling -- only one
    ** lock (or none) must be constructed and returned.
    **
    ** If partial_ok is true (non-zero), then an indirect lock can be
    ** partially filled in. Otherwise, another lookup is done and the
    ** lock structure will be filled out as a DAV_LOCKREC_INDIRECT.
    */",undetermined
12050,httpd,UNKNOWN,"/*
    ** Quick test to see if the resource has *any* locks on it.
    **
    ** This is typically used to determine if a non-existent resource
    ** has a lock and is (therefore) a locknull resource.
    **
    ** WARNING: this function may return TRUE even when timed-out locks
    **          exist (i.e. it may not perform timeout checks).
    */",undetermined
12051,httpd,UNKNOWN,"/*
    ** Append the specified lock(s) to the set of locks on this resource.
    **
    ** If ""make_indirect"" is true (non-zero), then the specified lock(s)
    ** should be converted to an indirect lock (if it is a direct lock)
    ** before appending. Note that the conversion to an indirect lock does
    ** not alter the passed-in lock -- the change is internal the
    ** append_locks function.
    **
    ** Multiple locks are specified using the lock->next links.
    */",undetermined
12052,httpd,UNKNOWN,"/*
    ** Remove any lock that has the specified locktoken.
    **
    ** If locktoken == NULL, then ALL locks are removed.
    */",undetermined
12053,httpd,UNKNOWN,"/*
    ** Refresh all locks, found on the specified resource, which has a
    ** locktoken in the provided list.
    **
    ** If the lock is indirect, then the direct lock is referenced and
    ** refreshed.
    **
    ** Each lock that is updated is returned in the <locks> argument.
    ** Note that the locks will be fully resolved.
    */",undetermined
12054,httpd,UNKNOWN,"/*
    ** Look up the resource associated with a particular locktoken.
    **
    ** The search begins at the specified <start_resource> and the lock
    ** specified by <locktoken>.
    **
    ** If the resource/token specifies an indirect lock, then the direct
    ** lock will be looked up, and THAT resource will be returned. In other
    ** words, this function always returns the resource where a particular
    ** lock (token) was asserted.
    **
    ** NOTE: this function pointer is allowed to be NULL, indicating that
    **       the provider does not support this type of functionality. The
    **       caller should then traverse up the repository hierarchy looking
    **       for the resource defining a lock with this locktoken.
    */",undetermined
12055,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12056,httpd,UNKNOWN,/* what types of resources can be discovered by dav_get_resource_state() */,undetermined
12057,httpd,UNKNOWN,/* resource lock-null */,undetermined
12058,httpd,UNKNOWN,/* resource null */,undetermined
12059,httpd,UNKNOWN,/* resource exists */,undetermined
12060,httpd,UNKNOWN,/* an error occurred */,undetermined
12061,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** PROPERTY HANDLING
*/",undetermined
12062,httpd,UNKNOWN,"/*
** 3-phase property modification.
**
**   1) validate props. readable? unlocked? ACLs allow access?
**   2) execute operation (set/delete)
**   3) commit or rollback
**
** ### eventually, auth must be available. a ref to the request_rec (which
** ### contains the auth info) should be in the shared context struct.
**
** Each function may alter the error values and information contained within
** the context record. This should be done as an ""increasing"" level of
** error, rather than overwriting any previous error.
**
** Note that commit() cannot generate errors. It should simply free the
** rollback information.
**
** rollback() may generate additional errors because the rollback operation
** can sometimes fail(!).
**
** The caller should allocate an array of these, one per operation. It should
** be zero-initialized, then the db, operation, and prop fields should be
** filled in before calling dav_prop_validate. Note that the set/delete
** operations are order-dependent. For a given (logical) context, the same
** pointer must be passed to each phase.
**
** error_type is an internal value, but will have the same numeric value
** for each possible ""desc"" value. This allows the caller to group the
** descriptions via the error_type variable, rather than through string
** comparisons. Note that ""status"" does not provide enough granularity to
** differentiate/group the ""desc"" values.
**
** Note that the propdb will maintain some (global) context across all
** of the property change contexts. This implies that you can have only
** one open transaction per propdb.
*/",undetermined
12063,httpd,UNKNOWN,/* property to affect */,undetermined
12064,httpd,UNKNOWN,/* set a property value */,undetermined
12065,httpd,UNKNOWN,/* delete a prop value */,undetermined
12066,httpd,UNKNOWN,/* ### add a GET? */,undetermined
12067,httpd,UNKNOWN,/* private items to the propdb */,undetermined
12068,httpd,UNKNOWN,/* optional rollback info */,undetermined
12069,httpd,UNKNOWN,/* error (if any) */,undetermined
12070,httpd,UNKNOWN,/* private to mod_dav.c */,undetermined
12071,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** WALKER STRUCTURE
*/",undetermined
12072,httpd,UNKNOWN,/* called for a member resource */,undetermined
12073,httpd,UNKNOWN,/* called for a collection */,undetermined
12074,httpd,UNKNOWN,/* called for a locknull resource */,undetermined
12075,httpd,UNKNOWN,/* the client-provided context */,undetermined
12076,httpd,UNKNOWN,/* pool to use for allocations in the callback */,undetermined
12077,httpd,UNKNOWN,/* the current resource */,undetermined
12078,httpd,UNKNOWN,/* OUTPUT: add responses to this */,undetermined
12079,httpd,UNKNOWN,/* limit to authorized files */,undetermined
12080,httpd,UNKNOWN,/* walk normal files */,undetermined
12081,httpd,UNKNOWN,/* walk locknull resources */,undetermined
12082,httpd,UNKNOWN,/* callback function and a client context for the walk */,undetermined
12083,httpd,UNKNOWN,/* what pool to use for allocations needed by walk logic */,undetermined
12084,httpd,UNKNOWN,/* beginning root of the walk */,undetermined
12085,httpd,UNKNOWN,/* lock database to enable walking LOCKNULL resources */,undetermined
12086,httpd,UNKNOWN,/* directory tree walking context */,undetermined
12087,httpd,UNKNOWN,/* input: */,undetermined
12088,httpd,UNKNOWN,/* ### client data... phasing out this big glom */,undetermined
12089,httpd,UNKNOWN,/* this brigade buffers data being sent to r->output_filters */,undetermined
12090,httpd,UNKNOWN,"/* a scratch pool, used to stream responses and iteratively cleared. */",undetermined
12091,httpd,UNKNOWN,/* original request */,undetermined
12092,httpd,UNKNOWN,/* for PROPFIND operations */,undetermined
12093,httpd,UNKNOWN,/* (cached) propstat giving a 404 error */,undetermined
12094,httpd,UNKNOWN,/* for validation */,undetermined
12095,httpd,UNKNOWN,/* for UNLOCK */,undetermined
12096,httpd,UNKNOWN,/* for LOCK */,undetermined
12097,httpd,UNKNOWN,/* for dav_inherit_locks() */,undetermined
12098,httpd,UNKNOWN,/* for dav_validate_request() */,undetermined
12099,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** ""STREAM"" STRUCTURE
**
** mod_dav uses this abstraction for interacting with the repository
** while fetching/storing resources. mod_dav views resources as a stream
** of bytes.
**
** Note that the structure is opaque -- it is private to the repository
** that created the stream in the repository's ""open"" function.
**
** ### THIS STUFF IS GOING AWAY ... GET/read requests are handled by
** ### having the provider jam stuff straight into the filter stack.
** ### this is only left for handling PUT/write requests.
*/",undetermined
12100,httpd,UNKNOWN,/* truncate and open for writing */,undetermined
12101,httpd,UNKNOWN,/* open for writing; random access */,undetermined
12102,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** REPOSITORY FUNCTIONS
*/",undetermined
12103,httpd,UNKNOWN,/* Repository provider hooks */,undetermined
12104,httpd,UNKNOWN,"/* Flag for whether repository requires special GET handling.
     * If resources in the repository are not visible in the
     * filesystem location which URLs map to, then special handling
     * is required to first fetch a resource from the repository,
     * respond to the GET request, then free the resource copy.
     */",undetermined
12105,httpd,UNKNOWN,"/* Get a resource descriptor for the URI in a request. A descriptor
     * should always be returned even if the resource does not exist. This
     * repository has been identified as handling the resource given by
     * the URI, so an answer must be given. If there is a problem with the
     * URI or accessing the resource or whatever, then an error should be
     * returned.
     *
     * root_dir:
     *   the root of the directory for which this repository is configured.
     *
     * label:
     *   if a Label: header is present (and allowed), this is the label
     *   to use to identify a version resource from the resource's
     *   corresponding version history. Otherwise, it will be NULL.
     *
     * use_checked_in:
     *   use the DAV:checked-in property of the resource identified by the
     *   Request-URI to identify and return a version resource
     *
     * The provider may associate the request storage pool with the resource
     * (in the resource->pool field), to use in other operations on that
     * resource.
     */",undetermined
12106,httpd,UNKNOWN,"/* Get a resource descriptor for the parent of the given resource.
     * The resources need not exist.  NULL is returned if the resource
     * is the root collection.
     *
     * An error should be returned only if there is a fatal error in
     * fetching information about the parent resource.
     */",undetermined
12107,httpd,UNKNOWN,"/* Determine whether two resource descriptors refer to the same resource.
    *
     * Result != 0 => the resources are the same.
     */",undetermined
12108,httpd,UNKNOWN,"/* Determine whether one resource is a parent (immediate or otherwise)
     * of another.
     *
     * Result != 0 => res1 is a parent of res2.
     */",undetermined
12109,httpd,UNKNOWN,"/*
    ** Open a stream for this resource, using the specified mode. The
    ** stream will be returned in *stream.
    */",undetermined
12110,httpd,UNKNOWN,"/*
    ** Close the specified stream.
    **
    ** mod_dav will (ideally) make sure to call this. For safety purposes,
    ** a provider should (ideally) register a cleanup function with the
    ** request pool to get this closed and cleaned up.
    **
    ** Note the possibility of an error from the close -- it is entirely
    ** feasible that the close does a ""commit"" of some kind, which can
    ** produce an error.
    **
    ** commit should be TRUE (non-zero) or FALSE (0) if the stream was
    ** opened for writing. This flag states whether to retain the file
    ** or not.
    ** Note: the commit flag is ignored for streams opened for reading.
    */",undetermined
12111,httpd,UNKNOWN,"/*
    ** Write data to the stream.
    **
    ** All of the bytes must be written, or an error should be returned.
    */",undetermined
12112,httpd,UNKNOWN,"/*
    ** Seek to an absolute position in the stream. This is used to support
    ** Content-Range in a GET/PUT.
    **
    ** NOTE: if this function is NULL (which is allowed), then any
    **       operations using Content-Range will be refused.
    */",undetermined
12113,httpd,UNKNOWN,"/*
    ** If a GET is processed using a stream (open_stream, read_stream)
    ** rather than via a sub-request (on get_pathname), then this function
    ** is used to provide the repository with a way to set the headers
    ** in the response.
    **
    ** This function may be called without a following deliver(), to
    ** handle a HEAD request.
    **
    ** This may be NULL if handle_get is FALSE.
    */",undetermined
12114,httpd,UNKNOWN,"/*
    ** The provider should deliver the resource into the specified filter.
    ** Basically, this is the response to the GET method.
    **
    ** Note that this is called for all resources, including collections.
    ** The provider should determine what has content to deliver or not.
    **
    ** set_headers will be called prior to this function, allowing the
    ** provider to set the appropriate response headers.
    **
    ** This may be NULL if handle_get is FALSE.
    ** ### maybe toss handle_get and just use this function as the marker
    */",undetermined
12115,httpd,UNKNOWN,"/* Create a collection resource. The resource must not already exist.
     *
     * Result == NULL if the collection was created successfully. Also, the
     * resource object is updated to reflect that the resource exists, and
     * is a collection.
     */",undetermined
12116,httpd,UNKNOWN,"/* Copy one resource to another. The destination may exist, if it is
     * versioned.
     * Handles both files and collections. Properties are copied as well.
     * If the destination exists and is versioned, the provider must update
     * the destination to have identical content to the source,
     * recursively for collections.
     * The depth argument is ignored for a file, and can be either 0 or
     * DAV_INFINITY for a collection.
     * If an error occurs in a child resource, then the return value is
     * non-NULL, and *response is set to a multistatus response.
     * If the copy is successful, the dst resource object is
     * updated to reflect that the resource exists.
     */",undetermined
12117,httpd,UNKNOWN,"/* Move one resource to another. The destination must not exist.
     * Handles both files and collections. Properties are moved as well.
     * If an error occurs in a child resource, then the return value is
     * non-NULL, and *response is set to a multistatus response.
     * If the move is successful, the src and dst resource objects are
     * updated to reflect that the source no longer exists, and the
     * destination does.
     */",undetermined
12118,httpd,UNKNOWN,"/* Remove a resource. Handles both files and collections.
     * Removes any associated properties as well.
     * If an error occurs in a child resource, then the return value is
     * non-NULL, and *response is set to a multistatus response.
     * If the delete is successful, the resource object is updated to
     * reflect that the resource no longer exists.
     */",undetermined
12119,httpd,UNKNOWN,"/* Walk a resource hierarchy.
     *
     * Iterates over the resource hierarchy specified by params->root.
     * Control of the walk and the callback are specified by 'params'.
     *
     * An error may be returned. *response will contain multistatus
     * responses (if any) suitable for the body of the error. It is also
     * possible to return NULL, yet still have multistatus responses.
     * In this case, typically the caller should return a 207 (Multistatus)
     * and the responses (in the body) as the HTTP response.
     */",undetermined
12120,httpd,UNKNOWN,/* Get the entity tag for a resource */,undetermined
12121,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12122,httpd,UNKNOWN,/* Get the request rec for a resource */,undetermined
12123,httpd,UNKNOWN,/* Get the pathname for a resource */,undetermined
12124,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** VERSIONING FUNCTIONS
*/",undetermined
12125,httpd,UNKNOWN,"/* dav_add_vary_header
 *
 * If there were any headers in the request which require a Vary header
 * in the response, add it.
 */",undetermined
12126,httpd,UNKNOWN,"/*
** Flags specifying auto-versioning behavior, returned by
** the auto_versionable hook. The value returned depends
** on both the state of the resource and the value of the
** DAV:auto-versioning property for the resource.
**
** If the resource does not exist (null or lock-null),
** DAV_AUTO_VERSION_ALWAYS causes creation of a new version-controlled resource
**
** If the resource is checked in,
** DAV_AUTO_VERSION_ALWAYS causes it to be checked out always,
** DAV_AUTO_VERSION_LOCKED causes it to be checked out only when locked
**
** If the resource is checked out,
** DAV_AUTO_VERSION_ALWAYS causes it to be checked in always,
** DAV_AUTO_VERSION_LOCKED causes it to be checked in when unlocked
** (note: a provider should allow auto-checkin only for resources which
** were automatically checked out)
**
** In all cases, DAV_AUTO_VERSION_NEVER results in no auto-versioning behavior.
*/",undetermined
12127,httpd,UNKNOWN,"/*
** This structure is used to record what auto-versioning operations
** were done to make a resource writable, so that they can be undone
** at the end of a request.
*/",undetermined
12128,httpd,UNKNOWN,/* 1 => resource was auto-version-controlled */,undetermined
12129,httpd,UNKNOWN,/* 1 => resource was auto-checked-out */,undetermined
12130,httpd,UNKNOWN,/* 1 => parent was auto-checked-out */,undetermined
12131,httpd,UNKNOWN,"/* parent resource, if it was needed */",undetermined
12132,httpd,UNKNOWN,"/* Ensure that a resource is writable. If there is no versioning
 * provider, then this is essentially a no-op. Versioning repositories
 * require explicit resource creation and checkout before they can
 * be written to. If a new resource is to be created, or an existing
 * resource deleted, the parent collection must be checked out as well.
 *
 * Set the parent_only flag to only make the parent collection writable.
 * Otherwise, both parent and child are made writable as needed. If the
 * child does not exist, then a new versioned resource is created and
 * checked out.
 *
 * If auto-versioning is not enabled for a versioned resource, then an error is
 * returned, since the resource cannot be modified.
 *
 * The dav_auto_version_info structure is filled in with enough information
 * to restore both parent and child resources to the state they were in
 * before the auto-versioning operations occurred.
 */",undetermined
12133,httpd,UNKNOWN,"/* Revert the writability of resources back to what they were
 * before they were modified. If undo == 0, then the resource
 * modifications are maintained (i.e. they are checked in).
 * If undo != 0, then resource modifications are discarded
 * (i.e. they are unchecked out).
 *
 * Set the unlock flag to indicate that the resource is about
 * to be unlocked; it will be checked in if the resource
 * auto-versioning property indicates it should be. In this case,
 * av_info is ignored, so it can be NULL.
 *
 * The resource argument may be NULL if only the parent resource
 * was checked out (i.e. the parent_only was != 0 in the
 * dav_auto_checkout call).
 */",undetermined
12134,httpd,UNKNOWN,"/*
** This structure is used to describe available reports
**
** ""nmspace"" should be valid XML and URL-quoted. mod_dav will place
** double-quotes around it and use it in an xmlns declaration.
*/",undetermined
12135,httpd,UNKNOWN,/* namespace of the XML report element */,undetermined
12136,httpd,UNKNOWN,/* element name for the XML report */,undetermined
12137,httpd,UNKNOWN,/* Versioning provider hooks */,undetermined
12138,httpd,UNKNOWN,"/*
    ** MANDATORY HOOKS
    ** The following hooks are mandatory for all versioning providers;
    ** they define the functionality needed to implement ""core"" versioning.
    */",undetermined
12139,httpd,UNKNOWN,"/* Return supported versioning options.
     * Each dav_text item in the list will be returned as a separate
     * DAV header. Providers are advised to limit the length of an
     * individual text item to 63 characters, to conform to the limit
     * used by MS Web Folders.
     */",undetermined
12140,httpd,UNKNOWN,"/* Get the value of a specific option for an OPTIONS request.
     * The option being requested is given by the parsed XML
     * element object ""elem"". The value of the option should be
     * appended to the ""option"" text object.
     */",undetermined
12141,httpd,UNKNOWN,"/* Determine whether a non-versioned (or non-existent) resource
     * is versionable. Returns != 0 if resource can be versioned.
     */",undetermined
12142,httpd,UNKNOWN,"/* Determine whether auto-versioning is enabled for a resource
     * (which may not exist, or may not be versioned). If the resource
     * is a checked-out resource, the provider must only enable
     * auto-checkin if the resource was automatically checked out.
     *
     * The value returned depends on both the state of the resource
     * and the value of its DAV:auto-version property. See the description
     * of the dav_auto_version enumeration above for the details.
     */",undetermined
12143,httpd,UNKNOWN,"/* Put a resource under version control. If the resource already
     * exists unversioned, then it becomes the initial version of the
     * new version history, and it is replaced by a version selector
     * which targets the new version.
     *
     * If the resource does not exist, then a new version-controlled
     * resource is created which either targets an existing version (if the
     * ""target"" argument is not NULL), or the initial, empty version
     * in a new history resource (if the ""target"" argument is NULL).
     *
     * If successful, the resource object state is updated appropriately
     * (that is, changed to refer to the new version-controlled resource).
     */",undetermined
12144,httpd,UNKNOWN,"/* Checkout a resource. If successful, the resource
     * object state is updated appropriately.
     *
     * The auto_checkout flag will be set if this checkout is being
     * done automatically, as part of some method which modifies
     * the resource. The provider must remember that the resource
     * was automatically checked out, so it can determine whether it
     * can be automatically checked in. (Auto-checkin should only be
     * enabled for resources which were automatically checked out.)
     *
     * If the working resource has a different URL from the
     * target resource, a dav_resource descriptor is returned
     * for the new working resource. Otherwise, the original
     * resource descriptor will refer to the working resource.
     * The working_resource argument can be NULL if the caller
     * is not interested in the working resource.
     *
     * If the client has specified DAV:unreserved or DAV:fork-ok in the
     * checkout request, then the corresponding flags are set. If
     * DAV:activity-set has been specified, then create_activity is set
     * if DAV:new was specified; otherwise, the DAV:href elements' CDATA
     * (the actual href text) is passed in the ""activities"" array (each
     * element of the array is a const char *). activities will be NULL
     * no DAV:activity-set was provided or when create_activity is set.
     */",undetermined
12145,httpd,UNKNOWN,"/* Uncheckout a checked-out resource. If successful, the resource
     * object state is updated appropriately.
     */",undetermined
12146,httpd,UNKNOWN,"/* Checkin a checked-out resource. If successful, the resource
     * object state is updated appropriately, and the
     * version_resource descriptor will refer to the new version.
     * The version_resource argument can be NULL if the caller
     * is not interested in the new version resource.
     *
     * If the client has specified DAV:keep-checked-out in the checkin
     * request, then the keep_checked_out flag is set. The provider
     * should create a new version, but keep the resource in the
     * checked-out state.
     */",undetermined
12147,httpd,UNKNOWN,"/*
    ** Return the set of reports available at this resource.
    **
    ** An array of report elements should be returned, with an end-marker
    ** element containing namespace==NULL. The value of the
    ** DAV:supported-report-set property will be constructed and
    ** returned.
    */",undetermined
12148,httpd,UNKNOWN,"/*
    ** Determine whether a Label header can be used
    ** with a particular report. The dav_xml_doc structure
    ** contains the parsed report request body.
    ** Returns 0 if the Label header is not allowed.
    */",undetermined
12149,httpd,UNKNOWN,"/*
    ** Generate a report on a resource. Since a provider is free
    ** to define its own reports, and the value of request headers
    ** may affect the interpretation of a report, the request record
    ** must be passed to this routine.
    **
    ** The dav_xml_doc structure contains the parsed report request
    ** body. The report response should be generated into the specified
    ** output filter.
    **
    ** If an error occurs, and a response has not yet been generated,
    ** then an error can be returned from this function. mod_dav will
    ** construct an appropriate error response. Once some output has
    ** been placed into the filter, however, the provider should not
    ** return an error -- there is no way that mod_dav can deliver it
    ** properly.
    **
    ** ### maybe we need a way to signal an error anyways, and then
    ** ### apache can abort the connection?
    */",undetermined
12150,httpd,UNKNOWN,"/*
    ** OPTIONAL HOOKS
    ** The following hooks are optional; if not defined, then the
    ** corresponding protocol methods will be unsupported.
    */",undetermined
12151,httpd,UNKNOWN,"/*
    ** Set the state of a checked-in version-controlled resource.
    **
    ** If the request specified a version, the version resource
    ** represents that version. If the request specified a label,
    ** then ""version"" is NULL, and ""label"" is the label.
    **
    ** The depth argument is ignored for a file, and can be 0, 1, or
    ** DAV_INFINITY for a collection. The depth argument only applies
    ** with a label, not a version.
    **
    ** If an error occurs in a child resource, then the return value is
    ** non-NULL, and *response is set to a multistatus response.
    **
    ** This hook is optional; if not defined, then the UPDATE method
    ** will not be supported.
    */",undetermined
12152,httpd,UNKNOWN,"/*
    ** Add a label to a version. The resource is either a specific
    ** version, or a version selector, in which case the label should
    ** be added to the current target of the version selector. The
    ** version selector cannot be checked out.
    **
    ** If replace != 0, any existing label by the same name is
    ** effectively deleted first. Otherwise, it is an error to
    ** attempt to add a label which already exists on some version
    ** of the same history resource.
    **
    ** This hook is optional; if not defined, then the LABEL method
    ** will not be supported. If it is defined, then the remove_label
    ** hook must be defined also.
    */",undetermined
12153,httpd,UNKNOWN,"/*
    ** Remove a label from a version. The resource is either a specific
    ** version, or a version selector, in which case the label should
    ** be added to the current target of the version selector. The
    ** version selector cannot be checked out.
    **
    ** It is an error if no such label exists on the specified version.
    **
    ** This hook is optional, but if defined, the add_label hook
    ** must be defined also.
    */",undetermined
12154,httpd,UNKNOWN,"/*
    ** Determine whether a null resource can be created as a workspace.
    ** The provider may restrict workspaces to certain locations.
    ** Returns 0 if the resource cannot be a workspace.
    **
    ** This hook is optional; if the provider does not support workspaces,
    ** it should be set to NULL.
    */",undetermined
12155,httpd,UNKNOWN,"/*
    ** Create a workspace resource. The resource must not already
    ** exist. Any <DAV:mkworkspace> element is passed to the provider
    ** in the ""doc"" structure; it may be empty.
    **
    ** If workspace creation is succesful, the state of the resource
    ** object is updated appropriately.
    **
    ** This hook is optional; if the provider does not support workspaces,
    ** it should be set to NULL.
    */",undetermined
12156,httpd,UNKNOWN,"/*
    ** Determine whether a null resource can be created as an activity.
    ** The provider may restrict activities to certain locations.
    ** Returns 0 if the resource cannot be an activity.
    **
    ** This hook is optional; if the provider does not support activities,
    ** it should be set to NULL.
    */",undetermined
12157,httpd,UNKNOWN,"/*
    ** Create an activity resource. The resource must not already
    ** exist.
    **
    ** If activity creation is succesful, the state of the resource
    ** object is updated appropriately.
    **
    ** This hook is optional; if the provider does not support activities,
    ** it should be set to NULL.
    */",undetermined
12158,httpd,UNKNOWN,"/*
    ** Merge a resource (tree) into target resource (tree).
    **
    ** ### more doc...
    **
    ** This hook is optional; if the provider does not support merging,
    ** then this should be set to NULL.
    */",undetermined
12159,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12160,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** BINDING FUNCTIONS
*/",undetermined
12161,httpd,UNKNOWN,/* binding provider hooks */,undetermined
12162,httpd,UNKNOWN,"/* Determine whether a resource can be the target of a binding.
     * Returns 0 if the resource cannot be a binding target.
     */",undetermined
12163,httpd,UNKNOWN,"/* Create a binding to a resource.
     * The resource argument is the target of the binding;
     * the binding argument must be a resource which does not already
     * exist.
     */",undetermined
12164,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12165,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** SEARCH(DASL) FUNCTIONS
*/",undetermined
12166,httpd,UNKNOWN,/* search provider hooks */,undetermined
12167,httpd,UNKNOWN,"/* Set header for a OPTION method
     * An error may be returned.
     * To set a hadder, this function might call
     * apr_table_setn(r->headers_out, ""DASL"", dasl_optin1);
     *
     * Examples:
     * DASL: <DAV:basicsearch>
     * DASL: <http://foo.bar.com/syntax1>
     * DASL: <http://akuma.com/syntax2>
     */",undetermined
12168,httpd,UNKNOWN,"/* Search resources
     * An error may be returned. *response will contain multistatus
     * responses (if any) suitable for the body of the error. It is also
     * possible to return NULL, yet still have multistatus responses.
     * In this case, typically the caller should return a 207 (Multistatus)
     * and the responses (in the body) as the HTTP response.
     */",undetermined
12169,httpd,UNKNOWN,"/*
    ** If a provider needs a context to associate with this hooks structure,
    ** then this field may be used. In most cases, it will just be NULL.
    */",undetermined
12170,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** MISCELLANEOUS STUFF
*/",undetermined
12171,httpd,UNKNOWN,/* live property ID */,undetermined
12172,httpd,UNKNOWN,/* the provider defining this prop */,undetermined
12173,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** DAV OPTIONS
*/",undetermined
12174,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** DAV RESOURCE TYPE HOOKS
*/",undetermined
12175,httpd,UNKNOWN,/* _MOD_DAV_H_ */,undetermined
12176,httpd,UNKNOWN,/** @} */,undetermined
12177,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12178,httpd,UNKNOWN,"/*
** DAV extension module for Apache 2.0.*
**  - Property database handling (repository-independent)
**
** NOTES:
**
**   PROPERTY DATABASE
**
**   This version assumes that there is a per-resource database provider
**   to record properties. The database provider decides how and where to
**   store these databases.
**
**   The DBM keys for the properties have the following form:
**
**     namespace "":"" propname
**
**   For example: 5:author
**
**   The namespace provides an integer index into the namespace table
**   (see below). propname is simply the property name, without a namespace
**   prefix.
**
**   A special case exists for properties that had a prefix starting with
**   ""xml"". The XML Specification reserves these for future use. mod_dav
**   stores and retrieves them unchanged. The keys for these properties
**   have the form:
**
**     "":"" propname
**
**   The propname will contain the prefix and the property name. For
**   example, a key might be "":xmlfoo:name""
**
**   The "":name"" style will also be used for properties that do not
**   exist within a namespace.
**
**   The DBM values consist of two null-terminated strings, appended
**   together (the null-terms are retained and stored in the database).
**   The first string is the xml:lang value for the property. An empty
**   string signifies that a lang value was not in context for the value.
**   The second string is the property value itself.
**
**
**   NAMESPACE TABLE
**
**   The namespace table is an array that lists each of the namespaces
**   that are in use by the properties in the given propdb. Each entry
**   in the array is a simple URI.
**
**   For example: http://www.foo.bar/standards/props/
**
**   The prefix used for the property is stripped and the URI for it
**   is entered into the namespace table. Also, any namespaces used
**   within the property value will be entered into the table (and
**   stripped from the child elements).
**
**   The namespaces are stored in the DBM database under the ""METADATA"" key.
**
**
**   STRIPPING NAMESPACES
**
**   Within the property values, the namespace declarations (xmlns...)
**   are stripped. Each element and attribute will have its prefix removed
**   and a new prefix inserted.
**
**   This must be done so that we can return multiple properties in a
**   PROPFIND which may have (originally) used conflicting prefixes. For
**   that case, we must bind all property value elements to new namespace
**   values.
**
**   This implies that clients must NOT be sensitive to the namespace
**   prefix used for their properties. It WILL change when the properties
**   are returned (we return them as ""ns<index>"", e.g. ""ns5""). Also, the
**   property value can contain ONLY XML elements and CDATA. PI and comment
**   elements will be stripped. CDATA whitespace will be preserved, but
**   whitespace within element tags will be altered. Attribute ordering
**   may be altered. Element and CDATA ordering will be preserved.
**
**
**   ATTRIBUTES ON PROPERTY NAME ELEMENTS
**
**   When getting/setting properties, the XML used looks like:
**
**     <prop>
**       <propname1>value</propname1>
**       <propname2>value</propname1>
**     </prop>
**
**   This implementation (mod_dav) DOES NOT save any attributes that are
**   associated with the <propname1> element. The property value is deemed
**   to be only the contents (""value"" in the above example).
**
**   We do store the xml:lang value (if any) that applies to the context
**   of the <propname1> element. Whether the xml:lang attribute is on
**   <propname1> itself, or from a higher level element, we will store it
**   with the property value.
**
**
**   VERSIONING
**
**   The DBM db contains a key named ""METADATA"" that holds database-level
**   information, such as the namespace table. The record also contains the
**   db's version number as the very first 16-bit value. This first number
**   is actually stored as two single bytes: the first byte is a ""major""
**   version number. The second byte is a ""minor"" number.
**
**   If the major number is not what mod_dav expects, then the db is closed
**   immediately and an error is returned. A minor number change is
**   acceptable -- it is presumed that old/new dav_props.c can deal with
**   the database format. For example, a newer dav_props might update the
**   minor value and append information to the end of the metadata record
**   (which would be ignored by previous versions).
**
**
** ISSUES:
**
**   At the moment, for the dav_get_allprops() and dav_get_props() functions,
**   we must return a set of xmlns: declarations for ALL known namespaces
**   in the file. There isn't a way to filter this because we don't know
**   which are going to be used or not. Examining property names is not
**   sufficient because the property values could use entirely different
**   namespaces.
**
**   ==> we must devise a scheme where we can ""garbage collect"" the namespace
**       entries from the property database.
*/",undetermined
12179,httpd,UNKNOWN,"/*
** There is some rough support for writable DAV:getcontenttype and
** DAV:getcontentlanguage properties. If this #define is (1), then
** this support is disabled.
**
** We are disabling it because of a lack of support in GET and PUT
** operations. For GET, it would be ""expensive"" to look for a propdb,
** open it, and attempt to extract the Content-Type and Content-Language
** values for the response.
** (Handling the PUT would not be difficult, though)
*/",undetermined
12180,httpd,UNKNOWN,/* TWO null terms */,undetermined
12181,httpd,UNKNOWN,/* the pool we should use */,undetermined
12182,httpd,UNKNOWN,/* the request record */,undetermined
12183,httpd,UNKNOWN,/* the target resource */,undetermined
12184,httpd,UNKNOWN,/* open of db has been deferred */,undetermined
12185,httpd,UNKNOWN,/* underlying database containing props */,undetermined
12186,httpd,UNKNOWN,/* translation of an elem->ns to URI */,undetermined
12187,httpd,UNKNOWN,/* namespace mapping */,undetermined
12188,httpd,UNKNOWN,/* the lock database */,undetermined
12189,httpd,UNKNOWN,/* work buffer for lockdiscovery property */,undetermined
12190,httpd,UNKNOWN,"/* if we ever run a GET subreq, it will be stored here */",undetermined
12191,httpd,UNKNOWN,/* hooks we should use for processing (based on the target resource) */,undetermined
12192,httpd,UNKNOWN,/* NOTE: dav_core_props[] and the following enum must stay in sync. */,undetermined
12193,httpd,UNKNOWN,"/* ### move these into a ""core"" liveprop provider? */",undetermined
12194,httpd,UNKNOWN,/* sentinel */,undetermined
12195,httpd,UNKNOWN,"/*
** This structure is used to track information needed for a rollback.
*/",undetermined
12196,httpd,UNKNOWN,"/* select one of the two rollback context structures based on the
       value of dav_prop_ctx.is_liveprop */",undetermined
12197,httpd,UNKNOWN,/* policy: liveprop providers cannot define no-namespace properties */,undetermined
12198,httpd,UNKNOWN,"/* check liveprop providers first, so they can define core properties */",undetermined
12199,httpd,UNKNOWN,/* check for core property */,undetermined
12200,httpd,UNKNOWN,/* no provider for this property */,undetermined
12201,httpd,UNKNOWN,/* ### this test seems redundant... */,undetermined
12202,httpd,UNKNOWN,/* is the live property read/write? */,undetermined
12203,httpd,UNKNOWN,"/*
    ** Check the liveprop provider (if this is a provider-defined prop)
    */",undetermined
12204,httpd,UNKNOWN,/* these are defined as read-only */,undetermined
12205,httpd,UNKNOWN,/* these are defined as read/write */,undetermined
12206,httpd,UNKNOWN,"/*
    ** We don't recognize the property, so it must be dead (and writable)
    */",undetermined
12207,httpd,UNKNOWN,/* do a sub-request to fetch properties for the target resource's URI. */,undetermined
12208,httpd,UNKNOWN,"/* perform a ""GET"" on the resource's URI (note that the resource
       may not correspond to the current request!). */",undetermined
12209,httpd,UNKNOWN,/* fast-path the common case */,undetermined
12210,httpd,UNKNOWN,/* fast-path the no-locks case */,undetermined
12211,httpd,UNKNOWN,"/*
                ** This may modify the buffer. value may point to
                ** wb_lock.pbuf or a string constant.
                */",undetermined
12212,httpd,UNKNOWN,/* make a copy to isolate it from changes to wb_lock */,undetermined
12213,httpd,UNKNOWN,/* fall through to interpret as a dead property */,undetermined
12214,httpd,UNKNOWN,"/* if something was supplied, then insert it */",undetermined
12215,httpd,UNKNOWN,"/* use D: prefix to refer to the DAV: namespace URI,
             * and let the namespace attribute default to ""DAV:""
             */",undetermined
12216,httpd,UNKNOWN,/* use D: prefix to refer to the DAV: namespace URI */,undetermined
12217,httpd,UNKNOWN,/* use D: prefix to refer to the DAV: namespace URI */,undetermined
12218,httpd,UNKNOWN,"/* this is a ""core"" property that we define */",undetermined
12219,httpd,UNKNOWN,/* ask the provider (that defined this prop) to insert the prop */,undetermined
12220,httpd,UNKNOWN,/* we're trying to open the db; turn off the 'deferred' flag */,undetermined
12221,httpd,UNKNOWN,/* ask the DB provider to open the thing */,undetermined
12222,httpd,UNKNOWN,"/*
    ** NOTE: propdb->db could be NULL if we attempted to open a readonly
    **       database that doesn't exist. If we require read/write
    **       access, then a database was created and opened.
    */",undetermined
12223,httpd,UNKNOWN,"/* always defer actual open, to avoid expense of accessing db
     * when only live properties are involved
     */",undetermined
12224,httpd,UNKNOWN,/* ### what to do about closing the propdb on server failure? */,undetermined
12225,httpd,UNKNOWN,"/* Currently, mod_dav's pool usage doesn't allow clearing this pool. */",undetermined
12226,httpd,UNKNOWN,"/* if not just getting supported live properties,
     * scan all properties in the dead prop database
     */",undetermined
12227,httpd,UNKNOWN,/* ### what to do with db open error? */,undetermined
12228,httpd,UNKNOWN,/*ro*/,undetermined
12229,httpd,UNKNOWN,/* initialize the result with some start tags... */,undetermined
12230,httpd,UNKNOWN,"/* if there ARE properties, then scan them */",undetermined
12231,httpd,UNKNOWN,/* define (up front) any namespaces the db might need */,undetermined
12232,httpd,UNKNOWN,"/* get the first property name, beginning the scan */",undetermined
12233,httpd,UNKNOWN,"/*
                ** We also look for <DAV:getcontenttype> and
                ** <DAV:getcontentlanguage>. If they are not stored as dead
                ** properties, then we need to perform a subrequest to get
                ** their values (if any).
                */",undetermined
12234,httpd,UNKNOWN,/* ### anything better to do? */,undetermined
12235,httpd,UNKNOWN,/* ### probably should enter a 500 error */,undetermined
12236,httpd,UNKNOWN,/* assert: found == 1 */,undetermined
12237,httpd,UNKNOWN,"/* the value was not requested, so just add an empty
                       tag specifying the property name. */",undetermined
12238,httpd,UNKNOWN,"/* all namespaces have been entered into xi. generate them into
               the output now. */",undetermined
12239,httpd,UNKNOWN,/* propdb->db != NULL */,undetermined
12240,httpd,UNKNOWN,/* add namespaces for all the liveprop providers */,undetermined
12241,httpd,UNKNOWN,/* ask the liveprop providers to insert their properties */,undetermined
12242,httpd,UNKNOWN,/* insert the standard properties */,undetermined
12243,httpd,UNKNOWN,/* ### should be handling the return errors here */,undetermined
12244,httpd,UNKNOWN,"/* if we didn't find these, then do the whole subreq thing. */",undetermined
12245,httpd,UNKNOWN,/* ### should be handling the return error here */,undetermined
12246,httpd,UNKNOWN,/* ### should be handling the return error here */,undetermined
12247,httpd,UNKNOWN,"/* if not just reporting on supported live props,
     * terminate the result */",undetermined
12248,httpd,UNKNOWN,"/* ### NOTE: we should pass in TWO buffers -- one for keys, one for
       the marks */",undetermined
12249,httpd,UNKNOWN,"/* we will ALWAYS provide a ""good"" result, even if it is EMPTY */",undetermined
12250,httpd,UNKNOWN,/* ### the marks should be in a buffer! */,undetermined
12251,httpd,UNKNOWN,"/* allocate zeroed-memory for the marks. These marks indicate which
       liveprop namespaces we've generated into the output xmlns buffer */",undetermined
12252,httpd,UNKNOWN,/* same for the liveprops */,undetermined
12253,httpd,UNKNOWN,"/*
        ** First try live property providers; if they don't handle
        ** the property, then try looking it up in the propdb.
        */",undetermined
12254,httpd,UNKNOWN,/* cache the propid; dav_get_props() could be called many times */,undetermined
12255,httpd,UNKNOWN,/* insert the property. returns 1 if an insertion was done. */,undetermined
12256,httpd,UNKNOWN,/* ### need to propagate the error to the caller... */,undetermined
12257,httpd,UNKNOWN,"/* ### skip it for now, as if nothing was inserted */",undetermined
12258,httpd,UNKNOWN,"/*
                ** Add the liveprop's namespace URIs. Note that provider==NULL
                ** for core properties.
                */",undetermined
12259,httpd,UNKNOWN,/* property added. move on to the next property. */,undetermined
12260,httpd,UNKNOWN,"/* nothing to do. fall thru to allow property to be handled
                   as a dead property */",undetermined
12261,httpd,UNKNOWN,/* ### need to change signature to return an error */,undetermined
12262,httpd,UNKNOWN,"/* The property wasn't a live property, so look in the dead property
           database. */",undetermined
12263,httpd,UNKNOWN,/* make sure propdb is really open */,undetermined
12264,httpd,UNKNOWN,/* ### what to do with db open error? */,undetermined
12265,httpd,UNKNOWN,/*ro*/,undetermined
12266,httpd,UNKNOWN,/* only bother to look if a database exists */,undetermined
12267,httpd,UNKNOWN,/* ### what to do? continue doesn't seem right... */,undetermined
12268,httpd,UNKNOWN,"/* if we haven't added the db's namespaces, then do so... */",undetermined
12269,httpd,UNKNOWN,"/* not found as a live OR dead property. add a record to the ""bad""
           propstats */",undetermined
12270,httpd,UNKNOWN,"/* make sure we've started our ""bad"" propstat */",undetermined
12271,httpd,UNKNOWN,/* output this property's name (into the bad propstats) */,undetermined
12272,httpd,UNKNOWN,/* default to start with the good */,undetermined
12273,httpd,UNKNOWN,"/* we may not have any ""bad"" results */",undetermined
12274,httpd,UNKNOWN,"/* ""close"" the bad propstat */",undetermined
12275,httpd,UNKNOWN,"/* if there are no good props, then just return the bad */",undetermined
12276,httpd,UNKNOWN,/* hook the bad propstat to the end of the good one */,undetermined
12277,httpd,UNKNOWN,"/* add in all the various namespaces, and return them */",undetermined
12278,httpd,UNKNOWN,"/* this is a ""core"" property that we define */",undetermined
12279,httpd,UNKNOWN,"/*
    ** Check to see if this is a live property, and fill the fields
    ** in the XML elem, as appropriate.
    **
    ** Verify that the property is read/write. If not, then it cannot
    ** be SET or DELETEd.
    */",undetermined
12280,httpd,UNKNOWN,/* it's a liveprop if a provider was found */,undetermined
12281,httpd,UNKNOWN,"/* ### actually the ""core"" props should really be liveprops, but
           ### there is no ""provider"" for those and the r/w props are
           ### treated as dead props anyhow */",undetermined
12282,httpd,UNKNOWN,/* clear is_liveprop -- act as a dead prop now */,undetermined
12283,httpd,UNKNOWN,"/*
    ** The property is supposed to be stored into the dead-property
    ** database. Make sure the thing is truly open (and writable).
    */",undetermined
12284,httpd,UNKNOWN,/* ro */,undetermined
12285,httpd,UNKNOWN,"/*
    ** There should be an open, writable database in here!
    **
    ** Note: the database would be NULL if it was opened readonly and it
    **       did not exist.
    */",undetermined
12286,httpd,UNKNOWN,"/*
        ** Prep the element => propdb namespace index mapping, inserting
        ** namespace URIs into the propdb that don't exist.
        */",undetermined
12287,httpd,UNKNOWN,"/*
        ** There are no checks to perform here. If a property exists, then
        ** we will delete it. If it does not exist, then it does not matter
        ** (see S12.13.1).
        **
        ** Note that if a property does not exist, that does not rule out
        ** that a SET will occur during this PROPPATCH (thusly creating it).
        */",undetermined
12288,httpd,UNKNOWN,/* save the old value so that we can do a rollback. */,undetermined
12289,httpd,UNKNOWN,/* Note: propdb->mapping was set in dav_prop_validate() */,undetermined
12290,httpd,UNKNOWN,"/*
            ** If an error occurred, then assume that we didn't change the
            ** value. Remove the rollback item so that we don't try to set
            ** its value during the rollback.
            */",undetermined
12291,httpd,UNKNOWN,/* ### euh... where is the removal? */,undetermined
12292,httpd,UNKNOWN,"/*
            ** Delete the property. Ignore errors -- the property is there, or
            ** we are deleting it for a second time.
            */",undetermined
12293,httpd,UNKNOWN,/* ### but what about other errors? */,undetermined
12294,httpd,UNKNOWN,/* push a more specific error here */,undetermined
12295,httpd,UNKNOWN,"/*
        ** Use HTTP_INTERNAL_SERVER_ERROR because we shouldn't have seen
        ** any errors at this point.
        */",undetermined
12296,httpd,UNKNOWN,"/*
    ** Note that a commit implies ctx->err is NULL. The caller should assume
    ** a status of HTTP_OK for this case.
    */",undetermined
12297,httpd,UNKNOWN,/* do nothing if there is no rollback information. */,undetermined
12298,httpd,UNKNOWN,"/*
    ** ### if we have an error, and a rollback occurs, then the namespace
    ** ### mods should not happen at all. Basically, the namespace management
    ** ### is simply a bitch.
    */",undetermined
12299,httpd,UNKNOWN,/* hook previous errors at the end of the rollback error */,undetermined
12300,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12301,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12302,httpd,UNKNOWN,/* forward-declare */,undetermined
12303,httpd,UNKNOWN,"/*
** The namespace URIs that we use. There will only ever be ""DAV:"".
*/",undetermined
12304,httpd,UNKNOWN,/* sentinel */,undetermined
12305,httpd,UNKNOWN,"/*
** Define each of the core properties that this provider will handle.
** Note that all of them are in the DAV: namespace, which has a
** provider-local index of 0.
*/",undetermined
12306,httpd,UNKNOWN,/* sentinel */,undetermined
12307,httpd,UNKNOWN,/* additional type info provided by external modules ? */,undetermined
12308,httpd,UNKNOWN,/* fall through */,undetermined
12309,httpd,UNKNOWN,/* ### should we denote lock-null resources? */,undetermined
12310,httpd,UNKNOWN,/* becomes: <D:resourcetype/> */,undetermined
12311,httpd,UNKNOWN,/* ### bad juju */,undetermined
12312,httpd,UNKNOWN,"/*
        ** This property is known, but not defined as a liveprop. However,
        ** it may be a dead property.
        */",undetermined
12313,httpd,UNKNOWN,/* assert: value != NULL */,undetermined
12314,httpd,UNKNOWN,/* get the information and global NS index for the property */,undetermined
12315,httpd,UNKNOWN,/* assert: info != NULL && info->name != NULL */,undetermined
12316,httpd,UNKNOWN,/* we inserted what was asked for */,undetermined
12317,httpd,UNKNOWN,/* all of our writable props go in the dead prop database */,undetermined
12318,httpd,UNKNOWN,/* patch_exec */,undetermined
12319,httpd,UNKNOWN,/* patch_commit */,undetermined
12320,httpd,UNKNOWN,/* patch_rollback */,undetermined
12321,httpd,UNKNOWN,/* register the namespace URIs */,undetermined
12322,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12323,httpd,UNKNOWN,"/*
** DAV extension module for Apache 2.0.*
**  - various utilities, repository-independent
*/",undetermined
12324,httpd,UNKNOWN,"/* DBG3(""dav_new_error: %d %d %s"", status, error_id, desc ? desc : ""(no desc)""); */",undetermined
12325,httpd,UNKNOWN,/* src error doesn't exist so nothing to join just return dest */,undetermined
12326,httpd,UNKNOWN,/* dest error doesn't exist so nothing to join just return src */,undetermined
12327,httpd,UNKNOWN,/* find last error in dest stack */,undetermined
12328,httpd,UNKNOWN,/* add the src error onto end of dest stack and return it */,undetermined
12329,httpd,UNKNOWN,/* grow the buffer if necessary */,undetermined
12330,httpd,UNKNOWN,/* NOTE: this does not retain prior contents */,undetermined
12331,httpd,UNKNOWN,"/* NOTE: this function is used to init the first pointer, too, since
       the PAD will be larger than alloc_len (0) for zeroed structures */",undetermined
12332,httpd,UNKNOWN,/* grow if we don't have enough for the requested size plus padding */,undetermined
12333,httpd,UNKNOWN,/* set the new length; min of MINSIZE */,undetermined
12334,httpd,UNKNOWN,/* initialize a buffer and copy the specified (null-term'd) string into it */,undetermined
12335,httpd,UNKNOWN,"/* append a string to the end of the buffer, adjust length */",undetermined
12336,httpd,UNKNOWN,"/* place a string on the end of the buffer, do NOT adjust length */",undetermined
12337,httpd,UNKNOWN,/* place some memory on the end of a buffer; do NOT adjust length */,undetermined
12338,httpd,UNKNOWN,"/*
** dav_lookup_uri()
**
** Extension for ap_sub_req_lookup_uri() which can't handle absolute
** URIs properly.
**
** If NULL is returned, then an error occurred with parsing the URI or
** the URI does not match the current server.
*/",undetermined
12339,httpd,UNKNOWN,/* first thing to do is parse the URI into various components */,undetermined
12340,httpd,UNKNOWN,/* the URI must be an absoluteURI (WEBDAV S9.3) */,undetermined
12341,httpd,UNKNOWN,/* the URI must not have a query (args) or a fragment */,undetermined
12342,httpd,UNKNOWN,"/* If the scheme or port was provided, then make sure that it matches
       the scheme/port of this request. If the request must be absolute,
       then require the (explicit/implicit) scheme/port be matching.

       ### hmm. if a port wasn't provided (does the parse return port==0?),
       ### but we're on a non-standard port, then we won't detect that the
       ### URI's port implies the wrong one.
    */",undetermined
12343,httpd,UNKNOWN,/* ### not sure this works if the current request came in via https: */,undetermined
12344,httpd,UNKNOWN,/* insert a port if the URI did not contain one */,undetermined
12345,httpd,UNKNOWN,"/* now, verify that the URI uses the same scheme as the current.
           request. the port must match our port.
        */",undetermined
12346,httpd,UNKNOWN,"/* we have verified the scheme, port, and general structure */",undetermined
12347,httpd,UNKNOWN,"/*
    ** Hrm.  IE5 will pass unqualified hostnames for both the
    ** Host: and Destination: headers.  This breaks the
    ** http_vhost.c::matches_aliases function.
    **
    ** For now, qualify unqualified comp.hostnames with
    ** r->server->server_hostname.
    **
    ** ### this is a big hack. Apache should provide a better way.
    ** ### maybe the admin should list the unqualified hosts in a
    ** ### <ServerAlias> block?
    */",undetermined
12348,httpd,UNKNOWN,"/* now, if a hostname was provided, then verify that it represents the
       same server as the current connection. note that we just use our
       port, since we've verified the URI matches ours */",undetermined
12349,httpd,UNKNOWN,"/* we have verified that the requested URI denotes the same server as
       the current request. Therefore, we can use ap_sub_req_lookup_uri() */",undetermined
12350,httpd,UNKNOWN,/* reconstruct a URI as just the path */,undetermined
12351,httpd,UNKNOWN,"/*
     * Lookup the URI and return the sub-request. Note that we use the
     * same HTTP method on the destination. This allows the destination
     * to apply appropriate restrictions (e.g. readonly).
     */",undetermined
12352,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** XML UTILITY FUNCTIONS
*/",undetermined
12353,httpd,UNKNOWN,/* validate that the root element uses a given DAV: tagname (TRUE==valid) */,undetermined
12354,httpd,UNKNOWN,/* find and return the (unique) child with a given DAV: tagname */,undetermined
12355,httpd,UNKNOWN,/* gather up all the CDATA into a single string */,undetermined
12356,httpd,UNKNOWN,/* initialize to avoid gcc warning */,undetermined
12357,httpd,UNKNOWN,"/* some fast-path cases:
     * 1) zero-length cdata
     * 2) a single piece of cdata with no whitespace to strip
     */",undetermined
12358,httpd,UNKNOWN,/* trim leading whitespace */,undetermined
12359,httpd,UNKNOWN,/* assume: return false for '\0' */,undetermined
12360,httpd,UNKNOWN,/* trim trailing whitespace */,undetermined
12361,httpd,UNKNOWN,"/* this ""should"" not overwrite a prefix mapping */",undetermined
12362,httpd,UNKNOWN,"/* note: this may overwrite an existing URI->prefix mapping, but it
       doesn't matter -- any prefix is usuable to specify the URI. */",undetermined
12363,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Timeout header processing
**
*/",undetermined
12364,httpd,UNKNOWN,"/* dav_get_timeout:  If the Timeout: header exists, return a time_t
 *    when this lock is expected to expire.  Otherwise, return
 *    a time_t of DAV_TIMEOUT_INFINITE.
 *
 *    It's unclear if DAV clients are required to understand
 *    Seconds-xxx and Infinity time values.  We assume that they do.
 *    In addition, for now, that's all we understand, too.
 */",undetermined
12365,httpd,UNKNOWN,"/* Use the first thing we understand, or infinity if
     * we don't understand anything.
     */",undetermined
12366,httpd,UNKNOWN,"/* ### We need to handle overflow better:
             * ### timeout will be <= 2^32 - 1
             */",undetermined
12367,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** If Header processing
**
*/",undetermined
12368,httpd,UNKNOWN,"/* add_if_resource returns a new if_header, linking it to next_ih.
 */",undetermined
12369,httpd,UNKNOWN,"/* add_if_state adds a condition to an if_header.
 */",undetermined
12370,httpd,UNKNOWN,"/* If the state token cannot be parsed, treat it as an
             * unknown state; this will evaluate to ""false"" later
             * during If header validation. */",undetermined
12371,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12372,httpd,UNKNOWN,"/* fetch_next_token returns the substring from str+1
 * to the next occurence of char term, or \0, whichever
 * occurs first.  Leading whitespace is ignored.
 */",undetermined
12373,httpd,UNKNOWN,"/* dav_process_if_header:
 *
 *   If NULL (no error) is returned, then **if_header points to the
 *   ""If"" productions structure (or NULL if ""If"" is not present).
 *
 *   ### this part is bogus:
 *   If an error is encountered, the error is logged.  Parent should
 *   return err->status.
 */",undetermined
12374,httpd,UNKNOWN,/* scope of current production; NULL=no-tag */,undetermined
12375,httpd,UNKNOWN,/* Tagged-list production - following states apply to this uri */,undetermined
12376,httpd,UNKNOWN,"/* 2518 specifies this must be an absolute URI; just take the
             * relative part for later comparison against r->uri */",undetermined
12377,httpd,UNKNOWN,/* note that parsed_uri.path is allocated; we can trash it */,undetermined
12378,httpd,UNKNOWN,/* clean up the URI a bit */,undetermined
12379,httpd,UNKNOWN,/* the resources we will compare to have unencoded paths */,undetermined
12380,httpd,UNKNOWN,/* List production */,undetermined
12381,httpd,UNKNOWN,"/* If a uri has not been encountered, this is a No-Tagged-List */",undetermined
12382,httpd,UNKNOWN,/* ### dav_add_if_resource() should return an error for us! */,undetermined
12383,httpd,UNKNOWN,/* List is the entire production (in a uri scope) */,undetermined
12384,httpd,UNKNOWN,/* ### add a description to this error */,undetermined
12385,httpd,UNKNOWN,/* ### maybe add a higher level description */,undetermined
12386,httpd,UNKNOWN,/* ### add a description to this error */,undetermined
12387,httpd,UNKNOWN,/* ### maybe add a higher level description */,undetermined
12388,httpd,UNKNOWN,"/* given state_list->locktoken, match it */",undetermined
12389,httpd,UNKNOWN,"/*
                ** The resource will have one or more lock tokens. We only
                ** need to match one of them against any token in the
                ** If: header.
                **
                ** One token case: It is an exclusive or shared lock. Either
                **                 way, we must find it.
                **
                ** N token case: They are shared locks. By policy, we need
                **               to match only one. The resource's other
                **               tokens may belong to somebody else (so we
                **               shouldn't see them in the If: header anyway)
                */",undetermined
12390,httpd,UNKNOWN,"/* dav_validate_resource_state:
 *    Returns NULL if path/uri meets if-header and lock requirements
 */",undetermined
12391,httpd,UNKNOWN,"/* DBG1(""validate: <%s>"", resource->uri); */",undetermined
12392,httpd,UNKNOWN,"/*
    ** The resource will have one of three states:
    **
    ** 1) No locks. We have no special requirements that the user supply
    **    specific locktokens. One of the state lists must match, and
    **    we're done.
    **
    ** 2) One exclusive lock. The locktoken must appear *anywhere* in the
    **    If: header. Of course, asserting the token in a ""Not"" term will
    **    quickly fail that state list :-). If the locktoken appears in
    **    one of the state lists *and* one state list matches, then we're
    **    done.
    **
    ** 3) One or more shared locks. One of the locktokens must appear
    **    *anywhere* in the If: header. If one of the locktokens appears,
    **    and we match one state list, then we are done.
    **
    ** The <seen_locktoken> variable determines whether we have seen one
    ** of this resource's locktokens in the If: header.
    */",undetermined
12393,httpd,UNKNOWN,"/*
    ** If this is a new lock request, <flags> will contain the requested
    ** lock scope.  Three rules apply:
    **
    ** 1) Do not require a (shared) locktoken to be seen (when we are
    **    applying another shared lock)
    ** 2) If the scope is exclusive and we see any locks, fail.
    ** 3) If the scope is shared and we see an exclusive lock, fail.
    */",undetermined
12394,httpd,UNKNOWN,/* we're in State 1. no locks. */,undetermined
12395,httpd,UNKNOWN,"/*
        ** ### hrm... we don't need to have these fully
        ** ### resolved since we're only looking at the
        ** ### locktokens...
        **
        ** ### use get_locks w/ calltype=PARTIAL
        */",undetermined
12396,httpd,UNKNOWN,"/* lock_list now determines whether we're in State 1, 2, or 3. */",undetermined
12397,httpd,UNKNOWN,"/*
    ** For a new, exclusive lock: if any locks exist, fail.
    ** For a new, shared lock:    if an exclusive lock exists, fail.
    **                            else, do not require a token to be seen.
    */",undetermined
12398,httpd,UNKNOWN,"/*
        ** There are no locks, so we can pretend that we've already met
        ** any requirement to find the resource's locks in an If: header.
        */",undetermined
12399,httpd,UNKNOWN,"/*
        ** Strictly speaking, we don't need this loop. Either the first
        ** (and only) lock will be EXCLUSIVE, or none of them will be.
        */",undetermined
12400,httpd,UNKNOWN,"/*
        ** The locks on the resource (if any) are all shared. Set the
        ** <seen_locktoken> flag to indicate that we do not need to find
        ** the locks in an If: header.
        */",undetermined
12401,httpd,UNKNOWN,"/*
        ** For methods other than LOCK:
        **
        ** If we have no locks, then <seen_locktoken> can be set to true --
        ** pretending that we've already met the requirement of seeing one
        ** of the resource's locks in the If: header.
        **
        ** Otherwise, it must be cleared and we'll look for one.
        */",undetermined
12402,httpd,UNKNOWN,"/*
    ** If there is no If: header, then we can shortcut some logic:
    **
    ** 1) if we do not need to find a locktoken in the (non-existent) If:
    **    header, then we are successful.
    **
    ** 2) if we must find a locktoken in the (non-existent) If: header, then
    **    we fail.
    */",undetermined
12403,httpd,UNKNOWN,/* the If: header is present */,undetermined
12404,httpd,UNKNOWN,"/*
    ** If a dummy header is present (because of a Lock-Token: header), then
    ** we are required to find that token in this resource's set of locks.
    ** If we have no locks, then we immediately fail.
    **
    ** This is a 400 (Bad Request) since they should only submit a locktoken
    ** that actually exists.
    **
    ** Don't issue this response if we're talking about the parent resource.
    ** It is okay for that resource to NOT have this locktoken.
    ** (in fact, it certainly will not: a dummy_header only occurs for the
    **  UNLOCK method, the parent is checked only for locknull resources,
    **  and the parent certainly does not have the (locknull's) locktoken)
    */",undetermined
12405,httpd,UNKNOWN,"/*
    ** Prepare the input URI. We want the URI to never have a trailing slash.
    **
    ** When URIs are placed into the dav_if_header structure, they are
    ** guaranteed to never have a trailing slash. If the URIs are equivalent,
    ** then it doesn't matter if they both lack a trailing slash -- they're
    ** still equivalent.
    **
    ** Note: we could also ensure that a trailing slash is present on both
    ** URIs, but the majority of URIs provided to us via a resource walk
    ** will not contain that trailing slash.
    */",undetermined
12406,httpd,UNKNOWN,/* get the resource's etag; we may need it during the checks */,undetermined
12407,httpd,UNKNOWN,/* how many state_lists apply to this URI? */,undetermined
12408,httpd,UNKNOWN,"/* If there are if-headers, fail if this resource
     * does not match at least one state_list.
     */",undetermined
12409,httpd,UNKNOWN,"/* DBG2(""uri=<%s>  if_uri=<%s>"", uri, ifhdr_scan->uri ? ifhdr_scan->uri : ""(no uri)""); */",undetermined
12410,httpd,UNKNOWN,"/*
            ** A tagged-list's URI doesn't match this resource's URI.
            ** Skip to the next state_list to see if it will match.
            */",undetermined
12411,httpd,UNKNOWN,/* this state_list applies to this resource */,undetermined
12412,httpd,UNKNOWN,"/*
        ** ### only one state_list should ever apply! a no-tag, or a tagged
        ** ### where S9.4.2 states only one can match.
        **
        ** ### revamp this code to loop thru ifhdr_scan until we find the
        ** ### matching state_list. process it. stop.
        */",undetermined
12413,httpd,UNKNOWN,"/* To succeed, resource must match *all* of the states
         * specified in the state_list.
         */",undetermined
12414,httpd,UNKNOWN,"/* Do a weak entity comparison function as defined in
                 * RFC 2616 13.3.3.
                 */",undetermined
12415,httpd,UNKNOWN,"/*
                    ** The specified entity-tag does not match the
                    ** entity-tag on the resource. This state_list is
                    ** not going to match. Bust outta here.
                    */",undetermined
12416,httpd,UNKNOWN,"/*
                    ** The specified entity-tag DOES match the
                    ** entity-tag on the resource. This state_list is
                    ** not going to match. Bust outta here.
                    */",undetermined
12417,httpd,UNKNOWN,/* the locktoken is definitely not there! (success) */,undetermined
12418,httpd,UNKNOWN,/* condition == DAV_IF_COND_NORMAL */,undetermined
12419,httpd,UNKNOWN,"/*
                    ** If no lockdb is provided, then validation fails for
                    ** this state_list (NORMAL means we were supposed to
                    ** find the token, which we obviously cannot do without
                    ** a lock database).
                    **
                    ** Go and try the next state list.
                    */",undetermined
12420,httpd,UNKNOWN,"/* Resource validation 'fails' if:
                 *    ANY  of the lock->locktokens match
                 *         a NOT state_list->locktoken,
                 * OR
                 *    NONE of the lock->locktokens match
                 *         a NORMAL state_list->locktoken.
                 */",undetermined
12421,httpd,UNKNOWN,"/*
                    DBG2(""compare: rsrc=%s  ifhdr=%s"",
                         (*locks_hooks->format_locktoken)(p, lock->locktoken),
                         (*locks_hooks->format_locktoken)(p, state_list->locktoken));
                    */",undetermined
12422,httpd,UNKNOWN,/* nothing to do if the locktokens do not match. */,undetermined
12423,httpd,UNKNOWN,"/*
                    ** We have now matched up one of the resource's locktokens
                    ** to a locktoken in a State-token in the If: header.
                    ** Note this fact, so that we can pass the overall
                    ** requirement of seeing at least one of the resource's
                    ** locktokens.
                    */",undetermined
12424,httpd,UNKNOWN,"/*
                        ** This state requires that the specified locktoken
                        ** is NOT present on the resource. But we just found
                        ** it. There is no way this state-list can now
                        ** succeed, so go try another one.
                        */",undetermined
12425,httpd,UNKNOWN,/* condition == DAV_IF_COND_NORMAL */,undetermined
12426,httpd,UNKNOWN,"/* Validate auth_user:  If an authenticated user created
                    ** the lock, only the same user may submit that locktoken
                    ** to manipulate a resource.
                    */",undetermined
12427,httpd,UNKNOWN,"/*
                    ** We just matched a specified State-Token to one of the
                    ** resource's locktokens.
                    **
                    ** Break out of the lock scan -- we only needed to find
                    ** one match (actually, there shouldn't be any other
                    ** matches in the lock list).
                    */",undetermined
12428,httpd,UNKNOWN,"/*
                    ** We had a NORMAL state, meaning that we should have
                    ** found the State-Token within the locks on this
                    ** resource. We didn't, so this state_list must fail.
                    */",undetermined
12429,httpd,UNKNOWN,"/* Request is predicated on some unknown state token,
                 * which must be presumed to *not* match, so fail
                 * unless this is a Not condition. */",undetermined
12430,httpd,UNKNOWN,/* switch */,undetermined
12431,httpd,UNKNOWN,/* foreach ( state_list ) */,undetermined
12432,httpd,UNKNOWN,"/*
        ** We've checked every state in this state_list and none of them
        ** have failed. Since all of them succeeded, then we have a matching
        ** state list and we may be done.
        **
        ** The next requirement is that we have seen one of the resource's
        ** locktokens (if any). If we have, then we can just exit. If we
        ** haven't, then we need to keep looking.
        */",undetermined
12433,httpd,UNKNOWN,/* woo hoo! */,undetermined
12434,httpd,UNKNOWN,"/*
        ** Haven't seen one. Let's break out of the search and just look
        ** for a matching locktoken.
        */",undetermined
12435,httpd,UNKNOWN,"/*
        ** This label is used when we detect that a state_list is not
        ** going to match this resource. We bust out and try the next
        ** state_list.
        */",undetermined
12436,httpd,UNKNOWN,/* foreach ( ifhdr_scan ) */,undetermined
12437,httpd,UNKNOWN,"/*
    ** The above loop exits for one of two reasons:
    **   1) a state_list matched and seen_locktoken is false.
    **   2) all if_header structures were scanned, without (1) occurring
    */",undetermined
12438,httpd,UNKNOWN,"/*
        ** We finished the loop without finding any matching state lists.
        */",undetermined
12439,httpd,UNKNOWN,"/*
        ** If none of the state_lists apply to this resource, then we
        ** may have succeeded. Note that this scenario implies a
        ** tagged-list with no matching state_lists. If the If: header
        ** was a no-tag-list, then it would have applied to this resource.
        **
        ** S9.4.2 states that when no state_lists apply, then the header
        ** should be ignored.
        **
        ** If we saw one of the resource's locktokens, then we're done.
        ** If we did not see a locktoken, then we fail.
        */",undetermined
12440,httpd,UNKNOWN,"/*
            ** We may have aborted the scan before seeing the locktoken.
            ** Rescan the If: header to see if we can find the locktoken
            ** somewhere.
            **
            ** Note that seen_locktoken == 0 implies lock_list != NULL
            ** which implies locks_hooks != NULL.
            */",undetermined
12441,httpd,UNKNOWN,"/*
                ** We found a match! We're set... none of the If: header
                ** assertions apply (implicit success), and the If: header
                ** specified the locktoken somewhere. We're done.
                */",undetermined
12442,httpd,UNKNOWN,/* error_id */,undetermined
12443,httpd,UNKNOWN,"/* else: one or more state_lists were applicable, but failed. */",undetermined
12444,httpd,UNKNOWN,"/*
        ** If the dummy_header did not match, then they specified an
        ** incorrect token in the Lock-Token header. Forget whether the
        ** If: statement matched or not... we'll tell them about the
        ** bad Lock-Token first. That is considered a 400 (Bad Request).
        */",undetermined
12445,httpd,UNKNOWN,/* assert seen_locktoken == 0 */,undetermined
12446,httpd,UNKNOWN,"/*
    ** ifhdr_scan != NULL implies we found a matching state_list.
    **
    ** Since we're still here, it also means that we have not yet found
    ** one the resource's locktokens in the If: header.
    **
    ** Scan all the if_headers and states looking for one of this
    ** resource's locktokens. Note that we need to go back and scan them
    ** all -- we may have aborted a scan with a failure before we saw a
    ** matching token.
    **
    ** Note that seen_locktoken == 0 implies lock_list != NULL which implies
    ** locks_hooks != NULL.
    */",undetermined
12447,httpd,UNKNOWN,"/*
        ** We found a match! We're set... we have a matching state list,
        ** and the If: header specified the locktoken somewhere. We're done.
        */",undetermined
12448,httpd,UNKNOWN,"/*
    ** We had a matching state list, but the user agent did not specify one
    ** of this resource's locktokens. Tell them so.
    **
    ** Note that we need to special-case the message on whether a ""dummy""
    ** header exists. If it exists, yet we didn't see a needed locktoken,
    ** then that implies the dummy header (Lock-Token header) did NOT
    ** specify one of this resource's locktokens. (this implies something
    ** in the real If: header matched)
    **
    ** We want to note the 400 (Bad Request) in favor of a 423 (Locked).
    */",undetermined
12449,httpd,UNKNOWN,/* error_id */,undetermined
12450,httpd,UNKNOWN,/* dav_validate_walker:  Walker callback function to validate resource state */,undetermined
12451,httpd,UNKNOWN,"/* There was no error, so just bug out. */",undetermined
12452,httpd,UNKNOWN,"/*
    ** If we have a serious server error, or if the request itself failed,
    ** then just return error (not a multistatus).
    */",undetermined
12453,httpd,UNKNOWN,/* ### maybe push a higher-level description? */,undetermined
12454,httpd,UNKNOWN,/* associate the error with the current URI */,undetermined
12455,httpd,UNKNOWN,/* If-* header checking */,undetermined
12456,httpd,UNKNOWN,"/* If-Match '*' fix. Resource existence not checked by ap_meets_conditions.
     * If-Match '*' request should succeed only if the resource exists. */",undetermined
12457,httpd,UNKNOWN,"/* If-None-Match '*' fix. If-None-Match '*' request should succeed
     * if the resource does not exist. */",undetermined
12458,httpd,UNKNOWN,"/* Note. If if_none_match != NULL, if_none_match is the culprit.
         * Since, in presence of If-None-Match,
         * other If-* headers are undefined. */",undetermined
12459,httpd,UNKNOWN,"/*
** dav_validate_request:  Validate if-headers (and check for locks) on:
**    (1) r->filename @ depth;
**    (2) Parent of r->filename if check_parent == 1
**
** The check of parent should be done when it is necessary to verify that
** the parent collection will accept a new member (ie current resource
** state is null).
**
** Return OK on successful validation.
** On error, return appropriate HTTP_* code, and log error. If a multi-stat
** error is necessary, response will point to it, else NULL.
*/",undetermined
12460,httpd,UNKNOWN,"/*
        ** ### bleck. we can't return errors for other URIs unless we have
        ** ### a ""response"" ptr.
        */",undetermined
12461,httpd,UNKNOWN,/* Set the ETag header required by dav_meets_conditions() */,undetermined
12462,httpd,UNKNOWN,"/* Do the standard checks for conditional requests using
     * If-..-Since, If-Match etc */",undetermined
12463,httpd,UNKNOWN,"/*
         * If we have set an ETag to headers out above for
         * dav_meets_conditions() revert this here as we do not want to set
         * the ETag in responses to requests with methods where this might not
         * be desired.
         */",undetermined
12464,httpd,UNKNOWN,/* always parse (and later process) the If: header */,undetermined
12465,httpd,UNKNOWN,/* ### maybe add higher-level description */,undetermined
12466,httpd,UNKNOWN,"/* If a locktoken was specified, create a dummy if_header with which
     * to validate resources.  In the interim, figure out why DAV uses
     * locktokens in an if-header without a Lock-Token header to refresh
     * locks, but a Lock-Token header without an if-header to remove them.
     */",undetermined
12467,httpd,UNKNOWN,"/*
    ** If necessary, open the lock database (read-only, lazily);
    ** the validation process may need to retrieve or update lock info.
    ** Otherwise, assume provided lockdb is valid and opened rw.
    */",undetermined
12468,httpd,UNKNOWN,/* ### maybe insert higher-level comment */,undetermined
12469,httpd,UNKNOWN,"/* (1) Validate the specified resource, at the specified depth */",undetermined
12470,httpd,UNKNOWN,/* else: implies a 5xx status code occurred. */,undetermined
12471,httpd,UNKNOWN,/* (2) Validate the parent resource if requested */,undetermined
12472,httpd,UNKNOWN,"/*
            ** This error occurred on the parent resource. This implies that
            ** we have to create a multistatus response (to report the error
            ** against a URI other than the Request-URI). ""Convert"" this error
            ** into a multistatus response.
            */",undetermined
12473,httpd,UNKNOWN,/* assert: DAV_VALIDATE_PARENT implies response != NULL */,undetermined
12474,httpd,UNKNOWN,"/*
    ** If we don't have a (serious) error, and we have multistatus responses,
    ** then we need to construct an ""error"". This error will be the overall
    ** status returned, and the multistatus responses will go into its body.
    **
    ** For certain methods, the overall error will be a 424. The default is
    ** to construct a standard 207 response.
    */",undetermined
12475,httpd,UNKNOWN,/* manufacture a 424 error to hold the multistatus response(s) */,undetermined
12476,httpd,UNKNOWN,"/*
        ** Whatever caused the error, the Request-URI should have a 424
        ** associated with it since we cannot complete the method.
        **
        ** For a LOCK operation, insert an empty DAV:lockdiscovery property.
        ** For other methods, return a simple 424.
        */",undetermined
12477,httpd,UNKNOWN,/* create the 424 response */,undetermined
12478,httpd,UNKNOWN,/* manufacture a 207 error for the multistatus response(s) */,undetermined
12479,httpd,UNKNOWN,"/* dav_get_locktoken_list:
 *
 * Sets ltl to a locktoken_list of all positive locktokens in header,
 * else NULL if no If-header, or no positive locktokens.
 */",undetermined
12480,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
12481,httpd,UNKNOWN,/* Begining of the if_state linked list */,undetermined
12482,httpd,UNKNOWN,/* No nodes added */,undetermined
12483,httpd,UNKNOWN,/* not needed right now... */,undetermined
12484,httpd,UNKNOWN,/* trim leading whitespace */,undetermined
12485,httpd,UNKNOWN,/* assume: return false for '\0' */,undetermined
12486,httpd,UNKNOWN,/* trim trailing whitespace */,undetermined
12487,httpd,UNKNOWN,"/* dav_add_vary_header
 *
 * If there were any headers in the request which require a Vary header
 * in the response, add it.
 */",undetermined
12488,httpd,UNKNOWN,"/* ### this is probably all wrong... I think there is a function in
       ### the Apache API to add things to the Vary header. need to check */",undetermined
12489,httpd,UNKNOWN,"/* Only versioning headers require a Vary response header,
     * so only do this check if there is a versioning provider */",undetermined
12490,httpd,UNKNOWN,"/* If Target-Selector specified, add it to the Vary header */",undetermined
12491,httpd,UNKNOWN,"/* dav_can_auto_checkout
 *
 * Determine whether auto-checkout is enabled for a resource.
 * r - the request_rec
 * resource - the resource
 * auto_version - the value of the auto_versionable hook for the resource
 * lockdb - pointer to lock database (opened if necessary)
 * auto_checkout - set to 1 if auto-checkout enabled
 */",undetermined
12492,httpd,UNKNOWN,/* see mod_dav.h for docco */,undetermined
12493,httpd,UNKNOWN,/* Initialize results */,undetermined
12494,httpd,UNKNOWN,"/* if no versioning provider, just return */",undetermined
12495,httpd,UNKNOWN,/* check parent resource if requested or if resource must be created */,undetermined
12496,httpd,UNKNOWN,"/* if parent versioned and not checked out, see if it can be */",undetermined
12497,httpd,UNKNOWN,"/* Try to checkout the parent collection.
             * Note that auto-versioning can only be applied to a version selector,
             * so no separate working resource will be created.
             */",undetermined
12498,httpd,UNKNOWN,/*auto_checkout*/,undetermined
12499,httpd,UNKNOWN,/* remember that parent was checked out */,undetermined
12500,httpd,UNKNOWN,"/* if only checking parent, we're done */",undetermined
12501,httpd,UNKNOWN,"/* if creating a new resource, see if it should be version-controlled */",undetermined
12502,httpd,UNKNOWN,/* remember that resource was created */,undetermined
12503,httpd,UNKNOWN,"/* if resource is versioned, make sure it is checked out */",undetermined
12504,httpd,UNKNOWN,"/* Auto-versioning can only be applied to version selectors, so
         * no separate working resource will be created. */",undetermined
12505,httpd,UNKNOWN,/*auto_checkout*/,undetermined
12506,httpd,UNKNOWN,/* remember that resource was checked out */,undetermined
12507,httpd,UNKNOWN,/* make sure lock database is closed */,undetermined
12508,httpd,UNKNOWN,"/* if an error occurred, undo any auto-versioning operations already done */",undetermined
12509,httpd,UNKNOWN,/*undo*/,undetermined
12510,httpd,UNKNOWN,/*unlock*/,undetermined
12511,httpd,UNKNOWN,/* see mod_dav.h for docco */,undetermined
12512,httpd,UNKNOWN,"/* If no versioning provider, this is a no-op */",undetermined
12513,httpd,UNKNOWN,"/* If undoing auto-checkouts, then do uncheckouts */",undetermined
12514,httpd,UNKNOWN,/* ### should we do anything with the response? */,undetermined
12515,httpd,UNKNOWN,"/* If the resource was checked out, and auto-checkin is enabled,
     * then check it in.
     */",undetermined
12516,httpd,UNKNOWN,/*keep_checked_out*/,undetermined
12517,httpd,UNKNOWN,"/* If parent resource was checked out, and auto-checkin is enabled,
     * then check it in.
     */",undetermined
12518,httpd,UNKNOWN,/*keep_checked_out*/,undetermined
12519,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12520,httpd,UNKNOWN,"/*
** DAV repository-independent lock functions
*/",undetermined
12521,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Property-related lock functions
**
*/",undetermined
12522,httpd,UNKNOWN,"/*
** dav_lock_get_activelock:  Returns a <lockdiscovery> containing
**    an activelock element for every item in the lock_discovery tree
*/",undetermined
12523,httpd,UNKNOWN,"/* If no locks or no lock provider, there are no locks */",undetermined
12524,httpd,UNKNOWN,"/*
        ** Since resourcediscovery is defined with (activelock)*,
        ** <D:activelock/> shouldn't be necessary for an empty lock.
        */",undetermined
12525,httpd,UNKNOWN,"/*
    ** Note: it could be interesting to sum the lengths of the owners
    **       and locktokens during this loop. However, the buffer
    **       mechanism provides some rough padding so that we don't
    **       really need to have an exact size. Further, constructing
    **       locktoken strings could be relatively expensive.
    */",undetermined
12526,httpd,UNKNOWN,"/* if a buffer was not provided, then use an internal buffer */",undetermined
12527,httpd,UNKNOWN,/* reset the length before we start appending stuff */,undetermined
12528,httpd,UNKNOWN,"/* prep the buffer with a ""good"" size */",undetermined
12529,httpd,UNKNOWN,/* ### crap. design error */,undetermined
12530,httpd,UNKNOWN,/* ### internal error. log something? */,undetermined
12531,httpd,UNKNOWN,/* ### internal error. log something? */,undetermined
12532,httpd,UNKNOWN,"/*
            ** This contains a complete, self-contained <DAV:owner> element,
            ** with namespace declarations and xml:lang handling. Just drop
            ** it in.
            */",undetermined
12533,httpd,UNKNOWN,"/*
** dav_lock_parse_lockinfo:  Validates the given xml_doc to contain a
**    lockinfo XML element, then populates a dav_lock structure
**    with its contents.
*/",undetermined
12534,httpd,UNKNOWN,/* Parse elements in the XML body */,undetermined
12535,httpd,UNKNOWN,/* quote all the values in the <DAV:owner> element */,undetermined
12536,httpd,UNKNOWN,"/*
            ** Store a full <DAV:owner> element with namespace definitions
            ** and an xml:lang definition, if applicable.
            */",undetermined
12537,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** General lock functions
**
*/",undetermined
12538,httpd,UNKNOWN,/* dav_lock_walker:  Walker callback function to record indirect locks */,undetermined
12539,httpd,UNKNOWN,/* We don't want to set indirects on the target */,undetermined
12540,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
12541,httpd,UNKNOWN,/* add to the multistatus response */,undetermined
12542,httpd,UNKNOWN,"/*
        ** ### actually, this is probably wrong: we want to fail the whole
        ** ### LOCK process if something goes bad. maybe the caller should
        ** ### do a dav_unlock() (e.g. a rollback) if any errors occurred.
        */",undetermined
12543,httpd,UNKNOWN,"/*
** dav_add_lock:  Add a direct lock for resource, and indirect locks for
**    all children, bounded by depth.
**    ### assume request only contains one lock
*/",undetermined
12544,httpd,UNKNOWN,"/* Requested lock can be:
     *   Depth: 0   for null resource, existing resource, or existing collection
     *   Depth: Inf for existing collection
     */",undetermined
12545,httpd,UNKNOWN,"/*
    ** 2518 9.2 says to ignore depth if target is not a collection (it has
    **   no internal children); pretend the client gave the correct depth.
    */",undetermined
12546,httpd,UNKNOWN,"/* In all cases, first add direct entry in lockdb */",undetermined
12547,httpd,UNKNOWN,"/*
    ** Append the new (direct) lock to the resource's existing locks.
    **
    ** Note: this also handles locknull resources
    */",undetermined
12548,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12549,httpd,UNKNOWN,/* Walk existing collection and set indirect locks */,undetermined
12550,httpd,UNKNOWN,/* implies a 5xx status code occurred. screw the multistatus */,undetermined
12551,httpd,UNKNOWN,/* manufacture a 207 error for the multistatus response */,undetermined
12552,httpd,UNKNOWN,"/*
** dav_lock_query:  Opens the lock database. Returns a linked list of
**    dav_lock structures for all direct locks on path.
*/",undetermined
12553,httpd,UNKNOWN,"/* If no lock database, return empty result */",undetermined
12554,httpd,UNKNOWN,/* ### insert a higher-level description? */,undetermined
12555,httpd,UNKNOWN,/* dav_unlock_walker:  Walker callback function to remove indirect locks */,undetermined
12556,httpd,UNKNOWN,"/* Before removing the lock, do any auto-checkin required */",undetermined
12557,httpd,UNKNOWN,/* ### get rid of this typecast */,undetermined
12558,httpd,UNKNOWN,/*undo*/,undetermined
12559,httpd,UNKNOWN,/*unlock*/,undetermined
12560,httpd,UNKNOWN,/* ### should we stop or return a multistatus? looks like STOP */,undetermined
12561,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
12562,httpd,UNKNOWN,"/*
** dav_get_direct_resource:
**
** Find a lock on the specified resource, then return the resource the
** lock was applied to (in other words, given a (possibly) indirect lock,
** return the direct lock's corresponding resource).
**
** If the lock is an indirect lock, this usually means traversing up the
** namespace [repository] hierarchy. Note that some lock providers may be
** able to return this information with a traversal.
*/",undetermined
12563,httpd,UNKNOWN,"/* Find the top of this lock-
     * If r->filename's direct   locks include locktoken, use r->filename.
     * If r->filename's indirect locks include locktoken, retry r->filename/..
     * Else fail.
     */",undetermined
12564,httpd,UNKNOWN,"/*
        ** Find the lock specified by <locktoken> on <resource>. If it is
        ** an indirect lock, then partial results are okay. We're just
        ** trying to find the thing and know whether it is a direct or
        ** an indirect lock.
        */",undetermined
12565,httpd,UNKNOWN,/* ### add a higher-level desc? */,undetermined
12566,httpd,UNKNOWN,/* not found! that's an error. */,undetermined
12567,httpd,UNKNOWN,/* we found the direct lock. return this resource. */,undetermined
12568,httpd,UNKNOWN,/* the lock was indirect. move up a level in the URL namespace */,undetermined
12569,httpd,UNKNOWN,/* ### add a higher-level desc? */,undetermined
12570,httpd,UNKNOWN,"/*
** dav_unlock:  Removes all direct and indirect locks for r->filename,
**    with given locktoken.  If locktoken == null_locktoken, all locks
**    are removed.  If r->filename represents an indirect lock,
**    we must unlock the appropriate direct lock.
**    Returns OK or appropriate HTTP_* response and logs any errors.
**
** ### We've already crawled the tree to ensure everything was locked
**     by us; there should be no need to incorporate a rollback.
*/",undetermined
12571,httpd,UNKNOWN,"/* If no locks provider, then there is nothing to unlock. */",undetermined
12572,httpd,UNKNOWN,"/* 2518 requires the entire lock to be removed if resource/locktoken
     * point to an indirect lock.  We need resource of the _direct_
     * lock in order to walk down the tree and remove the locks.  So,
     * If locktoken != null_locktoken,
     *    Walk up the resource hierarchy until we see a direct lock.
     *    Or, we could get the direct lock's db/key, pick out the URL
     *    and do a subrequest.  I think walking up is faster and will work
     *    all the time.
     * Else
     *    Just start removing all locks at and below resource.
     */",undetermined
12573,httpd,UNKNOWN,/* ### return err! maybe add a higher-level desc */,undetermined
12574,httpd,UNKNOWN,/* ### map result to something nice; log an error */,undetermined
12575,httpd,UNKNOWN,/* ### add a higher-level desc? */,undetermined
12576,httpd,UNKNOWN,/* ### should return err! */,undetermined
12577,httpd,UNKNOWN,"/* At this point, lock_resource/locktoken refers to a direct lock (key), ie
     * the root of a depth > 0 lock, or locktoken is null.
     */",undetermined
12578,httpd,UNKNOWN,/* ### fix this! */,undetermined
12579,httpd,UNKNOWN,/* ### do something with multi_status */,undetermined
12580,httpd,UNKNOWN,/* dav_inherit_walker:  Walker callback function to inherit locks */,undetermined
12581,httpd,UNKNOWN,/* ### maybe add a higher-level desc */,undetermined
12582,httpd,UNKNOWN,"/*
** dav_inherit_locks:  When a resource or collection is added to a collection,
**    locks on the collection should be inherited to the resource/collection.
**    (MOVE, MKCOL, etc) Here we propagate any direct or indirect locks from
**    parent of resource to resource and below.
*/",undetermined
12583,httpd,UNKNOWN,/* ### add a higher-level desc? */,undetermined
12584,httpd,UNKNOWN,/* ### map result to something nice; log an error */,undetermined
12585,httpd,UNKNOWN,/* ### maybe add a higher-level desc */,undetermined
12586,httpd,UNKNOWN,"/* No locks to propagate, just return */",undetermined
12587,httpd,UNKNOWN,"/*
    ** (1) Copy all indirect locks from our parent;
    ** (2) Create indirect locks for the depth infinity, direct locks
    **     in our parent.
    **
    ** The append_locks call in the walker callback will do the indirect
    ** conversion, but we need to remove any direct locks that are NOT
    ** depth ""infinity"".
    */",undetermined
12588,httpd,UNKNOWN,/* <locks> has all our new locks.  Walk down and propagate them. */,undetermined
12589,httpd,UNKNOWN,/* ### do something with multi_status */,undetermined
12590,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Functions dealing with lock-null resources
**
*/",undetermined
12591,httpd,UNKNOWN,"/*
** dav_get_resource_state:  Returns the state of the resource
**    r->filename:  DAV_RESOURCE_NULL, DAV_RESOURCE_LOCK_NULL,
**    or DAV_RESOURCE_EXIST.
**
**    Returns DAV_RESOURCE_ERROR if an error occurs.
*/",undetermined
12592,httpd,UNKNOWN,"/*
        ** A locknull resource has the form:
        **
        **   known-dir ""/"" locknull-file
        **
        ** It would be nice to look into <resource> to verify this form,
        ** but it does not have enough information for us. Instead, we
        ** can look at the path_info. If the form does not match, then
        ** there is no way we could have a locknull resource -- it must
        ** be a plain, null resource.
        **
        ** Apache sets r->filename to known-dir/unknown-file and r->path_info
        ** to """" for the ""proper"" case. If anything is in path_info, then
        ** it can't be a locknull resource.
        **
        ** ### I bet this path_info hack doesn't work for repositories.
        ** ### Need input from repository implementors! What kind of
        ** ### restructure do we need? New provider APIs?
        */",undetermined
12593,httpd,UNKNOWN,/* note that we might see some expired locks... *shrug* */,undetermined
12594,httpd,UNKNOWN,/* ### don't log an error. return err. add higher-level desc. */,undetermined
12595,httpd,UNKNOWN,"/*
        ** The resource is no longer a locknull resource. This will remove
        ** the special marker.
        **
        ** Note that a locknull resource has already inherited all of the
        ** locks from the parent. We do not need to call dav_inherit_locks.
        **
        ** NOTE: some lock providers record locks for locknull resources using
        **       a different key than for regular resources. this will shift
        **       the lock information between the two key types.
        */",undetermined
12596,httpd,UNKNOWN,"/*
        ** There are resources under this one, which are new. We must
        ** propagate the locks down to the new resources.
        */",undetermined
12597,httpd,UNKNOWN,/* ### add a higher level desc? */,undetermined
12598,httpd,UNKNOWN,"/* ### should pass depth to dav_inherit_locks so that it can
        ** ### optimize for the depth==0 case.
        */",undetermined
12599,httpd,UNKNOWN,/* this resource should inherit locks from its parent */,undetermined
12600,httpd,UNKNOWN,/* else the resource already exists and its locks are correct. */,undetermined
12601,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12602,httpd,UNKNOWN,"/*
 * Generic DAV lock implementation that a DAV provider can use.
 */",undetermined
12603,httpd,UNKNOWN,"/* ---------------------------------------------------------------
 *
 * Lock database primitives
 *
 */",undetermined
12604,httpd,UNKNOWN,"/*
 * LOCK DATABASES
 *
 * Lockdiscovery information is stored in the single lock database specified
 * by the DAVGenericLockDB directive.  Information about this db is stored in
 * the per-dir configuration.
 *
 * KEY
 *
 * The database is keyed by a key_type unsigned char (DAV_TYPE_FNAME)
 * followed by full path.
 *
 * VALUE
 *
 * The value consists of a list of elements.
 *    DIRECT LOCK:     [char      (DAV_LOCK_DIRECT),
 *                      char      (dav_lock_scope),
 *                      char      (dav_lock_type),
 *                      int        depth,
 *                      time_t     expires,
 *                      apr_uuid_t locktoken,
 *                      char[]     owner,
 *                      char[]     auth_user]
 *
 *    INDIRECT LOCK:   [char      (DAV_LOCK_INDIRECT),
 *                      apr_uuid_t locktoken,
 *                      time_t     expires,
 *                      int        key_size,
 *                      char[]     key]
 *       The key is to the collection lock that resulted in this indirect lock
 */",undetermined
12605,httpd,UNKNOWN,/* Stored lock_discovery prefix */,undetermined
12606,httpd,UNKNOWN,/* Use the opaquelock scheme for locktokens */,undetermined
12607,httpd,UNKNOWN,"/* #################################################################
 * ### keep these structures (internal) or move fully to dav_lock?
 */",undetermined
12608,httpd,UNKNOWN,"/*
 * We need to reliably size the fixed-length portion of
 * dav_lock_discovery; best to separate it into another
 * struct for a convenient sizeof, unless we pack lock_discovery.
 */",undetermined
12609,httpd,UNKNOWN,/* owner field from activelock */,undetermined
12610,httpd,UNKNOWN,/* authenticated user who created the lock */,undetermined
12611,httpd,UNKNOWN,"/* Indirect locks represent locks inherited from containing collections.
 * They reference the lock token for the collection the lock is
 * inherited from. A lock provider may also define a key to the
 * inherited lock, for fast datbase lookup. The key is opaque outside
 * the lock provider.
 */",undetermined
12612,httpd,UNKNOWN,/* ################################################################# */,undetermined
12613,httpd,UNKNOWN,"/*
 * Stored direct lock info - full lock_discovery length:
 * prefix + Fixed length + lock token + 2 strings + 2 nulls (one for each
 * string)
 */",undetermined
12614,httpd,UNKNOWN,/* Stored indirect lock info - lock token and apr_datum_t */,undetermined
12615,httpd,UNKNOWN,"/*
 * The lockdb structure.
 *
 * The <db> field may be NULL, meaning one of two things:
 * 1) That we have not actually opened the underlying database (yet). The
 *    <opened> field should be false.
 * 2) We opened it readonly and it wasn't present.
 *
 * The delayed opening (determined by <opened>) makes creating a lockdb
 * quick, while deferring the underlying I/O until it is actually required.
 *
 * We export the notion of a lockdb, but hide the details of it. Most
 * implementations will use a database of some kind, but it is certainly
 * possible that alternatives could be used.
 */",undetermined
12616,httpd,UNKNOWN,/* for accessing the uuid state */,undetermined
12617,httpd,UNKNOWN,/* a pool to use */,undetermined
12618,httpd,UNKNOWN,/* where is the lock database? */,undetermined
12619,httpd,UNKNOWN,/* we opened the database */,undetermined
12620,httpd,UNKNOWN,"/* if non-NULL, the lock database */",undetermined
12621,httpd,UNKNOWN,"/*
 * The private part of the lock structure.
 */",undetermined
12622,httpd,UNKNOWN,/* key into the lock database */,undetermined
12623,httpd,UNKNOWN,"/*
 * This must be forward-declared so the open_lockdb function can use it.
 */",undetermined
12624,httpd,UNKNOWN,/* There might not be a <db> if we had problems creating it. */,undetermined
12625,httpd,UNKNOWN,/* internal function for creating locks */,undetermined
12626,httpd,UNKNOWN,"/*
 * dav_generic_parse_locktoken
 *
 * Parse an opaquelocktoken URI into a locktoken.
 */",undetermined
12627,httpd,UNKNOWN,"/*
 * dav_generic_format_locktoken
 *
 * Generate the URI for a locktoken
 */",undetermined
12628,httpd,UNKNOWN,"/*
 * dav_generic_compare_locktoken
 *
 * Determine whether two locktokens are the same
 */",undetermined
12629,httpd,UNKNOWN,"/*
 * dav_generic_really_open_lockdb:
 *
 * If the database hasn't been opened yet, then open the thing.
 */",undetermined
12630,httpd,UNKNOWN,/* all right. it is opened now. */,undetermined
12631,httpd,UNKNOWN,"/*
 * dav_generic_open_lockdb:
 *
 * ""open"" the lock database, as specified in the global server configuration.
 * If force is TRUE, then the database is opened now, rather than lazily.
 *
 * Note that only one can be open read/write.
 */",undetermined
12632,httpd,UNKNOWN,/* done initializing. return it. */,undetermined
12633,httpd,UNKNOWN,/* ### add a higher-level comment? */,undetermined
12634,httpd,UNKNOWN,"/*
 * dav_generic_close_lockdb:
 *
 * Close it. Duh.
 */",undetermined
12635,httpd,UNKNOWN,"/*
 * dav_generic_build_key
 *
 * Given a pathname, build a DAV_TYPE_FNAME lock database key.
 */",undetermined
12636,httpd,UNKNOWN,/* ### does this allocation have a proper lifetime? need to check */,undetermined
12637,httpd,UNKNOWN,/* ### can we use a buffer for this? */,undetermined
12638,httpd,UNKNOWN,/* size is TYPE + pathname + null */,undetermined
12639,httpd,UNKNOWN,"/*
 * dav_generic_lock_expired:  return 1 (true) if the given timeout is in the
 *    past or present (the lock has expired), or 0 (false) if in the future
 *    (the lock has not yet expired).
 */",undetermined
12640,httpd,UNKNOWN,"/*
 * dav_generic_save_lock_record:  Saves the lock information specified in the
 *    direct and indirect lock lists about path into the lock database.
 *    If direct and indirect == NULL, the key is removed.
 */",undetermined
12641,httpd,UNKNOWN,/* ### add a higher-level error? */,undetermined
12642,httpd,UNKNOWN,"/* If nothing to save, delete key */",undetermined
12643,httpd,UNKNOWN,/* don't fail if the key is not present */,undetermined
12644,httpd,UNKNOWN,/* ### but what about other errors? */,undetermined
12645,httpd,UNKNOWN,/* ### can this be apr_palloc() ? */,undetermined
12646,httpd,UNKNOWN,/* ### hmmm.... investigate the use of a buffer here */,undetermined
12647,httpd,UNKNOWN,/* Direct lock - lock_discovery struct follows */,undetermined
12648,httpd,UNKNOWN,/* Fixed portion of struct */,undetermined
12649,httpd,UNKNOWN,/* Indirect lock prefix */,undetermined
12650,httpd,UNKNOWN,/* ### more details? add an error_id? */,undetermined
12651,httpd,UNKNOWN,"/*
 * dav_load_lock_record:  Reads lock information about key from lock db;
 *    creates linked lists of the direct and indirect locks.
 *
 *    If add_method = DAV_APPEND_LIST, the result will be appended to the
 *    head of the direct and indirect lists supplied.
 *
 *    Passive lock removal:  If lock has timed out, it will not be returned.
 *    ### How much ""logging"" does RFC 2518 require?
 */",undetermined
12652,httpd,UNKNOWN,/* ### add a higher-level error? */,undetermined
12653,httpd,UNKNOWN,"/*
     * If we opened readonly and the db wasn't there, then there are no
     * locks for this resource. Just exit.
     */",undetermined
12654,httpd,UNKNOWN,/* Create and fill a dav_lock_discovery structure */,undetermined
12655,httpd,UNKNOWN,/* Copy the dav_lock_discovery_fixed portion */,undetermined
12656,httpd,UNKNOWN,/* Copy the lock token. */,undetermined
12657,httpd,UNKNOWN,/* Do we have an owner field? */,undetermined
12658,httpd,UNKNOWN,/* Create and fill a dav_lock_indirect structure */,undetermined
12659,httpd,UNKNOWN,/* length of datum */,undetermined
12660,httpd,UNKNOWN,/* ### should use a computed_desc and insert corrupt token data */,undetermined
12661,httpd,UNKNOWN,/* Clean up this record if we found expired locks */,undetermined
12662,httpd,UNKNOWN,"/*
     * ### shouldn't do this if we've been opened READONLY. elide the
     * ### timed-out locks from the response, but don't save that info back
     */",undetermined
12663,httpd,UNKNOWN,"/* resolve <indirect>, returning <*direct> */",undetermined
12664,httpd,UNKNOWN,/* ### insert a higher-level description? */,undetermined
12665,httpd,UNKNOWN,/* No match found (but we should have found one!) */,undetermined
12666,httpd,UNKNOWN,/* ### use a different description and/or error ID? */,undetermined
12667,httpd,UNKNOWN,"/* ---------------------------------------------------------------
 *
 * Property-related lock functions
 *
 */",undetermined
12668,httpd,UNKNOWN,"/*
 * dav_generic_get_supportedlock:  Returns a static string for all
 *    supportedlock properties. I think we save more returning a static string
 *    than constructing it every time, though it might look cleaner.
 */",undetermined
12669,httpd,UNKNOWN,"/* ---------------------------------------------------------------
 *
 * General lock functions
 *
 */",undetermined
12670,httpd,UNKNOWN,/* We don't need to do anything. */,undetermined
12671,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12672,httpd,UNKNOWN,/* copy all direct locks to the result list */,undetermined
12673,httpd,UNKNOWN,/* hook into the result list */,undetermined
12674,httpd,UNKNOWN,/* copy all the indirect locks to the result list. resolve as needed. */,undetermined
12675,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12676,httpd,UNKNOWN,/* DAV_GETLOCKS_PARTIAL */,undetermined
12677,httpd,UNKNOWN,/* hook into the result list */,undetermined
12678,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12679,httpd,UNKNOWN,/* ### nobody uses the resolving right now! */,undetermined
12680,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12681,httpd,UNKNOWN,/* ### insert a higher-level error description */,undetermined
12682,httpd,UNKNOWN,"/*
     * If we opened readonly and the db wasn't there, then there are no
     * locks for this resource. Just exit.
     */",undetermined
12683,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12684,httpd,UNKNOWN,"/*
     * ### when we store the lock more directly, we need to update
     * ### lock->rectype and lock->is_locknull
     */",undetermined
12685,httpd,UNKNOWN,/* ### this works for any <lock> rectype */,undetermined
12686,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12687,httpd,UNKNOWN,/* create and link in the right kind of lock */,undetermined
12688,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12689,httpd,UNKNOWN,/* DAV_LOCKREC_INDIRECT(_PARTIAL) */,undetermined
12690,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12691,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12692,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12693,httpd,UNKNOWN,"/* save the modified locks, or remove all locks (dh=ih=NULL). */",undetermined
12694,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12695,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12696,httpd,UNKNOWN,/* ### we should be refreshing direct AND (resolved) indirect locks! */,undetermined
12697,httpd,UNKNOWN,/* refresh all of the direct locks on this resource */,undetermined
12698,httpd,UNKNOWN,/* the lock was refreshed. return the lock. */,undetermined
12699,httpd,UNKNOWN,"/* if we refreshed any locks, then save them back. */",undetermined
12700,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12701,httpd,UNKNOWN,"/* for each indirect lock, find its direct lock and refresh it. */",undetermined
12702,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12703,httpd,UNKNOWN,/* the lock was refreshed. return the lock. */,undetermined
12704,httpd,UNKNOWN,/* save the (resolved) direct lock back */,undetermined
12705,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12706,httpd,UNKNOWN,/* lookup_resource */,undetermined
12707,httpd,UNKNOWN,/* ctx */,undetermined
12708,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12709,httpd,UNKNOWN,"/**
 * @file  locks.h
 * @brief Declarations for the generic lock implementation
 *
 * @addtogroup MOD_DAV
 * @{
 */",undetermined
12710,httpd,UNKNOWN,/* where is the lock database located? */,undetermined
12711,httpd,UNKNOWN,/* _DAV_LOCK_LOCKS_H_ */,undetermined
12712,httpd,UNKNOWN,/** @} */,undetermined
12713,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12714,httpd,UNKNOWN,/* per-dir configuration */,undetermined
12715,httpd,UNKNOWN,"/*
 * Command handler for the DAVGenericLockDB directive, which is TAKE1
 */",undetermined
12716,httpd,UNKNOWN,/* per server */,undetermined
12717,httpd,UNKNOWN,/* dir config creater */,undetermined
12718,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
12719,httpd,UNKNOWN,/* server config */,undetermined
12720,httpd,UNKNOWN,/* merge server config */,undetermined
12721,httpd,UNKNOWN,/* command table */,undetermined
12722,httpd,UNKNOWN,/* register hooks */,undetermined
12723,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12724,httpd,UNKNOWN,"/*
** DAV extension module for Apache 2.0.*
**  - Database support using DBM-style databases,
**    part of the filesystem repository implementation
*/",undetermined
12725,httpd,UNKNOWN,"/*
** This implementation uses a SDBM database per file and directory to
** record the properties. These databases are kept in a subdirectory (of
** the directory in question or the directory that holds the file in
** question) named by the macro DAV_FS_STATE_DIR (.DAV). The filename of the
** database is equivalent to the target filename, and is
** DAV_FS_STATE_FILE_FOR_DIR (.state_for_dir) for the directory itself.
*/",undetermined
12726,httpd,UNKNOWN,/* for ntohs and htons */,undetermined
12727,httpd,UNKNOWN,/* for ap_server_conf */,undetermined
12728,httpd,UNKNOWN,/* when used as a property database: */,undetermined
12729,httpd,UNKNOWN,/* *minor* version of this db */,undetermined
12730,httpd,UNKNOWN,/* table of namespace URIs */,undetermined
12731,httpd,UNKNOWN,/* number of entries in table */,undetermined
12732,httpd,UNKNOWN,/* ns_table was modified */,undetermined
12733,httpd,UNKNOWN,/* map URIs to (1-based) table indices */,undetermined
12734,httpd,UNKNOWN,/* work buffer for dav_gdbm_key */,undetermined
12735,httpd,UNKNOWN,/* iteration key */,undetermined
12736,httpd,UNKNOWN,"/* -------------------------------------------------------------------------
 *
 * GENERIC DBM ACCESS
 *
 * For the most part, this just uses the APR DBM functions. They are wrapped
 * a bit with some error handling (using the mod_dav error functions).
 */",undetermined
12737,httpd,UNKNOWN,/* There might not be a <db> if we had problems creating it. */,undetermined
12738,httpd,UNKNOWN,/* ensure that our state subdirectory is present */,undetermined
12739,httpd,UNKNOWN,/* ### does this belong here or in dav_fs_repos.c ?? */,undetermined
12740,httpd,UNKNOWN,/* ### do we need to deal with the umask? */,undetermined
12741,httpd,UNKNOWN,"/* just try to make it, ignoring any resulting errors */",undetermined
12742,httpd,UNKNOWN,"/* dav_dbm_open_direct:  Opens a *dbm database specified by path.
 *    ro = boolean read-only flag.
 */",undetermined
12743,httpd,UNKNOWN,/* ### do something with 'status' */,undetermined
12744,httpd,UNKNOWN,"/* we can't continue if we couldn't open the file
           and we need to write */",undetermined
12745,httpd,UNKNOWN,/* may be NULL if we tried to open a non-existent db as read-only */,undetermined
12746,httpd,UNKNOWN,/* we have an open database... return it */,undetermined
12747,httpd,UNKNOWN,/* Get directory and filename for resource */,undetermined
12748,httpd,UNKNOWN,/* ### should test this result value... */,undetermined
12749,httpd,UNKNOWN,"/* If not opening read-only, ensure the state dir exists */",undetermined
12750,httpd,UNKNOWN,/* ### what are the perf implications of always checking this? */,undetermined
12751,httpd,UNKNOWN,"/* ### readers cannot open while a writer has this open; we should
       ### perform a few retries with random pauses. */",undetermined
12752,httpd,UNKNOWN,/* ### do we need to deal with the umask? */,undetermined
12753,httpd,UNKNOWN,/* no key could be created (namespace not known) => no value */,undetermined
12754,httpd,UNKNOWN,"/* -------------------------------------------------------------------------
 *
 * PROPERTY DATABASE FUNCTIONS
 */",undetermined
12755,httpd,UNKNOWN,"/*
    ** V4 -- 0.9.9 ..
    **       Prior versions could have keys or values with invalid
    **       namespace prefixes as a result of the xmlns="""" form not
    **       resetting the default namespace to be ""no namespace"". The
    **       namespace would be set to """" which is invalid; it should
    **       be set to ""no namespace"".
    **
    ** V3 -- 0.9.8
    **       Prior versions could have values with invalid namespace
    **       prefixes due to an incorrect mapping of input to propdb
    **       namespace indices. Version bumped to obsolete the old
    **       values.
    **
    ** V2 -- 0.9.7
    **       This introduced the xml:lang value into the property value's
    **       record in the propdb.
    **
    ** V1 -- .. 0.9.6
    **       Initial version.
    */",undetermined
12756,httpd,UNKNOWN,"/*
** Internal function to build a key
**
** WARNING: returns a pointer to a ""static"" buffer holding the key. The
**          value must be copied or no longer used if this function is
**          called again.
*/",undetermined
12757,httpd,UNKNOWN,"/*
     * Convert namespace ID to a string. ""no namespace"" is an empty string,
     * so the keys will have the form "":name"". Otherwise, the keys will
     * have the form ""#:name"".
     */",undetermined
12758,httpd,UNKNOWN,/* the namespace was not found(!) */,undetermined
12759,httpd,UNKNOWN,/* zeroed */,undetermined
12760,httpd,UNKNOWN,/* assemble: #:name */,undetermined
12761,httpd,UNKNOWN,/* build the database key */,undetermined
12762,httpd,UNKNOWN,/* skip past the xml:lang value */,undetermined
12763,httpd,UNKNOWN,/* the property is an empty value */,undetermined
12764,httpd,UNKNOWN,"/* ""no namespace"" case */",undetermined
12765,httpd,UNKNOWN,"/* ""no namespace"" case */",undetermined
12766,httpd,UNKNOWN,"/* ""no namespace"" case */",undetermined
12767,httpd,UNKNOWN,"/*
    ** Return if an error occurred, or there is no database.
    **
    ** NOTE: db could be NULL if we attempted to open a readonly
    **       database that doesn't exist. If we require read/write
    **       access, then a database was created and opened.
    */",undetermined
12768,httpd,UNKNOWN,/* ### push a higher-level description? */,undetermined
12769,httpd,UNKNOWN,"/*
        ** If there is no METADATA key, then the database may be
        ** from versions 0.9.0 .. 0.9.4 (which would be incompatible).
        ** These can be identified by the presence of an NS_TABLE entry.
        */",undetermined
12770,httpd,UNKNOWN,/* call it a major version error */,undetermined
12771,httpd,UNKNOWN,/* initialize a new metadata structure */,undetermined
12772,httpd,UNKNOWN,/* create db->uri_index */,undetermined
12773,httpd,UNKNOWN,"/* we must copy the key, in case ns_table.buf moves */",undetermined
12774,httpd,UNKNOWN,/* fill in the metadata that we store into the prop db. */,undetermined
12775,httpd,UNKNOWN,/* ### keep current minor version? */,undetermined
12776,httpd,UNKNOWN,"/* within the prop values, we use ""ns%d"" for prefixes... register them */",undetermined
12777,httpd,UNKNOWN,"/* Empty URIs signify the empty namespace. These do not get a
           namespace prefix. when we generate the value, we will simply
           leave off the prefix, which is defined by mod_dav to be the
           empty namespace. */",undetermined
12778,httpd,UNKNOWN,"/* ns_table.buf can move, so copy its value (we want the values to
           last as long as the provided dav_xmlns_info). */",undetermined
12779,httpd,UNKNOWN,"/*
    ** Iterate over the provided namespaces. If a namespace already appears
    ** in our internal map of URI -> ns_id, then store that in the map. If
    ** we don't know the namespace yet, then add it to the map and to our
    ** table of known namespaces.
    */",undetermined
12780,httpd,UNKNOWN,"/* copy the uri in case the passed-in namespaces changes in
               some way. */",undetermined
12781,httpd,UNKNOWN,/* Note: mapping->ns_map was set up in dav_propdb_map_namespaces() */,undetermined
12782,httpd,UNKNOWN,/* ### use a db- subpool for these values? clear on exit? */,undetermined
12783,httpd,UNKNOWN,/* quote all the values in the element */,undetermined
12784,httpd,UNKNOWN,/* ### be nice to do this without affecting the element itself */,undetermined
12785,httpd,UNKNOWN,"/* ### of course, the cast indicates Badness is occurring here */",undetermined
12786,httpd,UNKNOWN,/* generate a text blob for the xml:lang plus the contents */,undetermined
12787,httpd,UNKNOWN,"/* free the previous key. note: if the loop is aborted, then the DBM
       will toss the key (via pool cleanup) */",undetermined
12788,httpd,UNKNOWN,/* skip past the METADATA key */,undetermined
12789,httpd,UNKNOWN,/* skip past the METADATA key */,undetermined
12790,httpd,UNKNOWN,"/* no rollback, nothing to do */",undetermined
12791,httpd,UNKNOWN,/* don't fail if the thing isn't really there. */,undetermined
12792,httpd,UNKNOWN,/* ctx */,undetermined
12793,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12794,httpd,UNKNOWN,"/*
** DAV filesystem lock implementation
*/",undetermined
12795,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Lock database primitives
**
*/",undetermined
12796,httpd,UNKNOWN,"/*
** LOCK DATABASES
**
** Lockdiscovery information is stored in the single lock database specified
** by the DAVLockDB directive.  Information about this db is stored in the
** global server configuration.
**
** KEY
**
** The database is keyed by a key_type unsigned char (DAV_TYPE_FNAME)
** followed by the full path. The key_type DAV_TYPE_INODE is not used anymore.
**
** VALUE
**
** The value consists of a list of elements.
**    DIRECT LOCK:     [char      (DAV_LOCK_DIRECT),
**                      char      (dav_lock_scope),
**                      char      (dav_lock_type),
**                      int        depth,
**                      time_t     expires,
**                      apr_uuid_t locktoken,
**                      char[]     owner,
**                      char[]     auth_user]
**
**    INDIRECT LOCK:   [char      (DAV_LOCK_INDIRECT),
**                      apr_uuid_t locktoken,
**                      time_t     expires,
**                      apr_size_t key_size,
**                      char[]     key]
**       The key is to the collection lock that resulted in this indirect lock
*/",undetermined
12797,httpd,UNKNOWN,/* Stored lock_discovery prefix */,undetermined
12798,httpd,UNKNOWN,"/*
 * not used anymore
 * #define DAV_TYPE_INODE          10
 */",undetermined
12799,httpd,UNKNOWN,/* ack. forward declare. */,undetermined
12800,httpd,UNKNOWN,"/*
** Use the opaquelock scheme for locktokens
*/",undetermined
12801,httpd,UNKNOWN,"/* #################################################################
** ### keep these structures (internal) or move fully to dav_lock?
*/",undetermined
12802,httpd,UNKNOWN,"/*
** We need to reliably size the fixed-length portion of
** dav_lock_discovery; best to separate it into another
** struct for a convenient sizeof, unless we pack lock_discovery.
*/",undetermined
12803,httpd,UNKNOWN,/* owner field from activelock */,undetermined
12804,httpd,UNKNOWN,/* authenticated user who created the lock */,undetermined
12805,httpd,UNKNOWN,"/* Indirect locks represent locks inherited from containing collections.
 * They reference the lock token for the collection the lock is
 * inherited from. A lock provider may also define a key to the
 * inherited lock, for fast datbase lookup. The key is opaque outside
 * the lock provider.
 */",undetermined
12806,httpd,UNKNOWN,/* ################################################################# */,undetermined
12807,httpd,UNKNOWN,"/*
** Stored direct lock info - full lock_discovery length:
** prefix + Fixed length + lock token + 2 strings + 2 nulls (one for each string)
*/",undetermined
12808,httpd,UNKNOWN,/* Stored indirect lock info - lock token and apr_datum_t */,undetermined
12809,httpd,UNKNOWN,"/*
** The lockdb structure.
**
** The <db> field may be NULL, meaning one of two things:
** 1) That we have not actually opened the underlying database (yet). The
**    <opened> field should be false.
** 2) We opened it readonly and it wasn't present.
**
** The delayed opening (determined by <opened>) makes creating a lockdb
** quick, while deferring the underlying I/O until it is actually required.
**
** We export the notion of a lockdb, but hide the details of it. Most
** implementations will use a database of some kind, but it is certainly
** possible that alternatives could be used.
*/",undetermined
12810,httpd,UNKNOWN,/* for accessing the uuid state */,undetermined
12811,httpd,UNKNOWN,/* a pool to use */,undetermined
12812,httpd,UNKNOWN,/* where is the lock database? */,undetermined
12813,httpd,UNKNOWN,/* we opened the database */,undetermined
12814,httpd,UNKNOWN,"/* if non-NULL, the lock database */",undetermined
12815,httpd,UNKNOWN,"/*
** The private part of the lock structure.
*/",undetermined
12816,httpd,UNKNOWN,/* key into the lock database */,undetermined
12817,httpd,UNKNOWN,"/*
** This must be forward-declared so the open_lockdb function can use it.
*/",undetermined
12818,httpd,UNKNOWN,/* internal function for creating locks */,undetermined
12819,httpd,UNKNOWN,"/*
** dav_fs_parse_locktoken
**
** Parse an opaquelocktoken URI into a locktoken.
*/",undetermined
12820,httpd,UNKNOWN,"/*
** dav_fs_format_locktoken
**
** Generate the URI for a locktoken
*/",undetermined
12821,httpd,UNKNOWN,"/*
** dav_fs_compare_locktoken
**
** Determine whether two locktokens are the same
*/",undetermined
12822,httpd,UNKNOWN,"/*
** dav_fs_really_open_lockdb:
**
** If the database hasn't been opened yet, then open the thing.
*/",undetermined
12823,httpd,UNKNOWN,/* all right. it is opened now. */,undetermined
12824,httpd,UNKNOWN,"/*
** dav_fs_open_lockdb:
**
** ""open"" the lock database, as specified in the global server configuration.
** If force is TRUE, then the database is opened now, rather than lazily.
**
** Note that only one can be open read/write.
*/",undetermined
12825,httpd,UNKNOWN,/* done initializing. return it. */,undetermined
12826,httpd,UNKNOWN,/* ### add a higher-level comment? */,undetermined
12827,httpd,UNKNOWN,"/*
** dav_fs_close_lockdb:
**
** Close it. Duh.
*/",undetermined
12828,httpd,UNKNOWN,"/*
** dav_fs_build_key:  Given a resource, return a apr_datum_t key
**    to look up lock information for this file.
*/",undetermined
12829,httpd,UNKNOWN,/* ### does this allocation have a proper lifetime? need to check */,undetermined
12830,httpd,UNKNOWN,/* ### can we use a buffer for this? */,undetermined
12831,httpd,UNKNOWN,/* size is TYPE + pathname + null */,undetermined
12832,httpd,UNKNOWN,"/*
** dav_fs_lock_expired:  return 1 (true) if the given timeout is in the past
**    or present (the lock has expired), or 0 (false) if in the future
**    (the lock has not yet expired).
*/",undetermined
12833,httpd,UNKNOWN,"/*
** dav_fs_save_lock_record:  Saves the lock information specified in the
**    direct and indirect lock lists about path into the lock database.
**    If direct and indirect == NULL, the key is removed.
*/",undetermined
12834,httpd,UNKNOWN,/* ### add a higher-level error? */,undetermined
12835,httpd,UNKNOWN,"/* If nothing to save, delete key */",undetermined
12836,httpd,UNKNOWN,/* don't fail if the key is not present */,undetermined
12837,httpd,UNKNOWN,/* ### but what about other errors? */,undetermined
12838,httpd,UNKNOWN,/* ### can this be apr_palloc() ? */,undetermined
12839,httpd,UNKNOWN,/* ### hmmm.... investigate the use of a buffer here */,undetermined
12840,httpd,UNKNOWN,/* Direct lock - lock_discovery struct follows */,undetermined
12841,httpd,UNKNOWN,/* Fixed portion of struct */,undetermined
12842,httpd,UNKNOWN,/* Indirect lock prefix */,undetermined
12843,httpd,UNKNOWN,/* Locktoken */,undetermined
12844,httpd,UNKNOWN,/* Expire time */,undetermined
12845,httpd,UNKNOWN,/* Size of key */,undetermined
12846,httpd,UNKNOWN,/* Key data */,undetermined
12847,httpd,UNKNOWN,/* ### more details? add an error_id? */,undetermined
12848,httpd,UNKNOWN,"/*
** dav_load_lock_record:  Reads lock information about key from lock db;
**    creates linked lists of the direct and indirect locks.
**
**    If add_method = DAV_APPEND_LIST, the result will be appended to the
**    head of the direct and indirect lists supplied.
**
**    Passive lock removal:  If lock has timed out, it will not be returned.
**    ### How much ""logging"" does RFC 2518 require?
*/",undetermined
12849,httpd,UNKNOWN,/* ### add a higher-level error? */,undetermined
12850,httpd,UNKNOWN,"/*
    ** If we opened readonly and the db wasn't there, then there are no
    ** locks for this resource. Just exit.
    */",undetermined
12851,httpd,UNKNOWN,/* Create and fill a dav_lock_discovery structure */,undetermined
12852,httpd,UNKNOWN,/* Remove timed-out locknull fm .locknull list */,undetermined
12853,httpd,UNKNOWN,"/* if we don't see the file, then it's a locknull */",undetermined
12854,httpd,UNKNOWN,/* ### push a higher-level description? */,undetermined
12855,httpd,UNKNOWN,/* Create and fill a dav_lock_indirect structure */,undetermined
12856,httpd,UNKNOWN,/* length of datum */,undetermined
12857,httpd,UNKNOWN,/* A locknull resource will never be locked indirectly */,undetermined
12858,httpd,UNKNOWN,/* ### should use a computed_desc and insert corrupt token data */,undetermined
12859,httpd,UNKNOWN,/* Clean up this record if we found expired locks */,undetermined
12860,httpd,UNKNOWN,"/*
    ** ### shouldn't do this if we've been opened READONLY. elide the
    ** ### timed-out locks from the response, but don't save that info back
    */",undetermined
12861,httpd,UNKNOWN,"/* resolve <indirect>, returning <*direct> */",undetermined
12862,httpd,UNKNOWN,/* ### insert a higher-level description? */,undetermined
12863,httpd,UNKNOWN,/* No match found (but we should have found one!) */,undetermined
12864,httpd,UNKNOWN,/* ### use a different description and/or error ID? */,undetermined
12865,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Property-related lock functions
**
*/",undetermined
12866,httpd,UNKNOWN,"/*
** dav_fs_get_supportedlock:  Returns a static string for all supportedlock
**    properties. I think we save more returning a static string than
**    constructing it every time, though it might look cleaner.
*/",undetermined
12867,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** General lock functions
**
*/",undetermined
12868,httpd,UNKNOWN,"/* ---------------------------------------------------------------
**
** Functions dealing with lock-null resources
**
*/",undetermined
12869,httpd,UNKNOWN,"/*
** dav_fs_load_locknull_list:  Returns a dav_buffer dump of the locknull file
**    for the given directory.
*/",undetermined
12870,httpd,UNKNOWN,/* reset this in case we leave w/o reading into the buffer */,undetermined
12871,httpd,UNKNOWN,/* just in case the caller disregards the returned error */,undetermined
12872,httpd,UNKNOWN,"/*
** dav_fs_save_locknull_list:  Saves contents of pbuf into the
**    locknull file for dirpath.
*/",undetermined
12873,httpd,UNKNOWN,/* delete the file if cur_len == 0 */,undetermined
12874,httpd,UNKNOWN,"/*
** dav_fs_remove_locknull_member:  Removes filename from the locknull list
**    for directory path.
*/",undetermined
12875,httpd,UNKNOWN,/* ### add a higher level description? */,undetermined
12876,httpd,UNKNOWN,/* ### add a higher level description? */,undetermined
12877,httpd,UNKNOWN,/* Note: used by dav_fs_repos.c */,undetermined
12878,httpd,UNKNOWN,/* ### should test this result value... */,undetermined
12879,httpd,UNKNOWN,/* ### fold into append_lock? */,undetermined
12880,httpd,UNKNOWN,/* ### take an optional buf parameter? */,undetermined
12881,httpd,UNKNOWN,/* ### should test this result value... */,undetermined
12882,httpd,UNKNOWN,/* we want the null-term here */,undetermined
12883,httpd,UNKNOWN,"/*
** dav_fs_remove_locknull_state:  Given a request, check to see if r->filename
**    is/was a lock-null resource.  If so, return it to an existant state, i.e.
**    remove it from the list in the appropriate .DAV/locknull file.
*/",undetermined
12884,httpd,UNKNOWN,/* ### add a higher-level description? */,undetermined
12885,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12886,httpd,UNKNOWN,/* copy all direct locks to the result list */,undetermined
12887,httpd,UNKNOWN,/* hook into the result list */,undetermined
12888,httpd,UNKNOWN,/* copy all the indirect locks to the result list. resolve as needed. */,undetermined
12889,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12890,httpd,UNKNOWN,/* DAV_GETLOCKS_PARTIAL */,undetermined
12891,httpd,UNKNOWN,/* hook into the result list */,undetermined
12892,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12893,httpd,UNKNOWN,/* ### nobody uses the resolving right now! */,undetermined
12894,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12895,httpd,UNKNOWN,/* ### insert a higher-level error description */,undetermined
12896,httpd,UNKNOWN,"/*
    ** If we opened readonly and the db wasn't there, then there are no
    ** locks for this resource. Just exit.
    */",undetermined
12897,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12898,httpd,UNKNOWN,"/*
    ** ### when we store the lock more directly, we need to update
    ** ### lock->rectype and lock->is_locknull
    */",undetermined
12899,httpd,UNKNOWN,/* ### this works for any <lock> rectype */,undetermined
12900,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12901,httpd,UNKNOWN,/* create and link in the right kind of lock */,undetermined
12902,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12903,httpd,UNKNOWN,/* DAV_LOCKREC_INDIRECT(_PARTIAL) */,undetermined
12904,httpd,UNKNOWN,/* ### shut off the const warning for now */,undetermined
12905,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12906,httpd,UNKNOWN,/* we have a special list for recording locknull resources */,undetermined
12907,httpd,UNKNOWN,/* ### ack! this can add two copies to the locknull list */,undetermined
12908,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12909,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12910,httpd,UNKNOWN,"/* save the modified locks, or remove all locks (dh=ih=NULL). */",undetermined
12911,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12912,httpd,UNKNOWN,"/*
    ** If this resource is a locknull resource AND no more locks exist,
    ** then remove the locknull member.
    **
    ** Note: remove_locknull_state() attempts to convert a locknull member
    **       to a real member. In this case, all locks are gone, so the
    **       locknull resource returns to the null state (ie. doesn't exist),
    **       so there is no need to update the lockdb (and it won't find
    **       any because a precondition is that none exist).
    */",undetermined
12913,httpd,UNKNOWN,/* ### maybe add a higher-level description */,undetermined
12914,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12915,httpd,UNKNOWN,/* ### we should be refreshing direct AND (resolved) indirect locks! */,undetermined
12916,httpd,UNKNOWN,/* refresh all of the direct locks on this resource */,undetermined
12917,httpd,UNKNOWN,/* the lock was refreshed. return the lock. */,undetermined
12918,httpd,UNKNOWN,"/* if we refreshed any locks, then save them back. */",undetermined
12919,httpd,UNKNOWN,/* ### maybe add in a higher-level description */,undetermined
12920,httpd,UNKNOWN,"/* for each indirect lock, find its direct lock and refresh it. */",undetermined
12921,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12922,httpd,UNKNOWN,/* the lock was refreshed. return the lock. */,undetermined
12923,httpd,UNKNOWN,/* save the (resolved) direct lock back */,undetermined
12924,httpd,UNKNOWN,/* ### push a higher-level desc? */,undetermined
12925,httpd,UNKNOWN,/* lookup_resource */,undetermined
12926,httpd,UNKNOWN,/* ctx */,undetermined
12927,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12928,httpd,UNKNOWN,/* per-server configuration */,undetermined
12929,httpd,UNKNOWN,"/*
 * Command handler for the DAVLockDB directive, which is TAKE1
 */",undetermined
12930,httpd,UNKNOWN,/* per server */,undetermined
12931,httpd,UNKNOWN,/* dir config creater */,undetermined
12932,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
12933,httpd,UNKNOWN,/* server config */,undetermined
12934,httpd,UNKNOWN,/* merge server config */,undetermined
12935,httpd,UNKNOWN,/* command table */,undetermined
12936,httpd,UNKNOWN,/* register hooks */,undetermined
12937,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
12938,httpd,UNKNOWN,"/*
** DAV filesystem-based repository provider
*/",undetermined
12939,httpd,UNKNOWN,/* for getpid() */,undetermined
12940,httpd,UNKNOWN,/* for ap_set_* (in dav_fs_set_headers) */,undetermined
12941,httpd,UNKNOWN,/* for ap_update_mtime() */,undetermined
12942,httpd,UNKNOWN,/* to assist in debugging mod_dav's GET handling */,undetermined
12943,httpd,UNKNOWN,/* copy 16k at a time */,undetermined
12944,httpd,UNKNOWN,/* context needed to identify a resource */,undetermined
12945,httpd,UNKNOWN,/* memory storage pool associated with request */,undetermined
12946,httpd,UNKNOWN,/* full pathname to resource */,undetermined
12947,httpd,UNKNOWN,/* filesystem info */,undetermined
12948,httpd,UNKNOWN,/* private context for doing a filesystem walk */,undetermined
12949,httpd,UNKNOWN,/* the input walk parameters */,undetermined
12950,httpd,UNKNOWN,/* reused as we walk */,undetermined
12951,httpd,UNKNOWN,/* MOVE/COPY need a secondary path */,undetermined
12952,httpd,UNKNOWN,/* is this a MOVE? */,undetermined
12953,httpd,UNKNOWN,/* handy buffer for copymove_file() */,undetermined
12954,httpd,UNKNOWN,/* CALLBACK: this is a secondary resource managed specially for us */,undetermined
12955,httpd,UNKNOWN,/* copied from dav_walk_params (they are invariant across the walk) */,undetermined
12956,httpd,UNKNOWN,/* an internal WALKTYPE to walk hidden files (the .DAV directory) */,undetermined
12957,httpd,UNKNOWN,/* an internal WALKTYPE to call collections (again) after their contents */,undetermined
12958,httpd,UNKNOWN,/* a private call type */,undetermined
12959,httpd,UNKNOWN,/* pull this in from the other source file */,undetermined
12960,httpd,UNKNOWN,/* forward-declare the hook structures */,undetermined
12961,httpd,UNKNOWN,"/*
** The namespace URIs that we use. This list and the enumeration must
** stay in sync.
*/",undetermined
12962,httpd,UNKNOWN,/* sentinel */,undetermined
12963,httpd,UNKNOWN,/* the DAV: namespace URI */,undetermined
12964,httpd,UNKNOWN,/* the namespace URI for our custom props */,undetermined
12965,httpd,UNKNOWN,"/*
** Does this platform support an executable flag?
**
** ### need a way to portably abstract this query
**
** DAV_FINFO_MASK gives the appropriate mask to use for the stat call
** used to get file attributes.
*/",undetermined
12966,httpd,UNKNOWN,"/* as above, but without APR_FINFO_PROT */",undetermined
12967,httpd,UNKNOWN,"/*
** The single property that we define (in the DAV_FS_URI_MYPROPS namespace)
*/",undetermined
12968,httpd,UNKNOWN,"/*
 * prefix for temporary files
 */",undetermined
12969,httpd,UNKNOWN,/* standard DAV properties */,undetermined
12970,httpd,UNKNOWN,/* our custom properties */,undetermined
12971,httpd,UNKNOWN,/* handled special in dav_fs_is_writable */,undetermined
12972,httpd,UNKNOWN,/* sentinel */,undetermined
12973,httpd,UNKNOWN,/* define the dav_stream structure for our use */,undetermined
12974,httpd,UNKNOWN,/* we may need to remove it at close time */,undetermined
12975,httpd,UNKNOWN,"/* returns an appropriate HTTP status code given an APR status code for a
 * failed I/O operation.  ### use something besides 500? */",undetermined
12976,httpd,UNKNOWN,/* forward declaration for internal treewalkers */,undetermined
12977,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** PRIVATE REPOSITORY FUNCTIONS
*/",undetermined
12978,httpd,UNKNOWN,"/* remove trailing slash from dirpath, unless it's a root path
         */",undetermined
12979,httpd,UNKNOWN,"/* ###: Looks like a response could be appropriate
         *
         * APR_SUCCESS     here tells us the dir is a root
         * APR_ERELATIVE   told us we had no root (ok)
         * APR_EINCOMPLETE an incomplete testpath told us
         *                 there was no -file- name here!
         * APR_EBADPATH    or other errors tell us this file
         *                 path is undecipherable
         */",undetermined
12980,httpd,UNKNOWN,/* Note: picked up from ap_gm_timestr_822() */,undetermined
12981,httpd,UNKNOWN,/* NOTE: buf must be at least DAV_TIMEBUF_SIZE chars in size */,undetermined
12982,httpd,UNKNOWN,/* ### what to do if fails? */,undetermined
12983,httpd,UNKNOWN,"/* ### should we use ""-00:00"" instead of ""Z"" ?? */",undetermined
12984,httpd,UNKNOWN,/* 20 chars plus null term */,undetermined
12985,httpd,UNKNOWN,"/* RFC 822 date format; as strftime '%a, %d %b %Y %T GMT' */",undetermined
12986,httpd,UNKNOWN,/* 29 chars plus null term */,undetermined
12987,httpd,UNKNOWN,"/* Copy or move src to dst; src_finfo is used to propagate permissions
 * bits across if non-NULL; dst_finfo must be non-NULL iff dst already
 * exists. */",undetermined
12988,httpd,UNKNOWN,/* Determine permissions to use for destination */,undetermined
12989,httpd,UNKNOWN,/* chmod it if it already exist */,undetermined
12990,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
12991,httpd,UNKNOWN,/* ### do we need to deal with the umask? */,undetermined
12992,httpd,UNKNOWN,/* ### ACK! Inconsistent state... */,undetermined
12993,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
12994,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
12995,httpd,UNKNOWN,/* write any bytes that were read */,undetermined
12996,httpd,UNKNOWN,/* ### ACK! Inconsistent state... */,undetermined
12997,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
12998,httpd,UNKNOWN,"/*
             * Something is wrong here but the result is what we wanted.
             * We definitely should not remove the destination file.
             */",undetermined
12999,httpd,UNKNOWN,/* ### ACK. this creates an inconsistency. do more!? */,undetermined
13000,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13001,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13002,httpd,UNKNOWN,/* copy/move a file from within a state dir to another state dir */,undetermined
13003,httpd,UNKNOWN,/* ### need more buffers to replace the pool argument */,undetermined
13004,httpd,UNKNOWN,/* finfo for source file */,undetermined
13005,httpd,UNKNOWN,/* finfo for STATE directory */,undetermined
13006,httpd,UNKNOWN,/* build the propset pathname for the source file */,undetermined
13007,httpd,UNKNOWN,/* the source file doesn't exist */,undetermined
13008,httpd,UNKNOWN,/* build the pathname for the destination state dir */,undetermined
13009,httpd,UNKNOWN,/* ### do we need to deal with the umask? */,undetermined
13010,httpd,UNKNOWN,/* ensure that it exists */,undetermined
13011,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13012,httpd,UNKNOWN,/* get info about the state directory */,undetermined
13013,httpd,UNKNOWN,/* Ack! Where'd it go? */,undetermined
13014,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13015,httpd,UNKNOWN,/* The mkdir() may have failed because a *file* exists there already */,undetermined
13016,httpd,UNKNOWN,/* ### try to recover by deleting this file? (and mkdir again) */,undetermined
13017,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13018,httpd,UNKNOWN,/* append the target file to the state directory pathname */,undetermined
13019,httpd,UNKNOWN,/* copy/move the file now */,undetermined
13020,httpd,UNKNOWN,/* try simple rename first */,undetermined
13021,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13022,httpd,UNKNOWN,/* gotta copy (and delete) */,undetermined
13023,httpd,UNKNOWN,/* Get directory and filename for resources */,undetermined
13024,httpd,UNKNOWN,/* ### should test these result values... */,undetermined
13025,httpd,UNKNOWN,/* Get the corresponding state files for each resource */,undetermined
13026,httpd,UNKNOWN,/* ### CRAP. inconsistency. */,undetermined
13027,httpd,UNKNOWN,"/* ### should perform some cleanup at the target if we still
               ### have the original files */",undetermined
13028,httpd,UNKNOWN,/* Change the error to reflect the bad server state. */,undetermined
13029,httpd,UNKNOWN,"/* Get directory, filename, and state-file names for the resource */",undetermined
13030,httpd,UNKNOWN,/* ### should test this result value... */,undetermined
13031,httpd,UNKNOWN,/* build the propset pathname for the file */,undetermined
13032,httpd,UNKNOWN,/* note: we may get ENOENT if the state dir is not present */,undetermined
13033,httpd,UNKNOWN,/* build the propset pathname for the file */,undetermined
13034,httpd,UNKNOWN,/* ### CRAP. only removed half. */,undetermined
13035,httpd,UNKNOWN,"/* --------------------------------------------------------------------
**
** REPOSITORY HOOK FUNCTIONS
*/",undetermined
13036,httpd,UNKNOWN,/* ### optimize this into a single allocation! */,undetermined
13037,httpd,UNKNOWN,/* Create private resource context descriptor */,undetermined
13038,httpd,UNKNOWN,/* ### this should go away */,undetermined
13039,httpd,UNKNOWN,/* Preserve case on OSes which fold canonical filenames */,undetermined
13040,httpd,UNKNOWN,/* ### not available in Apache 2.0 yet */,undetermined
13041,httpd,UNKNOWN,"/*
    ** If there is anything in the path_info, then this indicates that the
    ** entire path was not used to specify the file/dir. We want to append
    ** it onto the filename so that we get a ""valid"" pathname for null
    ** resources.
    */",undetermined
13042,httpd,UNKNOWN,"/* make sure the pathname does not have a trailing ""/"" */",undetermined
13043,httpd,UNKNOWN,/* Create resource descriptor */,undetermined
13044,httpd,UNKNOWN,"/* make sure the URI does not have a trailing ""/"" */",undetermined
13045,httpd,UNKNOWN,/* unused info in the URL will indicate a null resource */,undetermined
13046,httpd,UNKNOWN,"/* only a trailing ""/"" is allowed */",undetermined
13047,httpd,UNKNOWN,"/*
                    ** This URL/filename represents a locknull resource or
                    ** possibly a destination of a MOVE/COPY
                    */",undetermined
13048,httpd,UNKNOWN,"/*
                ** The base of the path refers to a file -- nothing should
                ** be in path_info. The resource is simply an error: it
                ** can't be a null or a locknull resource.
                */",undetermined
13049,httpd,UNKNOWN,/* retain proper integrity across the structures */,undetermined
13050,httpd,UNKNOWN,"/* If we're at the root of the URL space, then there is no parent. */",undetermined
13051,httpd,UNKNOWN,"/* If given resource is root, then there is no parent.
     * Unless we can retrieve the filepath root, this is
     * intendend to fail.  If we split the root and
     * no path info remains, then we also fail.
     */",undetermined
13052,httpd,UNKNOWN,/* ### optimize this into a single allocation! */,undetermined
13053,httpd,UNKNOWN,/* Create private resource context descriptor */,undetermined
13054,httpd,UNKNOWN,/* ### this should go away */,undetermined
13055,httpd,UNKNOWN,/* it is safe to use ctx2 now */,undetermined
13056,httpd,UNKNOWN,/* custom mktemp that creates the file with APR_OS_DEFAULT permissions */,undetermined
13057,httpd,UNKNOWN,/* we have created a new file */,undetermined
13058,httpd,UNKNOWN,/* (APR registers cleanups for the fd with the pool) */,undetermined
13059,httpd,UNKNOWN,/* ### use a better description? */,undetermined
13060,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13061,httpd,UNKNOWN,"/* ### should check whether apr_file_seek set abs_pos was set to the
         * correct position? */",undetermined
13062,httpd,UNKNOWN,/* ### use something besides 500? */,undetermined
13063,httpd,UNKNOWN,/* only define set_headers() and deliver() for debug purposes */,undetermined
13064,httpd,UNKNOWN,/* ### this function isn't really used since we have a get_pathname */,undetermined
13065,httpd,UNKNOWN,/* make sure the proper mtime is in the request record */,undetermined
13066,httpd,UNKNOWN,/* ### note that these use r->filename rather than <resource> */,undetermined
13067,httpd,UNKNOWN,/* we accept byte-ranges */,undetermined
13068,httpd,UNKNOWN,/* set up the Content-Length header */,undetermined
13069,httpd,UNKNOWN,/* ### how to set the content type? */,undetermined
13070,httpd,UNKNOWN,"/* ### until this is resolved, the Content-Type header is busted */",undetermined
13071,httpd,UNKNOWN,/* Check resource type */,undetermined
13072,httpd,UNKNOWN,/* DEBUG_GET_HANDLER */,undetermined
13073,httpd,UNKNOWN,/* ### refine this error message? */,undetermined
13074,httpd,UNKNOWN,/* update resource state to show it exists as a collection */,undetermined
13075,httpd,UNKNOWN,"/* Postfix call for MOVE. delete the source dir.
             * Note: when copying, we do not enable the postfix-traversal.
             */",undetermined
13076,httpd,UNKNOWN,/* ### we are ignoring any error here; what should we do? */,undetermined
13077,httpd,UNKNOWN,"/* copy/move of a collection. Create the new, target collection */",undetermined
13078,httpd,UNKNOWN,/* ### assume it was a permissions problem */,undetermined
13079,httpd,UNKNOWN,/* ### need a description here */,undetermined
13080,httpd,UNKNOWN,/* ### push a higher-level description? */,undetermined
13081,httpd,UNKNOWN,"/*
    ** If we have a ""not so bad"" error, then it might need to go into a
    ** multistatus response.
    **
    ** For a MOVE, it will always go into the multistatus. It could be
    ** that everything has been moved *except* for the root. Using a
    ** multistatus (with no errors for the other resources) will signify
    ** this condition.
    **
    ** For a COPY, we are traversing in a prefix fashion. If the root fails,
    ** then we can just bail out now.
    */",undetermined
13082,httpd,UNKNOWN,/* ### use errno to generate DAV:responsedescription? */,undetermined
13083,httpd,UNKNOWN,/* the error is in the multistatus now. do not stop the traversal. */,undetermined
13084,httpd,UNKNOWN,"/* if a collection, recursively copy/move it and its children,
     * including the state dirs
     */",undetermined
13085,httpd,UNKNOWN,/* params.walk_ctx is managed by dav_fs_internal_walk() */,undetermined
13086,httpd,UNKNOWN,/* postfix is needed for MOVE to delete source dirs */,undetermined
13087,httpd,UNKNOWN,/* note that we return the error OR the multistatus. never both */,undetermined
13088,httpd,UNKNOWN,"/* on a ""real"" error, then just punt. nothing else to do. */",undetermined
13089,httpd,UNKNOWN,/* some multistatus responses exist. wrap them in a 207 */,undetermined
13090,httpd,UNKNOWN,/* not a collection */,undetermined
13091,httpd,UNKNOWN,/* ### push a higher-level description? */,undetermined
13092,httpd,UNKNOWN,/* copy/move properties as well */,undetermined
13093,httpd,UNKNOWN,"/*
        ** ### strictly speaking, this is a design error; we should not
        ** ### have reached this point.
        */",undetermined
13094,httpd,UNKNOWN,/* update state of destination resource to show it exists */,undetermined
13095,httpd,UNKNOWN,"/*
        ** ### strictly speaking, this is a design error; we should not
        ** ### have reached this point.
        */",undetermined
13096,httpd,UNKNOWN,/* try rename first */,undetermined
13097,httpd,UNKNOWN,"/* if we can't simply rename, then do it the hard way... */",undetermined
13098,httpd,UNKNOWN,/* update resource states */,undetermined
13099,httpd,UNKNOWN,/* no multistatus response */,undetermined
13100,httpd,UNKNOWN,/* ### should have a better error than this. */,undetermined
13101,httpd,UNKNOWN,/* Rename did work. Update resource states and move properties as well */,undetermined
13102,httpd,UNKNOWN,/* no error. we're done. go ahead and return now. */,undetermined
13103,httpd,UNKNOWN,/* error occurred during properties move; try to put resource back */,undetermined
13104,httpd,UNKNOWN,/* couldn't put it back! */,undetermined
13105,httpd,UNKNOWN,/* update resource states again */,undetermined
13106,httpd,UNKNOWN,"/* resource moved back, but properties may be inconsistent */",undetermined
13107,httpd,UNKNOWN,"/* do not attempt to remove a null resource,
     * or a collection with children
     */",undetermined
13108,httpd,UNKNOWN,/* try to remove the resource */,undetermined
13109,httpd,UNKNOWN,"/*
        ** If an error occurred, then add it to multistatus response.
        ** Note that we add it for the root resource, too. It is quite
        ** possible to delete the whole darn tree, yet fail on the root.
        **
        ** (also: remember we are deleting via a postfix traversal)
        */",undetermined
13110,httpd,UNKNOWN,/* ### assume there is a permissions problem */,undetermined
13111,httpd,UNKNOWN,/* ### use errno to generate DAV:responsedescription? */,undetermined
13112,httpd,UNKNOWN,"/* if a collection, recursively remove it and its children,
     * including the state dirs
     */",undetermined
13113,httpd,UNKNOWN,"/* on a ""real"" error, then just punt. nothing else to do. */",undetermined
13114,httpd,UNKNOWN,/* some multistatus responses exist. wrap them in a 207 */,undetermined
13115,httpd,UNKNOWN,/* no errors... update resource state */,undetermined
13116,httpd,UNKNOWN,/* not a collection; remove the file and its properties */,undetermined
13117,httpd,UNKNOWN,/* ### put a description in here */,undetermined
13118,httpd,UNKNOWN,/* update resource state */,undetermined
13119,httpd,UNKNOWN,/* remove properties and return its result */,undetermined
13120,httpd,UNKNOWN,/* ### move this to dav_util? */,undetermined
13121,httpd,UNKNOWN,"/* Walk recursively down through directories, *
 * including lock-null resources as we go.    */",undetermined
13122,httpd,UNKNOWN,"/* ensure the context is prepared properly, then call the func */",undetermined
13123,httpd,UNKNOWN,"/* put a trailing slash onto the directory, in preparation for appending
     * files to it as we discovery them within the directory */",undetermined
13124,httpd,UNKNOWN,/* in pad area */,undetermined
13125,httpd,UNKNOWN,"/* if a secondary path is present, then do that, too */",undetermined
13126,httpd,UNKNOWN,/* in pad area */,undetermined
13127,httpd,UNKNOWN,"/* Note: the URI should ALREADY have a trailing ""/"" */",undetermined
13128,httpd,UNKNOWN,"/* for this first pass of files, all resources exist */",undetermined
13129,httpd,UNKNOWN,/* a file is the default; we'll adjust if we hit a directory */,undetermined
13130,httpd,UNKNOWN,/* open and scan the directory */,undetermined
13131,httpd,UNKNOWN,/* ### need a better error */,undetermined
13132,httpd,UNKNOWN,"/* avoid recursing into our current, parent, or state directories */",undetermined
13133,httpd,UNKNOWN,/* ### need to authorize each file */,undetermined
13134,httpd,UNKNOWN,/* ### example: .htaccess is normally configured to fail auth */,undetermined
13135,httpd,UNKNOWN,/* stuff in the state directory and temp files are never authorized! */,undetermined
13136,httpd,UNKNOWN,/* skip the state dir and temp files unless a HIDDEN is performed */,undetermined
13137,httpd,UNKNOWN,/* append this file onto the path buffer (copy null term) */,undetermined
13138,httpd,UNKNOWN,/* woah! where'd it go? */,undetermined
13139,httpd,UNKNOWN,/* ### should have a better error here */,undetermined
13140,httpd,UNKNOWN,"/* copy the file to the URI, too. NOTE: we will pad an extra byte
           for the trailing slash later. */",undetermined
13141,httpd,UNKNOWN,"/* if there is a secondary path, then do that, too */",undetermined
13142,httpd,UNKNOWN,/* set up the (internal) pathnames for the two resources */,undetermined
13143,httpd,UNKNOWN,/* set up the URI for the current resource */,undetermined
13144,httpd,UNKNOWN,"/* ### for now, only process regular files (e.g. skip symlinks) */",undetermined
13145,httpd,UNKNOWN,/* call the function for the specified dir + file */,undetermined
13146,httpd,UNKNOWN,/* ### maybe add a higher-level description? */,undetermined
13147,httpd,UNKNOWN,/* adjust length to incorporate the subdir name */,undetermined
13148,httpd,UNKNOWN,/* adjust URI length to incorporate subdir and a slash */,undetermined
13149,httpd,UNKNOWN,/* switch over to a collection */,undetermined
13150,httpd,UNKNOWN,/* recurse on the subdir */,undetermined
13151,httpd,UNKNOWN,/* ### don't always want to quit on error from single child */,undetermined
13152,httpd,UNKNOWN,/* ### maybe add a higher-level description? */,undetermined
13153,httpd,UNKNOWN,/* put the various information back */,undetermined
13154,httpd,UNKNOWN,/* assert: res1.exists == 1 */,undetermined
13155,httpd,UNKNOWN,/* ### check the return value of this? */,undetermined
13156,httpd,UNKNOWN,/* null terminate the directory name */,undetermined
13157,httpd,UNKNOWN,/* Include any lock null resources found in this collection */,undetermined
13158,httpd,UNKNOWN,/* ### maybe add a higher-level description? */,undetermined
13159,httpd,UNKNOWN,/* put a slash back on the end of the directory */,undetermined
13160,httpd,UNKNOWN,/* these are all non-existant (files) */,undetermined
13161,httpd,UNKNOWN,"/*
            ** Append the locknull file to the paths and the URI. Note that
            ** we don't have to pad the URI for a slash since a locknull
            ** resource is not a collection.
            */",undetermined
13162,httpd,UNKNOWN,/* set up the (internal) pathnames for the two resources */,undetermined
13163,httpd,UNKNOWN,/* set up the URI for the current resource */,undetermined
13164,httpd,UNKNOWN,"/*
            ** To prevent a PROPFIND showing an expired locknull
            ** resource, query the lock database to force removal
            ** of both the lock entry and .locknull, if necessary..
            ** Sure, the query in PROPFIND would do this.. after
            ** the locknull resource was already included in the
            ** return.
            **
            ** NOTE: we assume the caller has opened the lock database
            **       if they have provided DAV_WALKTYPE_LOCKNULL.
            */",undetermined
13165,httpd,UNKNOWN,"/* ### we should also look into opening it read-only and
               ### eliding timed-out items from the walk, yet leaving
               ### them in the locknull database until somebody opens
               ### the thing writable.
               */",undetermined
13166,httpd,UNKNOWN,"/* ### probably ought to use has_locks. note the problem
               ### mentioned above, though... we would traverse this as
               ### a locknull, but then a PROPFIND would load the lock
               ### info, causing a timeout and the locks would not be
               ### reported. Therefore, a null resource would be returned
               ### in the PROPFIND.
               ###
               ### alternative: just load unresolved locks. any direct
               ### locks will be timed out (correct). any indirect will
               ### not (correct; consider if a parent timed out -- the
               ### timeout routines do not walk and remove indirects;
               ### even the resolve func would probably fail when it
               ### tried to find a timed-out direct lock).
            */",undetermined
13167,httpd,UNKNOWN,/* ### maybe add a higher-level description? */,undetermined
13168,httpd,UNKNOWN,/* call the function for the specified dir + file */,undetermined
13169,httpd,UNKNOWN,/* ### maybe add a higher-level description? */,undetermined
13170,httpd,UNKNOWN,/* reset the exists flag */,undetermined
13171,httpd,UNKNOWN,/* replace the dirs' trailing slashes with null terms */,undetermined
13172,httpd,UNKNOWN,/* this is a collection which exists */,undetermined
13173,httpd,UNKNOWN,"/* ### zero out versioned, working, baselined? */",undetermined
13174,httpd,UNKNOWN,/* the pathname is stored in the path1 buffer */,undetermined
13175,httpd,UNKNOWN,/* internal call from the COPY/MOVE code. set it up. */,undetermined
13176,httpd,UNKNOWN,/* we don't track this */,undetermined
13177,httpd,UNKNOWN,/* res2 does not exist -- clear its finfo structure */,undetermined
13178,httpd,UNKNOWN,/* the pathname is stored in the path2 buffer */,undetermined
13179,httpd,UNKNOWN,/* prep the URI buffer */,undetermined
13180,httpd,UNKNOWN,"/* if we have a directory, then ensure the URI has a trailing ""/"" */",undetermined
13181,httpd,UNKNOWN,/* this will fall into the pad area */,undetermined
13182,httpd,UNKNOWN,/* the current resource's URI is stored in the uri_buf buffer */,undetermined
13183,httpd,UNKNOWN,/* point the callback's resource at our structure */,undetermined
13184,httpd,UNKNOWN,"/* always return the error, and any/all multistatus responses */",undetermined
13185,httpd,UNKNOWN,"/* always return the error, and any/all multistatus responses */",undetermined
13186,httpd,UNKNOWN,"/* dav_fs_etag:  Stolen from ap_make_etag.  Creates a strong etag
 *    for file path.
 * ### do we need to return weak tags sometimes?
 */",undetermined
13187,httpd,UNKNOWN,/* XXX: This should really honor the FileETag setting */,undetermined
13188,httpd,UNKNOWN,/* normally: special GET handling not required */,undetermined
13189,httpd,UNKNOWN,/* an HTTP-date can be 29 chars plus a null term */,undetermined
13190,httpd,UNKNOWN,/* a 64-bit size can be 20 chars plus a null term */,undetermined
13191,httpd,UNKNOWN,"/*
    ** None of FS provider properties are defined if the resource does not
    ** exist. Just bail for this case.
    **
    ** Even though we state that the FS properties are not defined, the
    ** client cannot store dead values -- we deny that thru the is_writable
    ** hook function.
    */",undetermined
13192,httpd,UNKNOWN,"/*
        ** Closest thing to a creation date. since we don't actually
        ** perform the operations that would modify ctime (after we
        ** create the file), then we should be pretty safe here.
        */",undetermined
13193,httpd,UNKNOWN,"/* our property, but not defined on collection resources */",undetermined
13194,httpd,UNKNOWN,"/* our property, but not defined on collection resources */",undetermined
13195,httpd,UNKNOWN,"/* our property, but not defined on this platform */",undetermined
13196,httpd,UNKNOWN,"/* the files are ""ours"" so we only need to check owner exec privs */",undetermined
13197,httpd,UNKNOWN,/* ### what the heck was this property? */,undetermined
13198,httpd,UNKNOWN,/* assert: value != NULL */,undetermined
13199,httpd,UNKNOWN,/* get the information and global NS index for the property */,undetermined
13200,httpd,UNKNOWN,/* assert: info != NULL && info->name != NULL */,undetermined
13201,httpd,UNKNOWN,"/* DBG3(""FS: inserting lp%d:%s  (local %d)"", ns, scan->name, scan->ns); */",undetermined
13202,httpd,UNKNOWN,/* assert: what == DAV_PROP_INSERT_SUPPORTED */,undetermined
13203,httpd,UNKNOWN,/* we inserted what was asked for */,undetermined
13204,httpd,UNKNOWN,"/* if we have the executable property, and this isn't a collection,
       then the property is writable. */",undetermined
13205,httpd,UNKNOWN,/* ### hmm. this isn't actually looking at all the possible text items */,undetermined
13206,httpd,UNKNOWN,"/* DBG3(""name=%s  cdata=%s  f_cdata=%s"",elem->name,cdata ? cdata->text : ""[null]"",f_cdata ? f_cdata->text : ""[null]""); */",undetermined
13207,httpd,UNKNOWN,/* assert: prop == executable. operation == SET. */,undetermined
13208,httpd,UNKNOWN,/* don't do anything if there is no change. no rollback info either. */,undetermined
13209,httpd,UNKNOWN,"/* DBG2(""new value=%d  (old=%d)"", value, old_value); */",undetermined
13210,httpd,UNKNOWN,/* update the resource and set up the rollback context */,undetermined
13211,httpd,UNKNOWN,/* nothing to do */,undetermined
13212,httpd,UNKNOWN,/* assert: prop == executable. operation == SET. */,undetermined
13213,httpd,UNKNOWN,/* restore the executable bit */,undetermined
13214,httpd,UNKNOWN,/* restore the resource's state */,undetermined
13215,httpd,UNKNOWN,/* vsn */,undetermined
13216,httpd,UNKNOWN,/* binding */,undetermined
13217,httpd,UNKNOWN,/* search */,undetermined
13218,httpd,UNKNOWN,/* ctx */,undetermined
13219,httpd,UNKNOWN,"/* don't try to find any liveprops if this isn't ""our"" resource */",undetermined
13220,httpd,UNKNOWN,"/* don't insert any liveprops if this isn't ""our"" resource */",undetermined
13221,httpd,UNKNOWN,/* a lock-null resource */,undetermined
13222,httpd,UNKNOWN,"/*
        ** ### technically, we should insert empty properties. dunno offhand
        ** ### what part of the spec said this, but it was essentially thus:
        ** ### ""the properties should be defined, but may have no value"".
        */",undetermined
13223,httpd,UNKNOWN,/* Only insert this property if it is defined for this platform. */,undetermined
13224,httpd,UNKNOWN,/* ### we know the others aren't defined as liveprops */,undetermined
13225,httpd,UNKNOWN,/* register the namespace URIs */,undetermined
13226,httpd,UNKNOWN,/* register the repository provider */,undetermined
13227,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13228,httpd,UNKNOWN,"/**
 * @file  repos.h
 * @brief Declarations for the filesystem repository implementation
 *
 * @addtogroup MOD_DAV
 * @{
 */",undetermined
13229,httpd,UNKNOWN,/* the subdirectory to hold all DAV-related information for a directory */,undetermined
13230,httpd,UNKNOWN,/* ensure that our state subdirectory is present */,undetermined
13231,httpd,UNKNOWN,/* return the storage pool associated with a resource */,undetermined
13232,httpd,UNKNOWN,/* return the full pathname for a resource */,undetermined
13233,httpd,UNKNOWN,/* return the directory and filename for a resource */,undetermined
13234,httpd,UNKNOWN,/* return the list of locknull members in this resource's directory */,undetermined
13235,httpd,UNKNOWN,/* DBM functions used by the repository and locking providers */,undetermined
13236,httpd,UNKNOWN,/* where is the lock database located? */,undetermined
13237,httpd,UNKNOWN,/* _DAV_FS_REPOS_H_ */,undetermined
13238,httpd,UNKNOWN,/** @} */,undetermined
13239,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13240,httpd,UNKNOWN,"/* Overview of what this is and does:
 * http://www.apache.org/~niq/dbd.html
 * or
 * http://apache.webthing.com/database/
 */",undetermined
13241,httpd,UNKNOWN,/************ svr cfg: manage db connection pool ****************/,undetermined
13242,httpd,UNKNOWN,/* a default DBDriver value that'll generate meaningful error messages */,undetermined
13243,httpd,UNKNOWN,"/* A default nmin of >0 will help with generating meaningful
 * startup error messages if the database is down.
 */",undetermined
13244,httpd,UNKNOWN,/* to generate meaningful error messages */,undetermined
13245,httpd,UNKNOWN,/* don't risk segfault on misconfiguration */,undetermined
13246,httpd,UNKNOWN,"/* some modules may call from within config directive handlers, and
          * if these are called in a server context that contains no mod_dbd
          * config directives, then we have to create our own server config
          */",undetermined
13247,httpd,UNKNOWN,"/* loading the driver involves once-only dlloading that is
         * best done at server startup.  This also guarantees that
         * we won't return an error later.
         */",undetermined
13248,httpd,UNKNOWN,"/* XXX: note that mod_proxy calls this ""smax"" */",undetermined
13249,httpd,UNKNOWN,"/* XXX: note that mod_proxy calls this ""ttl"" (time to live) */",undetermined
13250,httpd,UNKNOWN,"/* some modules may call from within config directive handlers, and
          * if these are called in a server context that contains no mod_dbd
          * config directives, then we have to create our own server config
          */",undetermined
13251,httpd,UNKNOWN,"/* dbd_setup in 2.2.3 and under was causing spurious error messages
         * when dbd isn't configured.  We can stop that with a quick check here
         * together with a similar check in ap_dbd_open (where being
         * unconfigured is a genuine error that must be reported).
         */",undetermined
13252,httpd,UNKNOWN,"/* an apr_reslist_constructor for SQL connections
 * Also use this for opening in non-reslist modes, since it gives
 * us all the error-handling in one place.
 */",undetermined
13253,httpd,UNKNOWN,"/* The driver is loaded at config time now, so this just checks a hash.
     * If that changes, the driver DSO could be registered to unload against
     * our pool, which is probably not what we want.  Error checking isn't
     * necessary now, but in case that changes in the future ...
     */",undetermined
13254,httpd,UNKNOWN,"/* we use a sub-pool for the prepared statements for each connection so
     * that they will be cleaned up first, before the connection is closed
     */",undetermined
13255,httpd,UNKNOWN,"/* We create the reslist using a sub-pool of the pool passed to our
     * child_init hook.  No other threads can be here because we're
     * either in the child_init phase or dbd_setup_lock() acquired our mutex.
     * No other threads will use this sub-pool after this, except via
     * reslist calls, which have an internal mutex.
     *
     * We need to short-circuit the cleanup registered internally by
     * apr_reslist_create().  We do this by registering dbd_destroy()
     * as a cleanup afterwards, so that it will run before the reslist's
     * internal cleanup.
     *
     * If we didn't do this, then we could free memory twice when the pool
     * was destroyed.  When apr_pool_destroy() runs, it first destroys all
     * all the per-connection sub-pools created in dbd_construct(), and
     * then it runs the reslist's cleanup.  The cleanup calls dbd_destruct()
     * on each resource, which would then attempt to destroy the sub-pools
     * a second time.
     */",undetermined
13256,httpd,UNKNOWN,"/* we failed, so create a mutex so that subsequent competing callers
         * to ap_dbd_open can serialize themselves while they retry
         */",undetermined
13257,httpd,UNKNOWN,"/* several threads could be here at the same time, all trying to
     * initialize the reslist because dbd_setup_init failed to do so
     */",undetermined
13258,httpd,UNKNOWN,/* we already logged an error when the mutex couldn't be created */,undetermined
13259,httpd,UNKNOWN,"/* Functions we export for modules to use:
        - open acquires a connection from the pool (opens one if necessary)
        - close releases it back in to the pool
*/",undetermined
13260,httpd,UNKNOWN,"/* we don't have a driver-specific error code, so we'll just pass
     * a ""success"" value and rely on the driver to ignore it
     */",undetermined
13261,httpd,UNKNOWN,"/* If nothing is configured, we shouldn't be here */",undetermined
13262,httpd,UNKNOWN,/* Return a once-only connection */,undetermined
13263,httpd,UNKNOWN,"/* If we have a persistent connection and it's good, we'll use it;
     * since this is non-threaded, we can update without a mutex
     */",undetermined
13264,httpd,UNKNOWN,"/* We don't have a connection right now, so we'll open one */",undetermined
13265,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13266,httpd,UNKNOWN,"/**
 * @file  mod_dbd.h
 * @brief Database Access Extension Module for Apache
 *
 * Overview of what this is and does:
 * http://www.apache.org/~niq/dbd.html
 * or
 * http://apache.webthing.com/database/
 *
 * @defgroup MOD_DBD mod_dbd
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
13267,httpd,UNKNOWN,"/* Create a set of DBD_DECLARE(type), DBD_DECLARE_NONSTD(type) and
 * DBD_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
13268,httpd,UNKNOWN,/* Export functions to access the database */,undetermined
13269,httpd,UNKNOWN,"/* acquire a connection that MUST be explicitly closed.
 * Returns NULL on error
 */",undetermined
13270,httpd,UNKNOWN,/* release a connection acquired with ap_dbd_open */,undetermined
13271,httpd,UNKNOWN,"/* acquire a connection that will have the lifetime of a request
 * and MUST NOT be explicitly closed.  Return NULL on error.
 * This is the preferred function for most applications.
 */",undetermined
13272,httpd,UNKNOWN,"/* acquire a connection that will have the lifetime of a connection
 * and MUST NOT be explicitly closed.  Return NULL on error.
 * This is the preferred function for most applications.
 */",undetermined
13273,httpd,UNKNOWN,"/* Prepare a statement for use by a client module during
 * the server startup/configuration phase.  Can't be called
 * after the server has created its children (use apr_dbd_*).
 */",undetermined
13274,httpd,UNKNOWN,/* Also export them as optional functions for modules that prefer it */,undetermined
13275,httpd,UNKNOWN,/** @} */,undetermined
13276,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13277,httpd,UNKNOWN,"/*
  $Id: mod_macro.c 1455215 2013-03-11 16:28:43Z jim $
*/",undetermined
13278,httpd,UNKNOWN,/************************************************ COMPILE TIME DEBUG CONTROL */,undetermined
13279,httpd,UNKNOWN,"/*
   debug:
   #define MOD_MACRO_DEBUG 1

   gdb:
   run -f ./test/conf/test??.conf
*/",undetermined
13280,httpd,UNKNOWN,/* #define MOD_MACRO_DEBUG 1 */,undetermined
13281,httpd,UNKNOWN,/* debug */,undetermined
13282,httpd,UNKNOWN,/* MOD_MACRO_DEBUG */,undetermined
13283,httpd,UNKNOWN,/******************************************************** MODULE DECLARATION */,undetermined
13284,httpd,UNKNOWN,/********************************************************** MACRO MANAGEMENT */,undetermined
13285,httpd,UNKNOWN,"/*
  this is a macro: name, arguments, contents, location.
*/",undetermined
13286,httpd,UNKNOWN,/* lower case name of the macro */,undetermined
13287,httpd,UNKNOWN,"/* of char*, macro parameter names */",undetermined
13288,httpd,UNKNOWN,"/* of char*, macro body */",undetermined
13289,httpd,UNKNOWN,"/* of macro definition, for error messages */",undetermined
13290,httpd,UNKNOWN,"/* configuration tokens.
 */",undetermined
13291,httpd,UNKNOWN,"/*
  Macros are kept globally...
  They are not per-server or per-directory entities.

  I would need a hook BEFORE and AFTER configuration processing
  to initialize and close them properly, but no such thing is exported,
  although it could be available from within apache.

  I would have such a hook if in server/config.c
  The ""initializer"" does not seem to be called before.

  note: they are in a temp_pool, and there is a lazy initialization.

  hash type: (char *) name -> (ap_macro_t *) macro
*/",undetermined
13292,httpd,UNKNOWN,/*************************************************************** PARSE UTILS */,undetermined
13293,httpd,UNKNOWN,"/*
  return configuration-parsed arguments from line as an array.
  the line is expected not to contain any '\n'?
*/",undetermined
13294,httpd,UNKNOWN,"/*
  warn if anything non blank appears, but ignore comments...
*/",undetermined
13295,httpd,UNKNOWN,"/*
  get read lines as an array till end_token.
  counts nesting for begin_token/end_token.
  it assumes a line-per-line configuration (thru getline).
  this function could be exported.
  begin_token may be NULL.
*/",undetermined
13296,httpd,UNKNOWN,"/* sorry, but this is expected by getline:-( */",undetermined
13297,httpd,UNKNOWN,/* skip comments */,undetermined
13298,httpd,UNKNOWN,/* detect nesting... */,undetermined
13299,httpd,UNKNOWN,/* check for proper closing */,undetermined
13300,httpd,UNKNOWN,/* this cannot happen if end_token contains '>' */,undetermined
13301,httpd,UNKNOWN,/* put EOL back? */,undetermined
13302,httpd,UNKNOWN,/* the @* arguments are double-quote escaped when substituted */,undetermined
13303,httpd,UNKNOWN,/* other $* and %* arguments are simply replaced without escaping */,undetermined
13304,httpd,UNKNOWN,"/*
  characters allowed in an argument?
  not used yet, because that would trigger some backward compatibility.
*/",undetermined
13305,httpd,UNKNOWN,"/*
  returns whether it looks like an argument, i.e. prefixed by ARG_PREFIX.
*/",undetermined
13306,httpd,UNKNOWN,"/*
  generates an error on macro with two arguments of the same name.
  generates an error if a macro argument name is empty.
  generates a warning if arguments name prefixes conflict.
  generates a warning if the first char of an argument is not in ARG_PREFIX
*/",undetermined
13307,httpd,UNKNOWN,/* must not use the same argument name twice */,undetermined
13308,httpd,UNKNOWN,"/* warn about common prefix, but only if non empty names */",undetermined
13309,httpd,UNKNOWN,"/*
  warn about empty strings in array. could be legitimate.
*/",undetermined
13310,httpd,UNKNOWN,/******************************************************** SUBSTITUTION UTILS */,undetermined
13311,httpd,UNKNOWN,/* could be switched to '\'' */,undetermined
13312,httpd,UNKNOWN,"/*
  returns the number of needed escapes for the string
*/",undetermined
13313,httpd,UNKNOWN,"/*
  replace name by replacement at the beginning of buf of bufsize.
  returns an error message or NULL.
  C is not really a nice language for processing strings.
*/",undetermined
13314,httpd,UNKNOWN,/* buf must starts with name */,undetermined
13315,httpd,UNKNOWN,/* hmmm??? */,undetermined
13316,httpd,UNKNOWN,/* could/should I reallocate? */,undetermined
13317,httpd,UNKNOWN,/* cannot use strcpy as strings may overlap */,undetermined
13318,httpd,UNKNOWN,/* insert the replacement with escapes */,undetermined
13319,httpd,UNKNOWN,"/*
  find first occurence of args in buf.
  in case of conflict, the LONGEST argument is kept. (could be the FIRST?).
  returns the pointer and the whichone found, or NULL.
*/",undetermined
13320,httpd,UNKNOWN,"/*
  substitute macro arguments by replacements in buf of bufsize.
  returns an error message or NULL.
  if used is defined, returns the used macro arguments.
*/",undetermined
13321,httpd,UNKNOWN,"/*
  perform substitutions in a macro contents and
  return the result as a newly allocated array, if result is defined.
  may also return an error message.
  passes used down to substitute_macro_args.
*/",undetermined
13322,httpd,UNKNOWN,/* for each line of the macro body */,undetermined
13323,httpd,UNKNOWN,/* copy the line and subtitute macro parameters */,undetermined
13324,httpd,UNKNOWN,/* append substituted line to result array */,undetermined
13325,httpd,UNKNOWN,"/*
  warn if some macro arguments are not used.
*/",undetermined
13326,httpd,UNKNOWN,/* no need to further warnings... */,undetermined
13327,httpd,UNKNOWN,/************************************************** MACRO PSEUDO CONFIG FILE */,undetermined
13328,httpd,UNKNOWN,"/*
  The expanded content of the macro is to be parsed as a ap_configfile_t.
  This is used to have some kind of old fashionned C object oriented inherited
  data structure for configs.

  The following struct stores the contents.

  This structure holds pointers (next, upper) to the current ""file"" which was
  being processed and is interrupted by the macro expansion. At the end
  of processing the macro, the initial data structure will be put back
  in place (see function next_one) and the reading will go on from there.

  If macros are used within macros, there may be a cascade of such temporary
  arrays used to insert the expanded macro contents before resuming the real
  file processing.

  There is some hopus-pocus to deal with line_number when transiting from
  one config to the other.
*/",undetermined
13329,httpd,UNKNOWN,/* current element */,undetermined
13330,httpd,UNKNOWN,/* current char in element */,undetermined
13331,httpd,UNKNOWN,/* cached length of the current line */,undetermined
13332,httpd,UNKNOWN,/* array of char * */,undetermined
13333,httpd,UNKNOWN,/* next config once this one is processed */,undetermined
13334,httpd,UNKNOWN,/* hack: where to update it if needed */,undetermined
13335,httpd,UNKNOWN,"/*
  Get next config if any.
  this may be called several times if there are continuations.
*/",undetermined
13336,httpd,UNKNOWN,"/*
  returns next char if possible
  this may involve switching to enclosing config.
*/",undetermined
13337,httpd,UNKNOWN,/* maybe update */,undetermined
13338,httpd,UNKNOWN,"/*
  returns a buf a la fgets.
  no more than a line at a time, otherwise the parsing is too much ahead...
  NULL at EOF.
*/",undetermined
13339,httpd,UNKNOWN,"/* read chars from stream, stop on newline */",undetermined
13340,httpd,UNKNOWN,"/* maybe update to next, possibly a recursion */",undetermined
13341,httpd,UNKNOWN,"/* keep next line count in sync! the caller will update
               the current line_number, we need to forward to the next */",undetermined
13342,httpd,UNKNOWN,/* else that is really all we can do */,undetermined
13343,httpd,UNKNOWN,"/*
  close the array stream?
*/",undetermined
13344,httpd,UNKNOWN,/* move index at end of stream... */,undetermined
13345,httpd,UNKNOWN,"/*
  create an array config stream insertion ""object"".
  could be exported.
*/",undetermined
13346,httpd,UNKNOWN,/********************************************************** KEYWORD HANDLING */,undetermined
13347,httpd,UNKNOWN,"/*
  handles: <Macro macroname arg1 arg2 ...> any trash there is ignored...
*/",undetermined
13348,httpd,UNKNOWN,/* lazy initialization */,undetermined
13349,httpd,UNKNOWN,/* coldly drop '>[^>]*$' out */,undetermined
13350,httpd,UNKNOWN,/* get lowercase macro name */,undetermined
13351,httpd,UNKNOWN,/* already defined: warn about the redefinition */,undetermined
13352,httpd,UNKNOWN,/* allocate a new macro */,undetermined
13353,httpd,UNKNOWN,/* get macro arguments */,undetermined
13354,httpd,UNKNOWN,/* get macro parameters */,undetermined
13355,httpd,UNKNOWN,/* store the new macro */,undetermined
13356,httpd,UNKNOWN,"/*
  handles: Use name value1 value2 ...
*/",undetermined
13357,httpd,UNKNOWN,"/* must be initialized, or no macros has been defined */",undetermined
13358,httpd,UNKNOWN,/* get lowercase macro name */,undetermined
13359,httpd,UNKNOWN,/* get macro definition */,undetermined
13360,httpd,UNKNOWN,"/* recursion is detected here by looking at the config file name,
     * which may already contains ""macro 'foo'"". Ok, it looks like a hack,
     * but otherwise it is uneasy to keep this data available somewhere...
     * the name has just the needed visibility and liveness.
     */",undetermined
13361,httpd,UNKNOWN,/* get macro arguments */,undetermined
13362,httpd,UNKNOWN,"/* the current ""config file"" is replaced by a string array...
       at the end of processing the array, the initial config file
       will be returned there (see next_one) so as to go on. */",undetermined
13363,httpd,UNKNOWN,"/* must be initialized, or no macros has been defined */",undetermined
13364,httpd,UNKNOWN,/* check that the macro is defined */,undetermined
13365,httpd,UNKNOWN,/* could be a warning? */,undetermined
13366,httpd,UNKNOWN,/* free macro: cannot do that */,undetermined
13367,httpd,UNKNOWN,/* remove macro from hash table */,undetermined
13368,httpd,UNKNOWN,/************************************************************* EXPORT MODULE */,undetermined
13369,httpd,UNKNOWN,"/*
  macro module commands.
  configuration file macro stuff
  they are processed immediatly when found, hence the EXEC_ON_READ.
*/",undetermined
13370,httpd,UNKNOWN,"/*
  Module hooks are request-oriented thus it does not suit configuration
  file utils a lot. I haven't found any clean hook to apply something
  before then after configuration file processing. Also what about
  .htaccess files?

  Thus I think that server/util.c or server/config.c
  would be a better place for this stuff.
*/",undetermined
13371,httpd,UNKNOWN,/* common stuff */,undetermined
13372,httpd,UNKNOWN,/* create per-directory config */,undetermined
13373,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
13374,httpd,UNKNOWN,/* create per-server config structure */,undetermined
13375,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
13376,httpd,UNKNOWN,/* configuration commands */,undetermined
13377,httpd,UNKNOWN,/* register hooks */,undetermined
13378,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13379,httpd,UNKNOWN,"/*
 * This module is used to load Apache modules at runtime. This means that the
 * server functionality can be extended without recompiling and even without
 * taking the server down at all. Only a HUP or AP_SIG_GRACEFUL signal
 * needs to be sent to the server to reload the dynamically loaded modules.
 *
 * To use, you'll first need to build your module as a shared library, then
 * update your configuration (httpd.conf) to get the Apache core to load the
 * module at start-up.
 *
 * The easiest way to build a module as a shared library is to use the
 * `SharedModule' command in the Configuration file, instead of `AddModule'.
 * You should also change the file extension from `.o' to `.so'. So, for
 * example, to build the status module as a shared library edit Configuration
 * and change
 *   AddModule    modules/standard/mod_status.o
 * to
 *   SharedModule modules/standard/mod_status.so
 *
 * Run Configure and make. Now Apache's httpd binary will _not_ include
 * mod_status. Instead a shared object called mod_status.so will be build, in
 * the modules/standard directory. You can build most of the modules as shared
 * libraries like this.
 *
 * To use the shared module, move the .so file(s) into an appropriate
 * directory. You might like to create a directory called ""modules"" under you
 * server root for this (e.g. /usr/local/httpd/modules).
 *
 * Then edit your conf/httpd.conf file, and add LoadModule lines. For
 * example
 *   LoadModule  status_module   modules/mod_status.so
 *
 * The first argument is the module's structure name (look at the end of the
 * module source to find this). The second option is the path to the module
 * file, relative to the server root.  Put these directives right at the top
 * of your httpd.conf file.
 *
 * Now you can start Apache. A message will be logged at ""debug"" level to your
 * error_log to confirm that the module(s) are loaded (use ""LogLevel debug""
 * directive to get these log messages).
 *
 * If you edit the LoadModule directives while the server is live you can get
 * Apache to re-load the modules by sending it a HUP or AP_SIG_GRACEFUL
 * signal as normal.  You can use this to dynamically change the capability
 * of your server without bringing it down.
 *
 * Because currently there is only limited builtin support in the Configure
 * script for creating the shared library files (`.so'), please consult your
 * vendors cc(1), ld(1) and dlopen(3) manpages to find out the appropriate
 * compiler and linker flags and insert them manually into the Configuration
 * file under CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT.
 *
 * If you still have problems figuring out the flags both try the paper
 *     http://developer.netscape.com/library/documentation/enterprise
 *                                          /unix/svrplug.htm#1013807
 * or install a Perl 5 interpreter on your platform and then run the command
 *
 *     $ perl -V:usedl -V:ccdlflags -V:cccdlflags -V:lddlflags
 *
 * This gives you what type of dynamic loading Perl 5 uses on your platform
 * and which compiler and linker flags Perl 5 uses to create the shared object
 * files.
 *
 * Another location where you can find useful hints is the `ltconfig' script
 * of the GNU libtool 1.2 package. Search for your platform name inside the
 * various ""case"" constructs.
 *
 */",undetermined
13380,httpd,UNKNOWN,"/*
 * Server configuration to keep track of actually
 * loaded modules and the corresponding module name.
 */",undetermined
13381,httpd,UNKNOWN,"/*
 * This is the cleanup for a loaded shared object. It unloads the module.
 * This is called as a cleanup function from the core.
 */",undetermined
13382,httpd,UNKNOWN,/* only unload if module information is still existing */,undetermined
13383,httpd,UNKNOWN,/* remove the module pointer from the core structure */,undetermined
13384,httpd,UNKNOWN,/* destroy the module information */,undetermined
13385,httpd,UNKNOWN,/* retry on error without path to use dlopen()'s search path */,undetermined
13386,httpd,UNKNOWN,"/*
 * This is called for the directive LoadModule and actually loads
 * a shared object file into the address space of the server process.
 */",undetermined
13387,httpd,UNKNOWN,"/* we need to setup this value for dummy to make sure that we don't try
     * to add a non-existant tree into the build when we return to
     * execute_now.
     */",undetermined
13388,httpd,UNKNOWN,"/*
     * check for already existing module
     * If it already exists, we have nothing to do
     * Check both dynamically-loaded modules and statically-linked modules.
     */",undetermined
13389,httpd,UNKNOWN,"/* make sure we're comparing apples with apples
         * make sure name of preloaded module is mod_FOO.c
         * make sure name of structure being loaded is FOO_module
         */",undetermined
13390,httpd,UNKNOWN,"/*
     * Load the file into the Apache address space
     */",undetermined
13391,httpd,UNKNOWN,"/*
     * Retrieve the pointer to the module structure through the module name:
     * First with the hidden variant (prefix `AP_') and then with the plain
     * symbol name.
     */",undetermined
13392,httpd,UNKNOWN,"/*
     * Make sure the found module structure is really a module structure
     *
     */",undetermined
13393,httpd,UNKNOWN,"/*
     * Add this module to the Apache core structures
     */",undetermined
13394,httpd,UNKNOWN,"/*
     * Register a cleanup in the config apr_pool_t (normally pconf). When
     * we do a restart (or shutdown) this cleanup will cause the
     * shared object to be unloaded.
     */",undetermined
13395,httpd,UNKNOWN,"/*
     * Finally we need to run the configuration process for the module
     */",undetermined
13396,httpd,UNKNOWN,"/*
 * This implements the LoadFile directive and loads an arbitrary
 * shared object file into the adress space of the server process.
 */",undetermined
13397,httpd,UNKNOWN,/* not NO_DLOPEN */,undetermined
13398,httpd,UNKNOWN,/* NO_DLOPEN */,undetermined
13399,httpd,UNKNOWN,/* create per-dir config */,undetermined
13400,httpd,UNKNOWN,/* merge per-dir config */,undetermined
13401,httpd,UNKNOWN,/* server config */,undetermined
13402,httpd,UNKNOWN,/* merge server config */,undetermined
13403,httpd,UNKNOWN,/* command apr_table_t */,undetermined
13404,httpd,UNKNOWN,/* register hooks */,undetermined
13405,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13406,httpd,UNKNOWN,"/**
 * @file mod_so.h
 * @brief Shared Object Loader Extension Module for Apache
 *
 * @defgroup MOD_SO mod_so
 * @ingroup APACHE_MODS
 * @{
 */",undetermined
13407,httpd,UNKNOWN,/* optional function declaration */,undetermined
13408,httpd,UNKNOWN,/* MOD_SO_H */,undetermined
13409,httpd,UNKNOWN,/** @} */,undetermined
13410,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13411,httpd,UNKNOWN,"/* Watchdog module.
 */",undetermined
13412,httpd,UNKNOWN,/* Execute watchdog callback with STOPPING state */,undetermined
13413,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13414,httpd,UNKNOWN,/*                                                                          */,undetermined
13415,httpd,UNKNOWN,/* Main watchdog worker thread.                                             */,undetermined
13416,httpd,UNKNOWN,/* For singleton workers child thread that first obtains the process       */,undetermined
13417,httpd,UNKNOWN,/* mutex is running. Threads in other child's are locked on mutex.          */,undetermined
13418,httpd,UNKNOWN,/*                                                                          */,undetermined
13419,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13420,httpd,UNKNOWN,"/* Sleep after we were locked
                     * up to 1 second. Httpd can be
                     * in the middle of shutdown, and
                     * our child didn't yet received
                     * the shutdown signal.
                     */",undetermined
13421,httpd,UNKNOWN,/* Execute watchdog callback */,undetermined
13422,httpd,UNKNOWN,/* Main execution loop */,undetermined
13423,httpd,UNKNOWN,/* Execute watchdog callback */,undetermined
13424,httpd,UNKNOWN,"/* This is hook mode watchdog
             * running on WatchogInterval
             */",undetermined
13425,httpd,UNKNOWN,/* Run watchdog step hook */,undetermined
13426,httpd,UNKNOWN,"/* Run the watchdog exit hooks.
         * If this was singleton watchdog the init hook
         * might never been called, so skip the exit hook
         * in that case as well.
         */",undetermined
13427,httpd,UNKNOWN,/* Execute watchdog callback with STOPPING state */,undetermined
13428,httpd,UNKNOWN,/* Create thread startup mutex */,undetermined
13429,httpd,UNKNOWN,/* Initialize singleton mutex in child */,undetermined
13430,httpd,UNKNOWN,"/* This mutex fixes problems with a fast start/fast end, where the pool
     * cleanup was being invoked before the thread completely spawned.
     */",undetermined
13431,httpd,UNKNOWN,/* Start the newly created watchdog */,undetermined
13432,httpd,UNKNOWN,"/* Parent threads are not supported for
         * forked mpm's
         */",undetermined
13433,httpd,UNKNOWN,"/* We have existing callback.
             * Update the interval and reset status, so the
             * callback and continue execution if stopped earlier.
             */",undetermined
13434,httpd,UNKNOWN,"/* We have already registered callback.
             * Do not allow callbacks that have the same
             * function and data pointers.
             */",undetermined
13435,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13436,httpd,UNKNOWN,/*                                                                          */,undetermined
13437,httpd,UNKNOWN,/* Pre config hook.                                                         */,undetermined
13438,httpd,UNKNOWN,/* Create default watchdogs for parent and child                            */,undetermined
13439,httpd,UNKNOWN,/* Parent watchdog executes inside parent proces so it doesn't need the     */,undetermined
13440,httpd,UNKNOWN,/* singleton mutex                                                          */,undetermined
13441,httpd,UNKNOWN,/*                                                                          */,undetermined
13442,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13443,httpd,UNKNOWN,"/* Create parent process watchdog for
         * non forked mpm's only.
         */",undetermined
13444,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13445,httpd,UNKNOWN,/*                                                                          */,undetermined
13446,httpd,UNKNOWN,/* Post config hook.                                                        */,undetermined
13447,httpd,UNKNOWN,/* Create watchdog thread in parent and initializes Watchdog module         */,undetermined
13448,httpd,UNKNOWN,/*                                                                          */,undetermined
13449,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13450,httpd,UNKNOWN,/* First time config phase -- skip. */,undetermined
13451,httpd,UNKNOWN,"/* One of the modules returned OK to this watchog.
                         * Mark it as active
                         */",undetermined
13452,httpd,UNKNOWN,"/* We have active watchdog.
                     * Create the watchdog thread
                     */",undetermined
13453,httpd,UNKNOWN,"/* One of the modules returned OK to this watchog.
                         * Mark it as active
                         */",undetermined
13454,httpd,UNKNOWN,"/* We have some callbacks registered.
                     * Create mutexes for singleton watchdogs
                     */",undetermined
13455,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13456,httpd,UNKNOWN,/*                                                                          */,undetermined
13457,httpd,UNKNOWN,/* Child init hook.                                                         */,undetermined
13458,httpd,UNKNOWN,/* Create watchdog threads and initializes Mutexes in child                 */,undetermined
13459,httpd,UNKNOWN,/*                                                                          */,undetermined
13460,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13461,httpd,UNKNOWN,"/* We don't have anything configured, bail out.
         */",undetermined
13462,httpd,UNKNOWN,"/* We have some callbacks registered.
                 * Kick of the watchdog
                 */",undetermined
13463,httpd,UNKNOWN,/* No point to continue */,undetermined
13464,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13465,httpd,UNKNOWN,/*                                                                          */,undetermined
13466,httpd,UNKNOWN,/* WatchdogInterval directive                                               */,undetermined
13467,httpd,UNKNOWN,/*                                                                          */,undetermined
13468,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13469,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13470,httpd,UNKNOWN,/*                                                                          */,undetermined
13471,httpd,UNKNOWN,/* List of directives specific to our module.                               */,undetermined
13472,httpd,UNKNOWN,/*                                                                          */,undetermined
13473,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13474,httpd,UNKNOWN,/* directive name               */,undetermined
13475,httpd,UNKNOWN,/* config action routine        */,undetermined
13476,httpd,UNKNOWN,/* argument to include in call  */,undetermined
13477,httpd,UNKNOWN,/* where available              */,undetermined
13478,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13479,httpd,UNKNOWN,/*                                                                          */,undetermined
13480,httpd,UNKNOWN,/* Which functions are responsible for which hooks in the server.           */,undetermined
13481,httpd,UNKNOWN,/*                                                                          */,undetermined
13482,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13483,httpd,UNKNOWN,"/* Only the mpm_winnt has child init hook handler.
     * Make sure that we are called after the mpm child init handler
     * initializes.
     */",undetermined
13484,httpd,UNKNOWN,"/* Pre config handling
     */",undetermined
13485,httpd,UNKNOWN,"/* Post config handling
     */",undetermined
13486,httpd,UNKNOWN,"/* Child init hook
     */",undetermined
13487,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13488,httpd,UNKNOWN,/*                                                                          */,undetermined
13489,httpd,UNKNOWN,/* The list of callback routines and data structures that provide           */,undetermined
13490,httpd,UNKNOWN,/* the static hooks into our module from the other parts of the server.     */,undetermined
13491,httpd,UNKNOWN,/*                                                                          */,undetermined
13492,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13493,httpd,UNKNOWN,/* create per-directory config structure    */,undetermined
13494,httpd,UNKNOWN,/* merge per-directory config structures    */,undetermined
13495,httpd,UNKNOWN,/* create per-server config structure       */,undetermined
13496,httpd,UNKNOWN,/* merge per-server config structures       */,undetermined
13497,httpd,UNKNOWN,/* command apr_table_t                      */,undetermined
13498,httpd,UNKNOWN,/* register hooks                           */,undetermined
13499,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13500,httpd,UNKNOWN,/*                                                                          */,undetermined
13501,httpd,UNKNOWN,/* The list of optional hooks that we provide                               */,undetermined
13502,httpd,UNKNOWN,/*                                                                          */,undetermined
13503,httpd,UNKNOWN,/*--------------------------------------------------------------------------*/,undetermined
13504,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13505,httpd,UNKNOWN,"/**
 * @file  mod_watchdog.h
 * @brief Watchdog module for Apache
 *
 * @defgroup MOD_WATCHDOG watchdog
 * @ingroup  APACHE_MODS
 * \@{
 */",undetermined
13506,httpd,UNKNOWN,"/**
 * Default singleton watchdog instance name.
 * Singleton watchdog is protected by mutex and
 * guaranteed to be run inside a single child process
 * at any time.
 */",undetermined
13507,httpd,UNKNOWN,"/**
 * Default watchdog instance name
 */",undetermined
13508,httpd,UNKNOWN,"/**
 * Default Watchdog interval
 */",undetermined
13509,httpd,UNKNOWN,/* 1 second     */,undetermined
13510,httpd,UNKNOWN,"/**
 * Watchdog thread timer resolution
 */",undetermined
13511,httpd,UNKNOWN,/* 100 ms       */,undetermined
13512,httpd,UNKNOWN,/* State values for callback */,undetermined
13513,httpd,UNKNOWN,"/* Create a set of AP_WD_DECLARE(type), AP_WD_DECLARE_NONSTD(type) and
 * AP_WD_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
13514,httpd,UNKNOWN,"/**
 * Callback function used for watchdog.
 * @param state Watchdog state function. See @p AP_WATCHDOG_STATE_ .
 * @param data is what was passed to @p ap_watchdog_register_callback function.
 * @param pool Temporary callback pool destroyed after the call.
 * @return APR_SUCCESS to continue calling this callback.
 */",undetermined
13515,httpd,UNKNOWN,"/**
 * Get watchdog instance.
 * @param watchdog Storage for watchdog instance.
 * @param name Watchdog name.
 * @param parent Non-zero to get the parent process watchdog instance.
 * @param singleton Non-zero to get the singleton watchdog instance.
 * @param p The pool to use.
 * @return APR_SUCCESS if all went well
 * @remark Use @p AP_WATCHDOG_DEFAULT to get default watchdog instance.
 *         If separate watchdog thread is needed provide unique name
 *         and function will create a new watchdog instance.
 *         Note that default client process watchdog works in singleton mode.
 */",undetermined
13516,httpd,UNKNOWN,"/**
 * Register watchdog callback.
 * @param watchdog Watchdog to use
 * @param interval Interval on which the callback function will execute.
 * @param callback  The function to call on watchdog event.
 * @param data The data to pass to the callback function.
 * @return APR_SUCCESS if all went well. APR_EEXIST if already registered.
 */",undetermined
13517,httpd,UNKNOWN,"/**
 * Update registered watchdog callback interval.
 * @param w Watchdog to use
 * @param interval New interval on which the callback function will execute.
 * @param callback  The function to call on watchdog event.
 * @param data The data to pass to the callback function.
 * @return APR_SUCCESS if all went well. APR_EOF if callback was not found.
 */",undetermined
13518,httpd,UNKNOWN,"/**
 * Watchdog require hook.
 * @param s The server record
 * @param name Watchdog name.
 * @param parent Non-zero to indicate the parent process watchdog mode.
 * @param singleton Non-zero to indicate the singleton watchdog mode.
 * @return OK to enable notifications from this watchdog, DECLINED otherwise.
 * @remark This is called in post config phase for all watchdog instances
 *         that have no callbacks registered. Modules using this hook
 *         should ensure that their post_config hook is called after watchdog
 *         post_config.
 */",undetermined
13519,httpd,UNKNOWN,"/**
 * Watchdog initialize hook.
 * It is called after the watchdog thread is initialized.
 * @param s The server record
 * @param name Watchdog name.
 * @param pool The pool used to create the watchdog.
 */",undetermined
13520,httpd,UNKNOWN,"/**
 * Watchdog terminate hook.
 * It is called when the watchdog thread is terminated.
 * @param s The server record
 * @param name Watchdog name.
 * @param pool The pool used to create the watchdog.
 */",undetermined
13521,httpd,UNKNOWN,"/**
 * Fixed interval watchdog hook.
 * It is called regularly on @p AP_WD_TM_INTERVAL interval.
 * @param s The server record
 * @param name Watchdog name.
 * @param pool Temporary pool destroyed after the call.
 */",undetermined
13522,httpd,UNKNOWN,/* MOD_WATCHDOG_H */,undetermined
13523,httpd,UNKNOWN,/** \@} */,undetermined
13524,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13525,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
13526,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
13527,httpd,UNKNOWN,/* create per-server config structure */,undetermined
13528,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
13529,httpd,UNKNOWN,/* command apr_table_t */,undetermined
13530,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13531,httpd,UNKNOWN,/* How often we update the stats file */,undetermined
13532,httpd,UNKNOWN,/* TODO: Make a runtime config */,undetermined
13533,httpd,UNKNOWN,/* XXX: The same exists in mod_lbmethod_heartbeat.c where it is named argstr_to_table */,undetermined
13534,httpd,UNKNOWN,/* Split the string in two */,undetermined
13535,httpd,UNKNOWN,/* Skip passed the = */,undetermined
13536,httpd,UNKNOWN,"/*
           ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
           ""Found query arg: %s = %s"", key, value);
         */",undetermined
13537,httpd,UNKNOWN,/* Store in the slotmem */,undetermined
13538,httpd,UNKNOWN,/* Read the id corresponding to the entry in the slotmem */,undetermined
13539,httpd,UNKNOWN,/* update the entry or create it if not existing */,undetermined
13540,httpd,UNKNOWN,/* We call do_all (to try to update) otherwise grab + put */,undetermined
13541,httpd,UNKNOWN,/* XXX locking for grab() / put() */,undetermined
13542,httpd,UNKNOWN,/* TODO: Update stats file (!) */,undetermined
13543,httpd,UNKNOWN,/* Read the file and update the line corresponding to the node */,undetermined
13544,httpd,UNKNOWN,/* copy things we can't process */,undetermined
13545,httpd,UNKNOWN,/* Update seen time according to the last file modification */,undetermined
13546,httpd,UNKNOWN,/* Store in a file */,undetermined
13547,httpd,UNKNOWN,/* TODO: Update stats file (!) */,undetermined
13548,httpd,UNKNOWN,"/*
             * Skip this entry from the heartbeat file -- when it comes back,
             * we will reuse the memory...
             */",undetermined
13549,httpd,UNKNOWN,/* Store in a slotmem */,undetermined
13550,httpd,UNKNOWN,/* remove it */,undetermined
13551,httpd,UNKNOWN,/* update it */,undetermined
13552,httpd,UNKNOWN,/* Store/update the stats */,undetermined
13553,httpd,UNKNOWN,/* Process a message received from a backend node */,undetermined
13554,httpd,UNKNOWN,/* TODO: REMOVE ME BEFORE PRODUCTION (????) */,undetermined
13555,httpd,UNKNOWN,/* Read message from multicast socket */,undetermined
13556,httpd,UNKNOWN,/* store in the slotmem or in the file depending on configuration */,undetermined
13557,httpd,UNKNOWN,"/* TODO: Insted HN_UPDATE_SEC use
             * the ctx->interval
             */",undetermined
13558,httpd,UNKNOWN,/* Create the slotmem */,undetermined
13559,httpd,UNKNOWN,/* this is the real thing */,undetermined
13560,httpd,UNKNOWN,/* Register a callback with zero interval. */,undetermined
13561,httpd,UNKNOWN,/* we can't use hm_processmsg because it uses hm_get_server() */,undetermined
13562,httpd,UNKNOWN,"/* TODO: Add directive for tuning the update interval
     */",undetermined
13563,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
13564,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
13565,httpd,UNKNOWN,/* create per-server config structure */,undetermined
13566,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
13567,httpd,UNKNOWN,/* command apr_table_t */,undetermined
13568,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13569,httpd,UNKNOWN,"/**
 * @file cache_common.h
 * @brief Common Cache structs
 *
 * @defgroup Cache_cache  Cache Functions
 * @ingroup  MOD_CACHE
 * @{
 */",undetermined
13570,httpd,UNKNOWN,/* a cache control header breakdown */,undetermined
13571,httpd,UNKNOWN,/* no cache by header match */,undetermined
13572,httpd,UNKNOWN,/* private by header match */,undetermined
13573,httpd,UNKNOWN,/* has this entity been invalidated? */,undetermined
13574,httpd,UNKNOWN,"/* if positive, then set */",undetermined
13575,httpd,UNKNOWN,"/* if positive, then set */",undetermined
13576,httpd,UNKNOWN,"/* if positive, then set */",undetermined
13577,httpd,UNKNOWN,"/* if positive, then set */",undetermined
13578,httpd,UNKNOWN,/* CACHE_COMMON_H */,undetermined
13579,httpd,UNKNOWN,/** @} */,undetermined
13580,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13581,httpd,UNKNOWN,"/**
 * @file cache_disk_common.h
 * @brief Common Disk Cache vars/structs
 *
 * @defgroup Cache_cache  Cache Functions
 * @ingroup  MOD_DISK_CACHE
 * @{
 */",undetermined
13582,httpd,UNKNOWN,/* Indicates the format of the header struct stored on-disk. */,undetermined
13583,httpd,UNKNOWN,/* The HTTP status code returned for this response.  */,undetermined
13584,httpd,UNKNOWN,/* The size of the entity name that follows. */,undetermined
13585,httpd,UNKNOWN,/* The number of times we've cached this entity. */,undetermined
13586,httpd,UNKNOWN,/* Miscellaneous time values. */,undetermined
13587,httpd,UNKNOWN,"/* The ident of the body file, so we can test the body matches the header */",undetermined
13588,httpd,UNKNOWN,/* Does this cached request have a body? */,undetermined
13589,httpd,UNKNOWN,/* The parsed cache control header */,undetermined
13590,httpd,UNKNOWN,/* CACHE_DIST_COMMON_H */,undetermined
13591,httpd,UNKNOWN,/** @} */,undetermined
13592,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13593,httpd,UNKNOWN,"/**
 * @file cache_socache_common.h
 * @brief Common Shared Object Cache vars/structs
 *
 * @defgroup Cache_cache  Cache Functions
 * @ingroup  MOD_SOCACHE_CACHE
 * @{
 */",undetermined
13594,httpd,UNKNOWN,/* Indicates the format of the header struct stored on-disk. */,undetermined
13595,httpd,UNKNOWN,/* The HTTP status code returned for this response.  */,undetermined
13596,httpd,UNKNOWN,/* The size of the entity name that follows. */,undetermined
13597,httpd,UNKNOWN,/* The number of times we've cached this entity. */,undetermined
13598,httpd,UNKNOWN,/* Miscellaneous time values. */,undetermined
13599,httpd,UNKNOWN,/* Does this cached request have a body? */,undetermined
13600,httpd,UNKNOWN,/* The parsed cache control header */,undetermined
13601,httpd,UNKNOWN,/* CACHE_SOCACHE_COMMON_H */,undetermined
13602,httpd,UNKNOWN,/** @} */,undetermined
13603,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13604,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
13605,httpd,UNKNOWN,"/*
 * delete all URL entities from the cache
 *
 */",undetermined
13606,httpd,UNKNOWN,"/* Remove the stale cache entry if present. If not, we're
     * being called from outside of a request; remove the
     * non-stale handle.
     */",undetermined
13607,httpd,UNKNOWN,"/* for each specified cache type, delete the URL */",undetermined
13608,httpd,UNKNOWN,"/*
 * create a new URL entity in the cache
 *
 * It is possible to store more than once entity per URL. This
 * function will always create a new entity, regardless of whether
 * other entities already exist for the same URL.
 *
 * The size of the entity is provided so that a cache module can
 * decide whether or not it wants to cache this particular entity.
 * If the size is unknown, a size of -1 should be set.
 */",undetermined
13609,httpd,UNKNOWN,/* This should never happen */,undetermined
13610,httpd,UNKNOWN,"/* for each specified cache type, delete the URL */",undetermined
13611,httpd,UNKNOWN,"/* any stored Warning headers with warn-code 1xx (see section
         * 14.46) MUST be deleted from the cache entry and the forwarded
         * response.
         */",undetermined
13612,httpd,UNKNOWN,"/* any stored Warning headers with warn-code 2xx MUST be retained
         * in the cache entry and the forwarded response.
         */",undetermined
13613,httpd,UNKNOWN,"/**
 * Take two sets of headers, sandwich them together, and apply the result to
 * r->headers_out.
 *
 * To complicate this, a header may be duplicated in either table. Should a
 * header exist in the top table, all matching headers will be removed from
 * the bottom table before the headers are combined. The Warning headers are
 * handled specially. Warnings are added rather than being replaced, while
 * in the case of revalidation 1xx Warnings are stripped.
 *
 * The Content-Type and Last-Modified headers are then re-parsed and inserted
 * into the request.
 */",undetermined
13614,httpd,UNKNOWN,"/*
         * Also unset possible Content-Type headers in r->headers_out and
         * r->err_headers_out as they may be different to what we have received
         * from the cache.
         * Actually they are not needed as r->content_type set by
         * ap_set_content_type above will be used in the store_headers functions
         * of the storage providers as a fallback and the HTTP_HEADER filter
         * does overwrite the Content-Type header with r->content_type anyway.
         */",undetermined
13615,httpd,UNKNOWN,"/* If the cache gave us a Last-Modified header, we can't just
     * pass it on blindly because of restrictions on future values.
     */",undetermined
13616,httpd,UNKNOWN,"/*
 * select a specific URL entity in the cache
 *
 * It is possible to store more than one entity per URL. Content
 * negotiation is used to select an entity. Once an entity is
 * selected, details of it are stored in the per request
 * config to save time when serving the request later.
 *
 * This function returns OK if successful, DECLINED if no
 * cached entity fits the bill.
 */",undetermined
13617,httpd,UNKNOWN,/* This should never happen */,undetermined
13618,httpd,UNKNOWN,"/* if no-cache, we can't serve from the cache, but we may store to the
     * cache.
     */",undetermined
13619,httpd,UNKNOWN,/* go through the cache types till we get a match */,undetermined
13620,httpd,UNKNOWN,/* try again with next cache type */,undetermined
13621,httpd,UNKNOWN,"/*
             * Check Content-Negotiation - Vary
             *
             * At this point we need to make sure that the object we found in
             * the cache is the same object that would be delivered to the
             * client, when the effects of content negotiation are taken into
             * effect.
             *
             * In plain english, we want to make sure that a language-negotiated
             * document in one language is not given to a client asking for a
             * language negotiated document in a different language by mistake.
             *
             * This code makes the assumption that the storage manager will
             * cache the req_hdrs if the response contains a Vary
             * header.
             *
             * RFC2616 13.6 and 14.44 describe the Vary mechanism.
             */",undetermined
13622,httpd,UNKNOWN,"/*
                 * is this header in the request and the header in the cached
                 * request identical? If not, we give up and do a straight get
                 */",undetermined
13623,httpd,UNKNOWN,"/* both headers NULL, so a match - do nothing */",undetermined
13624,httpd,UNKNOWN,/* both headers exist and are equal - do nothing */,undetermined
13625,httpd,UNKNOWN,"/* headers do not match, so Vary failed */",undetermined
13626,httpd,UNKNOWN,"/* no vary match, try next provider */",undetermined
13627,httpd,UNKNOWN,/* try again with next cache type */,undetermined
13628,httpd,UNKNOWN,"/*
             * RFC2616 13.3.4 Rules for When to Use Entity Tags and Last-Modified
             * Dates: An HTTP/1.1 caching proxy, upon receiving a conditional request
             * that includes both a Last-Modified date and one or more entity tags as
             * cache validators, MUST NOT return a locally cached response to the
             * client unless that cached response is consistent with all of the
             * conditional header fields in the request.
             */",undetermined
13629,httpd,UNKNOWN,/* Is our cached response fresh enough? */,undetermined
13630,httpd,UNKNOWN,"/* Cache-Control: only-if-cached and revalidation required, try
                 * the next provider
                 */",undetermined
13631,httpd,UNKNOWN,/* try again with next cache type */,undetermined
13632,httpd,UNKNOWN,/* set aside the stale entry for accessing later */,undetermined
13633,httpd,UNKNOWN,"/* if no existing conditionals, use conditionals of our own */",undetermined
13634,httpd,UNKNOWN,/* Remove existing conditionals that might conflict with ours */,undetermined
13635,httpd,UNKNOWN,"/* If we have a cached etag and/or Last-Modified add in
                         * our own conditionals.
                         */",undetermined
13636,httpd,UNKNOWN,"/*
                         * Do not do Range requests with our own conditionals: If
                         * we get 304 the Range does not matter and otherwise the
                         * entity changed and we want to have the complete entity
                         */",undetermined
13637,httpd,UNKNOWN,"/* ready to revalidate, pretend we were never here */",undetermined
13638,httpd,UNKNOWN,"/* Okay, this response looks okay.  Merge in our stuff and go. */",undetermined
13639,httpd,UNKNOWN,/* try again with next cache type */,undetermined
13640,httpd,UNKNOWN,/* oo-er! an error */,undetermined
13641,httpd,UNKNOWN,"/* if Cache-Control: only-if-cached, and not cached, return 504 */",undetermined
13642,httpd,UNKNOWN,"/*
         * We have been here before during the processing of this request.
         */",undetermined
13643,httpd,UNKNOWN,"/*
     * Get the module configuration. We need this for the CacheIgnoreQueryString
     * option below.
     */",undetermined
13644,httpd,UNKNOWN,"/*
     * Use the canonical name to improve cache hit rate, but only if this is
     * not a proxy request or if this is a reverse proxy request.
     * We need to handle both cases in the same manner as for the reverse proxy
     * case we have the following situation:
     *
     * If a cached entry is looked up by mod_cache's quick handler r->proxyreq
     * is still unset in the reverse proxy case as it only gets set in the
     * translate name hook (either by ProxyPass or mod_rewrite) which is run
     * after the quick handler hook. This is different to the forward proxy
     * case where it gets set before the quick handler is run (in the
     * post_read_request hook).
     * If a cache entry is created by the CACHE_SAVE filter we always have
     * r->proxyreq set correctly.
     * So we must ensure that in the reverse proxy case we use the same code
     * path and using the canonical name seems to be the right thing to do
     * in the reverse proxy case.
     */",undetermined
13645,httpd,UNKNOWN,"/* Use _default_ as the hostname if none present, as in mod_vhost */",undetermined
13646,httpd,UNKNOWN,/* Copy the parsed uri hostname */,undetermined
13647,httpd,UNKNOWN,/* const work-around */,undetermined
13648,httpd,UNKNOWN,"/* We are a proxied request, with no hostname. Unlikely
         * to get very far - but just in case */",undetermined
13649,httpd,UNKNOWN,"/*
     * Copy the scheme, ensuring that it is lower case. If the parsed uri
     * contains no string or if this is not a proxy request get the http
     * scheme for this request. As r->parsed_uri.scheme is not set if this
     * is a reverse proxy request, it is ensured that the cases
     * ""no proxy request"" and ""reverse proxy request"" are handled in the same
     * manner (see above why this is needed).
     */",undetermined
13650,httpd,UNKNOWN,/* Copy the scheme and lower-case it */,undetermined
13651,httpd,UNKNOWN,/* const work-around */,undetermined
13652,httpd,UNKNOWN,"/*
     * If this is a proxy request, but not a reverse proxy request (see comment
     * above why these cases must be handled in the same manner), copy the
     * URI's port-string (which may be a service name). If the URI contains
     * no port-string, use apr-util's notion of the default port for that
     * scheme - if available. Otherwise use the port-number of the current
     * server.
     */",undetermined
13653,httpd,UNKNOWN,"/* No port string given in the AbsoluteUri, and we have no
             * idea what the default port for the scheme is. Leave it
             * blank and live with the inefficiency of some extra cached
             * entities.
             */",undetermined
13654,httpd,UNKNOWN,/* Use the server port */,undetermined
13655,httpd,UNKNOWN,"/*
     * Check if we need to ignore session identifiers in the URL and do so
     * if needed.
     */",undetermined
13656,httpd,UNKNOWN,"/*
             * Check that we have a parameter separator in the last segment
             * of the path and that the parameter matches our identifier
             */",undetermined
13657,httpd,UNKNOWN,"/*
             * Check if the identifier is in the querystring and cut it out.
             */",undetermined
13658,httpd,UNKNOWN,"/*
                 * First check if the identifier is at the beginning of the
                 * querystring and followed by a '='
                 */",undetermined
13659,httpd,UNKNOWN,"/*
                     * In order to avoid subkey matching (PR 48401) prepend
                     * identifier with a '&' and append a '='
                     */",undetermined
13660,httpd,UNKNOWN,/* If we found something we are sitting on the '&' */,undetermined
13661,httpd,UNKNOWN,"/*
                         * If querystring is not """", then we have the case
                         * that the identifier parameter we removed was the
                         * last one in the original querystring. Hence we have
                         * a trailing '&' which needs to be removed.
                         */",undetermined
13662,httpd,UNKNOWN,"/* Key format is a URI, optionally without the query-string */",undetermined
13663,httpd,UNKNOWN,"/*
     * Store the key in the request_config for the cache as r->parsed_uri
     * might have changed in the time from our first visit here triggered by the
     * quick handler and our possible second visit triggered by the CACHE_SAVE
     * filter (e.g. r->parsed_uri got unescaped). In this case we would save the
     * resource in the cache under a key where it is never found by the quick
     * handler during following requests.
     */",undetermined
13664,httpd,UNKNOWN,"/*
 * Invalidate a specific URL entity in all caches
 *
 * All cached entities for this URL are removed, usually in
 * response to a POST/PUT or DELETE.
 *
 * This function returns OK if at least one entity was found and
 * removed, and DECLINED if no cached entities were removed.
 */",undetermined
13665,httpd,UNKNOWN,/* This should never happen */,undetermined
13666,httpd,UNKNOWN,/* go through the cache types */,undetermined
13667,httpd,UNKNOWN,/* invalidate the request uri */,undetermined
13668,httpd,UNKNOWN,/* invalidate the Location */,undetermined
13669,httpd,UNKNOWN,/* invalidate the Content-Location */,undetermined
13670,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13671,httpd,UNKNOWN,"/**
 * @file cache_storage.h
 * @brief Cache Storage Functions
 *
 * @defgroup Cache_storage  Cache Storage Functions
 * @ingroup  MOD_CACHE
 * @{
 */",undetermined
13672,httpd,UNKNOWN,"/**
 * cache_storage.c
 */",undetermined
13673,httpd,UNKNOWN,"/**
 * invalidate a specific URL entity in all caches
 *
 * All cached entities for this URL are removed, usually in
 * response to a POST/PUT or DELETE.
 *
 * This function returns OK if at least one entity was found and
 * removed, and DECLINED if no cached entities were removed.
 * @param cache cache_request_rec
 * @param r request_rec
 */",undetermined
13674,httpd,UNKNOWN,"/**
 * Merge in cached headers into the response
 * @param h cache_handle_t
 * @param r request_rec
 * @param top headers to be applied
 * @param bottom headers to be overwritten
 * @param revalidation true if revalidation is taking place
 */",undetermined
13675,httpd,UNKNOWN,/* !CACHE_STORAGE_H */,undetermined
13676,httpd,UNKNOWN,/** @} */,undetermined
13677,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13678,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
13679,httpd,UNKNOWN,"/* Determine if ""url"" matches the hostname, scheme and port and path
 * in ""filter"". All but the path comparisons are case-insensitive.
 */",undetermined
13680,httpd,UNKNOWN,"/* Scheme, hostname port and local part. The filter URI and the
     * URI we test may have the following shapes:
     *   /<path>
     *   <scheme>[:://<hostname>[:<port>][/<path>]]
     * That is, if there is no scheme then there must be only the path,
     * and we check only the path; if there is a scheme, we check the
     * scheme for equality, and then if present we match the hostname,
     * and then if present match the port, and finally the path if any.
     *
     * Note that this means that ""/<path>"" only matches local paths,
     * and to match proxied paths one *must* specify the scheme.
     */",undetermined
13681,httpd,UNKNOWN,/* Is the filter is just for a local path or a proxy URI? */,undetermined
13682,httpd,UNKNOWN,/* The URI scheme must be present and identical except for case. */,undetermined
13683,httpd,UNKNOWN,"/* If the filter hostname is null or empty it matches any hostname,
         * if it begins with a ""*"" it matches the _end_ of the URI hostname
         * excluding the ""*"", if it begins with a ""."" it matches the _end_
         * of the URI * hostname including the ""."", otherwise it must match
         * the URI hostname exactly. */",undetermined
13684,httpd,UNKNOWN,"/* If the filter port is empty it matches any URL port.
         * If the filter or URL port are missing, or the URL port is
         * empty, they default to the port for their scheme. */",undetermined
13685,httpd,UNKNOWN,/* NOTE:  ap_port_of_scheme will return 0 if given NULL input */,undetermined
13686,httpd,UNKNOWN,"/* For HTTP caching purposes, an empty (NULL) path is equivalent to
     * a single ""/"" path. RFCs 3986/2396
     */",undetermined
13687,httpd,UNKNOWN,"/* Url has met all of the filter conditions so far, determine
     * if the paths match.
     */",undetermined
13688,httpd,UNKNOWN,/* Fetch from global config and add to the list. */,undetermined
13689,httpd,UNKNOWN,/* Log an error! */,undetermined
13690,httpd,UNKNOWN,/* per directory cache disable */,undetermined
13691,httpd,UNKNOWN,/* global cache disable */,undetermined
13692,httpd,UNKNOWN,/* Stop searching now. */,undetermined
13693,httpd,UNKNOWN,/* loop through all the per directory cacheenable entries */,undetermined
13694,httpd,UNKNOWN,/* loop through all the global cacheenable entries */,undetermined
13695,httpd,UNKNOWN,/* do a HTTP/1.1 age calculation */,undetermined
13696,httpd,UNKNOWN,/* Perform an HTTP/1.1 age calculation. (RFC2616 13.2.3) */,undetermined
13697,httpd,UNKNOWN,"/**
 * Try obtain a cache wide lock on the given cache key.
 *
 * If we return APR_SUCCESS, we obtained the lock, and we are clear to
 * proceed to the backend. If we return APR_EEXISTS, then the lock is
 * already locked, someone else has gone to refresh the backend data
 * already, so we must return stale data with a warning in the mean
 * time. If we return anything else, then something has gone pear
 * shaped, and we allow the request through to the backend regardless.
 *
 * This lock is created from the request pool, meaning that should
 * something go wrong and the lock isn't deleted on return of the
 * request headers from the backend for whatever reason, at worst the
 * lock will be cleaned up when the request dies or finishes.
 *
 * If something goes truly bananas and the lock isn't deleted when the
 * request dies, the lock will be trashed when its max-age is reached,
 * or when a request arrives containing a Cache-Control: no-cache. At
 * no point is it possible for this lock to permanently deny access to
 * the backend.
 */",undetermined
13698,httpd,UNKNOWN,"/* no locks configured, leave */",undetermined
13699,httpd,UNKNOWN,"/* lock already obtained earlier? if so, success */",undetermined
13700,httpd,UNKNOWN,/* create the key if it doesn't exist */,undetermined
13701,httpd,UNKNOWN,"/* create a hashed filename from the key, and save it for later */",undetermined
13702,httpd,UNKNOWN,"/* lock files represent discrete just-went-stale URLs ""in flight"", so
     * we support a simple two level directory structure, more is overkill.
     */",undetermined
13703,httpd,UNKNOWN,/* make the directories */,undetermined
13704,httpd,UNKNOWN,/* is an existing lock file too old? */,undetermined
13705,httpd,UNKNOWN,/* try obtain a lock on the file */,undetermined
13706,httpd,UNKNOWN,"/**
 * Remove the cache lock, if present.
 *
 * First, try to close the file handle, whose delete-on-close should
 * kill the file. Otherwise, just delete the file by name.
 *
 * If no lock name has yet been calculated, do the calculation of the
 * lock name first before trying to delete the file.
 *
 * If an optional bucket brigade is passed, the lock will only be
 * removed if the bucket brigade contains an EOS bucket.
 */",undetermined
13707,httpd,UNKNOWN,"/* no locks configured, leave */",undetermined
13708,httpd,UNKNOWN,"/* no eos found in brigade, don't delete anything just yet,
             * we are not done.
             */",undetermined
13709,httpd,UNKNOWN,/* create the key if it doesn't exist */,undetermined
13710,httpd,UNKNOWN,"/* create a hashed filename from the key, and save it for later */",undetermined
13711,httpd,UNKNOWN,"/* lock files represent discrete just-went-stale URLs ""in flight"", so
         * we support a simple two level directory structure, more is overkill.
         */",undetermined
13712,httpd,UNKNOWN,"/*
     * At this point, we may have data cached, but the request may have
     * specified that cached data may not be used in a response.
     *
     * This is covered under RFC2616 section 14.9.4 (Cache Revalidation and
     * Reload Controls).
     *
     * - RFC2616 14.9.4 End to end reload, Cache-Control: no-cache, or Pragma:
     * no-cache. The server MUST NOT use a cached copy when responding to such
     * a request.
     */",undetermined
13713,httpd,UNKNOWN,/* This value comes from the client's initial request. */,undetermined
13714,httpd,UNKNOWN,"/*
     * At this point, we may have data cached, but the request may have
     * specified that cached data may not be used in a response.
     *
     * - RFC2616 14.9.2 What May be Stored by Caches. If Cache-Control:
     * no-store arrives, do not serve from or store to the cache.
     */",undetermined
13715,httpd,UNKNOWN,/* This value comes from the client's initial request. */,undetermined
13716,httpd,UNKNOWN,/* We're not allowed to serve a cached copy */,undetermined
13717,httpd,UNKNOWN,"/*
     * We now want to check if our cached data is still fresh. This depends
     * on a few things, in this order:
     *
     * - RFC2616 14.9.4 End to end reload, Cache-Control: no-cache. no-cache
     * in either the request or the cached response means that we must
     * perform the request unconditionally, and ignore cached content. We
     * should never reach here, but if we do, mark the content as stale,
     * as this is the best we can do.
     *
     * - RFC2616 14.32 Pragma: no-cache This is treated the same as
     * Cache-Control: no-cache.
     *
     * - RFC2616 14.9.3 Cache-Control: max-stale, must-revalidate,
     * proxy-revalidate if the max-stale request header exists, modify the
     * stale calculations below so that an object can be at most <max-stale>
     * seconds stale before we request a revalidation, _UNLESS_ a
     * must-revalidate or proxy-revalidate cached response header exists to
     * stop us doing this.
     *
     * - RFC2616 14.9.3 Cache-Control: s-maxage the origin server specifies the
     * maximum age an object can be before it is considered stale. This
     * directive has the effect of proxy|must revalidate, which in turn means
     * simple ignore any max-stale setting.
     *
     * - RFC2616 14.9.4 Cache-Control: max-age this header can appear in both
     * requests and responses. If both are specified, the smaller of the two
     * takes priority.
     *
     * - RFC2616 14.21 Expires: if this request header exists in the cached
     * entity, and it's value is in the past, it has expired.
     *
     */",undetermined
13718,httpd,UNKNOWN,/* This value comes from the client's initial request. */,undetermined
13719,httpd,UNKNOWN,"/* Treat as stale, causing revalidation */",undetermined
13720,httpd,UNKNOWN,/* These come from the cached entity. */,undetermined
13721,httpd,UNKNOWN,"/*
         * The cached entity contained Cache-Control: no-cache, or a
         * no-cache with a header present, or a private with a header
         * present, or the cached entity has been invalidated in the
         * past, so treat as stale causing revalidation.
         */",undetermined
13722,httpd,UNKNOWN,/* calculate age of object */,undetermined
13723,httpd,UNKNOWN,/* extract s-maxage */,undetermined
13724,httpd,UNKNOWN,/* extract max-age from request */,undetermined
13725,httpd,UNKNOWN,"/*
     * extract max-age from response, if both s-maxage and max-age, s-maxage
     * takes priority
     */",undetermined
13726,httpd,UNKNOWN,"/*
     * if both maxage request and response, the smaller one takes priority
     */",undetermined
13727,httpd,UNKNOWN,/* extract max-stale */,undetermined
13728,httpd,UNKNOWN,"/*
             * If no value is assigned to max-stale, then the client is willing
             * to accept a stale response of any age (RFC2616 14.9.3). We will
             * set it to one year in this case as this situation is somewhat
             * similar to a ""never expires"" Expires header (RFC2616 14.21)
             * which is set to a date one year from the time the response is
             * sent in this case.
             */",undetermined
13729,httpd,UNKNOWN,/* extract min-fresh */,undetermined
13730,httpd,UNKNOWN,"/* override maxstale if must-revalidate, proxy-revalidate or s-maxage */",undetermined
13731,httpd,UNKNOWN,/* handle expiration */,undetermined
13732,httpd,UNKNOWN,/* it's fresh darlings... */,undetermined
13733,httpd,UNKNOWN,/* set age header on response */,undetermined
13734,httpd,UNKNOWN,/* add warning if maxstale overrode freshness calculation */,undetermined
13735,httpd,UNKNOWN,/* make sure we don't stomp on a previous warning */,undetermined
13736,httpd,UNKNOWN,"/*
         * If none of Expires, Cache-Control: max-age, or Cache-Control:
         * s-maxage appears in the response, and the response header age
         * calculated is more than 24 hours add the warning 113
         */",undetermined
13737,httpd,UNKNOWN,"/* Make sure we don't stomp on a previous warning, and don't dup
             * a 113 marning that is already present. Also, make sure to add
             * the new warning to the correct *headers_out location.
             */",undetermined
13738,httpd,UNKNOWN,/* Cache object is fresh (enough) */,undetermined
13739,httpd,UNKNOWN,"/*
     * At this point we are stale, but: if we are under load, we may let
     * a significant number of stale requests through before the first
     * stale request successfully revalidates itself, causing a sudden
     * unexpected thundering herd which in turn brings angst and drama.
     *
     * So.
     *
     * We want the first stale request to go through as normal. But the
     * second and subsequent request, we must pretend to be fresh until
     * the first request comes back with either new content or confirmation
     * that the stale content is still fresh.
     *
     * To achieve this, we create a very simple file based lock based on
     * the key of the cached object. We attempt to open the lock file with
     * exclusive write access. If we succeed, woohoo! we're first, and we
     * follow the stale path to the backend server. If we fail, oh well,
     * we follow the fresh path, and avoid being a thundering herd.
     *
     * The lock lives only as long as the stale request that went on ahead.
     * If the request succeeds, the lock is deleted. If the request fails,
     * the lock is deleted, and another request gets to make a new lock
     * and try again.
     *
     * At any time, a request marked ""no-cache"" will force a refresh,
     * ignoring the lock, ensuring an extended lockout is impossible.
     *
     * A lock that exceeds a maximum age will be deleted, and another
     * request gets to make a new lock and try again.
     */",undetermined
13740,httpd,UNKNOWN,"/* we obtained a lock, follow the stale path */",undetermined
13741,httpd,UNKNOWN,"/* lock already exists, return stale data anyway, with a warning */",undetermined
13742,httpd,UNKNOWN,/* make sure we don't stomp on a previous warning */,undetermined
13743,httpd,UNKNOWN,"/* some other error occurred, just treat the object as stale */",undetermined
13744,httpd,UNKNOWN,"/* return each comma separated token, one at a time */",undetermined
13745,httpd,UNKNOWN,/* noop */,undetermined
13746,httpd,UNKNOWN,"/*
 * Converts apr_time_t expressed as hex digits to
 * a true apr_time_t.
 */",undetermined
13747,httpd,UNKNOWN,"/*
 * Converts apr_time_t to apr_time_t expressed as hex digits.
 */",undetermined
13748,httpd,UNKNOWN,"/* encode 128 bits as 22 characters, using a modified uuencoding
     * the encoding is 3 bytes -> 4 characters* i.e. 128 bits is
     * 5 x 3 bytes + 1 byte -> 5 * 4 characters + 2 characters
     */",undetermined
13749,httpd,UNKNOWN,/* one byte left */,undetermined
13750,httpd,UNKNOWN,/* use up 6 bits */,undetermined
13751,httpd,UNKNOWN,/* now split into directory levels */,undetermined
13752,httpd,UNKNOWN,"/**
 * String tokenizer that ignores separator characters within quoted strings
 * and escaped characters, as per RFC2616 section 2.2.
 */",undetermined
13753,httpd,UNKNOWN,/* subsequent call */,undetermined
13754,httpd,UNKNOWN,/* start where we left off */,undetermined
13755,httpd,UNKNOWN,/* no more tokens */,undetermined
13756,httpd,UNKNOWN,/* skip characters in sep (will terminate at '\0') */,undetermined
13757,httpd,UNKNOWN,/* no more tokens */,undetermined
13758,httpd,UNKNOWN,"/* skip valid token characters to terminate token and
     * prepare for the next call (will terminate at '\0)
     * on the way, ignore all quoted strings, and within
     * quoted strings, escaped characters.
     */",undetermined
13759,httpd,UNKNOWN,"/**
 * Parse the Cache-Control and Pragma headers in one go, marking
 * which tokens appear within the header. Populate the structure
 * passed in.
 */",undetermined
13760,httpd,UNKNOWN,/* handle most common quickest case... */,undetermined
13761,httpd,UNKNOWN,/* ...then try slowest case */,undetermined
13762,httpd,UNKNOWN,/* handle most common quickest cases... */,undetermined
13763,httpd,UNKNOWN,/* ...then try slowest cases */,undetermined
13764,httpd,UNKNOWN,/* handle most common quickest cases... */,undetermined
13765,httpd,UNKNOWN,/* ...then try slowest cases */,undetermined
13766,httpd,UNKNOWN,/* handle most common quickest cases... */,undetermined
13767,httpd,UNKNOWN,/* ...then try slowest cases */,undetermined
13768,httpd,UNKNOWN,"/**
 * Parse the Cache-Control, identifying and removing headers that
 * exist as tokens after the no-cache and private tokens.
 */",undetermined
13769,httpd,UNKNOWN,"/*
 * Create a new table consisting of those elements from an
 * headers table that are allowed to be stored in a cache.
 */",undetermined
13770,httpd,UNKNOWN,"/* Short circuit the common case that there are not
     * (yet) any headers populated.
     */",undetermined
13771,httpd,UNKNOWN,"/* Make a copy of the headers, and remove from
     * the copy any hop-by-hop headers, as defined in Section
     * 13.5.1 of RFC 2616
     */",undetermined
13772,httpd,UNKNOWN,"/* Remove the user defined headers set with CacheIgnoreHeaders.
     * This may break RFC 2616 compliance on behalf of the administrator.
     */",undetermined
13773,httpd,UNKNOWN,"/*
 * Create a new table consisting of those elements from an input
 * headers table that are allowed to be stored in a cache.
 */",undetermined
13774,httpd,UNKNOWN,"/*
 * Create a new table consisting of those elements from an output
 * headers table that are allowed to be stored in a cache;
 * ensure there is a content type and capture any errors.
 */",undetermined
13775,httpd,UNKNOWN,"/**
         * The most common case is a single header, and this is covered by
         * a fast path that doesn't allocate any memory. On the second and
         * subsequent header, an array is created and the array concatenated
         * together to form the final value.
         */",undetermined
13776,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13777,httpd,UNKNOWN,"/**
 * @file cache_util.h
 * @brief Cache Storage Functions
 *
 * @defgroup Cache_util  Cache Utility Functions
 * @ingroup  MOD_CACHE
 * @{
 */",undetermined
13778,httpd,UNKNOWN,"/* one day, in microseconds */",undetermined
13779,httpd,UNKNOWN,"/* one hour, in microseconds */",undetermined
13780,httpd,UNKNOWN,"/* one minute, in microseconds */",undetermined
13781,httpd,UNKNOWN,"/* one second, in microseconds */",undetermined
13782,httpd,UNKNOWN,"/**
 * cache_util.c
 */",undetermined
13783,httpd,UNKNOWN,/* static information about the local cache */,undetermined
13784,httpd,UNKNOWN,/* URLs to cache */,undetermined
13785,httpd,UNKNOWN,/* URLs not to cache */,undetermined
13786,httpd,UNKNOWN,/** store the headers that should not be stored in the cache */,undetermined
13787,httpd,UNKNOWN,/** store the identifiers that should not be used for key calculation */,undetermined
13788,httpd,UNKNOWN,/** ignore client's requests for uncached responses */,undetermined
13789,httpd,UNKNOWN,/** ignore query-string when caching */,undetermined
13790,httpd,UNKNOWN,/** run within the quick handler */,undetermined
13791,httpd,UNKNOWN,/* thundering herd lock */,undetermined
13792,httpd,UNKNOWN,/* flag if CacheIgnoreHeader has been set */,undetermined
13793,httpd,UNKNOWN,/* flag if CacheIgnoreURLSessionIdentifiers has been set */,undetermined
13794,httpd,UNKNOWN,/* Minimum time to keep cached files in msecs */,undetermined
13795,httpd,UNKNOWN,/* Maximum time to keep cached files in msecs */,undetermined
13796,httpd,UNKNOWN,/* default time to keep cached file in msecs */,undetermined
13797,httpd,UNKNOWN,/* factor for estimating expires date */,undetermined
13798,httpd,UNKNOWN,/* cache enabled for this location */,undetermined
13799,httpd,UNKNOWN,/* cache disabled for this location */,undetermined
13800,httpd,UNKNOWN,/* set X-Cache headers */,undetermined
13801,httpd,UNKNOWN,/* serve stale on error */,undetermined
13802,httpd,UNKNOWN,/** ignore the last-modified header when deciding to cache this request */,undetermined
13803,httpd,UNKNOWN,/** ignore expiration date from server */,undetermined
13804,httpd,UNKNOWN,/** ignore Cache-Control: private header from server */,undetermined
13805,httpd,UNKNOWN,/** ignore Cache-Control: no-store header from client or server */,undetermined
13806,httpd,UNKNOWN,/* A linked-list of authn providers. */,undetermined
13807,httpd,UNKNOWN,/* per request cache information */,undetermined
13808,httpd,UNKNOWN,/* possible cache providers */,undetermined
13809,httpd,UNKNOWN,/* current cache provider */,undetermined
13810,httpd,UNKNOWN,/* current cache provider name */,undetermined
13811,httpd,UNKNOWN,/* is the entity fresh? */,undetermined
13812,httpd,UNKNOWN,/* current cache handle */,undetermined
13813,httpd,UNKNOWN,/* stale cache handle */,undetermined
13814,httpd,UNKNOWN,/* original request headers. */,undetermined
13815,httpd,UNKNOWN,/* CACHE_SAVE must cache the entity */,undetermined
13816,httpd,UNKNOWN,/* CACHE_SAVE must block response. */,undetermined
13817,httpd,UNKNOWN,/* copy of partial response */,undetermined
13818,httpd,UNKNOWN,/* length of saved_brigade */,undetermined
13819,httpd,UNKNOWN,/* expiration */,undetermined
13820,httpd,UNKNOWN,/* last-modified time */,undetermined
13821,httpd,UNKNOWN,/* current cache info */,undetermined
13822,httpd,UNKNOWN,/* Enable us to restore the filter on error */,undetermined
13823,httpd,UNKNOWN,/* Enable us to remove the filter */,undetermined
13824,httpd,UNKNOWN,"/* The cache key created for this
                                         * request
                                         */",undetermined
13825,httpd,UNKNOWN,"/* the content length from the headers, or -1 */",undetermined
13826,httpd,UNKNOWN,/* brigade to reuse for upstream responses */,undetermined
13827,httpd,UNKNOWN,/* cache control incoming */,undetermined
13828,httpd,UNKNOWN,"/**
 * Check the whether the request allows a cached object to be served as per RFC2616
 * section 14.9.4 (Cache Revalidation and Reload Controls)
 * @param cache cache_request_rec
 * @param r request_rec
 * @return 0 ==> cache object may not be served, 1 ==> cache object may be served
 */",undetermined
13829,httpd,UNKNOWN,"/**
 * Check the whether the request allows a cached object to be stored as per RFC2616
 * section 14.9.2 (What May be Stored by Caches)
 * @param cache cache_request_rec
 * @param r request_rec
 * @return 0 ==> cache object may not be served, 1 ==> cache object may be served
 */",undetermined
13830,httpd,UNKNOWN,"/**
 * Check the freshness of the cache object per RFC2616 section 13.2 (Expiration Model)
 * @param h cache_handle_t
 * @param cache cache_request_rec
 * @param r request_rec
 * @return 0 ==> cache object is stale, 1 ==> cache object is fresh
 */",undetermined
13831,httpd,UNKNOWN,"/**
 * Try obtain a cache wide lock on the given cache key.
 *
 * If we return APR_SUCCESS, we obtained the lock, and we are clear to
 * proceed to the backend. If we return APR_EEXISTS, the the lock is
 * already locked, someone else has gone to refresh the backend data
 * already, so we must return stale data with a warning in the mean
 * time. If we return anything else, then something has gone pear
 * shaped, and we allow the request through to the backend regardless.
 *
 * This lock is created from the request pool, meaning that should
 * something go wrong and the lock isn't deleted on return of the
 * request headers from the backend for whatever reason, at worst the
 * lock will be cleaned up when the request is dies or finishes.
 *
 * If something goes truly bananas and the lock isn't deleted when the
 * request dies, the lock will be trashed when its max-age is reached,
 * or when a request arrives containing a Cache-Control: no-cache. At
 * no point is it possible for this lock to permanently deny access to
 * the backend.
 */",undetermined
13832,httpd,UNKNOWN,"/**
 * Remove the cache lock, if present.
 *
 * First, try to close the file handle, whose delete-on-close should
 * kill the file. Otherwise, just delete the file by name.
 *
 * If no lock name has yet been calculated, do the calculation of the
 * lock name first before trying to delete the file.
 *
 * If an optional bucket brigade is passed, the lock will only be
 * removed if the bucket brigade contains an EOS bucket.
 */",undetermined
13833,httpd,UNKNOWN,"/**
 * Get a value from a table, where the table may contain multiple
 * values for a given key.
 *
 * When the table contains a single value, that value is returned
 * unchanged.
 *
 * When the table contains two or more values for a key, all values
 * for the key are returned, separated by commas.
 */",undetermined
13834,httpd,UNKNOWN,"/**
 * String tokenizer that ignores separator characters within quoted strings
 * and escaped characters, as per RFC2616 section 2.2.
 */",undetermined
13835,httpd,UNKNOWN,/* !CACHE_UTIL_H */,undetermined
13836,httpd,UNKNOWN,/** @} */,undetermined
13837,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
13838,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
13839,httpd,UNKNOWN,"/* Handles for cache filters, resolved at startup to eliminate
 * a name-to-function mapping on each request
 */",undetermined
13840,httpd,UNKNOWN,"/*
 * CACHE handler
 * -------------
 *
 * Can we deliver this request from the cache?
 * If yes:
 *   deliver the content by installing the CACHE_OUT filter.
 * If no:
 *   check whether we're allowed to try cache it
 *   If yes:
 *     add CACHE_SAVE filter
 *   If No:
 *     oh well.
 *
 * By default, the cache handler runs in the quick handler, bypassing
 * virtually all server processing and offering the cache its optimal
 * performance. In this mode, the cache bolts onto the front of the
 * server, and behaves as a discrete RFC2616 caching proxy
 * implementation.
 *
 * Under certain circumstances, an admin might want to run the cache as
 * a normal handler instead of a quick handler, allowing the cache to
 * run after the authorisation hooks, or by allowing fine control over
 * the placement of the cache in the filter chain. This option comes at
 * a performance penalty, and should only be used to achieve specific
 * caching goals where the admin understands what they are doing.
 */",undetermined
13841,httpd,UNKNOWN,/* only run if the quick handler is enabled */,undetermined
13842,httpd,UNKNOWN,"/*
     * Which cache module (if any) should handle this request?
     */",undetermined
13843,httpd,UNKNOWN,/* make space for the per request config */,undetermined
13844,httpd,UNKNOWN,/* save away the possible providers */,undetermined
13845,httpd,UNKNOWN,"/*
     * Are we allowed to serve cached info at all?
     */",undetermined
13846,httpd,UNKNOWN,/* find certain cache controlling headers */,undetermined
13847,httpd,UNKNOWN,"/* First things first - does the request allow us to return
     * cached information at all? If not, just decline the request.
     */",undetermined
13848,httpd,UNKNOWN,"/* Are we PUT/POST/DELETE? If so, prepare to invalidate the cached entities.
     */",undetermined
13849,httpd,UNKNOWN,"/* Add cache_invalidate filter to this request to force a
         * cache entry to be invalidated if the response is
         * ultimately successful (2xx).
         */",undetermined
13850,httpd,UNKNOWN,"/*
     * Try to serve this request from the cache.
     *
     * If no existing cache file (DECLINED)
     *   add cache_save filter
     * If cached file (OK)
     *   clear filter stack
     *   add cache_out filter
     *   return OK
     */",undetermined
13851,httpd,UNKNOWN,"/* try to obtain a cache lock at this point. if we succeed,
                 * we are the first to try and cache this url. if we fail,
                 * it means someone else is already trying to cache this
                 * url, and we should just let the request through to the
                 * backend without any attempt to cache. this stops
                 * duplicated simultaneous attempts to cache an entity.
                 */",undetermined
13852,httpd,UNKNOWN,"/*
                     * Add cache_save filter to cache this request. Choose
                     * the correct filter by checking if we are a subrequest
                     * or not.
                     */",undetermined
13853,httpd,UNKNOWN,"/* Add cache_remove_url filter to this request to remove a
                     * stale cache entry if needed. Also put the current cache
                     * request rec in the filter context, as the request that
                     * is available later during running the filter may be
                     * different due to an internal redirect.
                     */",undetermined
13854,httpd,UNKNOWN,/* error */,undetermined
13855,httpd,UNKNOWN,/* we've got a cache hit! tell everyone who cares */,undetermined
13856,httpd,UNKNOWN,"/* if we are a lookup, we are exiting soon one way or another; Restore
     * the headers. */",undetermined
13857,httpd,UNKNOWN,"/* If we are a lookup, we have to return DECLINED as we have no
         * way of knowing if we will be able to serve the content.
         */",undetermined
13858,httpd,UNKNOWN,/* Return cached status. */,undetermined
13859,httpd,UNKNOWN,"/* If we're a lookup, we can exit now instead of serving the content. */",undetermined
13860,httpd,UNKNOWN,/* Serve up the content */,undetermined
13861,httpd,UNKNOWN,"/* We are in the quick handler hook, which means that no output
     * filters have been set. So lets run the insert_filter hook.
     */",undetermined
13862,httpd,UNKNOWN,"/*
     * Add cache_out filter to serve this request. Choose
     * the correct filter by checking if we are a subrequest
     * or not.
     */",undetermined
13863,httpd,UNKNOWN,"/*
     * Remove all filters that are before the cache_out filter. This ensures
     * that we kick off the filter stack with our cache_out filter being the
     * first in the chain. This make sense because we want to restore things
     * in the same manner as we saved them.
     * There may be filters before our cache_out filter, because
     *
     * 1. We call ap_set_content_type during cache_select. This causes
     *    Content-Type specific filters to be added.
     * 2. We call the insert_filter hook. This causes filters e.g. like
     *    the ones set with SetOutputFilter to be added.
     */",undetermined
13864,httpd,UNKNOWN,/* kick off the filter stack */,undetermined
13865,httpd,UNKNOWN,"/**
 * If the two filter handles are present within the filter chain, replace
 * the last instance of the first filter with the last instance of the
 * second filter, and return true. If the second filter is not present at
 * all, the first filter is removed, and false is returned. If neither
 * filter is present, false is returned and this function does nothing.
 * If a stop filter is specified, processing will stop once this filter is
 * reached.
 */",undetermined
13866,httpd,UNKNOWN,"/**
 * Find the given filter, and return it if found, or NULL otherwise.
 */",undetermined
13867,httpd,UNKNOWN,"/**
 * The cache handler is functionally similar to the cache_quick_hander,
 * however a number of steps that are required by the quick handler are
 * not required here, as the normal httpd processing has already handled
 * these steps.
 */",undetermined
13868,httpd,UNKNOWN,/* only run if the quick handler is disabled */,undetermined
13869,httpd,UNKNOWN,"/*
     * Which cache module (if any) should handle this request?
     */",undetermined
13870,httpd,UNKNOWN,/* make space for the per request config */,undetermined
13871,httpd,UNKNOWN,/* save away the possible providers */,undetermined
13872,httpd,UNKNOWN,"/*
     * Are we allowed to serve cached info at all?
     */",undetermined
13873,httpd,UNKNOWN,"/* Are we PUT/POST/DELETE? If so, prepare to invalidate the cached entities.
     */",undetermined
13874,httpd,UNKNOWN,"/* Add cache_invalidate filter to this request to force a
         * cache entry to be invalidated if the response is
         * ultimately successful (2xx).
         */",undetermined
13875,httpd,UNKNOWN,"/*
     * Try to serve this request from the cache.
     *
     * If no existing cache file (DECLINED)
     *   add cache_save filter
     * If cached file (OK)
     *   clear filter stack
     *   add cache_out filter
     *   return OK
     */",undetermined
13876,httpd,UNKNOWN,"/* try to obtain a cache lock at this point. if we succeed,
             * we are the first to try and cache this url. if we fail,
             * it means someone else is already trying to cache this
             * url, and we should just let the request through to the
             * backend without any attempt to cache. this stops
             * duplicated simultaneous attempts to cache an entity.
             */",undetermined
13877,httpd,UNKNOWN,"/*
                 * Add cache_save filter to cache this request. Choose
                 * the correct filter by checking if we are a subrequest
                 * or not.
                 */",undetermined
13878,httpd,UNKNOWN,"/*
                 * Did the user indicate the precise location of the
                 * CACHE_SAVE filter by inserting the CACHE filter as a
                 * marker?
                 *
                 * If so, we get cunning and replace CACHE with the
                 * CACHE_SAVE filter. This has the effect of inserting
                 * the CACHE_SAVE filter at the precise location where
                 * the admin wants to cache the content. All filters that
                 * lie before and after the original location of the CACHE
                 * filter will remain in place.
                 */",undetermined
13879,httpd,UNKNOWN,/* save away the save filter stack */,undetermined
13880,httpd,UNKNOWN,"/* Add cache_remove_url filter to this request to remove a
                 * stale cache entry if needed. Also put the current cache
                 * request rec in the filter context, as the request that
                 * is available later during running the filter may be
                 * different due to an internal redirect.
                 */",undetermined
13881,httpd,UNKNOWN,/* error */,undetermined
13882,httpd,UNKNOWN,/* we've got a cache hit! tell everyone who cares */,undetermined
13883,httpd,UNKNOWN,/* Serve up the content */,undetermined
13884,httpd,UNKNOWN,"/*
     * Add cache_out filter to serve this request. Choose
     * the correct filter by checking if we are a subrequest
     * or not.
     */",undetermined
13885,httpd,UNKNOWN,"/*
     * Did the user indicate the precise location of the CACHE_OUT filter by
     * inserting the CACHE filter as a marker?
     *
     * If so, we get cunning and replace CACHE with the CACHE_OUT filters.
     * This has the effect of inserting the CACHE_OUT filter at the precise
     * location where the admin wants to cache the content. All filters that
     * lie *after* the original location of the CACHE filter will remain in
     * place.
     */",undetermined
13886,httpd,UNKNOWN,"/*
     * Remove all filters that are before the cache_out filter. This ensures
     * that we kick off the filter stack with our cache_out filter being the
     * first in the chain. This make sense because we want to restore things
     * in the same manner as we saved them.
     * There may be filters before our cache_out filter, because
     *
     * 1. We call ap_set_content_type during cache_select. This causes
     *    Content-Type specific filters to be added.
     * 2. We call the insert_filter hook. This causes filters e.g. like
     *    the ones set with SetOutputFilter to be added.
     */",undetermined
13887,httpd,UNKNOWN,/* kick off the filter stack */,undetermined
13888,httpd,UNKNOWN,"/*
 * CACHE_OUT filter
 * ----------------
 *
 * Deliver cached content (headers and body) up the stack.
 */",undetermined
13889,httpd,UNKNOWN,"/* user likely configured CACHE_OUT manually; they should use mod_cache
         * configuration to do that */",undetermined
13890,httpd,UNKNOWN,"/* clean out any previous response up to EOS, if any */",undetermined
13891,httpd,UNKNOWN,/* restore content type of cached response if available */,undetermined
13892,httpd,UNKNOWN,/* Needed especially when stale content gets served. */,undetermined
13893,httpd,UNKNOWN,/* restore status of cached response */,undetermined
13894,httpd,UNKNOWN,/* recall_headers() was called in cache_select() */,undetermined
13895,httpd,UNKNOWN,/* This filter is done once it has served up its content */,undetermined
13896,httpd,UNKNOWN,"/*
 * Having jumped through all the hoops and decided to cache the
 * response, call store_body() for each brigade, handling the
 * case where the provider can't swallow the full brigade. In this
 * case, we write the brigade we were passed out downstream, and
 * loop around to try and cache some more until the in brigade is
 * completely empty. As soon as the out brigade contains eos, call
 * commit_entity() to finalise the cached element.
 */",undetermined
13897,httpd,UNKNOWN,"/* pass the brigade in into the cache provider, which is then
     * expected to move cached buckets to the out brigade, for us
     * to pass up the filter stack. repeat until in is empty, or
     * we fail.
     */",undetermined
13898,httpd,UNKNOWN,/* give someone else the chance to cache the file */,undetermined
13899,httpd,UNKNOWN,"/* give up trying to cache, just step out the way */",undetermined
13900,httpd,UNKNOWN,"/* does the out brigade contain eos? if so, we're done, commit! */",undetermined
13901,httpd,UNKNOWN,/* conditionally remove the lock as soon as we see the eos bucket */,undetermined
13902,httpd,UNKNOWN,"/* cache provider wants more data before passing the brigade
                 * upstream, oblige the provider by leaving to fetch more.
                 */",undetermined
13903,httpd,UNKNOWN,"/* oops, no data out, but not all data read in either, be
                 * safe and stand down to prevent a spin.
                 */",undetermined
13904,httpd,UNKNOWN,/* give someone else the chance to cache the file */,undetermined
13905,httpd,UNKNOWN,"/**
 * Sanity check for 304 Not Modified responses, as per RFC2616 Section 10.3.5.
 */",undetermined
13906,httpd,UNKNOWN,"/*
 * CACHE_SAVE filter
 * ---------------
 *
 * Decide whether or not this content should be cached.
 * If we decide no it should not:
 *   remove the filter from the chain
 * If we decide yes it should:
 *   Have we already started saving the response?
 *      If we have started, pass the data to the storage manager via store_body
 *      Otherwise:
 *        Check to see if we *can* save this particular response.
 *        If we can, call cache_create_entity() and save the headers and body
 *   Finally, pass the data to the next filter (the network or whatever)
 *
 * After the various failure cases, the cache lock is proactively removed, so
 * that another request is given the opportunity to attempt to cache without
 * waiting for a potentially slow client to acknowledge the failure.
 */",undetermined
13907,httpd,UNKNOWN,/* Setup cache_request_rec */,undetermined
13908,httpd,UNKNOWN,"/* user likely configured CACHE_SAVE manually; they should really use
         * mod_cache configuration to do that
         */",undetermined
13909,httpd,UNKNOWN,"/*
     * Pass Data to Cache
     * ------------------
     * This section passes the brigades into the cache modules, but only
     * if the setup section (see below) is complete.
     */",undetermined
13910,httpd,UNKNOWN,"/* We've already sent down the response and EOS.  So, ignore
         * whatever comes now.
         */",undetermined
13911,httpd,UNKNOWN,"/* have we already run the cacheability check and set up the
     * cached file handle?
     */",undetermined
13912,httpd,UNKNOWN,"/*
     * Setup Data in Cache
     * -------------------
     * This section opens the cache entity and sets various caching
     * parameters, and decides whether this URL should be cached at
     * all. This section is* run before the above section.
     */",undetermined
13913,httpd,UNKNOWN,"/* RFC2616 13.8 Errors or Incomplete Response Cache Behavior:
     * If a cache receives a 5xx response while attempting to revalidate an
     * entry, it MAY either forward this response to the requesting client,
     * or act as if the server failed to respond. In the latter case, it MAY
     * return a previously received response unless the cached entry
     * includes the ""must-revalidate"" cache-control directive (see section
     * 14.9).
     *
     * This covers the case where an error was generated behind us, for example
     * by a backend server via mod_proxy.
     */",undetermined
13914,httpd,UNKNOWN,"/* morph the current save filter into the out filter, and serve from
             * cache.
             */",undetermined
13915,httpd,UNKNOWN,/* add a revalidation warning */,undetermined
13916,httpd,UNKNOWN,/* give someone else the chance to cache the file */,undetermined
13917,httpd,UNKNOWN,/* pass brigade to our morphed out filter */,undetermined
13918,httpd,UNKNOWN,"/* read expiry date; if a bad date, then leave it so the client can
     * read it
     */",undetermined
13919,httpd,UNKNOWN,"/* read the last-modified date; if the date is bad, then delete it */",undetermined
13920,httpd,UNKNOWN,/* read the etag and cache-control from the entity */,undetermined
13921,httpd,UNKNOWN,"/* Have we received a 304 response without any headers at all? Fall back to
     * the original headers in the original cached request.
     */",undetermined
13922,httpd,UNKNOWN,/* Parse the cache control header */,undetermined
13923,httpd,UNKNOWN,"/*
     * what responses should we not cache?
     *
     * At this point we decide based on the response headers whether it
     * is appropriate _NOT_ to cache the data from the server. There are
     * a whole lot of conditions that prevent us from caching this data.
     * They are tested here one by one to be clear and unambiguous.
     */",undetermined
13924,httpd,UNKNOWN,"/* RFC2616 13.4 we are allowed to cache 200, 203, 206, 300, 301 or 410
         * We allow the caching of 206, but a cache implementation might choose
         * to decline to cache a 206 if it doesn't know how to.
         * We include 304 Not Modified here too as this is the origin server
         * telling us to serve the cached copy.
         */",undetermined
13925,httpd,UNKNOWN,"/* We are also allowed to cache any response given that it has a
             * valid Expires or Cache Control header. If we find a either of
             * those here,  we pass request through the rest of the tests. From
             * the RFC:
             *
             * A response received with any other status code (e.g. status
             * codes 302 and 307) MUST NOT be returned in a reply to a
             * subsequent request unless there are cache-control directives or
             * another header(s) that explicitly allow it. For example, these
             * include the following: an Expires header (section 14.21); a
             * ""max-age"", ""s-maxage"",  ""must-revalidate"", ""proxy-revalidate"",
             * ""public"" or ""private"" cache-control directive (section 14.9).
             */",undetermined
13926,httpd,UNKNOWN,/* noop */,undetermined
13927,httpd,UNKNOWN,"/* if a broken Expires header is present, don't cache it */",undetermined
13928,httpd,UNKNOWN,"/* if a Expires header is in the past, don't cache it */",undetermined
13929,httpd,UNKNOWN,"/* if we're already stale, but can never revalidate, don't cache it */",undetermined
13930,httpd,UNKNOWN,"/* if a query string is present but no explicit expiration time,
         * don't cache it (RFC 2616/13.9 & 13.2.1)
         */",undetermined
13931,httpd,UNKNOWN,"/* if the server said 304 Not Modified but we have no cache
         * file - pass this untouched to the user agent, it's not for us.
         */",undetermined
13932,httpd,UNKNOWN,"/* 200 OK response from HTTP/1.0 and up without Last-Modified,
         * Etag, Expires, Cache-Control:max-age, or Cache-Control:s-maxage
         * headers.
         */",undetermined
13933,httpd,UNKNOWN,"/* Note: mod-include clears last_modified/expires/etags - this
         * is why we have an optional function for a key-gen ;-)
         */",undetermined
13934,httpd,UNKNOWN,"/* RFC2616 14.9.2 Cache-Control: no-store response
         * indicating do not cache, or stop now if you are
         * trying to cache it.
         */",undetermined
13935,httpd,UNKNOWN,"/* RFC2616 14.9.1 Cache-Control: private response
         * this object is marked for this user's eyes only. Behave
         * as a tunnel.
         */",undetermined
13936,httpd,UNKNOWN,"/* RFC2616 14.8 Authorisation:
         * if authorisation is included in the request, we don't cache,
         * but we can cache if the following exceptions are true:
         * 1) If Cache-Control: s-maxage is included
         * 2) If Cache-Control: must-revalidate is included
         * 3) If Cache-Control: public is included
         */",undetermined
13937,httpd,UNKNOWN,/* or we've been asked not to cache it above */,undetermined
13938,httpd,UNKNOWN,"/**
         * 13.12 Cache Replacement:
         *
         * Note: a new response that has an older Date header value than
         * existing cached responses is not cacheable.
         */",undetermined
13939,httpd,UNKNOWN,"/* while this response is not cacheable, the previous response still is */",undetermined
13940,httpd,UNKNOWN,"/* and lastly, contradiction checks for revalidated responses
         * as per RFC2616 Section 10.3.5
         */",undetermined
13941,httpd,UNKNOWN,"/* contradiction: 304 Not Modified, but entity header modified */",undetermined
13942,httpd,UNKNOWN,"/**
     * Enforce RFC2616 Section 10.3.5, just in case. We caught any
     * inconsistencies above.
     *
     * If the conditional GET used a strong cache validator (see section
     * 13.3.3), the response SHOULD NOT include other entity-headers.
     * Otherwise (i.e., the conditional GET used a weak validator), the
     * response MUST NOT include other entity-headers; this prevents
     * inconsistencies between cached entity-bodies and updated headers.
     */",undetermined
13943,httpd,UNKNOWN,"/* Hold the phone. Some servers might allow us to cache a 2xx, but
     * then make their 304 responses non cacheable. RFC2616 says this:
     *
     * If a 304 response indicates an entity not currently cached, then
     * the cache MUST disregard the response and repeat the request
     * without the conditional.
     *
     * A 304 response with contradictory headers is technically a
     * different entity, to be safe, we remove the entity from the cache.
     */",undetermined
13944,httpd,UNKNOWN,/* we've got a cache conditional miss! tell anyone who cares */,undetermined
13945,httpd,UNKNOWN,"/* remove the cached entity immediately, we might cache it again */",undetermined
13946,httpd,UNKNOWN,/* let someone else attempt to cache */,undetermined
13947,httpd,UNKNOWN,/* remove this filter from the chain */,undetermined
13948,httpd,UNKNOWN,/* retry without the conditionals */,undetermined
13949,httpd,UNKNOWN,/* we've got a cache miss! tell anyone who cares */,undetermined
13950,httpd,UNKNOWN,/* remove this filter from the chain */,undetermined
13951,httpd,UNKNOWN,/* remove the lock file unconditionally */,undetermined
13952,httpd,UNKNOWN,/* ship the data up the stack */,undetermined
13953,httpd,UNKNOWN,/* Make it so that we don't execute this path again. */,undetermined
13954,httpd,UNKNOWN,"/* Set the content length if known.
     */",undetermined
13955,httpd,UNKNOWN,"/* parse error, see next 'if' block */",undetermined
13956,httpd,UNKNOWN,"/* if we don't get the content-length, see if we have all the
         * buckets and use their length to calculate the size
         */",undetermined
13957,httpd,UNKNOWN,/* remember content length to check response size against later */,undetermined
13958,httpd,UNKNOWN,"/* It's safe to cache the response.
     *
     * There are two possiblities at this point:
     * - cache->handle == NULL. In this case there is no previously
     * cached entity anywhere on the system. We must create a brand
     * new entity and store the response in it.
     * - cache->stale_handle != NULL. In this case there is a stale
     * entity in the system which needs to be replaced by new
     * content (unless the result was 304 Not Modified, which means
     * the cached entity is actually fresh, and we should update
     * the headers).
     */",undetermined
13959,httpd,UNKNOWN,"/* Did we have a stale cache entry that really is stale?
     */",undetermined
13960,httpd,UNKNOWN,"/* Oh, hey.  It isn't that stale!  Yay! */",undetermined
13961,httpd,UNKNOWN,"/* Oh, well.  Toss it. */",undetermined
13962,httpd,UNKNOWN,/* Treat the request as if it wasn't conditional. */,undetermined
13963,httpd,UNKNOWN,"/*
             * Restore the original request headers as they may be needed
             * by further output filters like the byterange filter to make
             * the correct decisions.
             */",undetermined
13964,httpd,UNKNOWN,"/* no cache handle, create a new entity */",undetermined
13965,httpd,UNKNOWN,/* We only set info->status upon the initial creation. */,undetermined
13966,httpd,UNKNOWN,/* we've got a cache miss! tell anyone who cares */,undetermined
13967,httpd,UNKNOWN,/* Caching layer declined the opportunity to cache the response */,undetermined
13968,httpd,UNKNOWN,"/* We are actually caching this response. So it does not
     * make sense to remove this entity any more.
     */",undetermined
13969,httpd,UNKNOWN,"/*
     * We now want to update the cache file header information with
     * the new date, last modified, expire and content length and write
     * it away to our cache file. First, we determine these values from
     * the response, using heuristics if appropriate.
     *
     * In addition, we make HTTP/1.1 age calculations and write them away
     * too.
     */",undetermined
13970,httpd,UNKNOWN,/* store away the previously parsed cache control headers */,undetermined
13971,httpd,UNKNOWN,/* Read the date. Generate one if one is not supplied */,undetermined
13972,httpd,UNKNOWN,"/* No, or bad date */",undetermined
13973,httpd,UNKNOWN,/* no date header (or bad header)! */,undetermined
13974,httpd,UNKNOWN,/* set response_time for HTTP/1.1 age calculations */,undetermined
13975,httpd,UNKNOWN,/* get the request time */,undetermined
13976,httpd,UNKNOWN,/* check last-modified date */,undetermined
13977,httpd,UNKNOWN,"/* if it's in the future, then replace by date */",undetermined
13978,httpd,UNKNOWN,"/* if no expiry date then
     *   if Cache-Control: max-age
     *      expiry date = date + max-age
     *   else if lastmod
     *      expiry date = date + min((date - lastmod) * factor, maxexpire)
     *   else
     *      expire date = date + defaultexpire
     */",undetermined
13979,httpd,UNKNOWN,"/* if lastmod == date then you get 0*conf->factor which results in
             * an expiration time of now. This causes some problems with
             * freshness calculations, so we choose the else path...
             */",undetermined
13980,httpd,UNKNOWN,/* We found a stale entry which wasn't really stale. */,undetermined
13981,httpd,UNKNOWN,"/* RFC 2616 10.3.5 states that entity headers are not supposed
         * to be in the 304 response.  Therefore, we need to combine the
         * response headers with the cached headers *before* we update
         * the cached headers.
         *
         * However, before doing that, we need to first merge in
         * err_headers_out and we also need to strip any hop-by-hop
         * headers that might have snuck in.
         */",undetermined
13982,httpd,UNKNOWN,"/* Merge in our cached headers.  However, keep any updated values. */",undetermined
13983,httpd,UNKNOWN,"/* take output, overlay on top of cached */",undetermined
13984,httpd,UNKNOWN,"/* Write away header information to cache. It is possible that we are
     * trying to update headers for an entity which has already been cached.
     *
     * This may fail, due to an unwritable cache area. E.g. filesystem full,
     * permissions problems or a read-only (re)mount. This must be handled
     * later.
     */",undetermined
13985,httpd,UNKNOWN,"/* Did we just update the cached headers on a revalidated response?
     *
     * If so, we can now decide what to serve to the client.  This is done in
     * the same way as with a regular response, but conditions are now checked
     * against the cached or merged response headers.
     */",undetermined
13986,httpd,UNKNOWN,/* Load in the saved status and clear the status line. */,undetermined
13987,httpd,UNKNOWN,"/* We're just saving response headers, so we are done. Commit
         * the response at this point, unless there was a previous error.
         */",undetermined
13988,httpd,UNKNOWN,"/* Restore the original request headers and see if we need to
         * return anything else than the cached response (ie. the original
         * request was conditional).
         */",undetermined
13989,httpd,UNKNOWN,"/* Before returning we need to handle the possible case of an
         * unwritable cache. Rather than leaving the entity in the cache
         * and having it constantly re-validated, now that we have recalled
         * the body it is safe to try and remove the url from the cache.
         */",undetermined
13990,httpd,UNKNOWN,"/* Probably a mod_cache_disk cache area has been (re)mounted
                 * read-only, or that there is a permissions problem.
                 */",undetermined
13991,httpd,UNKNOWN,/* we've got a cache conditional hit! tell anyone who cares */,undetermined
13992,httpd,UNKNOWN,/* we've got a cache conditional hit! tell anyone who cares */,undetermined
13993,httpd,UNKNOWN,/* let someone else attempt to cache */,undetermined
13994,httpd,UNKNOWN,/* we've got a cache miss! tell anyone who cares */,undetermined
13995,httpd,UNKNOWN,/* we've got a cache miss! tell anyone who cares */,undetermined
13996,httpd,UNKNOWN,"/*
 * CACHE_REMOVE_URL filter
 * -----------------------
 *
 * This filter gets added in the quick handler every time the CACHE_SAVE filter
 * gets inserted. Its purpose is to remove a confirmed stale cache entry from
 * the cache.
 *
 * CACHE_REMOVE_URL has to be a protocol filter to ensure that is run even if
 * the response is a canned error message, which removes the content filters
 * and thus the CACHE_SAVE filter from the chain.
 *
 * CACHE_REMOVE_URL expects cache request rec within its context because the
 * request this filter runs on can be different from the one whose cache entry
 * should be removed, due to internal redirects.
 *
 * Note that CACHE_SAVE_URL (as a content-set filter, hence run before the
 * protocol filters) will remove this filter if it decides to cache the file.
 * Therefore, if this filter is left in, it must mean we need to toss any
 * existing files.
 */",undetermined
13997,httpd,UNKNOWN,/* Setup cache_request_rec */,undetermined
13998,httpd,UNKNOWN,"/* user likely configured CACHE_REMOVE_URL manually; they should really
         * use mod_cache configuration to do that. So:
         * 1. Remove ourselves
         * 2. Do nothing and bail out
         */",undetermined
13999,httpd,UNKNOWN,/* Now remove this cache entry from the cache */,undetermined
14000,httpd,UNKNOWN,/* remove ourselves */,undetermined
14001,httpd,UNKNOWN,"/*
 * CACHE_INVALIDATE filter
 * -----------------------
 *
 * This filter gets added in the quick handler should a PUT, POST or DELETE
 * method be detected. If the response is successful, we must invalidate any
 * cached entity as per RFC2616 section 13.10.
 *
 * CACHE_INVALIDATE has to be a protocol filter to ensure that is run even if
 * the response is a canned error message, which removes the content filters
 * from the chain.
 *
 * CACHE_INVALIDATE expects cache request rec within its context because the
 * request this filter runs on can be different from the one whose cache entry
 * should be removed, due to internal redirects.
 */",undetermined
14002,httpd,UNKNOWN,/* Setup cache_request_rec */,undetermined
14003,httpd,UNKNOWN,"/* user likely configured CACHE_INVALIDATE manually; they should really
         * use mod_cache configuration to do that. So:
         * 1. Remove ourselves
         * 2. Do nothing and bail out
         */",undetermined
14004,httpd,UNKNOWN,/* we've got a cache invalidate! tell everyone who cares */,undetermined
14005,httpd,UNKNOWN,/* remove ourselves */,undetermined
14006,httpd,UNKNOWN,"/*
 * CACHE filter
 * ------------
 *
 * This filter can be optionally inserted into the filter chain by the admin as
 * a marker representing the precise location within the filter chain where
 * caching is to be performed.
 *
 * When the filter chain is set up in the non-quick version of the URL handler,
 * the CACHE filter is replaced by the CACHE_OUT or CACHE_SAVE filter,
 * effectively inserting the caching filters at the point indicated by the
 * admin. The CACHE filter is then removed.
 *
 * This allows caching to be performed before the content is passed to the
 * INCLUDES filter, or to a filter that might perform transformations unique
 * to the specific request and that would otherwise be non-cacheable.
 */",undetermined
14007,httpd,UNKNOWN,/* was the quick handler enabled */,undetermined
14008,httpd,UNKNOWN,"/* otherwise we may have been bypassed, nothing to see here */",undetermined
14009,httpd,UNKNOWN,"/* we are just a marker, so let's just remove ourselves */",undetermined
14010,httpd,UNKNOWN,"/**
 * If configured, add the status of the caching attempt to the subprocess
 * environment, and if configured, to headers in the response.
 *
 * The status is saved below the broad category of the status (hit, miss,
 * revalidate), as well as a single cache-status key. This can be used for
 * conditional logging.
 *
 * The status is optionally saved to an X-Cache header, and the detail of
 * why a particular cache entry was cached (or not cached) is optionally
 * saved to an X-Cache-Detail header. This extra detail is useful for
 * service developers who may need to know whether their Cache-Control headers
 * are working correctly.
 */",undetermined
14011,httpd,UNKNOWN,"/**
 * If an error has occurred, but we have a stale cached entry, restore the
 * filter stack from the save filter onwards. The canned error message will
 * be discarded in the process, and replaced with the cached response.
 */",undetermined
14012,httpd,UNKNOWN,/* ignore everything except for 5xx errors */,undetermined
14013,httpd,UNKNOWN,"/* RFC2616 13.8 Errors or Incomplete Response Cache Behavior:
     * If a cache receives a 5xx response while attempting to revalidate an
     * entry, it MAY either forward this response to the requesting client,
     * or act as if the server failed to respond. In the latter case, it MAY
     * return a previously received response unless the cached entry
     * includes the ""must-revalidate"" cache-control directive (see section
     * 14.9).
     *
     * This covers the case where the error was generated by our server via
     * ap_die().
     */",undetermined
14014,httpd,UNKNOWN,"/* morph the current save filter into the out filter, and serve from
             * cache.
             */",undetermined
14015,httpd,UNKNOWN,/* add a revalidation warning */,undetermined
14016,httpd,UNKNOWN,/* give someone else the chance to cache the file */,undetermined
14017,httpd,UNKNOWN,/* -------------------------------------------------------------- */,undetermined
14018,httpd,UNKNOWN,/* Setup configurable data */,undetermined
14019,httpd,UNKNOWN,/* maximum time to cache a document */,undetermined
14020,httpd,UNKNOWN,/* default time to cache a document */,undetermined
14021,httpd,UNKNOWN,/* factor used to estimate Expires date from LastModified date */,undetermined
14022,httpd,UNKNOWN,/* array of providers for this URL space */,undetermined
14023,httpd,UNKNOWN,/* maximum time to cache a document */,undetermined
14024,httpd,UNKNOWN,/* default time to cache a document */,undetermined
14025,httpd,UNKNOWN,/* factor used to estimate Expires date from LastModified date */,undetermined
14026,httpd,UNKNOWN,/* array of URL prefixes for which caching is enabled */,undetermined
14027,httpd,UNKNOWN,/* array of URL prefixes for which caching is disabled */,undetermined
14028,httpd,UNKNOWN,/* array of headers that should not be stored in cache */,undetermined
14029,httpd,UNKNOWN,/* flag indicating that query-string should be ignored when caching */,undetermined
14030,httpd,UNKNOWN,"/* by default, run in the quick handler */",undetermined
14031,httpd,UNKNOWN,/* array of identifiers that should not be used for key calculation */,undetermined
14032,httpd,UNKNOWN,/* thundering herd lock defaults to off */,undetermined
14033,httpd,UNKNOWN,/* array of URL prefixes for which caching is disabled */,undetermined
14034,httpd,UNKNOWN,/* array of URL prefixes for which caching is enabled */,undetermined
14035,httpd,UNKNOWN,/* if header None is listed clear array */,undetermined
14036,httpd,UNKNOWN,"/* Only add header if no ""None"" has been found in header list
             * so far.
             * (When 'None' is passed, IGNORE_HEADERS_SET && nelts == 0.)
             */",undetermined
14037,httpd,UNKNOWN,/* if identifier None is listed clear array */,undetermined
14038,httpd,UNKNOWN,"/*
             * Only add identifier if no ""None"" has been found in identifier
             * list so far.
             */",undetermined
14039,httpd,UNKNOWN,"/* This is the means by which unusual (non-unix) os's may find alternate
     * means to run a given command (e.g. shebang/registry parsing on Win32)
     */",undetermined
14040,httpd,UNKNOWN,"/* XXX
     * Consider a new config directive that enables loading specific cache
     * implememtations (like mod_cache_mem, mod_cache_file, etc.).
     * Rather than using a LoadModule directive, admin would use something
     * like CacheModule  mem_cache_module | file_cache_module, etc,
     * which would cause the approprpriate cache module to be loaded.
     * This is more intuitive that requiring a LoadModule directive.
     */",undetermined
14041,httpd,UNKNOWN,/* cache initializer */,undetermined
14042,httpd,UNKNOWN,/* cache quick handler */,undetermined
14043,httpd,UNKNOWN,/* cache handler */,undetermined
14044,httpd,UNKNOWN,/* cache status */,undetermined
14045,httpd,UNKNOWN,/* cache error handler */,undetermined
14046,httpd,UNKNOWN,"/* cache filters
     * XXX The cache filters need to run right after the handlers and before
     * any other filters. Consider creating AP_FTYPE_CACHE for this purpose.
     *
     * Depending on the type of request (subrequest / main request) they
     * need to be run before AP_FTYPE_CONTENT_SET / after AP_FTYPE_CONTENT_SET
     * filters. Thus create two filter handles for each type:
     * cache_save_filter_handle / cache_out_filter_handle to be used by
     * main requests and
     * cache_save_subreq_filter_handle / cache_out_subreq_filter_handle
     * to be run by subrequest
     */",undetermined
14047,httpd,UNKNOWN,"/*
     * CACHE is placed into the filter chain at an admin specified location,
     * and when the cache_handler is run, the CACHE filter is swapped with
     * the CACHE_OUT filter, or CACHE_SAVE filter as appropriate. This has
     * the effect of offering optional fine control of where the cache is
     * inserted into the filter chain.
     */",undetermined
14048,httpd,UNKNOWN,"/*
     * CACHE_SAVE must go into the filter chain after a possible DEFLATE
     * filter to ensure that the compressed content is stored.
     * Incrementing filter type by 1 ensures this happens.
     */",undetermined
14049,httpd,UNKNOWN,"/*
     * CACHE_SAVE_SUBREQ must go into the filter chain before SUBREQ_CORE to
     * handle subrequsts. Decrementing filter type by 1 ensures this
     * happens.
     */",undetermined
14050,httpd,UNKNOWN,"/*
     * CACHE_OUT must go into the filter chain after a possible DEFLATE
     * filter to ensure that already compressed cache objects do not
     * get compressed again. Incrementing filter type by 1 ensures
     * this happens.
     */",undetermined
14051,httpd,UNKNOWN,"/*
     * CACHE_OUT_SUBREQ must go into the filter chain before SUBREQ_CORE to
     * handle subrequsts. Decrementing filter type by 1 ensures this
     * happens.
     */",undetermined
14052,httpd,UNKNOWN,"/* CACHE_REMOVE_URL has to be a protocol filter to ensure that is
     * run even if the response is a canned error message, which
     * removes the content filters.
     */",undetermined
14053,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
14054,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
14055,httpd,UNKNOWN,/* create per-server config structure */,undetermined
14056,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
14057,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14058,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14059,httpd,UNKNOWN,"/**
 * @file mod_cache.h
 * @brief Main include file for the Apache Transparent Cache
 *
 * @defgroup MOD_CACHE mod_cache
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
14060,httpd,UNKNOWN,"/* Create a set of CACHE_DECLARE(type), CACHE_DECLARE_NONSTD(type) and
 * CACHE_DECLARE_DATA with appropriate export and import tags for the platform
 */",undetermined
14061,httpd,UNKNOWN,/* cache info information */,undetermined
14062,httpd,UNKNOWN,"/**
     * the original time corresponding to the 'Date:' header of the request
     * served
     */",undetermined
14063,httpd,UNKNOWN,/** a time when the cached entity is due to expire */,undetermined
14064,httpd,UNKNOWN,/** r->request_time from the same request */,undetermined
14065,httpd,UNKNOWN,/** apr_time_now() at the time the entity was actually cached */,undetermined
14066,httpd,UNKNOWN,"/**
     * HTTP status code of the cached entity. Though not necessarily the
     * status code finally issued to the request.
     */",undetermined
14067,httpd,UNKNOWN,/* cached cache-control */,undetermined
14068,httpd,UNKNOWN,/* cache handle information */,undetermined
14069,httpd,UNKNOWN,/* Opaque portion (specific to the implementation) of the cache object */,undetermined
14070,httpd,UNKNOWN,/* cached request headers */,undetermined
14071,httpd,UNKNOWN,/* cached response headers */,undetermined
14072,httpd,UNKNOWN,/* cache_util.c */,undetermined
14073,httpd,UNKNOWN,/* do a HTTP/1.1 age calculation */,undetermined
14074,httpd,UNKNOWN,"/* Create a new table consisting of those elements from an
 * headers table that are allowed to be stored in a cache.
 */",undetermined
14075,httpd,UNKNOWN,"/* Create a new table consisting of those elements from an input
 * headers table that are allowed to be stored in a cache.
 */",undetermined
14076,httpd,UNKNOWN,"/* Create a new table consisting of those elements from an output
 * headers table that are allowed to be stored in a cache;
 * ensure there is a content type and capture any errors.
 */",undetermined
14077,httpd,UNKNOWN,"/**
 * Parse the Cache-Control and Pragma headers in one go, marking
 * which tokens appear within the header. Populate the structure
 * passed in.
 */",undetermined
14078,httpd,UNKNOWN,/* hooks */,undetermined
14079,httpd,UNKNOWN,"/**
 * Cache status hook.
 * This hook is called as soon as the cache has made a decision as to whether
 * an entity should be served from cache (hit), should be served from cache
 * after a successful validation (revalidate), or served from the backend
 * and potentially cached (miss).
 *
 * A basic implementation of this hook exists in mod_cache which writes this
 * information to the subprocess environment, and optionally to request
 * headers. Further implementations may add hooks as appropriate to perform
 * more advanced processing, or to store statistics about the cache behaviour.
 */",undetermined
14080,httpd,UNKNOWN,/*MOD_CACHE_H*/,undetermined
14081,httpd,UNKNOWN,/** @} */,undetermined
14082,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14083,httpd,UNKNOWN,"/*
 * mod_cache_disk: Disk Based HTTP 1.1 Cache.
 *
 * Flow to Find the .data file:
 *   Incoming client requests URI /foo/bar/baz
 *   Generate <hash> off of /foo/bar/baz
 *   Open <hash>.header
 *   Read in <hash>.header file (may contain Format #1 or Format #2)
 *   If format #1 (Contains a list of Vary Headers):
 *      Use each header name (from .header) with our request values (headers_in) to
 *      regenerate <hash> using HeaderName+HeaderValue+.../foo/bar/baz
 *      re-read in <hash>.header (must be format #2)
 *   read in <hash>.data
 *
 * Format #1:
 *   apr_uint32_t format;
 *   apr_time_t expire;
 *   apr_array_t vary_headers (delimited by CRLF)
 *
 * Format #2:
 *   disk_cache_info_t (first sizeof(apr_uint32_t) bytes is the format)
 *   entity name (dobj->name) [length is in disk_cache_info_t->name_len]
 *   r->headers_out (delimited by CRLF)
 *   CRLF
 *   r->headers_in (delimited by CRLF)
 *   CRLF
 */",undetermined
14084,httpd,UNKNOWN,/* Forward declarations */,undetermined
14085,httpd,UNKNOWN,"/*
 * Local static functions
 */",undetermined
14086,httpd,UNKNOWN,"/* htcacheclean may remove directories underneath us.
 * So, we'll try renaming three times at a cost of 0.002 seconds.
 */",undetermined
14087,httpd,UNKNOWN,/* 1000 micro-seconds aka 0.001 seconds. */,undetermined
14088,httpd,UNKNOWN,"/* This assumes that the tempfiles are on the same file system
     * as the cache_root. If not, then we need a file copy/move
     * rather than a rename.
     */",undetermined
14089,httpd,UNKNOWN,/* move the file over */,undetermined
14090,httpd,UNKNOWN,/* clean up the temporary file */,undetermined
14091,httpd,UNKNOWN,"/* These two functions get and put state information into the data
 * file for an ap_cache_el, this state information will be read
 * and written transparent to clients of this module
 */",undetermined
14092,httpd,UNKNOWN,/* read the data from the cache file */,undetermined
14093,httpd,UNKNOWN,/* Store it away so we can get it later. */,undetermined
14094,httpd,UNKNOWN,"/* Note that we could optimize this by conditionally doing the palloc
     * depending upon the size. */",undetermined
14095,httpd,UNKNOWN,/* check that we have the same URL */,undetermined
14096,httpd,UNKNOWN,/* Would strncmp be correct? */,undetermined
14097,httpd,UNKNOWN,"/* TODO:
     *    - Handle multiple-value headers better. (sort them?)
     *    - Handle Case in-sensitive Values better.
     *        This isn't the end of the world, since it just lowers the cache
     *        hit rate, but it would be nice to fix.
     *
     * The majority are case insenstive if they are values (encoding etc).
     * Most of rfc2616 is case insensitive on header contents.
     *
     * So the better solution may be to identify headers which should be
     * treated case-sensitive?
     *  HTTP URI's (3.2.3) [host and scheme are insensitive]
     *  HTTP method (5.1.1)
     *  HTTP-date values (3.3.1)
     *  3.7 Media Types [exerpt]
     *     The type, subtype, and parameter attribute names are case-
     *     insensitive. Parameter values might or might not be case-sensitive,
     *     depending on the semantics of the parameter name.
     *  4.20 Except [exerpt]
     *     Comparison of expectation values is case-insensitive for unquoted
     *     tokens (including the 100-continue token), and is case-sensitive for
     *     quoted-string expectation-extensions.
     */",undetermined
14098,httpd,UNKNOWN,"/* Sort it so that ""Vary: A, B"" and ""Vary: B, A"" are stored the same. */",undetermined
14099,httpd,UNKNOWN,"/*
 * Hook and mod_cache callback functions
 */",undetermined
14100,httpd,UNKNOWN,/* we don't support caching of range requests (yet) */,undetermined
14101,httpd,UNKNOWN,"/* Note, len is -1 if unknown so don't trust it too hard */",undetermined
14102,httpd,UNKNOWN,/* Allocate and initialize cache_object_t and disk_cache_object_t */,undetermined
14103,httpd,UNKNOWN,/* Save the cache root */,undetermined
14104,httpd,UNKNOWN,/* Look up entity keyed to 'url' */,undetermined
14105,httpd,UNKNOWN,/* Create and init the cache object */,undetermined
14106,httpd,UNKNOWN,/* Open the headers file */,undetermined
14107,httpd,UNKNOWN,/* Save the cache root */,undetermined
14108,httpd,UNKNOWN,/* read the format from the cache file */,undetermined
14109,httpd,UNKNOWN,"/* oops, not vary as it turns out */",undetermined
14110,httpd,UNKNOWN,"/* This wasn't a Vary Format file, so we must seek to the
         * start of the file again, so that later reads work.
         */",undetermined
14111,httpd,UNKNOWN,/* Read the bytes to setup the cache_info fields */,undetermined
14112,httpd,UNKNOWN,/* Is this a cached HEAD request? */,undetermined
14113,httpd,UNKNOWN,/* Open the data file */,undetermined
14114,httpd,UNKNOWN,"/* When we are in the quick handler we don't have the per-directory
         * configuration, so this check only takes the global setting of
         * the EnableSendFile directive into account.
         */",undetermined
14115,httpd,UNKNOWN,/* Atomic check - does the body file belong to the header file? */,undetermined
14116,httpd,UNKNOWN,/* Initialize the cache_handle callback functions */,undetermined
14117,httpd,UNKNOWN,/* make the configuration stick */,undetermined
14118,httpd,UNKNOWN,/* make the configuration stick */,undetermined
14119,httpd,UNKNOWN,"/* Oh dear, no luck matching header to the body */",undetermined
14120,httpd,UNKNOWN,/* Null out the cache object pointer so next time we start from scratch  */,undetermined
14121,httpd,UNKNOWN,/* Get disk cache object from cache handle */,undetermined
14122,httpd,UNKNOWN,/* Delete headers file */,undetermined
14123,httpd,UNKNOWN,"/* Will only result in an output if httpd is started with -e debug.
             * For reason see log_error_core for the case s == NULL.
             */",undetermined
14124,httpd,UNKNOWN,/* Delete data file */,undetermined
14125,httpd,UNKNOWN,"/* Will only result in an output if httpd is started with -e debug.
             * For reason see log_error_core for the case s == NULL.
             */",undetermined
14126,httpd,UNKNOWN,/* now delete directories as far as possible up to our cache root */,undetermined
14127,httpd,UNKNOWN,/* remove filename */,undetermined
14128,httpd,UNKNOWN,"/*
             * now walk our way back to the cache root, delete everything
             * in the way as far as possible
             *
             * Note: due to the way we constructed the file names in
             * header_file and data_file, we are guaranteed that the
             * cache_root is suffixed by at least one '/' which will be
             * turned into a terminating null by this loop.  Therefore,
             * we won't either delete or go above our cache root.
             */",undetermined
14129,httpd,UNKNOWN,"/* If we've finished reading the array, break out of the loop. */",undetermined
14130,httpd,UNKNOWN,/* ### What about APR_EOF? */,undetermined
14131,httpd,UNKNOWN,/* Delete terminal (CR?)LF */,undetermined
14132,httpd,UNKNOWN,"/* Indeed, the host's '\n':
           '\012' for UNIX; '\015' for MacOS; '\025' for OS/390
           -- whatever the script generates.
        */",undetermined
14133,httpd,UNKNOWN,"/* If we've finished reading the headers, break out of the loop. */",undetermined
14134,httpd,UNKNOWN,"/* Chances are that we received an ASCII header text instead of
         * the expected EBCDIC header lines. Try to auto-detect:
         */",undetermined
14135,httpd,UNKNOWN,/*APR_CHARSET_EBCDIC*/,undetermined
14136,httpd,UNKNOWN,/* if we see a bogus header don't ignore it. Shout and scream */,undetermined
14137,httpd,UNKNOWN,"/*
 * Reads headers from a buffer and returns an array of headers.
 * Returns NULL on file error
 * This routine tries to deal with too long lines and continuation lines.
 * @@@: XXX: FIXME: currently the headers are passed thru un-merged.
 * Is that okay, or should they be collapsed where possible?
 */",undetermined
14138,httpd,UNKNOWN,/* This case should not happen... */,undetermined
14139,httpd,UNKNOWN,/* Call routine to read the header lines/status line */,undetermined
14140,httpd,UNKNOWN,"/* If we were initially opened as a vary format, rollback
             * that internal state for the moment so we can recreate the
             * vary format hints in the appropriate directory.
             */",undetermined
14141,httpd,UNKNOWN,/* Parse the vary header and dump those fields from the headers_in. */,undetermined
14142,httpd,UNKNOWN,/* FIXME: Make call to the same thing cache_select calls to crack Vary. */,undetermined
14143,httpd,UNKNOWN,/* flush and close */,undetermined
14144,httpd,UNKNOWN,"/* are we done completely? if so, pass any trailing buckets right through */",undetermined
14145,httpd,UNKNOWN,/* have we seen eos yet? */,undetermined
14146,httpd,UNKNOWN,"/* honour flush buckets, we'll get called again */",undetermined
14147,httpd,UNKNOWN,/* metadata buckets are preserved as is */,undetermined
14148,httpd,UNKNOWN,"/* read the bucket, write to the cache */",undetermined
14149,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14150,httpd,UNKNOWN,/* don't write empty buckets to the cache */,undetermined
14151,httpd,UNKNOWN,"/* Attempt to create the data file at the last possible moment, if
             * the body is empty, we don't write a file at all, and save an inode.
             */",undetermined
14152,httpd,UNKNOWN,"/* write to the cache, leave if we fail */",undetermined
14153,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14154,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14155,httpd,UNKNOWN,"/* have we reached the limit of how much we're prepared to write in one
         * go? If so, leave, we'll get called again. This prevents us from trying
         * to swallow too much data at once, or taking so long to write the data
         * the client times out.
         */",undetermined
14156,httpd,UNKNOWN,"/* Was this the final bucket? If yes, close the temp file and perform
     * sanity checks.
     */",undetermined
14157,httpd,UNKNOWN,"/* Buffered write failed, abandon attempt to write */",undetermined
14158,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14159,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14160,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14161,httpd,UNKNOWN,"/* All checks were fine, we're good to go when the commit comes */",undetermined
14162,httpd,UNKNOWN,/* write the headers to disk at the last possible moment */,undetermined
14163,httpd,UNKNOWN,/* move header and data tempfiles to the final destination */,undetermined
14164,httpd,UNKNOWN,/* remove the cached items completely on any failure */,undetermined
14165,httpd,UNKNOWN,/* mark the entity as invalidated */,undetermined
14166,httpd,UNKNOWN,/* XXX: Set default values */,undetermined
14167,httpd,UNKNOWN,"/*
 * mod_cache_disk configuration directives handlers.
 */",undetermined
14168,httpd,UNKNOWN,/* TODO: canonicalize cache_root and strip off any trailing slashes */,undetermined
14169,httpd,UNKNOWN,"/*
 * Consider eliminating the next two directives in favor of
 * Ian's prime number hash...
 * key = hash_fn( r->uri)
 * filename = ""/key % prime1 /key %prime2/key %prime3""
 */",undetermined
14170,httpd,UNKNOWN,/* cache initializer */,undetermined
14171,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
14172,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
14173,httpd,UNKNOWN,/* create per-server config structure */,undetermined
14174,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
14175,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14176,httpd,UNKNOWN,/* register hooks */,undetermined
14177,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14178,httpd,UNKNOWN,"/*
 * include for mod_cache_disk: Disk Based HTTP 1.1 Cache.
 */",undetermined
14179,httpd,UNKNOWN,"/*
 * disk_cache_object_t
 * Pointed to by cache_object_t::vobj
 */",undetermined
14180,httpd,UNKNOWN,/* the location of the cache directory */,undetermined
14181,httpd,UNKNOWN,/* data file structure */,undetermined
14182,httpd,UNKNOWN,/* headers file structure */,undetermined
14183,httpd,UNKNOWN,/* vary file structure */,undetermined
14184,httpd,UNKNOWN,/* Computed hash key for this URI */,undetermined
14185,httpd,UNKNOWN,/* Requested URI without vary bits - suitable for mortals. */,undetermined
14186,httpd,UNKNOWN,/* On-disk prefix; URI with Vary bits (if present) */,undetermined
14187,httpd,UNKNOWN,/*  File size of the cached data file  */,undetermined
14188,httpd,UNKNOWN,/* Header information. */,undetermined
14189,httpd,UNKNOWN,/* Input headers to save */,undetermined
14190,httpd,UNKNOWN,/* Output headers to save */,undetermined
14191,httpd,UNKNOWN,/* Max size to set aside */,undetermined
14192,httpd,UNKNOWN,/* Max time to set aside */,undetermined
14193,httpd,UNKNOWN,/* Is the attempt to cache complete? */,undetermined
14194,httpd,UNKNOWN,"/*
 * mod_cache_disk configuration
 */",undetermined
14195,httpd,UNKNOWN,/* TODO: Make defaults OS specific */,undetermined
14196,httpd,UNKNOWN,/* must be less than HASH_LEN/2 */,undetermined
14197,httpd,UNKNOWN,/* Number of levels of subdirectories */,undetermined
14198,httpd,UNKNOWN,/* Length of subdirectory names */,undetermined
14199,httpd,UNKNOWN,/* minimum file size for cached files */,undetermined
14200,httpd,UNKNOWN,/* maximum file size for cached files */,undetermined
14201,httpd,UNKNOWN,/* maximum data to attempt to cache in one go */,undetermined
14202,httpd,UNKNOWN,/* maximum time taken to cache in one go */,undetermined
14203,httpd,UNKNOWN,/*MOD_CACHE_DISK_H*/,undetermined
14204,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14205,httpd,UNKNOWN,"/*
 * mod_cache_socache: Shared Object Cache Based HTTP 1.1 Cache.
 *
 * Flow to Find the entry:
 *   Incoming client requests URI /foo/bar/baz
 *   Fetch URI key (may contain Format #1 or Format #2)
 *   If format #1 (Contains a list of Vary Headers):
 *      Use each header name (from .header) with our request values (headers_in) to
 *      regenerate key using HeaderName+HeaderValue+.../foo/bar/baz
 *      re-read in key (must be format #2)
 *
 * Format #1:
 *   apr_uint32_t format;
 *   apr_time_t expire;
 *   apr_array_t vary_headers (delimited by CRLF)
 *
 * Format #2:
 *   cache_socache_info_t (first sizeof(apr_uint32_t) bytes is the format)
 *   entity name (sobj->name) [length is in cache_socache_info_t->name_len]
 *   r->headers_out (delimited by CRLF)
 *   CRLF
 *   r->headers_in (delimited by CRLF)
 *   CRLF
 */",undetermined
14206,httpd,UNKNOWN,"/*
 * cache_socache_object_t
 * Pointed to by cache_object_t::vobj
 */",undetermined
14207,httpd,UNKNOWN,/* pool */,undetermined
14208,httpd,UNKNOWN,/* the cache buffer */,undetermined
14209,httpd,UNKNOWN,/* size of the buffer */,undetermined
14210,httpd,UNKNOWN,"/* brigade containing the body, if any */",undetermined
14211,httpd,UNKNOWN,/* Input headers to save */,undetermined
14212,httpd,UNKNOWN,/* Output headers to save */,undetermined
14213,httpd,UNKNOWN,/* Header information. */,undetermined
14214,httpd,UNKNOWN,/* offset to the start of the body */,undetermined
14215,httpd,UNKNOWN,/* whether a new body is present */,undetermined
14216,httpd,UNKNOWN,/* when to expire the entry */,undetermined
14217,httpd,UNKNOWN,/* Requested URI without vary bits - suitable for mortals. */,undetermined
14218,httpd,UNKNOWN,/* On-disk prefix; URI with Vary bits (if present) */,undetermined
14219,httpd,UNKNOWN,/*  File size of the cached data file  */,undetermined
14220,httpd,UNKNOWN,/* Max size to set aside */,undetermined
14221,httpd,UNKNOWN,/* Max time to set aside */,undetermined
14222,httpd,UNKNOWN,/* Is the attempt to cache complete? */,undetermined
14223,httpd,UNKNOWN,"/*
 * mod_cache_socache configuration
 */",undetermined
14224,httpd,UNKNOWN,/* maximum file size for cached files */,undetermined
14225,httpd,UNKNOWN,/* maximum expiry time */,undetermined
14226,httpd,UNKNOWN,/* minimum expiry time */,undetermined
14227,httpd,UNKNOWN,/* maximum data to attempt to cache in one go */,undetermined
14228,httpd,UNKNOWN,/* maximum time taken to cache in one go */,undetermined
14229,httpd,UNKNOWN,/* Shared object cache and mutex */,undetermined
14230,httpd,UNKNOWN,"/*
 * Local static functions
 */",undetermined
14231,httpd,UNKNOWN,"/* TODO:
     *    - Handle multiple-value headers better. (sort them?)
     *    - Handle Case in-sensitive Values better.
     *        This isn't the end of the world, since it just lowers the cache
     *        hit rate, but it would be nice to fix.
     *
     * The majority are case insenstive if they are values (encoding etc).
     * Most of rfc2616 is case insensitive on header contents.
     *
     * So the better solution may be to identify headers which should be
     * treated case-sensitive?
     *  HTTP URI's (3.2.3) [host and scheme are insensitive]
     *  HTTP method (5.1.1)
     *  HTTP-date values (3.3.1)
     *  3.7 Media Types [exerpt]
     *     The type, subtype, and parameter attribute names are case-
     *     insensitive. Parameter values might or might not be case-sensitive,
     *     depending on the semantics of the parameter name.
     *  4.20 Except [exerpt]
     *     Comparison of expectation values is case-insensitive for unquoted
     *     tokens (including the 100-continue token), and is case-sensitive for
     *     quoted-string expectation-extensions.
     */",undetermined
14232,httpd,UNKNOWN,"/* Sort it so that ""Vary: A, B"" and ""Vary: B, A"" are stored the same. */",undetermined
14233,httpd,UNKNOWN,"/*
 * Hook and mod_cache callback functions
 */",undetermined
14234,httpd,UNKNOWN,/* we don't support caching of range requests (yet) */,undetermined
14235,httpd,UNKNOWN,/* TODO: but we could */,undetermined
14236,httpd,UNKNOWN,"/*
     * We have a chicken and egg problem. We don't know until we
     * attempt to store_headers just how big the response will be
     * and whether it will fit in the cache limits set. But we
     * need to make a decision now as to whether we plan to try.
     * If we make the wrong decision, we could prevent another
     * cache implementation, such as cache_disk, from getting the
     * opportunity to cache, and that would be unfortunate.
     *
     * In a series of tests, from cheapest to most expensive,
     * decide whether or not to ignore this attempt to cache,
     * with a small margin just to be sure.
     */",undetermined
14237,httpd,UNKNOWN,"/* estimate the total cached size, given current headers */",undetermined
14238,httpd,UNKNOWN,/* Allocate and initialize cache_object_t and cache_socache_object_t */,undetermined
14239,httpd,UNKNOWN,/* Create and init the cache object */,undetermined
14240,httpd,UNKNOWN,"/* Create a temporary pool for the buffer, and destroy it if something
     * goes wrong so we don't have large buffers of unused memory hanging
     * about for the lifetime of the response.
     */",undetermined
14241,httpd,UNKNOWN,/* attempt to retrieve the cached entry */,undetermined
14242,httpd,UNKNOWN,/* read the format from the cache file */,undetermined
14243,httpd,UNKNOWN,/* attempt to retrieve the cached entry */,undetermined
14244,httpd,UNKNOWN,/* Store it away so we can get it later. */,undetermined
14245,httpd,UNKNOWN,/* Is this a cached HEAD request? */,undetermined
14246,httpd,UNKNOWN,/* Call routine to read the header lines/status line */,undetermined
14247,httpd,UNKNOWN,/* Retrieve the body if we have one */,undetermined
14248,httpd,UNKNOWN,"/*
     *  Optimisation: if the body is small, we want to make a
     *  copy of the body and free the temporary pool, as we
     *  don't want large blocks of unused memory hanging around
     *  to the end of the response. In contrast, if the body is
     *  large, we would rather leave the body where it is in the
     *  temporary pool, and save ourselves the copy.
     */",undetermined
14249,httpd,UNKNOWN,"/* large - use the brigade as is, we're done */",undetermined
14250,httpd,UNKNOWN,/* small - make a copy of the data... */,undetermined
14251,httpd,UNKNOWN,/* ...and get rid of the large memory buffer */,undetermined
14252,httpd,UNKNOWN,/* make the configuration stick */,undetermined
14253,httpd,UNKNOWN,/* Null out the cache object pointer so next time we start from scratch  */,undetermined
14254,httpd,UNKNOWN,/* Remove the key from the cache */,undetermined
14255,httpd,UNKNOWN,"/* we recalled the headers during open_entity, so do nothing */",undetermined
14256,httpd,UNKNOWN,/* Parse the vary header and dump those fields from the headers_in. */,undetermined
14257,httpd,UNKNOWN,/* TODO: Make call to the same thing cache_select calls to crack Vary. */,undetermined
14258,httpd,UNKNOWN,"/* are we done completely? if so, pass any trailing buckets right through */",undetermined
14259,httpd,UNKNOWN,/* have we seen eos yet? */,undetermined
14260,httpd,UNKNOWN,"/* honour flush buckets, we'll get called again */",undetermined
14261,httpd,UNKNOWN,/* metadata buckets are preserved as is */,undetermined
14262,httpd,UNKNOWN,"/* read the bucket, write to the cache */",undetermined
14263,httpd,UNKNOWN,/* Remove the intermediate cache file and return non-APR_SUCCESS */,undetermined
14264,httpd,UNKNOWN,/* don't write empty buckets to the cache */,undetermined
14265,httpd,UNKNOWN,"/* have we reached the limit of how much we're prepared to write in one
         * go? If so, leave, we'll get called again. This prevents us from trying
         * to swallow too much data at once, or taking so long to write the data
         * the client times out.
         */",undetermined
14266,httpd,UNKNOWN,"/* Was this the final bucket? If yes, perform sanity checks.
     */",undetermined
14267,httpd,UNKNOWN,"/* All checks were fine, we're good to go when the commit comes */",undetermined
14268,httpd,UNKNOWN,/* flatten the body into the buffer */,undetermined
14269,httpd,UNKNOWN,"/* For safety, remove any existing entry on failure, just in case it could not
     * be revalidated successfully.
     */",undetermined
14270,httpd,UNKNOWN,/* mark the entity as invalidated */,undetermined
14271,httpd,UNKNOWN,"/*
 * mod_cache_socache configuration directives handlers.
 */",undetermined
14272,httpd,UNKNOWN,/* Argument is of form 'name:args' or just 'name'. */,undetermined
14273,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
14274,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
14275,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
14276,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
14277,httpd,UNKNOWN,/* don't waste the overhead of creating mutex & cache */,undetermined
14278,httpd,UNKNOWN,/* cache initializer */,undetermined
14279,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
14280,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
14281,httpd,UNKNOWN,/* create per-server config structure */,undetermined
14282,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
14283,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14284,httpd,UNKNOWN,/* register hooks */,undetermined
14285,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14286,httpd,UNKNOWN,"/*
 * Author: mod_file_cache by Bill Stoddard <stoddard apache.org>
 *         Based on mod_mmap_static by Dean Gaudet <dgaudet arctic.org>
 *
 * v0.01: initial implementation
 */",undetermined
14287,httpd,UNKNOWN,"/*
    Documentation:

    Some sites have a set of static files that are really busy, and
    change infrequently (or even on a regular schedule). Save time
    by caching open handles to these files. This module, unlike
    mod_mmap_static, caches open file handles, not file content.
    On systems (like Windows) with heavy system call overhead and
    that have an efficient sendfile implementation, caching file handles
    offers several advantages over caching content. First, the file system
    can manage the memory, allowing infrequently hit cached files to
    be paged out. Second, since caching open handles does not consume
    significant resources, it will be possible to enable an AutoLoadCache
    feature where static files are dynamically loaded in the cache
    as the server runs. On systems that have file change notification,
    this module can be enhanced to automatically garbage collect
    cached files that change on disk.

    This module should work on Unix systems that have sendfile. Place
    cachefile directives into your configuration to direct files to
    be cached.

        cachefile /path/to/file1
        cachefile /path/to/file2
        ...

    These files are only cached when the server is restarted, so if you
    change the list, or if the files are changed, then you'll need to
    restart the server.

    To reiterate that point:  if the files are modified *in place*
    without restarting the server you may end up serving requests that
    are completely bogus.  You should update files by unlinking the old
    copy and putting a new copy in place.

    There's no such thing as inheriting these files across vhosts or
    whatever... place the directives in the main server only.

    Known problems:

    Don't use Alias or RewriteRule to move these files around...  unless
    you feel like paying for an extra stat() on each request.  This is
    a deficiency in the Apache API that will hopefully be solved some day.
    The file will be served out of the file handle cache, but there will be
    an extra stat() that's a waste.
*/",undetermined
14288,httpd,UNKNOWN,/* big enough to hold any 64-bit file size + null */,undetermined
14289,httpd,UNKNOWN,"/* WooHoo, we have a file to put in the cache */",undetermined
14290,httpd,UNKNOWN,"/* MMAPFile directive. MMAP'ing the file
         * XXX: APR_HAS_LARGE_FILES issue; need to reject this request if
         * size is greater than MAX(apr_size_t) (perhaps greater than 1M?).
         */",undetermined
14291,httpd,UNKNOWN,/* CacheFile directive. Caching the file handle */,undetermined
14292,httpd,UNKNOWN,/* Sendfile not supported by this OS */,undetermined
14293,httpd,UNKNOWN,/* MMAP not supported by this OS */,undetermined
14294,httpd,UNKNOWN,"/* Hummm, anything to do here? */",undetermined
14295,httpd,UNKNOWN,"/* If it's one of ours, fill in r->finfo now to avoid extra stat()... this is a
 * bit of a kludge, because we really want to run after core_translate runs.
 */",undetermined
14296,httpd,UNKNOWN,/* we only operate when at least one cachefile directive was used */,undetermined
14297,httpd,UNKNOWN,/* search the cache */,undetermined
14298,httpd,UNKNOWN,/* pass search results to handler */,undetermined
14299,httpd,UNKNOWN,/* shortcircuit the get_path_info() stat() calls and stuff */,undetermined
14300,httpd,UNKNOWN,"/* XXX: not sure if this is right yet
     * see comment in http_core.c:default_handler
     */",undetermined
14301,httpd,UNKNOWN,/* we don't handle anything but GET */,undetermined
14302,httpd,UNKNOWN,/* did xlat phase find the file? */,undetermined
14303,httpd,UNKNOWN,/* note that we would handle GET on this resource */,undetermined
14304,httpd,UNKNOWN,"/* This handler has no use for a request body (yet), but we still
     * need to read and discard it if the client sent one.
     */",undetermined
14305,httpd,UNKNOWN,"/* ap_set_last_modified() always converts the file mtime to a string
     * which is slow.  Accelerate the common case.
     * ap_set_last_modified(r);
     */",undetermined
14306,httpd,UNKNOWN,"/* ap_set_content_length() always converts the same number and never
     * returns an error.  Accelerate it.
     */",undetermined
14307,httpd,UNKNOWN,/* Call appropriate handler */,undetermined
14308,httpd,UNKNOWN,"/* This trick doesn't work apparently because the translate hooks
       are single shot. If the core_hook returns OK, then our hook is
       not called.
    ap_hook_translate_name(file_cache_xlat, aszPre, NULL, APR_HOOK_MIDDLE);
    */",undetermined
14309,httpd,UNKNOWN,/* create per-directory config structure */,undetermined
14310,httpd,UNKNOWN,/* merge per-directory config structures */,undetermined
14311,httpd,UNKNOWN,/* create per-server config structure */,undetermined
14312,httpd,UNKNOWN,/* merge per-server config structures */,undetermined
14313,httpd,UNKNOWN,/* command handlers */,undetermined
14314,httpd,UNKNOWN,/* register hooks */,undetermined
14315,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14316,httpd,UNKNOWN,"/* Use of the context structure must be thread-safe after the initial
 * create/init; callers must hold the mutex. */",undetermined
14317,httpd,UNKNOWN,/* Pool must only be used with the mutex held. */,undetermined
14318,httpd,UNKNOWN,"/**
 * Support for DBM library
 */",undetermined
14319,httpd,UNKNOWN,/* ### this should use apr_dbm_usednames. */,undetermined
14320,httpd,UNKNOWN,/* no gid change */,undetermined
14321,httpd,UNKNOWN,/* for the DBM we need the data file */,undetermined
14322,httpd,UNKNOWN,/* open it once to create it and to make sure it _can_ be created */,undetermined
14323,httpd,UNKNOWN,"/*
     * We have to make sure the Apache child processes have access to
     * the DBM file. But because there are brain-dead platforms where we
     * cannot exactly determine the suffixes we try all possibilities.
     */",undetermined
14324,httpd,UNKNOWN,/* is superuser */,undetermined
14325,httpd,UNKNOWN,/* the correct way */,undetermined
14326,httpd,UNKNOWN,/* the additional ways to be sure */,undetermined
14327,httpd,UNKNOWN,/* be careful: do not try to store too much bytes in a DBM file! */,undetermined
14328,httpd,UNKNOWN,/* at least less than approx. 1KB */,undetermined
14329,httpd,UNKNOWN,/* create DBM key */,undetermined
14330,httpd,UNKNOWN,/* create DBM value */,undetermined
14331,httpd,UNKNOWN,/* and store it to the DBM file */,undetermined
14332,httpd,UNKNOWN,/* free temporary buffers */,undetermined
14333,httpd,UNKNOWN,/* allow the regular expiring to occur */,undetermined
14334,httpd,UNKNOWN,/* allow the regular expiring to occur */,undetermined
14335,httpd,UNKNOWN,/* create DBM key and values */,undetermined
14336,httpd,UNKNOWN,"/* and fetch it from the DBM file
     * XXX: Should we open the dbm against r->pool so the cleanup will
     * do the apr_dbm_close? This would make the code a bit cleaner.
     */",undetermined
14337,httpd,UNKNOWN,/* parse resulting data */,undetermined
14338,httpd,UNKNOWN,/* make sure the stuff is still not expired */,undetermined
14339,httpd,UNKNOWN,/* create DBM key and values */,undetermined
14340,httpd,UNKNOWN,/* and delete it from the DBM file */,undetermined
14341,httpd,UNKNOWN,"/*
     * make sure the expiration for still not-accessed
     * socache entries is done only from time to time
     */",undetermined
14342,httpd,UNKNOWN,"/*
     * Here we have to be very carefully: Not all DBM libraries are
     * smart enough to allow one to iterate over the elements and at the
     * same time delete expired ones. Some of them get totally crazy
     * while others have no problems. So we have to do it the slower but
     * more safe way: we first iterate over all elements and remember
     * those which have to be expired. Then in a second pass we delete
     * all those expired elements. Additionally we reopen the DBM file
     * to be really safe in state.
     */",undetermined
14343,httpd,UNKNOWN,/* allocate the key array in a memory sub pool */,undetermined
14344,httpd,UNKNOWN,/* pass 1: scan DBM database */,undetermined
14345,httpd,UNKNOWN,/* pass 2: delete expired elements */,undetermined
14346,httpd,UNKNOWN,"/*
     * XXX - Check the return value of apr_dbm_firstkey, apr_dbm_fetch - TBD
     */",undetermined
14347,httpd,UNKNOWN,"/*
     * make sure the expired records are omitted
     */",undetermined
14348,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14349,httpd,UNKNOWN,/* Configured target server: */,undetermined
14350,httpd,UNKNOWN,/* distcache client context: */,undetermined
14351,httpd,UNKNOWN,"/* If a ""persistent connection"" mode of operation is preferred, you *must*
     * also use the PIDCHECK flag to ensure fork()'d processes don't interlace
     * comms on the same connection as each other. */",undetermined
14352,httpd,UNKNOWN,"/* This mode of operation will open a temporary connection to the 'target'
     * for each cache operation - this makes it safe against fork()
     * automatically. This mode is preferred when running a local proxy (over
     * unix domain sockets) because overhead is negligable and it reduces the
     * performance/stability danger of file-descriptor bloatage. */",undetermined
14353,httpd,UNKNOWN,"/* !@#$%^ - why do we deal with *absolute* time anyway???
     * Uhm - because most things expire things at a specific time?
     * Were the API were thought out expiry - r->request_time is a good approximation
     */",undetermined
14354,httpd,UNKNOWN,/* Send the serialised session to the distributed cache context */,undetermined
14355,httpd,UNKNOWN,/* Retrieve any corresponding session from the distributed cache context */,undetermined
14356,httpd,UNKNOWN,/* Remove any corresponding session from the distributed cache context */,undetermined
14357,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the ""License""); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/",undetermined
14358,httpd,UNKNOWN,/* apr_memcache support requires >= 1.3 */,undetermined
14359,httpd,UNKNOWN,/* The underlying apr_memcache system is thread safe.. */,undetermined
14360,httpd,UNKNOWN,/* strlen(tag) + 1 */,undetermined
14361,httpd,UNKNOWN,/* Find all the servers in the first run to get a total count */,undetermined
14362,httpd,UNKNOWN,/* Now add each server to the memcache */,undetermined
14363,httpd,UNKNOWN,/* socache API constraint: */,undetermined
14364,httpd,UNKNOWN,/* noop. */,undetermined
14365,httpd,UNKNOWN,"/* Converts (binary) id into a key prefixed by the predetermined
 * namespace tag; writes output to key buffer.  Returns non-zero if
 * the id won't fit in the key buffer. */",undetermined
14366,httpd,UNKNOWN,"/* In APR-util - unclear what 'timeout' is, as it was not implemented */",undetermined
14367,httpd,UNKNOWN,"/* ### this could do with a subpool, but _getp looks like it will
     * eat memory like it's going out of fashion anyway. */",undetermined
14368,httpd,UNKNOWN,/* TODO: Make a mod_status handler. meh. */,undetermined
14369,httpd,UNKNOWN,/* HAVE_APU_MEMCACHE */,undetermined
14370,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14371,httpd,UNKNOWN,"/*
 * Header structure - the start of the shared-mem segment
 */",undetermined
14372,httpd,UNKNOWN,/* Stats for cache operations */,undetermined
14373,httpd,UNKNOWN,/* Number of subcaches */,undetermined
14374,httpd,UNKNOWN,/* How many indexes each subcache's queue has */,undetermined
14375,httpd,UNKNOWN,"/* How large each subcache is, including the queue and data */",undetermined
14376,httpd,UNKNOWN,/* How far into each subcache the data area is (optimisation) */,undetermined
14377,httpd,UNKNOWN,/* How large the data area in each subcache is (optimisation) */,undetermined
14378,httpd,UNKNOWN,"/*
 * Subcache structure - the start of each subcache, followed by
 * indexes then data
 */",undetermined
14379,httpd,UNKNOWN,/* The start position and length of the cyclic buffer of indexes */,undetermined
14380,httpd,UNKNOWN,/* Same for the data area */,undetermined
14381,httpd,UNKNOWN,"/*
 * Index structure - each subcache has an array of these
 */",undetermined
14382,httpd,UNKNOWN,/* absolute time this entry expires */,undetermined
14383,httpd,UNKNOWN,/* location within the subcache's data area */,undetermined
14384,httpd,UNKNOWN,"/* size (most logic ignores this, we keep it only to minimise memcpy) */",undetermined
14385,httpd,UNKNOWN,/* length of the used data which contains the id */,undetermined
14386,httpd,UNKNOWN,/* Used to mark explicitly-removed socache entries */,undetermined
14387,httpd,UNKNOWN,"/* The SHM data segment is of fixed size and stores data as follows.
 *
 *   [ SHMCBHeader | Subcaches ]
 *
 * The SHMCBHeader header structure stores metadata concerning the
 * cache and the contained subcaches.
 *
 * Subcaches is a hash table of header->subcache_num SHMCBSubcache
 * structures.  The hash table is indexed by SHMCB_MASK(id). Each
 * SHMCBSubcache structure has a fixed size (header->subcache_size),
 * which is determined at creation time, and looks like the following:
 *
 *   [ SHMCBSubcache | Indexes | Data ]
 *
 * Each subcache is prefixed by the SHMCBSubcache structure.
 *
 * The subcache's ""Data"" segment is a single cyclic data buffer, of
 * total size header->subcache_data_size; data inside is referenced
 * using byte offsets. The offset marking the beginning of the cyclic
 * buffer is subcache->data_pos; the buffer's length is
 * subcache->data_used.
 *
 * ""Indexes"" is an array of header->index_num SHMCBIndex structures,
 * which is used as a cyclic queue; subcache->idx_pos gives the array
 * index of the first in use, subcache->idx_used gives the number in
 * use.  Both ->idx_* values have a range of [0, header->index_num)
 *
 * Each in-use SHMCBIndex structure represents a single cached object.
 * The ID and data segment are stored consecutively in the subcache's
 * cyclic data buffer.  The ""Data"" segment can thus be seen to
 * look like this, for example
 *
 * offset:  [ 0     1     2     3     4     5     6    ...
 * contents:[ ID1   Data1       ID2   Data2       ID3  ...
 *
 * where the corresponding indices would look like:
 *
 * idx1 = { data_pos = 0, data_used = 3, id_len = 1, ...}
 * idx2 = { data_pos = 3, data_used = 3, id_len = 1, ...}
 * ...
 */",undetermined
14388,httpd,UNKNOWN,"/* This macro takes a pointer to the header and a zero-based index and returns
 * a pointer to the corresponding subcache. */",undetermined
14389,httpd,UNKNOWN,"/* This macro takes a pointer to the header and an id and returns a
 * pointer to the corresponding subcache. */",undetermined
14390,httpd,UNKNOWN,"/* This macro takes the same params as the last, generating two outputs for use
 * in ap_log_error(...). */",undetermined
14391,httpd,UNKNOWN,"/* This macro takes a pointer to a subcache and a zero-based index and returns
 * a pointer to the corresponding SHMCBIndex. */",undetermined
14392,httpd,UNKNOWN,"/* This macro takes a pointer to the header and a subcache and returns a
 * pointer to the corresponding data area. */",undetermined
14393,httpd,UNKNOWN,"/*
 * Cyclic functions - assists in ""wrap-around""/modulo logic
 */",undetermined
14394,httpd,UNKNOWN,/* Addition modulo 'mod' */,undetermined
14395,httpd,UNKNOWN,"/* Subtraction (or ""distance between"") modulo 'mod' */",undetermined
14396,httpd,UNKNOWN,"/* A ""normal-to-cyclic"" memcpy. */",undetermined
14397,httpd,UNKNOWN,/* It be copied all in one go */,undetermined
14398,httpd,UNKNOWN,/* Copy the two splits */,undetermined
14399,httpd,UNKNOWN,"/* A ""cyclic-to-normal"" memcpy. */",undetermined
14400,httpd,UNKNOWN,/* It be copied all in one go */,undetermined
14401,httpd,UNKNOWN,/* Copy the two splits */,undetermined
14402,httpd,UNKNOWN,"/* A memcmp against a cyclic data buffer.  Compares SRC of length
 * SRC_LEN against the contents of cyclic buffer DATA (which is of
 * size BUF_SIZE), starting at offset DEST_OFFSET. Got that?  Good. */",undetermined
14403,httpd,UNKNOWN,/* It be compared all in one go */,undetermined
14404,httpd,UNKNOWN,/* Compare the two splits */,undetermined
14405,httpd,UNKNOWN,/* Prototypes for low-level subcache operations */,undetermined
14406,httpd,UNKNOWN,"/* Returns zero on success, non-zero on failure. */",undetermined
14407,httpd,UNKNOWN,"/* Returns zero on success, non-zero on failure. */",undetermined
14408,httpd,UNKNOWN,"/* Returns zero on success, non-zero on failure. */",undetermined
14409,httpd,UNKNOWN,"/* Returns result of the (iterator)() call, zero is success (continue) */",undetermined
14410,httpd,UNKNOWN,"/*
 * High-Level ""handlers"" as per ssl_scache.c
 * subcache internals are deferred to shmcb_subcache_*** functions lower down
 */",undetermined
14411,httpd,UNKNOWN,/* Allocate the context. */,undetermined
14412,httpd,UNKNOWN,/* 512KB */,undetermined
14413,httpd,UNKNOWN,/* Use defaults. */,undetermined
14414,httpd,UNKNOWN,/* Create shared memory segment */,undetermined
14415,httpd,UNKNOWN,"/* Use anonymous shm by default, fall back on name-based. */",undetermined
14416,httpd,UNKNOWN,"/* If anon shm isn't supported, fail if no named file was
         * configured successfully; the ap_server_root_relative call
         * above will return NULL for invalid paths. */",undetermined
14417,httpd,UNKNOWN,"/* For a name-based segment, remove it first in case of a
         * previous unclean shutdown. */",undetermined
14418,httpd,UNKNOWN,"/* the segment is ridiculously small, bail out */",undetermined
14419,httpd,UNKNOWN,/* Discount the header */,undetermined
14420,httpd,UNKNOWN,"/* Select index size based on average object size hints, if given. */",undetermined
14421,httpd,UNKNOWN,"/* we're still too small, bail out */",undetermined
14422,httpd,UNKNOWN,"/* OK, we're sorted */",undetermined
14423,httpd,UNKNOWN,"/* Convert the subcache size (in bytes) to a value that is suitable for
     * structure alignment on the host platform, by rounding down if necessary. */",undetermined
14424,httpd,UNKNOWN,/* Output trace info */,undetermined
14425,httpd,UNKNOWN,"/* The header is done, make the caches empty */",undetermined
14426,httpd,UNKNOWN,/* Success ... */,undetermined
14427,httpd,UNKNOWN,"/* XXX: Says who?  Why shouldn't this be acceptable, or padded if not? */",undetermined
14428,httpd,UNKNOWN,"/* Get the entry corresponding to the id, if it exists. */",undetermined
14429,httpd,UNKNOWN,"/* Perform the iteration inside the mutex to avoid corruption or invalid
     * pointer arithmetic. The rest of our logic uses read-only header data so
     * doesn't need the lock. */",undetermined
14430,httpd,UNKNOWN,/* Iterate over the subcaches */,undetermined
14431,httpd,UNKNOWN,/* Generate HTML */,undetermined
14432,httpd,UNKNOWN,"/* Perform the iteration inside the mutex to avoid corruption or invalid
     * pointer arithmetic. The rest of our logic uses read-only header data so
     * doesn't need the lock. */",undetermined
14433,httpd,UNKNOWN,/* Iterate over the subcaches */,undetermined
14434,httpd,UNKNOWN,"/*
 * Subcache-level cache operations
 */",undetermined
14435,httpd,UNKNOWN,"/* not removed and not expired yet, we're done iterating */",undetermined
14436,httpd,UNKNOWN,/* Nothing to do */,undetermined
14437,httpd,UNKNOWN,"/* We're expiring everything, piece of cake */",undetermined
14438,httpd,UNKNOWN,"/* There remain other indexes, so we can use idx to adjust 'data' */",undetermined
14439,httpd,UNKNOWN,/* Adjust the indexes */,undetermined
14440,httpd,UNKNOWN,/* Adjust the data area */,undetermined
14441,httpd,UNKNOWN,/* Sanity check the input */,undetermined
14442,httpd,UNKNOWN,/* First reclaim space from removed and expired records. */,undetermined
14443,httpd,UNKNOWN,"/* Loop until there is enough space to insert
     * XXX: This should first compress out-of-order expiries and
     * removed records, and then force-remove oldest-first
     */",undetermined
14444,httpd,UNKNOWN,/* Adjust the indexes by one */,undetermined
14445,httpd,UNKNOWN,/* There's nothing left */,undetermined
14446,httpd,UNKNOWN,/* Adjust the data */,undetermined
14447,httpd,UNKNOWN,/* Stats */,undetermined
14448,httpd,UNKNOWN,/* Loop admin */,undetermined
14449,httpd,UNKNOWN,"/* HERE WE ASSUME THAT THE NEW ENTRY SHOULD GO ON THE END! I'M NOT
     * CHECKING WHETHER IT SHOULD BE GENUINELY ""INSERTED"" SOMEWHERE.
     *
     * We aught to fix that.  httpd (never mind third party modules)
     * does not promise to perform any processing in date order
     * (c.f. FAQ ""My log entries are not in date order!"")
     */",undetermined
14450,httpd,UNKNOWN,/* Insert the id */,undetermined
14451,httpd,UNKNOWN,/* Insert the data */,undetermined
14452,httpd,UNKNOWN,/* Insert the index */,undetermined
14453,httpd,UNKNOWN,"/* Only consider 'idx' if the id matches, and the ""removed""
         * flag isn't set, and the record is not expired.
         * Check the data length too to avoid a buffer overflow
         * in case of corruption, which should be impossible,
         * but it's cheap to be safe. */",undetermined
14454,httpd,UNKNOWN,"/* Find the offset of the data segment, after the id */",undetermined
14455,httpd,UNKNOWN,/* Copy out the data */,undetermined
14456,httpd,UNKNOWN,"/* Already stale, quietly remove and treat as not-found */",undetermined
14457,httpd,UNKNOWN,/* Increment */,undetermined
14458,httpd,UNKNOWN,"/* Only consider 'idx' if the id matches, and the ""removed""
         * flag isn't set. */",undetermined
14459,httpd,UNKNOWN,"/* Found the matching entry, remove it quietly. */",undetermined
14460,httpd,UNKNOWN,/* Increment */,undetermined
14461,httpd,UNKNOWN,/* failure */,undetermined
14462,httpd,UNKNOWN,"/* Only consider 'idx' if the ""removed"" flag isn't set. */",undetermined
14463,httpd,UNKNOWN,"/* Find the offset of the data segment, after the id */",undetermined
14464,httpd,UNKNOWN,"/* Grow to ~150% of this buffer requirement on resize
                      * always using APR_ALIGN_DEFAULT sized pages
                      */",undetermined
14465,httpd,UNKNOWN,"/* Copy out the data, because it's potentially cyclic */",undetermined
14466,httpd,UNKNOWN,"/* Already stale, quietly remove and treat as not-found */",undetermined
14467,httpd,UNKNOWN,/* Increment */,undetermined
14468,httpd,UNKNOWN,/* Also register shmcb under the default provider name. */,undetermined
14469,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14470,httpd,UNKNOWN,"/*
 * mod_isapi.c - Internet Server Application (ISA) module for Apache
 * by Alexei Kosut <akosut@apache.org>, significant overhauls and
 * redesign by William Rowe <wrowe@covalent.net>, and hints from many
 * other developer/users who have hit on specific flaws.
 *
 * This module implements the ISAPI Handler architecture, allowing
 * Apache to load Internet Server Applications (ISAPI extensions),
 * similar to the support in IIS, Zope, O'Reilly's WebSite and others.
 *
 * It is a complete implementation of the ISAPI 2.0 specification,
 * except for ""Microsoft extensions"" to the API which provide
 * asynchronous I/O.  It is further extended to include additional
 * ""Microsoft extentions"" through IIS 5.0, with some deficiencies
 * where one-to-one mappings don't exist.
 *
 * Refer to /manual/mod/mod_isapi.html for additional details on
 * configuration and use, but check this source for specific support
 * of the API,
 */",undetermined
14471,httpd,UNKNOWN,/* Retry frequency for a failed-to-load isapi .dll */,undetermined
14472,httpd,UNKNOWN,"/**********************************************************
 *
 *  ISAPI Module Configuration
 *
 **********************************************************/",undetermined
14473,httpd,UNKNOWN,/* Our isapi per-dir config structure */,undetermined
14474,httpd,UNKNOWN,"/* ### Just an observation ... it would be terribly cool to be
     * able to use this per-dir, relative to the directory block being
     * defined.  The hash result remains global, but shorthand of
     * <Directory ""c:/webapps/isapi"">
     *     ISAPICacheFile myapp.dll anotherapp.dll thirdapp.dll
     * </Directory>
     * would be very convienent.
     */",undetermined
14475,httpd,UNKNOWN,/* Load the extention as cached (with null request_rec) */,undetermined
14476,httpd,UNKNOWN,"/**********************************************************
 *
 *  ISAPI Module Cache handling section
 *
 **********************************************************/",undetermined
14477,httpd,UNKNOWN,/* Our isapi global config values */,undetermined
14478,httpd,UNKNOWN,/* Our loaded isapi module description structure */,undetermined
14479,httpd,UNKNOWN,"/* All done with the DLL... get rid of it...
     *
     * If optionally cached, and we weren't asked to force the unload,
     * pass HSE_TERM_ADVISORY_UNLOAD, and if it returns 1, unload,
     * otherwise, leave it alone (it didn't choose to cooperate.)
     */",undetermined
14480,httpd,UNKNOWN,"/* We must force the module to unload, we are about
     * to lose the isapi structure's allocation entirely.
     */",undetermined
14481,httpd,UNKNOWN,"/* TODO: These aught to become overrideable, so that we
     * assure a given isapi can be fooled into behaving well.
     *
     * The tricky bit, they aren't really a per-dir sort of
     * config, they will always be constant across every
     * reference to the .dll no matter what context (vhost,
     * location, etc) they apply to.
     */",undetermined
14482,httpd,UNKNOWN,/* Revision 5.0 */,undetermined
14483,httpd,UNKNOWN,"/* microsecs, not used */",undetermined
14484,httpd,UNKNOWN,/* TerminateExtension() is an optional interface */,undetermined
14485,httpd,UNKNOWN,/* Run GetExtensionVersion() */,undetermined
14486,httpd,UNKNOWN,"/* If we find this lock exists, use a set-aside copy of gainlock
         * to avoid race conditions on NULLing the in_progress variable
         * when the load has completed.  Release the global isapi hash
         * lock so other requests can proceed, then rdlock for completion
         * of loading our desired dll or wrlock if we would like to retry
         * loading the dll (because last_load_rv failed and retry is up.)
         */",undetermined
14487,httpd,UNKNOWN,"/* gainlock is NULLed after the module loads successfully.
         * This free-threaded module can be used without any locking.
         */",undetermined
14488,httpd,UNKNOWN,"/* Remember last_load_time before releasing the global
             * hash lock to avoid colliding with another thread
             * that hit this exception at the same time as our
             * retry attempt, since we unlock the global mutex
             * before attempting a write lock for this module.
             */",undetermined
14489,httpd,UNKNOWN,"/* If last_load_time is unchanged, we still own this
             * retry, otherwise presume another thread provided
             * our retry (for good or ill).  Relock the global
             * hash for updating last_load_ vars, so their update
             * is always atomic to the global lock.
             */",undetermined
14490,httpd,UNKNOWN,"/* We haven't hit timeup on retry, let's grab the last_rv
         * within the hash mutex before unlocking.
         */",undetermined
14491,httpd,UNKNOWN,"/* If the module was not found, it's time to create a hash key entry
     * before releasing the hash lock to avoid multiple threads from
     * loading the same module.
     */",undetermined
14492,httpd,UNKNOWN,"/* A mutex that exists only long enough to attempt to
         * load this isapi dll, the release this module to all
         * other takers that came along during the one-time
         * load process.  Short lifetime for this lock would
         * be great, however, using r->pool is nasty if those
         * blocked on the lock haven't all unlocked before we
         * attempt to destroy.  A nastier race condition than
         * I want to deal with at this moment...
         */",undetermined
14493,httpd,UNKNOWN,"/* Now attempt to load the isapi on our own time,
     * allow other isapi processing to resume.
     */",undetermined
14494,httpd,UNKNOWN,"/* Let others who are blocked on this particular
         * module resume their requests, for better or worse.
         */",undetermined
14495,httpd,UNKNOWN,"/* We must leave a rwlock around for requests to retry
         * loading this dll after timeup... since we were in
         * the setup code we had avoided creating this lock.
         */",undetermined
14496,httpd,UNKNOWN,"/**********************************************************
 *
 *  ISAPI Module request callbacks section
 *
 **********************************************************/",undetermined
14497,httpd,UNKNOWN,"/* Our ""Connection ID"" structure */",undetermined
14498,httpd,UNKNOWN,"/* crlf delimited, colon split, comma separated and
         * null terminated list of HTTP_ vars
         */",undetermined
14499,httpd,UNKNOWN,"/* crlf delimited, colon split, comma separated and
         * null terminated list of the raw request header
         */",undetermined
14500,httpd,UNKNOWN,/* Not a special case */,undetermined
14501,httpd,UNKNOWN,/* Not Found */,undetermined
14502,httpd,UNKNOWN,"/* Common code invoked for both HSE_REQ_SEND_RESPONSE_HEADER and
 * the newer HSE_REQ_SEND_RESPONSE_HEADER_EX ServerSupportFunction(s)
 * as well as other functions that write responses and presume that
 * the support functions above are optional.
 *
 * Other callers trying to split headers and body bytes should pass
 * head/headlen alone (leaving stat/statlen NULL/0), so that they
 * get a proper count of bytes consumed.  The argument passed to stat
 * isn't counted as the head bytes are.
 */",undetermined
14503,httpd,UNKNOWN,/* Don't eat the header */,undetermined
14504,httpd,UNKNOWN,"/* Now decide if we follow the xxx message
             * or the http/x.x xxx message format
             */",undetermined
14505,httpd,UNKNOWN,/* Whoops... not NULL terminated */,undetermined
14506,httpd,UNKNOWN,"/* Seems IIS does not enforce the requirement for \r\n termination
     * on HSE_REQ_SEND_RESPONSE_HEADER, but we won't panic...
     * ap_scan_script_header_err_strs handles this aspect for us.
     *
     * Parse them out, or die trying
     */",undetermined
14507,httpd,UNKNOWN,/* Set our status. */,undetermined
14508,httpd,UNKNOWN,"/* This is an immediate error result from the parser
         */",undetermined
14509,httpd,UNKNOWN,"/* We have a status in r->status, so let's just use it.
         * This is likely to be the Status: parsed above, and
         * may also be a delayed error result from the parser.
         * If it was filled in, status_line should also have
         * been filled in.
         */",undetermined
14510,httpd,UNKNOWN,"/* Now we fall back on dwHttpStatusCode if it appears
         * ap_scan_script_header fell back on the default code.
         * Any other results set dwHttpStatusCode to the decoded
         * status value.
         */",undetermined
14511,httpd,UNKNOWN,"/* Well... either there is no dwHttpStatusCode or it's HTTP_OK.
         * In any case, we don't have a good status to return yet...
         * Perhaps the one we came in with will be better. Let's use it,
         * if we were given one (note this is a pendantic case, it would
         * normally be covered above unless the scan script code unset
         * the r->status). Should there be a check here as to whether
         * we are setting a valid response code?
         */",undetermined
14512,httpd,UNKNOWN,"/* None of dwHttpStatusCode, the parser's r->status nor the
         * old value of r->status were helpful, and nothing was decoded
         * from Status: string passed to us.  Let's just say HTTP_OK
         * and get the data out, this was the isapi dev's oversight.
         */",undetermined
14513,httpd,UNKNOWN,"/* If only Status was passed, we consumed nothing
     */",undetermined
14514,httpd,UNKNOWN,"/* If all went well, tell the caller we consumed the headers complete
     */",undetermined
14515,httpd,UNKNOWN,"/* Any data left must be sent directly by the caller, all we
     * give back is the size of the headers we consumed (which only
     * happens if the parser got to the head arg, which varies based
     * on whether we passed stat+head to scan, or only head.
     */",undetermined
14516,httpd,UNKNOWN,"/* It appears that the foxisapi module and other clients
         * presume that WriteClient(""headers\n\nbody"") will work.
         * Parse them out, or die trying.
         */",undetermined
14517,httpd,UNKNOWN,"/* Set the status to be returned when the HttpExtensionProc()
         * is done.
         * WARNING: Microsoft now advertises HSE_REQ_SEND_URL_REDIRECT_RESP
         *          and HSE_REQ_SEND_URL as equivalant per the Jan 2000 SDK.
         *          They most definitely are not, even in their own samples.
         */",undetermined
14518,httpd,UNKNOWN,/* Soak up remaining input */,undetermined
14519,httpd,UNKNOWN,/* Reset the method to GET */,undetermined
14520,httpd,UNKNOWN,/* Don't let anyone think there's still data */,undetermined
14521,httpd,UNKNOWN,/* AV fault per PR3598 - redirected path is lost! */,undetermined
14522,httpd,UNKNOWN,"/* Parse them out, or die trying */",undetermined
14523,httpd,UNKNOWN,"/* Deliberately hold off sending 'just the headers' to begin to
         * accumulate the body and speed up the overall response, or at
         * least wait for the end the session.
         */",undetermined
14524,httpd,UNKNOWN,"/* Signal to resume the thread completing this request,
         * leave it to the pool cleanup to dispose of our mutex.
         */",undetermined
14525,httpd,UNKNOWN,/* Map a URL to a filename */,undetermined
14526,httpd,UNKNOWN,/* We need to make this a real Windows path name */,undetermined
14527,httpd,UNKNOWN,"/* Log buf_data, of buf_size bytes, in the URI Query (cs-uri-query) field
         */",undetermined
14528,httpd,UNKNOWN,"/* Emulates a completion port...  Record callback address and
         * user defined arg, we will call this after any async request
         * (e.g. transmitfile) as if the request executed async.
         * Per MS docs... HSE_REQ_IO_COMPLETION replaces any prior call
         * to HSE_REQ_IO_COMPLETION, and buf_data may be set to NULL.
         */",undetermined
14529,httpd,UNKNOWN,"/* we do nothing with (tf->dwFlags & HSE_DISCONNECT_AFTER_SEND)
         */",undetermined
14530,httpd,UNKNOWN,"/* Presume the handle was opened with the CORRECT semantics
         * for TransmitFile
         */",undetermined
14531,httpd,UNKNOWN,"/* apr_dupfile_oshandle (&fd, tf->hFile, r->pool); */",undetermined
14532,httpd,UNKNOWN,"/* According to MS: if calling HSE_REQ_TRANSMIT_FILE with the
         * HSE_IO_SEND_HEADERS flag, then you can't otherwise call any
         * HSE_SEND_RESPONSE_HEADERS* fn, but if you don't use the flag,
         * you must have done so.  They document that the pHead headers
         * option is valid only for HSE_IO_SEND_HEADERS - we are a bit
         * more flexible and assume with the flag, pHead are the
         * response headers, and without, pHead simply contains text
         * (handled after this case).
         */",undetermined
14533,httpd,UNKNOWN,"/* Use tf->pfnHseIO + tf->pContext, or if NULL, then use cid->fnIOComplete
         * pass pContect to the HseIO callback.
         */",undetermined
14534,httpd,UNKNOWN,"/* XXX: Many authors issue their next HSE_REQ_ASYNC_READ_CLIENT
             * within the completion logic.  An example is MS's own PSDK
             * sample web/iis/extensions/io/ASyncRead.  This potentially
             * leads to stack exhaustion.  To refactor, the notification
             * logic needs to move to isapi_handler() - differentiating
             * the cid->completed event with a new flag to indicate
             * an async-notice versus the async request completed.
             */",undetermined
14535,httpd,UNKNOWN,/* Added in ISAPI 4.0 */,undetermined
14536,httpd,UNKNOWN,/* Map a URL to a filename */,undetermined
14537,httpd,UNKNOWN,"/* Mapping started with assuming both strings matched.
         * Now roll on the path_info as a mismatch and handle
         * terminating slashes for directory matches.
         */",undetermined
14538,httpd,UNKNOWN,/* roll forward over path_info's first slash */,undetermined
14539,httpd,UNKNOWN,/* Add a trailing slash for directory */,undetermined
14540,httpd,UNKNOWN,"/* If the matched isn't a file, roll match back to the prior slash */",undetermined
14541,httpd,UNKNOWN,/* Paths returned with back slashes */,undetermined
14542,httpd,UNKNOWN,"/* is a combination of:
         * HSE_URL_FLAGS_READ         0x001 Allow read
         * HSE_URL_FLAGS_WRITE        0x002 Allow write
         * HSE_URL_FLAGS_EXECUTE      0x004 Allow execute
         * HSE_URL_FLAGS_SSL          0x008 Require SSL
         * HSE_URL_FLAGS_DONT_CACHE   0x010 Don't cache (VRoot only)
         * HSE_URL_FLAGS_NEGO_CERT    0x020 Allow client SSL cert
         * HSE_URL_FLAGS_REQUIRE_CERT 0x040 Require client SSL cert
         * HSE_URL_FLAGS_MAP_CERT     0x080 Map client SSL cert to account
         * HSE_URL_FLAGS_SSL128       0x100 Require 128-bit SSL cert
         * HSE_URL_FLAGS_SCRIPT       0x200 Allow script execution
         *
         * XxX: As everywhere, EXEC flags could use some work...
         *      and this could go further with more flags, as desired.
         */",undetermined
14543,httpd,UNKNOWN,/* Added in ISAPI 4.0 */,undetermined
14544,httpd,UNKNOWN,/* Added in ISAPI 4.0 */,undetermined
14545,httpd,UNKNOWN,"/*  Ignore shi->fKeepConn - we don't want the advise
         */",undetermined
14546,httpd,UNKNOWN,"/* Deliberately hold off sending 'just the headers' to begin to
         * accumulate the body and speed up the overall response, or at
         * least wait for the end the session.
         */",undetermined
14547,httpd,UNKNOWN,/* Added after ISAPI 4.0 */,undetermined
14548,httpd,UNKNOWN,/* Added after ISAPI 4.0 */,undetermined
14549,httpd,UNKNOWN,"/* Returns True if client is connected c.f. MSKB Q188346
         * assuming the identical return mechanism as HSE_REQ_IS_KEEP_CONN
         */",undetermined
14550,httpd,UNKNOWN,/* Added after ISAPI 4.0 */,undetermined
14551,httpd,UNKNOWN,"/*  Undocumented - defined by the Microsoft Jan '00 Platform SDK
         */",undetermined
14552,httpd,UNKNOWN,"/**********************************************************
 *
 *  ISAPI Module request invocation section
 *
 **********************************************************/",undetermined
14553,httpd,UNKNOWN,"/* Hang on to the isapi-isa for compatibility with older docs
         * (wtf did '-isa' mean in the first place?) but introduce
         * a newer and clearer ""isapi-handler"" name.
         */",undetermined
14554,httpd,UNKNOWN,"/* Use similar restrictions as CGIs
     *
     * If this fails, it's pointless to load the isapi dll.
     */",undetermined
14555,httpd,UNKNOWN,/* default to accept */,undetermined
14556,httpd,UNKNOWN,/* Set up variables */,undetermined
14557,httpd,UNKNOWN,"/* Set up connection structure and ecb,
     * NULL or zero out most fields.
     */",undetermined
14558,httpd,UNKNOWN,/* Fixup defaults for dconf */,undetermined
14559,httpd,UNKNOWN,"/* TODO: are copies really needed here?
     */",undetermined
14560,httpd,UNKNOWN,/* Set up the callbacks */,undetermined
14561,httpd,UNKNOWN,/* Set up client input */,undetermined
14562,httpd,UNKNOWN,"/* Time to start reading the appropriate amount of data,
         * and allow the administrator to tweak the number
         */",undetermined
14563,httpd,UNKNOWN,"/* Although it's not to spec, IIS seems to null-terminate
         * its lpdData string. So we will too.
         */",undetermined
14564,httpd,UNKNOWN,"/* To emulate async behavior...
     *
     * We create a cid->completed mutex and lock on it so that the
     * app can believe is it running async.
     *
     * This request completes upon a notification through
     * ServerSupportFunction(HSE_REQ_DONE_WITH_SESSION), which
     * unlocks this mutex.  If the HttpExtensionProc() returns
     * HSE_STATUS_PENDING, we will attempt to gain this lock again
     * which may *only* happen once HSE_REQ_DONE_WITH_SESSION has
     * unlocked the mutex.
     */",undetermined
14565,httpd,UNKNOWN,/* All right... try and run the sucker */,undetermined
14566,httpd,UNKNOWN,/* Check for a log message - and log it */,undetermined
14567,httpd,UNKNOWN,"/* Strange, but MS isapi accepts this as success */",undetermined
14568,httpd,UNKNOWN,"/* Ignore the keepalive stuff; Apache handles it just fine without
             * the ISAPI Handler's ""advice"".
             * Per Microsoft: ""In IIS versions 4.0 and later, the return
             * values HSE_STATUS_SUCCESS and HSE_STATUS_SUCCESS_AND_KEEP_CONN
             * are functionally identical: Keep-Alive connections are
             * maintained, if supported by the client.""
             * ... so we were pat all this time
             */",undetermined
14569,httpd,UNKNOWN,"/* emulating async behavior...
             */",undetermined
14570,httpd,UNKNOWN,"/* The completion port was locked prior to invoking
                 * HttpExtensionProc().  Once we can regain the lock,
                 * when ServerSupportFunction(HSE_REQ_DONE_WITH_SESSION)
                 * is called by the extension to release the lock,
                 * we may finally destroy the request.
                 */",undetermined
14571,httpd,UNKNOWN,"/* end response if we have yet to do so.
             */",undetermined
14572,httpd,UNKNOWN,"/* Flush the response now, including headers-only responses */",undetermined
14573,httpd,UNKNOWN,"/* NOT r->status, even if it has changed. */",undetermined
14574,httpd,UNKNOWN,"/* As the client returned no error, and if we did not error out
     * ourselves, trust dwHttpStatusCode to say something relevant.
     */",undetermined
14575,httpd,UNKNOWN,"/* For all missing-response situations simply return the status,
     * and let the core respond to the client.
     */",undetermined
14576,httpd,UNKNOWN,"/**********************************************************
 *
 *  ISAPI Module Setup Hooks
 *
 **********************************************************/",undetermined
14577,httpd,UNKNOWN,/* create per-dir config */,undetermined
14578,httpd,UNKNOWN,/* merge per-dir config */,undetermined
14579,httpd,UNKNOWN,/* server config */,undetermined
14580,httpd,UNKNOWN,/* merge server config */,undetermined
14581,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14582,httpd,UNKNOWN,/* register hooks */,undetermined
14583,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14584,httpd,UNKNOWN,"/**
 * @file mod_isapi.h
 * @brief ISAPI module extension to Apache
 *
 * @defgroup MOD_ISAPI mod_isapi
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
14585,httpd,UNKNOWN,"/* The Version Information storage passed to a module on startup
 * via the GetExtensionVersion() entry point.
 */",undetermined
14586,httpd,UNKNOWN,"/* The startup entry point that must be exported by every ISAPI handler
 */",undetermined
14587,httpd,UNKNOWN,"/* Our internal 'HCONN' representation, always opaque to the user.
 */",undetermined
14588,httpd,UNKNOWN,"/* Prototypes of the essential functions exposed by mod_isapi
 * for the module to communicate with Apache.
 */",undetermined
14589,httpd,UNKNOWN,"/* The ecb structure is passed on each invocation of the module
 */",undetermined
14590,httpd,UNKNOWN,"/* Status/Headers structure to pass to HSE_SEND_HEADER_EX,
 * an MS extension to ServerSupportFunction
 */",undetermined
14591,httpd,UNKNOWN,"/* HTTP status text, such as ""200 OK"" */",undetermined
14592,httpd,UNKNOWN,"/* HTTP header lines text, such as
                             *   ""Content-type: text/plain\r\n""
                             *   ""Content-Language: en\r\n""
                             * Note that (in spite of cchFoo lengths below)
                             * NULL characters will interfere in headers.
                             */",undetermined
14593,httpd,UNKNOWN,/* length of pszStatus text */,undetermined
14594,httpd,UNKNOWN,/* length of pszHeader text */,undetermined
14595,httpd,UNKNOWN,"/* Ignored: used to set keep-alive status,
                             * but Apache follows the client's negotiated
                             * HTTP contract to decide.
                             */",undetermined
14596,httpd,UNKNOWN,"/* Our only 'supported' MS extended flag bit for TransmitFile,
 * HSE_IO_SEND_HEADERS indicates that Status+Headers are present
 * in the pszStatusCode member of the HSE_TF_INFO structure.
 */",undetermined
14597,httpd,UNKNOWN,"/* The remaining flags are MS extended flag bits that bear little
 * relation to Apache; the rules that the Apache server obeys follow
 * its own design and HTTP protocol filter rules.
 *
 * We do not support async, however, we fake it.  If HSE_IO_SYNC is
 * not passed, and a completion context was defined, we will invoke the
 * completion function immediately following the transfer, and then
 * return to the caller.  If HSE_IO_SYNC is passed, there is no call
 * necessary to the completion context.
 */",undetermined
14598,httpd,UNKNOWN,"/* The Completion function prototype.  This callback may be fixed with
 * the HSE_REQ_IO_COMPLETION ServerSupportFunction call, or overriden
 * for the HSE_REQ_TRANSMIT_FILE call.
 */",undetermined
14599,httpd,UNKNOWN,"/* TransmitFile structure to pass to HSE_REQ_TRANSMIT_FILE, an MS extension
 */",undetermined
14600,httpd,UNKNOWN,"/* Overrides the default setting of
                                          * HSE_REQ_IO_COMPLETION if not NULL
                                          */",undetermined
14601,httpd,UNKNOWN,/* HANDLE/fd to transmit */,undetermined
14602,httpd,UNKNOWN,"/* Ignored if HSE_IO_SEND_HEADERS is
                                          * not set.  Includes HTTP status text
                                          * plus header text lines, such as
                                          *   ""200 OK\r\n""
                                          *   ""Content-type: text/plain\r\n""
                                          */",undetermined
14603,httpd,UNKNOWN,/* 0 is write-all */,undetermined
14604,httpd,UNKNOWN,/* File Offset */,undetermined
14605,httpd,UNKNOWN,/* Prefix with *pHead body text */,undetermined
14606,httpd,UNKNOWN,/* Length of *pHead body text */,undetermined
14607,httpd,UNKNOWN,/* Prefix with *pTail body text */,undetermined
14608,httpd,UNKNOWN,/* Length of *pTail body text */,undetermined
14609,httpd,UNKNOWN,/* bit flags described above */,undetermined
14610,httpd,UNKNOWN,/* Original ISAPI ServerSupportFunction() HSE_code methods */,undetermined
14611,httpd,UNKNOWN,/* MS Extented methods to ISAPI ServerSupportFunction() HSE_code */,undetermined
14612,httpd,UNKNOWN,/* Emulated */,undetermined
14613,httpd,UNKNOWN,/* Not Supported */,undetermined
14614,httpd,UNKNOWN,/* Supported */,undetermined
14615,httpd,UNKNOWN,/* Emulated */,undetermined
14616,httpd,UNKNOWN,/* Async Emulated */,undetermined
14617,httpd,UNKNOWN,/* Not Supported */,undetermined
14618,httpd,UNKNOWN,/* Supported */,undetermined
14619,httpd,UNKNOWN,/* Emulated */,undetermined
14620,httpd,UNKNOWN,/*   Added with ISAPI 4.0 */,undetermined
14621,httpd,UNKNOWN,/* Not Supported */,undetermined
14622,httpd,UNKNOWN,/* Emulated */,undetermined
14623,httpd,UNKNOWN,/* Ignored */,undetermined
14624,httpd,UNKNOWN,/*   Added after ISAPI 4.0 in IIS 5.0 */,undetermined
14625,httpd,UNKNOWN,/* Not Supported */,undetermined
14626,httpd,UNKNOWN,/* Supported (no nulls!) */,undetermined
14627,httpd,UNKNOWN,/* Ignored */,undetermined
14628,httpd,UNKNOWN,/* Supported */,undetermined
14629,httpd,UNKNOWN,/* Not Supported */,undetermined
14630,httpd,UNKNOWN,"/* The request entry point that must be exported by every ISAPI handler
 */",undetermined
14631,httpd,UNKNOWN,"/* Allowable return values from HttpExtensionProc (apparently 0 is also
 * accepted by MS IIS, and we will respect it as Success.)
 * If the HttpExtensionProc returns HSE_STATUS_PENDING, we will create
 * a wait mutex and lock on it, until HSE_REQ_DONE_WITH_SESSION is called.
 */",undetermined
14632,httpd,UNKNOWN,"/* 1 vs 2 Ignored, we choose */",undetermined
14633,httpd,UNKNOWN,/* Emulated (thread lock) */,undetermined
14634,httpd,UNKNOWN,"/* Anticipated error code for common faults within mod_isapi itself
 */",undetermined
14635,httpd,UNKNOWN,"/* Valid flags passed with TerminateExtension()
 */",undetermined
14636,httpd,UNKNOWN,"/* The shutdown entry point optionally exported by an ISAPI handler, passed
 * HSE_TERM_MUST_UNLOAD or HSE_TERM_ADVISORY_UNLOAD.  The module may return
 * if passed HSE_TERM_ADVISORY_UNLOAD, and the module will remain loaded.
 * If the module returns 1 to HSE_TERM_ADVISORY_UNLOAD it is immediately
 * unloaded.  If the module is passed HSE_TERM_MUST_UNLOAD, its return value
 * is ignored.
 */",undetermined
14637,httpd,UNKNOWN,"/* Module may return 0 if passed HSE_TERM_ADVISORY_UNLOAD, and the module
 * will remain loaded, or 1 if it consents to being unloaded. If the module
 * is passed HSE_TERM_MUST_UNLOAD, its return value is ignored.
 */",undetermined
14638,httpd,UNKNOWN,/* !MOD_ISAPI_H */,undetermined
14639,httpd,UNKNOWN,/** @} */,undetermined
14640,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14641,httpd,UNKNOWN,"/*
 * CGI Script stuff for Win32...
 */",undetermined
14642,httpd,UNKNOWN,/* Where to find interpreter to run scripts */,undetermined
14643,httpd,UNKNOWN,"/* XXX: prep_string should translate the string into unicode,
 * such that it is compatible with whatever codepage the client
 * will read characters 80-ff.  For the moment, use the unicode
 * values 0080-00ff.  This isn't trivial, since the code page
 * varies between msdos and Windows applications.
 * For subsystem 2 [GUI] the default is the system Ansi CP.
 * For subsystem 3 [CLI] the default is the system OEM CP.
 */",undetermined
14644,httpd,UNKNOWN,/* sign extension won't hurt us here */,undetermined
14645,httpd,UNKNOWN,"/* Somewhat more exciting ... figure out where the registry has stashed the
 * ExecCGI or Open command - it may be nested one level deep (or more???)
 */",undetermined
14646,httpd,UNKNOWN,"/*
     * Future optimization:
     * When the registry is successfully searched, store the strings for
     * interpreter and arguments in an ext hash to speed up subsequent look-ups
     */",undetermined
14647,httpd,UNKNOWN,/* Open the key associated with the script filetype extension */,undetermined
14648,httpd,UNKNOWN,/* Retrieve the name of the script filetype extension */,undetermined
14649,httpd,UNKNOWN,/* Open the key associated with the script filetype extension */,undetermined
14650,httpd,UNKNOWN,"/* Open the key for the script command path by:
     *
     *   1) the 'named' filetype key for ExecCGI/Command
     *   2) the extension's type key for ExecCGI/Command
     *
     * and if the strict arg is false, then continue trying:
     *
     *   3) the 'named' filetype key for Open/Command
     *   4) the extension's type key for Open/Command
     */",undetermined
14651,httpd,UNKNOWN,/* Skip on through Deep Space */,undetermined
14652,httpd,UNKNOWN,/* One Arg */,undetermined
14653,httpd,UNKNOWN,/* Todo: Make short name!!! */,undetermined
14654,httpd,UNKNOWN,/* Get 'em backslashes */,undetermined
14655,httpd,UNKNOWN,"/* last unmatched '\' + '""' sequence is a '""' */",undetermined
14656,httpd,UNKNOWN,"/* '""""' sequence within quotes is a '""' */",undetermined
14657,httpd,UNKNOWN,/* Flip quote state */,undetermined
14658,httpd,UNKNOWN,"/* All other '""'s are Munched */",undetermined
14659,httpd,UNKNOWN,"/* Anything else is, well, something else */",undetermined
14660,httpd,UNKNOWN,"/* Term that arg, already pushed on args */",undetermined
14661,httpd,UNKNOWN,"/* We have to consider that the client gets any QUERY_ARGS
         * without any charset interpretation, use prep_string to
         * create a string of the literal QUERY_ARGS bytes.
         */",undetermined
14662,httpd,UNKNOWN,"/* Handle the complete file name, we DON'T want to follow suexec, since
     * an unrooted command is as predictable as shooting craps in Win32.
     * Notice that unlike most mime extension parsing, we have to use the
     * win32 parsing here, therefore the final extension is the only one
     * we will consider.
     */",undetermined
14663,httpd,UNKNOWN,"/* If the file has an extension and it is not .com and not .exe and
     * we've been instructed to search the registry, then do so.
     * Let apr_proc_create do all of the .bat/.cmd dirty work.
     */",undetermined
14664,httpd,UNKNOWN,/* Check the registry */,undetermined
14665,httpd,UNKNOWN,"/* Need to peek into the file figure out what it really is...
         * ### aught to go back and build a cache for this one of these days.
         */",undetermined
14666,httpd,UNKNOWN,"/* Some twisted character [no pun intended] at MS decided that a
         * zero width joiner as the lead wide character would be ideal for
         * describing Unicode text files.  This was further convoluted to
         * another MSism that the same character mapped into utf-8, EF BB BF
         * would signify utf-8 text files.
         *
         * Since MS configuration files are all protecting utf-8 encoded
         * Unicode path, file and resource names, we already have the correct
         * WinNT encoding.  But at least eat the stupid three bytes up front.
         *
         * ### A more thorough check would also allow UNICODE text in buf, and
         * convert it to UTF-8 for invoking unicode scripts.  Those are few
         * and far between, so leave that code an enterprising soul with a need.
         */",undetermined
14667,httpd,UNKNOWN,"/* Script or executable, that is the question...
         * we check here also for '! so that .vbs scripts can work as CGI.
         */",undetermined
14668,httpd,UNKNOWN,/* Assuming file is a script since it starts with a shebang */,undetermined
14669,httpd,UNKNOWN,"/* Not a script, is it an executable? */",undetermined
14670,httpd,UNKNOWN,"/* Ought to invoke this 16 bit exe by a stub, (cmd /c?) */",undetermined
14671,httpd,UNKNOWN,"/* XXX: Must fix r->subprocess_env to follow utf-8 conventions from
     * the client's octets so that win32 apr_proc_create is happy.
     * The -best- way is to determine if the .exe is unicode aware
     * (using 0x0080-0x00ff) or is linked as a command or windows
     * application (following the OEM or Ansi code page in effect.)
     */",undetermined
14672,httpd,UNKNOWN,/* create per-dir config */,undetermined
14673,httpd,UNKNOWN,/* merge per-dir config */,undetermined
14674,httpd,UNKNOWN,/* server config */,undetermined
14675,httpd,UNKNOWN,/* merge server config */,undetermined
14676,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14677,httpd,UNKNOWN,/* register hooks */,undetermined
14678,httpd,UNKNOWN,/* defined WIN32 */,undetermined
14679,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14680,httpd,UNKNOWN,/* TODO - get rid of unixd dependency */,undetermined
14681,httpd,UNKNOWN,/* #define BIG_SECURITY_HOLE 1 */,undetermined
14682,httpd,UNKNOWN,/* inherit the mode if it's not set; the rest won't be inherited */,undetermined
14683,httpd,UNKNOWN,/* Start at basic privileges all round. */,undetermined
14684,httpd,UNKNOWN,"/* By default, run in secure vhost mode.
     * That means dropping basic privileges we don't usually need.
     */",undetermined
14685,httpd,UNKNOWN,"/* Hmmm, should CGI default to secure too ? */",undetermined
14686,httpd,UNKNOWN,"/*
    CR_CHECK(priv_delset(cfg->child_priv, PRIV_FILE_LINK_ANY));
    CR_CHECK(priv_delset(cfg->child_priv, PRIV_PROC_INFO));
    CR_CHECK(priv_delset(cfg->child_priv, PRIV_PROC_SESSION));
    CR_CHECK(priv_delset(cfg->child_priv, PRIV_PROC_FORK));
    CR_CHECK(priv_delset(cfg->child_priv, PRIV_PROC_EXEC));
*/",undetermined
14687,httpd,UNKNOWN,/* weÂ´ll use 0 for unset */,undetermined
14688,httpd,UNKNOWN,/* top-level default_priv wants the top-level cfg */,undetermined
14689,httpd,UNKNOWN,/* ugly hack: grab default uid and gid from unixd */,undetermined
14690,httpd,UNKNOWN,"/* If we forked a child, we dropped privilege to revert, so
     * all we can do now is exit
     */",undetermined
14691,httpd,UNKNOWN,"/* if either user or group are not the default, restore them */",undetermined
14692,httpd,UNKNOWN,/* restore default privileges */,undetermined
14693,httpd,UNKNOWN,/* secure mode: fork a process to handle the request */,undetermined
14694,httpd,UNKNOWN,/* first call: this is the vhost */,undetermined
14695,httpd,UNKNOWN,/* set breadcrumb */,undetermined
14696,httpd,UNKNOWN,"/* If we have per-dir config, defer doing anything */",undetermined
14697,httpd,UNKNOWN,"/* Defer dropping privileges 'til we have a directory
             * context that'll tell us whether to fork.
             */",undetermined
14698,httpd,UNKNOWN,/* second call is for per-directory. */,undetermined
14699,httpd,UNKNOWN,"/* Our fate was already determined for the vhost -
             * nothing to do per-directory
             */",undetermined
14700,httpd,UNKNOWN,"/* FIXME - does the child need to run synchronously?
             * esp. if we enable mod_privileges with threaded MPMs?
             * We do need at least to ensure r outlives the child.
             */",undetermined
14701,httpd,UNKNOWN,"/* The child has taken responsibility for reading all input
             * and sending all output.  So we need to bow right out,
             * and even abandon ""normal"" housekeeping.
             */",undetermined
14702,httpd,UNKNOWN,"/* Testing with ab and 100k requests reveals no nasties
             * so I infer we're not leaking anything like memory
             * or file descriptors.  That's nice!
             */",undetermined
14703,httpd,UNKNOWN,/* now we'll drop privileges in the child */,undetermined
14704,httpd,UNKNOWN,"/* OK, now drop privileges. */",undetermined
14705,httpd,UNKNOWN,/* cleanup should happen even if something fails part-way through here */,undetermined
14706,httpd,UNKNOWN,/* set user and group if configured */,undetermined
14707,httpd,UNKNOWN,"/* if we should be able to set these but can't, it could be
         * a serious security issue.  Bail out rather than risk it!
         */",undetermined
14708,httpd,UNKNOWN,/* set vhost's privileges */,undetermined
14709,httpd,UNKNOWN,/* ... including those of any subprocesses */,undetermined
14710,httpd,UNKNOWN,"/* If we're in a child process, drop down PPERM too */",undetermined
14711,httpd,UNKNOWN,"/* We need to set privileges before mod_unixd,
     * 'cos otherwise setuid will wipe our privilege to do so
     */",undetermined
14712,httpd,UNKNOWN,/* compute ppriv from the union of all the vhosts plus setid */,undetermined
14713,httpd,UNKNOWN,"/* Our config stuff has set the privileges we need, so now
     * we just set them to those of the parent server_rec
     *
     * This has to happen after mod_unixd, 'cos mod_unixd needs
     * privileges we drop here.
     */",undetermined
14714,httpd,UNKNOWN,/* defaults - the default vhost */,undetermined
14715,httpd,UNKNOWN,"/* if we have dtrace enabled, merge it into everything */",undetermined
14716,httpd,UNKNOWN,/* set up priv_setid for per-request use */,undetermined
14717,httpd,UNKNOWN,/* refuse to work if the MPM is threaded */,undetermined
14718,httpd,UNKNOWN,"/* add basic privileges, excluding those covered by cgimode */",undetermined
14719,httpd,UNKNOWN,/* default - nothing to do */,undetermined
14720,httpd,UNKNOWN,/* drop fork+exec privs */,undetermined
14721,httpd,UNKNOWN,/* deny privileges to CGI procs */,undetermined
14722,httpd,UNKNOWN,"/* In a directory context, set the per_dir_config */",undetermined
14723,httpd,UNKNOWN,"/* In a global or vhost context, set the server config */",undetermined
14724,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14725,httpd,UNKNOWN,/* XXX */,undetermined
14726,httpd,UNKNOWN,"/*
 * TODO: clean up the separation between this code
 *       and its data structures and unixd.c, as shown
 *       by the fact that we include unixd.h. Create
 *       mod_unixd.h which does what we need and
 *       clean up unixd.h for what it no longer needs
 */",undetermined
14727,httpd,UNKNOWN,"/* Set group privileges.
 *
 * Note that we use the username as set in the config files, rather than
 * the lookup of to uid --- the same uid may have multiple passwd entries,
 * with different sets of groups for each.
 */",undetermined
14728,httpd,UNKNOWN,/* Get username if passed as a uid */,undetermined
14729,httpd,UNKNOWN,/* OS/2 doesn't support groups. */,undetermined
14730,httpd,UNKNOWN,"/*
         * Set the GID before initgroups(), since on some platforms
         * setgid() is known to zap the group list.
         */",undetermined
14731,httpd,UNKNOWN,/* Reset `groups' attributes. */,undetermined
14732,httpd,UNKNOWN,/* !defined(OS2) */,undetermined
14733,httpd,UNKNOWN,/* Only try to switch if we're running as root */,undetermined
14734,httpd,UNKNOWN,/* this applies to Linux 2.4+ */,undetermined
14735,httpd,UNKNOWN,/* none */,undetermined
14736,httpd,UNKNOWN,/* Check for suexec */,undetermined
14737,httpd,UNKNOWN,/* Only try to switch if we're running as root */,undetermined
14738,httpd,UNKNOWN,/* this applies to Linux 2.4+ */,undetermined
14739,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14740,httpd,UNKNOWN,"/**
 * @file  mod_unixd.h
 * @brief common stuff that unix MPMs will want
 *
 * @addtogroup APACHE_OS_UNIX
 * @{
 */",undetermined
14741,httpd,UNKNOWN,/** @} */,undetermined
14742,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14743,httpd,UNKNOWN,"/*------------------------------------------------------------------
  These functions are to be called when the shared NLM starts and
  stops.  By using these functions instead of defining a main()
  and calling ExitThread(TSR_THREAD, 0), the load time of the
  shared NLM is faster and memory size reduced.

  You may also want to override these in your own Apache module
  to do any cleanup other than the mechanism Apache modules
  provide.
------------------------------------------------------------------*/",undetermined
14744,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14745,httpd,UNKNOWN,/* CGI map from file types to CGI modules */,undetermined
14746,httpd,UNKNOWN,/* CGI module mode (spawn in same address space or not) */,undetermined
14747,httpd,UNKNOWN,/* Environment variables to be added to the CGI environment */,undetermined
14748,httpd,UNKNOWN,"/* Handle the complete file name, we DON'T want to follow suexec, since
         * an unrooted command is as predictable as shooting craps in Win32.
         *
         * Notice that unlike most mime extension parsing, we have to use the
         * win32 parsing here, therefore the final extension is the only one
         * we will consider
         */",undetermined
14749,httpd,UNKNOWN,/* truncate any arguments from the cmd */,undetermined
14750,httpd,UNKNOWN,/* Figure out what the extension is so that we can match it. */,undetermined
14751,httpd,UNKNOWN,/* If there isn't an extension then give it an empty string */,undetermined
14752,httpd,UNKNOWN,/* eliminate the '.' if there is one */,undetermined
14753,httpd,UNKNOWN,/* check if we have a registered command for the extension*/,undetermined
14754,httpd,UNKNOWN,"/* If we have a registered command then add the file that was passed in as a
          parameter to the registered command. */",undetermined
14755,httpd,UNKNOWN,/* Run in its own address space if specified */,undetermined
14756,httpd,UNKNOWN,/* Tokenize the full command string into its arguments */,undetermined
14757,httpd,UNKNOWN,/* The first argument should be the executible */,undetermined
14758,httpd,UNKNOWN,/* create per-dir config */,undetermined
14759,httpd,UNKNOWN,/* merge per-dir config */,undetermined
14760,httpd,UNKNOWN,/* server config */,undetermined
14761,httpd,UNKNOWN,/* merge server config */,undetermined
14762,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14763,httpd,UNKNOWN,/* register hooks */,undetermined
14764,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14765,httpd,UNKNOWN,"/*
 * based on mod_tls.c - Apache SSL/TLS module for NetWare by Mike Gardiner.
 *
 * This module gives Apache the ability to do SSL/TLS with a minimum amount
 * of effort.  All of the SSL/TLS logic is already on NetWare versions 5 and
 * above and is interfaced through WinSock on NetWare.  As you can see in
 * the code below SSL/TLS sockets can be created with three WinSock calls.
 *
 * To load, simply place the module in the modules directory under the main
 * apache tree.  Then add a ""SecureListen"" with two arguments.  The first
 * argument is an address and/or port.  The second argument is the key pair
 * name as created in ConsoleOne.
 *
 *  Examples:
 *
 *          SecureListen 443 ""SSL CertificateIP""
 *          SecureListen 123.45.67.89:443 mycert
 *
 * The module also supports RFC 2817 / TLS Upgrade for HTTP 1.1.
 * For this add a ""NWSSLUpgradeable"" with two arguments.  The first
 * argument is an address and/or port.  The second argument is the key pair
 * name as created in ConsoleOne.
 *
 *  Examples:
 *
 *          NWSSLUpgradeable 8080 ""SSL CertificateIP""
 *          NWSSLUpgradeable 123.45.67.89:8080 mycert
 *  
 */",undetermined
14766,httpd,UNKNOWN,"/* The ssl_var_lookup() optional function retrieves SSL environment
 * variables. */",undetermined
14767,httpd,UNKNOWN,"/* An optional function which returns non-zero if the given connection
 * is using SSL/TLS. */",undetermined
14768,httpd,UNKNOWN,"/* The ssl_proxy_enable() and ssl_engine_disable() optional functions
 * are used by mod_proxy to enable use of SSL for outgoing
 * connections. */",undetermined
14769,httpd,UNKNOWN,/* local IP address and port */,undetermined
14770,httpd,UNKNOWN,/* Only used during restart */,undetermined
14771,httpd,UNKNOWN,"/*
 * Parses a host of the form <address>[:port]
 * :port is permitted if 'port' is not NULL
 */",undetermined
14772,httpd,UNKNOWN,"/* XXX Should be echoing by h_errno the actual failure, no?
         * ap_log_error would be good here.  Better yet - APRize.
         */",undetermined
14773,httpd,UNKNOWN,/* note that because we're about to slack we don't use psocket */,undetermined
14774,httpd,UNKNOWN,/* SO_SSL_AUTH_CLIENT */,undetermined
14775,httpd,UNKNOWN,/* zero out buffers */,undetermined
14776,httpd,UNKNOWN,/* turn on ssl for the socket */,undetermined
14777,httpd,UNKNOWN,/* setup the socket for SSL */,undetermined
14778,httpd,UNKNOWN,/* the wallet provider defined in wdefs.h */,undetermined
14779,httpd,UNKNOWN,/* array of certs in UNICODE format       */,undetermined
14780,httpd,UNKNOWN,/* number of certs in TRList              */,undetermined
14781,httpd,UNKNOWN,/* setup the socket for SSL */,undetermined
14782,httpd,UNKNOWN,/* no client certificate */,undetermined
14783,httpd,UNKNOWN,/* the wallet provider defined in wdefs.h */,undetermined
14784,httpd,UNKNOWN,/* make the IOCTL call */,undetermined
14785,httpd,UNKNOWN,/* make sure that it was successful */,undetermined
14786,httpd,UNKNOWN,/* setup the tlsserveropts struct */,undetermined
14787,httpd,UNKNOWN,/* setup the nwtlsopts structure */,undetermined
14788,httpd,UNKNOWN,"/* If the specified addr:port was created previously, put the listen
       socket record back on the ap_listeners list so that the socket
       will be reused rather than recreated */",undetermined
14789,httpd,UNKNOWN,"/* If both ports are equivalent, then if their names are equivalent,
             * then we will re-use the existing record.
             */",undetermined
14790,httpd,UNKNOWN,"/* If we found a pre-existing listen socket record, then there
       is no need to create a new secure listen socket record. */",undetermined
14791,httpd,UNKNOWN,/* Remove our secure listener from the listener list */,undetermined
14792,httpd,UNKNOWN,/* slr is at the head of the list */,undetermined
14793,httpd,UNKNOWN,/* slr is somewhere in between or at the end*/,undetermined
14794,httpd,UNKNOWN,"/* Pull all of the listeners that were created by mod_nw_ssl out of the
       ap_listeners list so that the normal listen socket processing does
       automatically close them */",undetermined
14795,httpd,UNKNOWN,"/* If both ports are equivalent, then if their names are equivalent,
                 * then we will re-use the existing record.
                 */",undetermined
14796,httpd,UNKNOWN,/* Move the listen socket from ap_listeners to nw_old_listeners */,undetermined
14797,httpd,UNKNOWN,/* Move the secure socket record to ap_old_seclisterners */,undetermined
14798,httpd,UNKNOWN,"/* Restore the secure socket records list so that the post config can
       process all of the sockets normally */",undetermined
14799,httpd,UNKNOWN,"/* Now that we have removed all of the mod_nw_ssl created socket records,
       allow the normal listen socket handling to occur.
       NOTE: If for any reason mod_nw_ssl is removed as a built-in module,
       the following call must be put back into the pre-config handler of the
       MPM.  It is only here to ensure that mod_nw_ssl fixes up the listen
       socket list before anything else looks at it. */",undetermined
14800,httpd,UNKNOWN,"/* Walk the old listeners list and compare it to the secure
       listeners list and remove any secure listener records that
       are not being reused */",undetermined
14801,httpd,UNKNOWN,"/* If both ports are equivalent, then if their names are equivalent,
                 * then we will re-use the existing record.
                 */",undetermined
14802,httpd,UNKNOWN,"/* If we find a pre-existing listen socket and it has already been
           created, then no neeed to go any further, just reuse it. */",undetermined
14803,httpd,UNKNOWN,/* Check the listener list for a matching upgradeable listener */,undetermined
14804,httpd,UNKNOWN,/* This function must remain safe to use for a non-SSL connection. */,undetermined
14805,httpd,UNKNOWN,"/*
     * When no pool is given try to find one
     */",undetermined
14806,httpd,UNKNOWN,"/*
     * Request dependent stuff
     */",undetermined
14807,httpd,UNKNOWN,/* all other headers from which we are still not know about */,undetermined
14808,httpd,UNKNOWN,/* shortcut common case */,undetermined
14809,httpd,UNKNOWN,"/*
     * Connection stuff
     */",undetermined
14810,httpd,UNKNOWN,/* XXX-Can't get specific SSL info from NetWare */,undetermined
14811,httpd,UNKNOWN,"/* SSLConnRec *sslconn = myConnConfig(c);
        if (strlen(var) > 4 && strcEQn(var, ""SSL_"", 4)
            && sslconn && sslconn->ssl)
            result = ssl_var_lookup_ssl(p, c, var+4);*/",undetermined
14812,httpd,UNKNOWN,"/*
     * Totally independent stuff
     */",undetermined
14813,httpd,UNKNOWN,/* XXX-Can't get specific SSL info from NetWare */,undetermined
14814,httpd,UNKNOWN,"/*result = ssl_var_lookup_ssl_version(p, var+12);*/",undetermined
14815,httpd,UNKNOWN,/* all other env-variables from the parent Apache process */,undetermined
14816,httpd,UNKNOWN,"/* Just remove the filter, if it doesn't work the first time, it won't
     * work at all for this request.
     */",undetermined
14817,httpd,UNKNOWN,"/*
        ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server, APLOGNO(02131)
                     ""Unable to get upgradeable socket handle"");
        */",undetermined
14818,httpd,UNKNOWN,"/* No need to ensure that this is a server with optional SSL, the filter
     * is only inserted if that is true.
     */",undetermined
14819,httpd,UNKNOWN,"/* ""Upgrade: TLS/1.0, ..."" header not found, don't do Upgrade */",undetermined
14820,httpd,UNKNOWN,/* Send the interim 101 response. */,undetermined
14821,httpd,UNKNOWN,"/* Now that we have initialized the ssl connection which added the ssl_io_filter,
       pass the brigade off to the connection based output filters so that the
       request can complete encrypted */",undetermined
14822,httpd,UNKNOWN,/* dir config creater */,undetermined
14823,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
14824,httpd,UNKNOWN,/* server config */,undetermined
14825,httpd,UNKNOWN,/* merge server config */,undetermined
14826,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14827,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14828,httpd,UNKNOWN,"/*
 * Security options etc.
 *
 * Module derived from code originally written by Rob McCool
 *
 */",undetermined
14829,httpd,UNKNOWN,/* things in the 'order' array */,undetermined
14830,httpd,UNKNOWN,/* for every method one */,undetermined
14831,httpd,UNKNOWN,/* looked nothing like an IP address */,undetermined
14832,httpd,UNKNOWN,"/* no slash, didn't look like an IP address => must be a host */",undetermined
14833,httpd,UNKNOWN,"/* Make sure we matched an *entire* subdomain --- if the user
         * said 'allow from good.com', we don't want people from nogood.com
         * to be able to get in.
         */",undetermined
14834,httpd,UNKNOWN,/* matched whole thing */,undetermined
14835,httpd,UNKNOWN,/* do nothing? */,undetermined
14836,httpd,UNKNOWN,/* This can be access checker since we don't require r->user to be set. */,undetermined
14837,httpd,UNKNOWN,/* dir config creater */,undetermined
14838,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
14839,httpd,UNKNOWN,/* server config */,undetermined
14840,httpd,UNKNOWN,/* merge server config */,undetermined
14841,httpd,UNKNOWN,/* register hooks */,undetermined
14842,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14843,httpd,UNKNOWN,"/**
 * This module makes it easy to restrict what HTTP methods can be ran against
 * a server.
 *
 * It provides one comand:
 *    AllowMethods
 * This command takes a list of HTTP methods to allow.
 *
 *  The most common configuration should be like this:
 *   <Directory />
 *    AllowMethods GET HEAD OPTIONS
 *   </Directory>
 *   <Directory /special/cgi-bin>
 *      AllowMethods GET HEAD OPTIONS POST
 *   </Directory>
 *  Non-matching methods will be returned a status 405 (method not allowed)
 *
 *  To allow all methods, and effectively turn off mod_allowmethods, use:
 *    AllowMethods reset
 */",undetermined
14844,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14845,httpd,UNKNOWN,/* for apr_isspace */,undetermined
14846,httpd,UNKNOWN,/* for apr_base64_decode et al */,undetermined
14847,httpd,UNKNOWN,/* for strcasecmp */,undetermined
14848,httpd,UNKNOWN,/* unused variable */,undetermined
14849,httpd,UNKNOWN,/* Any failures are fatal. */,undetermined
14850,httpd,UNKNOWN,/* lookup and cache the actual provider now */,undetermined
14851,httpd,UNKNOWN,"/* by the time they use it, the provider should be loaded and
           registered with us. */",undetermined
14852,httpd,UNKNOWN,"/* if it doesn't provide the appropriate function, reject it */",undetermined
14853,httpd,UNKNOWN,/* Add it to the list now. */,undetermined
14854,httpd,UNKNOWN,"/* if password is unspecified, set it to the fixed string ""password"" to
         * be compatible with the behaviour of mod_ssl.
         */",undetermined
14855,httpd,UNKNOWN,"/* These functions return 0 if client is OK, and proper error status
 * if not... either HTTP_UNAUTHORIZED, if we made a check, and it failed, or
 * HTTP_INTERNAL_SERVER_ERROR, if things are so totally confused that we
 * couldn't figure out how to tell if the client is authorized or not.
 *
 * If they return DECLINED, and all other modules also decline, that's
 * treated by the server core as a configuration error, logged and
 * reported as such.
 */",undetermined
14856,httpd,UNKNOWN,/* Get the appropriate header */,undetermined
14857,httpd,UNKNOWN,/* Client tried to authenticate using wrong auth scheme */,undetermined
14858,httpd,UNKNOWN,/* Skip leading spaces. */,undetermined
14859,httpd,UNKNOWN,/* Null-terminate the string. */,undetermined
14860,httpd,UNKNOWN,"/* set the user, even though the user is unauthenticated at this point */",undetermined
14861,httpd,UNKNOWN,"/* Determine user ID, and check if it really is that user, for HTTP
 * basic authentication...
 */",undetermined
14862,httpd,UNKNOWN,/* Are we configured to be Basic auth? */,undetermined
14863,httpd,UNKNOWN,/* We need an authentication realm. */,undetermined
14864,httpd,UNKNOWN,"/* For now, if a provider isn't set, we'll be nice and use the file
         * provider.
         */",undetermined
14865,httpd,UNKNOWN,/* Something occured. Stop checking. */,undetermined
14866,httpd,UNKNOWN,"/* If we're not really configured for providers, stop now. */",undetermined
14867,httpd,UNKNOWN,"/* If we're not authoritative, then any error is ignored. */",undetermined
14868,httpd,UNKNOWN,"/* We'll assume that the module has already said what its error
             * was in the logs.
             */",undetermined
14869,httpd,UNKNOWN,"/* If we're returning 403, tell them to try again. */",undetermined
14870,httpd,UNKNOWN,"/* If requested, create a fake basic authentication header for the benefit
 * of a proxy or application running behind this server.
 */",undetermined
14871,httpd,UNKNOWN,/* dir config creater */,undetermined
14872,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
14873,httpd,UNKNOWN,/* server config */,undetermined
14874,httpd,UNKNOWN,/* merge server config */,undetermined
14875,httpd,UNKNOWN,/* command apr_table_t */,undetermined
14876,httpd,UNKNOWN,/* register hooks */,undetermined
14877,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
14878,httpd,UNKNOWN,"/*
 * mod_auth_digest: MD5 digest authentication
 *
 * Originally by Alexei Kosut <akosut@nueva.pvt.k12.ca.us>
 * Updated to RFC-2617 by Ronald Tschalär <ronald@innovation.ch>
 * based on mod_auth, by Rob McCool and Robert S. Thau
 *
 * This module an updated version of modules/standard/mod_digest.c
 * It is still fairly new and problems may turn up - submit problem
 * reports to the Apache bug-database, or send them directly to me
 * at ronald@innovation.ch.
 *
 * Requires either /dev/random (or equivalent) or the truerand library,
 * available for instance from
 * ftp://research.att.com/dist/mab/librand.shar
 *
 * Open Issues:
 *   - qop=auth-int (when streams and trailer support available)
 *   - nonce-format configurability
 *   - Proxy-Authorization-Info header is set by this module, but is
 *     currently ignored by mod_proxy (needs patch to mod_proxy)
 *   - generating the secret takes a while (~ 8 seconds) if using the
 *     truerand library
 *   - The source of the secret should be run-time directive (with server
 *     scope: RSRC_CONF). However, that could be tricky when trying to
 *     choose truerand vs. file...
 *   - shared-mem not completely tested yet. Seems to work ok for me,
 *     but... (definitely won't work on Windoze)
 *   - Sharing a realm among multiple servers has following problems:
 *     o Server name and port can't be included in nonce-hash
 *       (we need two nonce formats, which must be configured explicitly)
 *     o Nonce-count check can't be for equal, or then nonce-count checking
 *       must be disabled. What we could do is the following:
 *       (expected < received) ? set expected = received : issue error
 *       The only problem is that it allows replay attacks when somebody
 *       captures a packet sent to one server and sends it to another
 *       one. Should we add ""AuthDigestNcCheck Strict""?
 *   - expired nonces give amaya fits.
 */",undetermined
14879,httpd,UNKNOWN,/* struct to hold the configuration info */,undetermined
14880,httpd,UNKNOWN,/* client list definitions */,undetermined
14881,httpd,UNKNOWN,/* the key for this entry    */,undetermined
14882,httpd,UNKNOWN,/* next entry in the bucket  */,undetermined
14883,httpd,UNKNOWN,/* for nonce-count checking  */,undetermined
14884,httpd,UNKNOWN,/* for algorithm=MD5-sess    */,undetermined
14885,httpd,UNKNOWN,/* for one-time nonce's      */,undetermined
14886,httpd,UNKNOWN,/* struct to hold a parsed Authorization header */,undetermined
14887,httpd,UNKNOWN,/* the following fields are not (directly) from the header */,undetermined
14888,httpd,UNKNOWN,/* (mostly) nonce stuff */,undetermined
14889,httpd,UNKNOWN,"/* client-list, opaque, and one-time-nonce stuff */",undetermined
14890,httpd,UNKNOWN,/* one-time-nonce counter */,undetermined
14891,httpd,UNKNOWN,/* ~ 12 entries */,undetermined
14892,httpd,UNKNOWN,"/*
 * initialization code
 */",undetermined
14893,httpd,UNKNOWN,/* set up client list */,undetermined
14894,httpd,UNKNOWN,/* Create the shared memory segment */,undetermined
14895,httpd,UNKNOWN,"/*
     * Create a unique filename using our pid. This information is
     * stashed in the global variable so the children inherit it.
     */",undetermined
14896,httpd,UNKNOWN,/* Now create that segment */,undetermined
14897,httpd,UNKNOWN,"/* no lock, we'll do the locking ourselves */",undetermined
14898,httpd,UNKNOWN,/* setup opaque */,undetermined
14899,httpd,UNKNOWN,/* setup one-time-nonce counter */,undetermined
14900,httpd,UNKNOWN,/* no lock here */,undetermined
14901,httpd,UNKNOWN,/* success */,undetermined
14902,httpd,UNKNOWN,/* APR_HAS_SHARED_MEMORY */,undetermined
14903,httpd,UNKNOWN,"/* initialize_module() will be called twice, and if it's a DSO
     * then all static data from the first call will be lost. Only
     * set up our static data on the second call. */",undetermined
14904,httpd,UNKNOWN,"/* Note: this stuff is currently fixed for the lifetime of the server,
     * i.e. even across restarts. This means that A) any shmem-size
     * configuration changes are ignored, and B) certain optimizations,
     * such as only allocating the smallest necessary entry for each
     * client, can't be done. However, the alternative is a nightmare:
     * we can't call apr_shm_destroy on a graceful restart because there
     * will be children using the tables, and we also don't know when the
     * last child dies. Therefore we can never clean up the old stuff,
     * creating a creeping memory leak.
     */",undetermined
14905,httpd,UNKNOWN,/* Call cleanup_tables on exit or restart */,undetermined
14906,httpd,UNKNOWN,/* APR_HAS_SHARED_MEMORY */,undetermined
14907,httpd,UNKNOWN,/* Get access to rmm in child */,undetermined
14908,httpd,UNKNOWN,"/*
 * configuration code
 */",undetermined
14909,httpd,UNKNOWN,"/* The core already handles the realm, but it's just too convenient to
     * grab it ourselves too and cache some setups. However, we need to
     * let the core get at it too, which is why we decline at the end -
     * this relies on the fact that http_core is last in the list.
     */",undetermined
14910,httpd,UNKNOWN,"/* we precompute the part of the nonce hash that is constant (well,
     * the host:port would be too, but that varies for .htaccess files
     * and directives outside a virtual host section)
     */",undetermined
14911,httpd,UNKNOWN,/* lookup and cache the actual provider now */,undetermined
14912,httpd,UNKNOWN,"/* by the time they use it, the provider should be loaded and
           registered with us. */",undetermined
14913,httpd,UNKNOWN,"/* if it doesn't provide the appropriate function, reject it */",undetermined
14914,httpd,UNKNOWN,/* Add it to the list now. */,undetermined
14915,httpd,UNKNOWN,"/*
 * client list code
 *
 * Each client is assigned a number, which is transferred in the opaque
 * field of the WWW-Authenticate and Authorization headers. The number
 * is just a simple counter which is incremented for each new client.
 * Clients can't forge this number because it is hashed up into the
 * server nonce, and that is checked.
 *
 * The clients are kept in a simple hash table, which consists of an
 * array of client_entry's, each with a linked list of entries hanging
 * off it. The client's number modulo the size of the array gives the
 * bucket number.
 *
 * The clients are garbage collected whenever a new client is allocated
 * but there is not enough space left in the shared memory segment. A
 * simple semi-LRU is used for this: whenever a client entry is accessed
 * it is moved to the beginning of the linked list in its bucket (this
 * also makes for faster lookups for current clients). The garbage
 * collecter then just removes the oldest entry (i.e. the one at the
 * end of the list) in each bucket.
 *
 * The main advantages of the above scheme are that it's easy to implement
 * and it keeps the hash table evenly balanced (i.e. same number of entries
 * in each bucket). The major disadvantage is that you may be throwing
 * entries out which are in active use. This is not tragic, as these
 * clients will just be sent a new client id (opaque field) and nonce
 * with a stale=true (i.e. it will just look like the nonce expired,
 * thereby forcing an extra round trip). If the shared memory segment
 * has enough headroom over the current client set size then this should
 * not occur too often.
 *
 * To help tune the size of the shared memory segment (and see if the
 * above algorithm is really sufficient) a set of counters is kept
 * indicating the number of clients held, the number of garbage collected
 * clients, and the number of erroneously purged clients. These are printed
 * out at each garbage collection run. Note that access to the counters is
 * not synchronized because they are just indicaters, and whether they are
 * off by a few doesn't matter; and for the same reason no attempt is made
 * to guarantee the num_renewed is correct in the face of clients spoofing
 * the opaque field.
 */",undetermined
14916,httpd,UNKNOWN,"/*
 * Get the client given its client number (the key). Returns the entry,
 * or NULL if it's not found.
 *
 * Access to the list itself is synchronized via locks. However, access
 * to the entry returned by get_client() is NOT synchronized. This means
 * that there are potentially problems if a client uses multiple,
 * simultaneous connections to access url's within the same protection
 * space. However, these problems are not new: when using multiple
 * connections you have no guarantee of the order the requests are
 * processed anyway, so you have problems with the nonce-count and
 * one-time nonces anyway.
 */",undetermined
14917,httpd,UNKNOWN,/* move entry to front of list */,undetermined
14918,httpd,UNKNOWN,"/* A simple garbage-collecter to remove unused clients. It removes the
 * last entry in each bucket and updates the counters. Returns the
 * number of removed entries.
 */",undetermined
14919,httpd,UNKNOWN,/* garbage collect all last entries */,undetermined
14920,httpd,UNKNOWN,/* find last entry */,undetermined
14921,httpd,UNKNOWN,/* cut list */,undetermined
14922,httpd,UNKNOWN,/* remove entry */,undetermined
14923,httpd,UNKNOWN,/* update counters and log */,undetermined
14924,httpd,UNKNOWN,"/*
 * Add a new client to the list. Returns the entry if successful, NULL
 * otherwise. This triggers the garbage collection if memory is low.
 */",undetermined
14925,httpd,UNKNOWN,/* try to allocate a new entry */,undetermined
14926,httpd,UNKNOWN,/* give up */,undetermined
14927,httpd,UNKNOWN,/* now add the entry */,undetermined
14928,httpd,UNKNOWN,"/*
 * Authorization header parser code
 */",undetermined
14929,httpd,UNKNOWN,"/* Parse the Authorization header, if it exists */",undetermined
14930,httpd,UNKNOWN,/* find key */,undetermined
14931,httpd,UNKNOWN,/* find value */,undetermined
14932,httpd,UNKNOWN,/* quoted string */,undetermined
14933,httpd,UNKNOWN,/* escaped char */,undetermined
14934,httpd,UNKNOWN,/* token */,undetermined
14935,httpd,UNKNOWN,"/* Because the browser may preemptively send auth info, incrementing the
 * nonce-count when it does, and because the client does not get notified
 * if the URI didn't need authentication after all, we need to be sure to
 * update the nonce-count each time we receive an Authorization header no
 * matter what the final outcome of the request. Furthermore this is a
 * convenient place to get the request-uri (before any subrequests etc
 * are initiated) and to initialize the request_config.
 *
 * Note that this must be called after mod_proxy had its go so that
 * r->proxyreq is set correctly.
 */",undetermined
14936,httpd,UNKNOWN,"/*
 * Nonce generation code
 */",undetermined
14937,httpd,UNKNOWN,"/* The hash part of the nonce is a SHA-1 hash of the time, realm, server host
 * and port, opaque, and our secret.
 */",undetermined
14938,httpd,UNKNOWN,"/*
    apr_sha1_update_binary(&ctx, (const unsigned char *) server->server_hostname,
                         strlen(server->server_hostname));
    apr_sha1_update_binary(&ctx, (const unsigned char *) &server->port,
                         sizeof(server->port));
     */",undetermined
14939,httpd,UNKNOWN,"/* The nonce has the format b64(time)+hash .
 */",undetermined
14940,httpd,UNKNOWN,"/* this counter is not synch'd, because it doesn't really matter
         * if it counts exactly.
         */",undetermined
14941,httpd,UNKNOWN,/* XXX: WHAT IS THIS CONSTANT? */,undetermined
14942,httpd,UNKNOWN,"/*
 * Opaque and hash-table management
 */",undetermined
14943,httpd,UNKNOWN,"/*
 * Generate a new client entry, add it to the list, and return the
 * entry. Returns NULL if failed.
 */",undetermined
14944,httpd,UNKNOWN,"/*
 * MD5-sess code.
 *
 * If you want to use algorithm=MD5-sess you must write get_userpw_hash()
 * yourself (see below). The dummy provided here just uses the hash from
 * the auth-file, i.e. it is only useful for testing client implementations
 * of MD5-sess .
 */",undetermined
14945,httpd,UNKNOWN,"/*
 * get_userpw_hash() will be called each time a new session needs to be
 * generated and is expected to return the equivalent of
 *
 * h_urp = ap_md5(r->pool,
 *         apr_pstrcat(r->pool, username, "":"", ap_auth_name(r), "":"", passwd))
 * ap_md5(r->pool,
 *         (unsigned char *) apr_pstrcat(r->pool, h_urp, "":"", resp->nonce, "":"",
 *                                      resp->cnonce, NULL));
 *
 * or put differently, it must return
 *
 *   MD5(MD5(username "":"" realm "":"" password) "":"" nonce "":"" cnonce)
 *
 * If something goes wrong, the failure must be logged and NULL returned.
 *
 * You must implement this yourself, which will probably consist of code
 * contacting the password server with the necessary information (typically
 * the username, realm, nonce, and cnonce) and receiving the hash from it.
 *
 * TBD: This function should probably be in a separate source file so that
 * people need not modify mod_auth_digest.c each time they install a new
 * version of apache.
 */",undetermined
14946,httpd,UNKNOWN,"/* Retrieve current session H(A1). If there is none and ""generate"" is
 * true then a new session for MD5-sess is generated and stored in the
 * client struct; if generate is false, or a new session could not be
 * generated then NULL is returned (in case of failure to generate the
 * failure reason will have been logged already).
 */",undetermined
14947,httpd,UNKNOWN,/* return the current sessions if there is one */,undetermined
14948,httpd,UNKNOWN,/* generate a new session */,undetermined
14949,httpd,UNKNOWN,"/*
 * Authorization challenge generation code (for WWW-Authenticate)
 */",undetermined
14950,httpd,UNKNOWN,/* Setup qop */,undetermined
14951,httpd,UNKNOWN,/* Setup opaque */,undetermined
14952,httpd,UNKNOWN,/* new client */,undetermined
14953,httpd,UNKNOWN,/* opaque not needed */,undetermined
14954,httpd,UNKNOWN,/* client info was gc'd */,undetermined
14955,httpd,UNKNOWN,/* ??? */,undetermined
14956,httpd,UNKNOWN,"/* we're generating a new nonce, so reset the nonce-count */",undetermined
14957,httpd,UNKNOWN,/* Setup nonce */,undetermined
14958,httpd,UNKNOWN,"/* Setup MD5-sess stuff. Note that we just clear out the session
     * info here, since we can't generate a new session until the request
     * from the client comes in with the cnonce.
     */",undetermined
14959,httpd,UNKNOWN,"/* setup domain attribute. We want to send this attribute wherever
     * possible so that the client won't send the Authorization header
     * unnecessarily (it's usually > 200 bytes!).
     */",undetermined
14960,httpd,UNKNOWN,"/* don't send domain
     * - for proxy requests
     * - if it's not specified
     */",undetermined
14961,httpd,UNKNOWN,/* get the client response and mark */,undetermined
14962,httpd,UNKNOWN,/* get our conf */,undetermined
14963,httpd,UNKNOWN,"/*
 * Authorization header verification code
 */",undetermined
14964,httpd,UNKNOWN,"/* For now, if a provider isn't set, we'll be nice and use the file
         * provider.
         */",undetermined
14965,httpd,UNKNOWN,/* We expect the password to be md5 hash of user:realm:password */,undetermined
14966,httpd,UNKNOWN,/* Something occured.  Stop checking. */,undetermined
14967,httpd,UNKNOWN,"/* If we're not really configured for providers, stop now. */",undetermined
14968,httpd,UNKNOWN,"/* Shouldn't happen, but just in case... */",undetermined
14969,httpd,UNKNOWN,"/* qop is none, client must not send a nonce count */",undetermined
14970,httpd,UNKNOWN,"/* qop is none, cannot check nonce count */",undetermined
14971,httpd,UNKNOWN,/* else (lifetime < 0) => never expires */,undetermined
14972,httpd,UNKNOWN,/* The actual MD5 code... whee */,undetermined
14973,httpd,UNKNOWN,/* RFC-2069 */,undetermined
14974,httpd,UNKNOWN,/* RFC-2617 */,undetermined
14975,httpd,UNKNOWN,/* TBD */,undetermined
14976,httpd,UNKNOWN,"/* These functions return 0 if client is OK, and proper error status
 * if not... either HTTP_UNAUTHORIZED, if we made a check, and it failed, or
 * HTTP_INTERNAL_SERVER_ERROR, if things are so totally confused that we
 * couldn't figure out how to tell if the client is authorized or not.
 *
 * If they return DECLINED, and all other modules also decline, that's
 * treated by the server core as a configuration error, logged and
 * reported as such.
 */",undetermined
14977,httpd,UNKNOWN,"/* Determine user ID, and check if the attributes are correct, if it
 * really is that user, if the nonce is correct, etc.
 */",undetermined
14978,httpd,UNKNOWN,/* do we require Digest auth for this URI? */,undetermined
14979,httpd,UNKNOWN,/* get the client response and mark */,undetermined
14980,httpd,UNKNOWN,/* get our conf */,undetermined
14981,httpd,UNKNOWN,/* check for existence and syntax of Auth header */,undetermined
14982,httpd,UNKNOWN,/* else (resp->auth_hdr_sts == NO_HEADER) */,undetermined
14983,httpd,UNKNOWN,/* check the auth attributes */,undetermined
14984,httpd,UNKNOWN,"/* Hmm, the simple match didn't work (probably a proxy modified the
         * request-uri), so lets do a more sophisticated match
         */",undetermined
14985,httpd,UNKNOWN,"/* MSIE compatibility hack.  MSIE has some RFC issues - doesn't
             * include the query string in the uri Authorization component
             * or when computing the response component.  the second part
             * works out ok, since we can hash the header and get the same
             * result.  however, the uri from the request line won't match
             * the uri Authorization component since the header lacks the
             * query string, leaving us incompatable with a (broken) MSIE.
             *
             * the workaround is to fake a query string match if in the proper
             * environment - BrowserMatch MSIE, for example.  the cool thing
             * is that if MSIE ever fixes itself the simple match ought to
             * work and this code won't be reached anyway, even if the
             * environment is set.
             */",undetermined
14986,httpd,UNKNOWN,"/* check hostname matches, if present */",undetermined
14987,httpd,UNKNOWN,"/* check port matches, if present */",undetermined
14988,httpd,UNKNOWN,/* check that server-port is default port if no port present */,undetermined
14989,httpd,UNKNOWN,/* check that path matches */,undetermined
14990,httpd,UNKNOWN,/* either exact match */,undetermined
14991,httpd,UNKNOWN,/* or '*' matches empty path in scheme://host */,undetermined
14992,httpd,UNKNOWN,/* check that query matches */,undetermined
14993,httpd,UNKNOWN,"/* we have a password, so continue */",undetermined
14994,httpd,UNKNOWN,/* authentication denied in the provider before attempting a match */,undetermined
14995,httpd,UNKNOWN,"/* AUTH_GENERAL_ERROR (or worse)
         * We'll assume that the module has already said what its error
         * was in the logs.
         */",undetermined
14996,httpd,UNKNOWN,/* old (rfc-2069) style digest */,undetermined
14997,httpd,UNKNOWN,/* we failed to allocate a client struct */,undetermined
14998,httpd,UNKNOWN,"/* Note: this check is done last so that a ""stale=true"" can be
       generated if the nonce is old */",undetermined
14999,httpd,UNKNOWN,"/*
 * Authorization-Info header code
 */",undetermined
15000,httpd,UNKNOWN,"/* 2069-style entity-digest is not supported (it's too hard, and
     * there are no clients which support 2069 but not 2617). */",undetermined
15001,httpd,UNKNOWN,"/* setup nextnonce
     */",undetermined
15002,httpd,UNKNOWN,/* send nextnonce if current nonce will expire in less than 30 secs */,undetermined
15003,httpd,UNKNOWN,"/* else nonce never expires, hence no nextnonce */",undetermined
15004,httpd,UNKNOWN,"/* do rfc-2069 digest
     */",undetermined
15005,httpd,UNKNOWN,/* use only RFC-2069 format */,undetermined
15006,httpd,UNKNOWN,"/* calculate rspauth attribute
         */",undetermined
15007,httpd,UNKNOWN,/* TBD */,undetermined
15008,httpd,UNKNOWN,"/* assemble Authentication-Info header
         */",undetermined
15009,httpd,UNKNOWN,/* dir config creater */,undetermined
15010,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15011,httpd,UNKNOWN,/* server config */,undetermined
15012,httpd,UNKNOWN,/* merge server config */,undetermined
15013,httpd,UNKNOWN,/* command table */,undetermined
15014,httpd,UNKNOWN,/* register hooks */,undetermined
15015,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15016,httpd,UNKNOWN,/* for apr_isspace */,undetermined
15017,httpd,UNKNOWN,/* for apr_base64_decode et al */,undetermined
15018,httpd,UNKNOWN,/* for strcasecmp */,undetermined
15019,httpd,UNKNOWN,/* Any failures are fatal. */,undetermined
15020,httpd,UNKNOWN,/* form size defaults to 8k */,undetermined
15021,httpd,UNKNOWN,/* default form field names */,undetermined
15022,httpd,UNKNOWN,/* lookup and cache the actual provider now */,undetermined
15023,httpd,UNKNOWN,"/*
         * by the time they use it, the provider should be loaded and
         * registered with us.
         */",undetermined
15024,httpd,UNKNOWN,"/* if it doesn't provide the appropriate function, reject it */",undetermined
15025,httpd,UNKNOWN,/* Add it to the list now. */,undetermined
15026,httpd,UNKNOWN,"/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain special characters.
 */",undetermined
15027,httpd,UNKNOWN,"/**
 * Set the auth username and password into the main request
 * notes table.
 */",undetermined
15028,httpd,UNKNOWN,/* find the main request */,undetermined
15029,httpd,UNKNOWN,/* find the first redirect */,undetermined
15030,httpd,UNKNOWN,/* have we isolated the user and pw before? */,undetermined
15031,httpd,UNKNOWN,"/**
 * Get the auth username and password from the main request
 * notes table, if present.
 */",undetermined
15032,httpd,UNKNOWN,/* find the main request */,undetermined
15033,httpd,UNKNOWN,/* find the first redirect */,undetermined
15034,httpd,UNKNOWN,/* have we isolated the user and pw before? */,undetermined
15035,httpd,UNKNOWN,"/* set the user, even though the user is unauthenticated at this point */",undetermined
15036,httpd,UNKNOWN,"/**
 * Set the auth username and password into the session.
 *
 * If either the username, or the password are NULL, the username
 * and/or password will be removed from the session.
 */",undetermined
15037,httpd,UNKNOWN,"/**
 * Get the auth username and password from the main request
 * notes table, if present.
 */",undetermined
15038,httpd,UNKNOWN,"/* set the user, even though the user is unauthenticated at this point */",undetermined
15039,httpd,UNKNOWN,"/**
 * Isolate the username and password in a POSTed form with the
 * username in the ""username"" field, and the password in the
 * ""password"" field.
 *
 * If either the username or the password is missing, this
 * function will return HTTP_UNAUTHORIZED.
 *
 * The location field is considered optional, and will be returned
 * if present.
 */",undetermined
15040,httpd,UNKNOWN,/* sanity check - are we a POST request? */,undetermined
15041,httpd,UNKNOWN,/* find the username and password in the form */,undetermined
15042,httpd,UNKNOWN,/* have we isolated the user and pw before? */,undetermined
15043,httpd,UNKNOWN,"/* set the user, even though the user is unauthenticated at this point */",undetermined
15044,httpd,UNKNOWN,/* a missing username or missing password means auth denied */,undetermined
15045,httpd,UNKNOWN,"/*
     * save away the username, password, mimetype and method, so that they
     * are available should the auth need to be run again.
     */",undetermined
15046,httpd,UNKNOWN,"/* These functions return 0 if client is OK, and proper error status
 * if not... either HTTP_UNAUTHORIZED, if we made a check, and it failed, or
 * HTTP_INTERNAL_SERVER_ERROR, if things are so totally confused that we
 * couldn't figure out how to tell if the client is authorized or not.
 *
 * If they return DECLINED, and all other modules also decline, that's
 * treated by the server core as a configuration error, logged and
 * reported as such.
 */",undetermined
15047,httpd,UNKNOWN,"/**
 * Given a username and site passphrase hash from the session, determine
 * whether the site passphrase is valid for this session.
 *
 * If the site passphrase is NULL, or if the sent_hash is NULL, this
 * function returns DECLINED.
 *
 * If the site passphrase hash does not match the sent hash, this function
 * returns AUTH_USER_NOT_FOUND.
 *
 * On success, returns OK.
 */",undetermined
15048,httpd,UNKNOWN,"/**
 * Given a username and password (extracted externally from a cookie), run
 * the authnz hooks to determine whether this request is authorized.
 *
 * Return an HTTP code.
 */",undetermined
15049,httpd,UNKNOWN,"/*
         * For now, if a provider isn't set, we'll be nice and use the file
         * provider.
         */",undetermined
15050,httpd,UNKNOWN,/* Something occured. Stop checking. */,undetermined
15051,httpd,UNKNOWN,"/* If we're not really configured for providers, stop now. */",undetermined
15052,httpd,UNKNOWN,"/* If we're not authoritative, then any error is ignored. */",undetermined
15053,httpd,UNKNOWN,"/*
             * We'll assume that the module has already said what its error
             * was in the logs.
             */",undetermined
15054,httpd,UNKNOWN,"/* If we're returning 403, tell them to try again. */",undetermined
15055,httpd,UNKNOWN,/* TODO: Flag the user somehow as to the reason for the failure */,undetermined
15056,httpd,UNKNOWN,/* fake the basic authentication header if configured to do so */,undetermined
15057,httpd,UNKNOWN,"/**
 * Must we use form authentication? If so, extract the cookie and run
 * the authnz hooks to determine if the login is valid.
 *
 * If the login is not valid, a 401 Not Authorized will be returned. It
 * is up to the webmaster to ensure this screen displays a suitable login
 * form to give the user the opportunity to log in.
 */",undetermined
15058,httpd,UNKNOWN,/* Are we configured to be Form auth? */,undetermined
15059,httpd,UNKNOWN,"/*
     * XSS security warning: using cookies to store private data only works
     * when the administrator has full control over the source website. When
     * in forward-proxy mode, websites are public by definition, and so can
     * never be secure. Abort the auth attempt in this case.
     */",undetermined
15060,httpd,UNKNOWN,/* We need an authentication realm. */,undetermined
15061,httpd,UNKNOWN,"/* try get the username and password from the notes, if present */",undetermined
15062,httpd,UNKNOWN,"/* otherwise try get the username and password from a session, if present */",undetermined
15063,httpd,UNKNOWN,/* first test whether the site passphrase matches */,undetermined
15064,httpd,UNKNOWN,/* otherwise test for a normal password match */,undetermined
15065,httpd,UNKNOWN,"/*
     * If we reach this point, the request should fail with access denied,
     * except for one potential scenario:
     *
     * If the request is a POST, and the posted form contains user defined fields
     * for a username and a password, and the username and password are correct,
     * then return the response obtained by a GET to this URL.
     *
     * If an additional user defined location field is present in the form,
     * instead of a GET of the current URL, redirect the browser to the new
     * location.
     *
     * As a further option, if the user defined fields for the type of request,
     * the mime type of the body of the request, and the body of the request
     * itself are present, replace this request with a new request of the given
     * type and with the given body.
     *
     * Otherwise access is denied.
     *
     * Reading the body requires some song and dance, because the input filters
     * are not yet configured. To work around this problem, we create a
     * subrequest and use that to create a sane filter stack we can read the
     * form from.
     *
     * The main request is then capped with a kept_body input filter, which has
     * the effect of guaranteeing the input stack can be safely read a second time.
     *
     */",undetermined
15066,httpd,UNKNOWN,/* create a subrequest of our current uri */,undetermined
15067,httpd,UNKNOWN,"/* run the insert_filters hook on the subrequest to ensure a body read can
         * be done properly.
         */",undetermined
15068,httpd,UNKNOWN,/* parse the form by reading the subrequest */,undetermined
15069,httpd,UNKNOWN,"/* make sure any user detected within the subrequest is saved back to
         * the main request.
         */",undetermined
15070,httpd,UNKNOWN,"/* we cannot clean up rr at this point, as memory allocated to rr is
         * referenced from the main request. It will be cleaned up when the
         * main request is cleaned up.
         */",undetermined
15071,httpd,UNKNOWN,"/* insert the kept_body filter on the main request to guarantee the
         * input filter stack cannot be read a second time, optionally inject
         * a saved body if one was specified in the login form.
         */",undetermined
15072,httpd,UNKNOWN,"/* did the form ask to change the method? if so, switch in the redirect handler
         * to relaunch this request as the subrequest with the new method. If the
         * form didn't specify a method, the default value GET will force a redirect.
         */",undetermined
15073,httpd,UNKNOWN,"/* check the authn in the main request, based on the username found */",undetermined
15074,httpd,UNKNOWN,"/*
     * did the admin prefer to be redirected to the login page on failure
     * instead?
     */",undetermined
15075,httpd,UNKNOWN,/* did the user ask to be redirected on login success? */,undetermined
15076,httpd,UNKNOWN,"/*
     * potential security issue: if we return a login to the browser, we must
     * send a no-store to make sure a well behaved browser will not try and
     * send the login details a second time if the back button is pressed.
     *
     * if the user has full control over the backend, the
     * AuthCookieDisableNoStore can be used to turn this off.
     */",undetermined
15077,httpd,UNKNOWN,"/**
 * Handle a login attempt.
 *
 * If the login session is either missing or form authnz is unsuccessful, a
 * 401 Not Authorized will be returned to the browser. The webmaster
 * is expected to insert a login form into the 401 Not Authorized
 * error screen.
 *
 * If the webmaster wishes, they can point the form submission at this
 * handler, which will redirect the user to the correct page on success.
 * On failure, the 401 Not Authorized error screen will be redisplayed,
 * where the login attempt can be repeated.
 *
 */",undetermined
15078,httpd,UNKNOWN,/* did we prefer to be redirected to the login page on failure instead? */,undetermined
15079,httpd,UNKNOWN,"/**
 * Handle a logout attempt.
 *
 * If an attempt is made to access this URL, any username and password
 * embedded in the session is deleted.
 *
 * This has the effect of logging the person out.
 *
 * If a logout URI has been specified, this function will create an
 * internal redirect to this page.
 */",undetermined
15080,httpd,UNKNOWN,"/* remove the username and password, effectively logging the user out */",undetermined
15081,httpd,UNKNOWN,"/*
     * make sure the logout page is never cached - otherwise the logout won't
     * work!
     */",undetermined
15082,httpd,UNKNOWN,"/* if set, internal redirect to the logout page */",undetermined
15083,httpd,UNKNOWN,"/**
 * Handle a redirect attempt.
 *
 * If during a form login, the method, mimetype and request body are
 * specified, this handler will ensure that this request is included
 * as an internal redirect.
 *
 */",undetermined
15084,httpd,UNKNOWN,/* get the method and mimetype from the notes */,undetermined
15085,httpd,UNKNOWN,"/* return the underlying error, or OK on success */",undetermined
15086,httpd,UNKNOWN,/* dir config creater */,undetermined
15087,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15088,httpd,UNKNOWN,/* server config */,undetermined
15089,httpd,UNKNOWN,/* merge server config */,undetermined
15090,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15091,httpd,UNKNOWN,/* register hooks */,undetermined
15092,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15093,httpd,UNKNOWN,"/*
 * Adapted to allow anonymous logins, just like with Anon-FTP, when
 * one gives the magic user name 'anonymous' and ones email address
 * as the password.
 *
 * Just add the following tokes to your <directory> setup:
 *
 * Anonymous                    magic-userid [magic-userid]...
 *
 * Anonymous_MustGiveEmail      [ on | off ] default = on
 * Anonymous_LogEmail           [ on | off ] default = on
 * Anonymous_VerifyEmail        [ on | off ] default = off
 * Anonymous_NoUserId           [ on | off ] default = off
 *
 * The magic user id is something like 'anonymous', it is NOT case sensitive.
 *
 * The MustGiveEmail flag can be used to force users to enter something
 * in the password field (like an email address). Default is on.
 *
 * Furthermore the 'NoUserID' flag can be set to allow completely empty
 * usernames in as well; this can be is convenient as a single return
 * in broken GUIs like W95 is often given by the user. The Default is off.
 *
 * Dirk.vanGulik@jrc.it; http://ewse.ceo.org; http://me-www.jrc.it/~dirkx
 *
 */",undetermined
15094,httpd,UNKNOWN,/* just to illustrate the defaults really. */,undetermined
15095,httpd,UNKNOWN,/* squeeze in a record */,undetermined
15096,httpd,UNKNOWN,/* Ignore if we are not configured */,undetermined
15097,httpd,UNKNOWN,"/* Do we allow an empty userID and/or is it the magic one
     */",undetermined
15098,httpd,UNKNOWN,"/* Now if the supplied user-ID was ok, grant access if:
     * (a) no passwd was sent and no password and no verification
     *     were configured.
     * (b) password was sent and no verification was configured
     * (c) verification was configured and the password (sent or not)
     *     looks like an email address
     */",undetermined
15099,httpd,UNKNOWN,/* dir config creater */,undetermined
15100,httpd,UNKNOWN,/* dir merger ensure strictness */,undetermined
15101,httpd,UNKNOWN,/* server config */,undetermined
15102,httpd,UNKNOWN,/* merge server config */,undetermined
15103,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15104,httpd,UNKNOWN,/* register hooks */,undetermined
15105,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15106,httpd,UNKNOWN,"/*
 * Security options etc.
 *
 * Module derived from code originally written by Rob McCool
 *
 */",undetermined
15107,httpd,UNKNOWN,"/* TODO List

- Track down all of the references to r->ap_auth_type
   and change them to ap_auth_type()
- Remove ap_auth_type and ap_auth_name from the
   request_rec

*/",undetermined
15108,httpd,UNKNOWN,/* Look up the provider alias in the alias list */,undetermined
15109,httpd,UNKNOWN,/* Get the the dir_config and call ap_Merge_per_dir_configs() */,undetermined
15110,httpd,UNKNOWN,/* Call the real provider->check_password() function */,undetermined
15111,httpd,UNKNOWN,/* return the result of the above function call */,undetermined
15112,httpd,UNKNOWN,"/* If we found the alias provider in the list, then merge the directory
           configurations and call the real provider */",undetermined
15113,httpd,UNKNOWN,/* Look up the provider alias in the alias list */,undetermined
15114,httpd,UNKNOWN,/* Get the the dir_config and call ap_Merge_per_dir_configs() */,undetermined
15115,httpd,UNKNOWN,/* Call the real provider->get_realm_hash() function */,undetermined
15116,httpd,UNKNOWN,/* return the result of the above function call */,undetermined
15117,httpd,UNKNOWN,"/* If we found the alias provider in the list, then merge the directory
           configurations and call the real provider */",undetermined
15118,httpd,UNKNOWN,/* Pull the real provider name and the alias name from the block header */,undetermined
15119,httpd,UNKNOWN,/* Look up the alias provider to make sure that it hasn't already been registered. */,undetermined
15120,httpd,UNKNOWN,"/* walk the subsection configuration to get the per_dir config that we will
       merge just before the real provider is called. */",undetermined
15121,httpd,UNKNOWN,"/* by the time they use it, the provider should be loaded and
               registered with us. */",undetermined
15122,httpd,UNKNOWN,"/* Save off the new directory config along with the original provider name
           and function pointer data */",undetermined
15123,httpd,UNKNOWN,/* Register the fake provider so that we get called first */,undetermined
15124,httpd,UNKNOWN,"/*
 * Load an authorisation realm into our location configuration, applying the
 * usual rules that apply to realms.
 */",undetermined
15125,httpd,UNKNOWN,"/* if there isn't an AuthType, then assume that no authentication
        is required so return OK */",undetermined
15126,httpd,UNKNOWN,"/* there's an AuthType configured, but no authentication module
     * loaded to support it
     */",undetermined
15127,httpd,UNKNOWN,/* dir config creater */,undetermined
15128,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15129,httpd,UNKNOWN,/* server config */,undetermined
15130,httpd,UNKNOWN,/* merge server config */,undetermined
15131,httpd,UNKNOWN,/* register hooks */,undetermined
15132,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15133,httpd,UNKNOWN,/* optional function - look it up once in post_config */,undetermined
15134,httpd,UNKNOWN,/* save the label here for our own use */,undetermined
15135,httpd,UNKNOWN,/* add the rest of the columns to the environment */,undetermined
15136,httpd,UNKNOWN,"/* string length of ""AUTHENTICATE_"", excluding the trailing NIL */",undetermined
15137,httpd,UNKNOWN,/* we can't break out here or row won't get cleaned up */,undetermined
15138,httpd,UNKNOWN,/* add the rest of the columns to the environment */,undetermined
15139,httpd,UNKNOWN,"/* string length of ""AUTHENTICATE_"", excluding the trailing NIL */",undetermined
15140,httpd,UNKNOWN,/* we can't break out here or row won't get cleaned up */,undetermined
15141,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15142,httpd,UNKNOWN,"/*
 * http_auth: authentication
 *
 * Rob McCool & Brian Behlendorf.
 *
 * Adapted to Apache by rst.
 *
 */",undetermined
15143,httpd,UNKNOWN,/* for apr_password_validate */,undetermined
15144,httpd,UNKNOWN,/* for ap_hook_(check_user_id | auth_checker)*/,undetermined
15145,httpd,UNKNOWN,/* dir config creater */,undetermined
15146,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15147,httpd,UNKNOWN,/* server config */,undetermined
15148,httpd,UNKNOWN,/* merge server config */,undetermined
15149,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15150,httpd,UNKNOWN,/* register hooks */,undetermined
15151,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15152,httpd,UNKNOWN,/* for apr_password_validate */,undetermined
15153,httpd,UNKNOWN,/* just to illustrate the default really */,undetermined
15154,httpd,UNKNOWN,/* Skip # or blank lines. */,undetermined
15155,httpd,UNKNOWN,/* Skip # or blank lines. */,undetermined
15156,httpd,UNKNOWN,/* Remember that this is a md5 hash of user:realm:password.  */,undetermined
15157,httpd,UNKNOWN,/* dir config creater */,undetermined
15158,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15159,httpd,UNKNOWN,/* server config */,undetermined
15160,httpd,UNKNOWN,/* merge server config */,undetermined
15161,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15162,httpd,UNKNOWN,/* register hooks */,undetermined
15163,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15164,httpd,UNKNOWN,/* for apr_password_validate */,undetermined
15165,httpd,UNKNOWN,"/* FIXME: figure out usage of socache create vs init
 * I think the cache and mutex should be global
 */",undetermined
15166,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
15167,httpd,UNKNOWN,/* don't waste the overhead of creating mutex & cache */,undetermined
15168,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
15169,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
15170,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
15171,httpd,UNKNOWN,/* An HTTP status would be a misnomer! */,undetermined
15172,httpd,UNKNOWN,/* don't waste the overhead of creating mutex & cache */,undetermined
15173,httpd,UNKNOWN,/* not sure we want this.  Might be safer to document use-all-or-none */,undetermined
15174,httpd,UNKNOWN,/* preserve context and timeout if not defaults */,undetermined
15175,httpd,UNKNOWN,/* global stuff: cache and mutex */,undetermined
15176,httpd,UNKNOWN,/* per-dir stuff */,undetermined
15177,httpd,UNKNOWN,"/* handle ""special"" context values */",undetermined
15178,httpd,UNKNOWN,/* FIXME: are we at risk of this blowing up? */,undetermined
15179,httpd,UNKNOWN,/* any other context value is literal */,undetermined
15180,httpd,UNKNOWN,/* basic auth */,undetermined
15181,httpd,UNKNOWN,/* digest auth */,undetermined
15182,httpd,UNKNOWN,/* first check whether we're cacheing for this module */,undetermined
15183,httpd,UNKNOWN,"/* OK, we're on.  Grab mutex to do our business */",undetermined
15184,httpd,UNKNOWN,/* don't wait around; just abandon it */,undetermined
15185,httpd,UNKNOWN,"/* We have the mutex, so go ahead */",undetermined
15186,httpd,UNKNOWN,/* first build our key and determine expiry time */,undetermined
15187,httpd,UNKNOWN,/* store it */,undetermined
15188,httpd,UNKNOWN,/* We're done with the mutex */,undetermined
15189,httpd,UNKNOWN,"/* construct key
     * look it up
     * if found, test password
     *
     * mutexing here would be a big performance drag.
     * It's definitely unnecessary with some backends (like ndbm or gdbm)
     * Is there a risk in the general case?  I guess the only risk we
     * care about is a race condition that gets us a dangling pointer
     * to no-longer-defined memory.  Hmmm ...
     */",undetermined
15190,httpd,UNKNOWN,/* not found - just return */,undetermined
15191,httpd,UNKNOWN,"/* OK, we got a value */",undetermined
15192,httpd,UNKNOWN,/* error: give up and pass the buck */,undetermined
15193,httpd,UNKNOWN,/* FIXME: getting this for NOTFOUND - prolly a bug in mod_socache */,undetermined
15194,httpd,UNKNOWN,/* not found - just return */,undetermined
15195,httpd,UNKNOWN,"/* OK, we got a value */",undetermined
15196,httpd,UNKNOWN,/* error: give up and pass the buck */,undetermined
15197,httpd,UNKNOWN,/* FIXME: getting this for NOTFOUND - prolly a bug in mod_socache */,undetermined
15198,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15199,httpd,UNKNOWN,/* Pool that this config is allocated from */,undetermined
15200,httpd,UNKNOWN,/* Lock for this config */,undetermined
15201,httpd,UNKNOWN,/* These parameters are all derived from the AuthLDAPURL directive */,undetermined
15202,httpd,UNKNOWN,/* String representation of the URL */,undetermined
15203,httpd,UNKNOWN,/* Name of the LDAP server (or space separated list) */,undetermined
15204,httpd,UNKNOWN,/* Port of the LDAP server */,undetermined
15205,httpd,UNKNOWN,/* Base DN to do all searches from */,undetermined
15206,httpd,UNKNOWN,/* Attribute to search for */,undetermined
15207,httpd,UNKNOWN,/* Array of all the attributes to return */,undetermined
15208,httpd,UNKNOWN,/* Scope of the search */,undetermined
15209,httpd,UNKNOWN,/* Filter to further limit the search  */,undetermined
15210,httpd,UNKNOWN,/* how to handle alias dereferening */,undetermined
15211,httpd,UNKNOWN,/* DN to bind to server (can be NULL) */,undetermined
15212,httpd,UNKNOWN,/* Password to bind to server (can be NULL) */,undetermined
15213,httpd,UNKNOWN,"/* If true, will return errors when bind fails */",undetermined
15214,httpd,UNKNOWN,"/* If true, connection->user is DN instead of userid */",undetermined
15215,httpd,UNKNOWN,"/* If set, connection->user is this attribute instead of userid */",undetermined
15216,httpd,UNKNOWN,"/* If true, will use server to do DN compare */",undetermined
15217,httpd,UNKNOWN,/* Set if we have found an LDAP url */,undetermined
15218,httpd,UNKNOWN,"/* List of Group attributes identifying user members. Default:""member uniqueMember"" */",undetermined
15219,httpd,UNKNOWN,"/* If true, the group attribute is the DN, otherwise,
                                        it's the exact string passed by the HTTP client */",undetermined
15220,httpd,UNKNOWN,/* Array of strings constructed (post-config) from subgroupattrs. Last entry is NULL. */,undetermined
15221,httpd,UNKNOWN,"/* List of object classes of sub-groups. Default:""groupOfNames groupOfUniqueNames"" */",undetermined
15222,httpd,UNKNOWN,/* Maximum recursive nesting depth permitted during subgroup processing. Default: 10 */,undetermined
15223,httpd,UNKNOWN,/* True if SSL connections are requested */,undetermined
15224,httpd,UNKNOWN,/* Prefix for environment variables added during authz */,undetermined
15225,httpd,UNKNOWN,/* true if we should try to bind (to lookup DN) directly with the basic auth username */,undetermined
15226,httpd,UNKNOWN,/* basic auth -> bind'able username regex */,undetermined
15227,httpd,UNKNOWN,/* basic auth -> bind'able username substitution */,undetermined
15228,httpd,UNKNOWN,/* true if authz searches should be done with the users credentials (when we did authn) */,undetermined
15229,httpd,UNKNOWN,/* true if authz compares should be done with the users credentials (when we did authn) */,undetermined
15230,httpd,UNKNOWN,/* The saved dn from a successful search */,undetermined
15231,httpd,UNKNOWN,/* The username provided by the client */,undetermined
15232,httpd,UNKNOWN,/* The additional values pulled during the DN search*/,undetermined
15233,httpd,UNKNOWN,"/* if this module successfully authenticates, the basic auth password, else null */",undetermined
15234,httpd,UNKNOWN,/* nested groups */,undetermined
15235,httpd,UNKNOWN,/* maximum group elements supported */,undetermined
15236,httpd,UNKNOWN,/* UTF-8 identifier derived from the charset.conv file */,undetermined
15237,httpd,UNKNOWN,/* Derive a code page ID give a language name or ID */,undetermined
15238,httpd,UNKNOWN,/* our default codepage */,undetermined
15239,httpd,UNKNOWN,/* Convert the password to UTF-8. */,undetermined
15240,httpd,UNKNOWN,"/*
 * Build the search filter, or at least as much of the search filter that
 * will fit in the buffer. We don't worry about the buffer not being able
 * to hold the entire filter. If the buffer wasn't big enough to hold the
 * filter, ldap_search_s will complain, but the only situation where this
 * is likely to happen is if the client sent a really, really long
 * username, most likely as part of an attack.
 *
 * The search filter consists of the filter provided with the URL,
 * combined with a filter made up of the attribute provided with the URL,
 * and the actual username passed by the HTTP client. For example, assume
 * that the LDAP URL is
 *
 *   ldap://ldap.airius.com/ou=People, o=Airius?uid??(posixid=*)
 *
 * Further, assume that the userid passed by the client was `userj'.  The
 * search filter will be (&(posixid=*)(uid=userj)).
 */",undetermined
15241,httpd,UNKNOWN,/* Convert the user name to UTF-8.  This is only valid for LDAP v3 */,undetermined
15242,httpd,UNKNOWN,"/*
     * Create the first part of the filter, which consists of the
     * config-supplied portions.
     */",undetermined
15243,httpd,UNKNOWN,"/*
     * Now add the client-supplied username to the filter, ensuring that any
     * LDAP filter metachars are escaped.
     */",undetermined
15244,httpd,UNKNOWN,/* Don't write part of escape sequence if we can't write all of it */,undetermined
15245,httpd,UNKNOWN,"/*
     * Append the closing parens of the filter, unless doing so would
     * overrun the buffer.
     */",undetermined
15246,httpd,UNKNOWN,"/*
    sec->authz_enabled = 1;
*/",undetermined
15247,httpd,UNKNOWN,/*Initialize to unset*/,undetermined
15248,httpd,UNKNOWN,"/* handle remote_user_attribute, if set */",undetermined
15249,httpd,UNKNOWN,"/* Some LDAP servers restrict who can search or compare, and the hard-coded ID
 * might be good for the DN lookup but not for later operations.
 */",undetermined
15250,httpd,UNKNOWN,"/* If the per-request config isn't set, we didn't authenticate this user, and leave the default credentials */",undetermined
15251,httpd,UNKNOWN,"/*
 * Authentication Phase
 * --------------------
 *
 * This phase authenticates the credentials the user has sent with
 * the request (ie the username and password are checked). This is done
 * by making an attempt to bind to the LDAP server using this user's
 * DN and the supplied password.
 *
 */",undetermined
15252,httpd,UNKNOWN,"/*
    if (!sec->enabled) {
        return AUTH_USER_NOT_FOUND;
    }
*/",undetermined
15253,httpd,UNKNOWN,"/*
     * Basic sanity checks before any LDAP operations even happen.
     */",undetermined
15254,httpd,UNKNOWN,"/* There is a good AuthLDAPURL, right? */",undetermined
15255,httpd,UNKNOWN,/* Get the password that the client sent */,undetermined
15256,httpd,UNKNOWN,/* build the username filter */,undetermined
15257,httpd,UNKNOWN,/* convert password to utf-8 */,undetermined
15258,httpd,UNKNOWN,/* do the user search */,undetermined
15259,httpd,UNKNOWN,/* handle bind failure */,undetermined
15260,httpd,UNKNOWN,"/* At least Sun Directory Server sends this if a user is
     * locked. This is not covered by LDAP_SECURITY_ERROR.
     */",undetermined
15261,httpd,UNKNOWN,/* mark the user and DN */,undetermined
15262,httpd,UNKNOWN,/* add environment variables */,undetermined
15263,httpd,UNKNOWN,/* sanity check */,undetermined
15264,httpd,UNKNOWN,"/*
     * If we have been authenticated by some other module than mod_authnz_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */",undetermined
15265,httpd,UNKNOWN,/* Build the username filter */,undetermined
15266,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15267,httpd,UNKNOWN,"/* Search failed, log error and return failure */",undetermined
15268,httpd,UNKNOWN,"/*
     * First do a whole-line compare, in case it's something like
     *   require user Babs Jensen
     */",undetermined
15269,httpd,UNKNOWN,"/*
     * Now break apart the line and compare each word on it
     */",undetermined
15270,httpd,UNKNOWN,/* for the top-level group only */,undetermined
15271,httpd,UNKNOWN,"/*
     * If there are no elements in the group attribute array, the default should be
     * member and uniquemember; populate the array now.
     */",undetermined
15272,httpd,UNKNOWN,"/*
     * If there are no elements in the sub group classes array, the default
     * should be groupOfNames and groupOfUniqueNames; populate the array now.
     */",undetermined
15273,httpd,UNKNOWN,"/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */",undetermined
15274,httpd,UNKNOWN,/* Build the username filter */,undetermined
15275,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15276,httpd,UNKNOWN,"/* Search failed, log error and return failure */",undetermined
15277,httpd,UNKNOWN,"/* We weren't called in the authentication phase, so we didn't have a
             * chance to set the user field. Do so now. */",undetermined
15278,httpd,UNKNOWN,/* PR52464 exhaust attrs in base group before checking subgroups */,undetermined
15279,httpd,UNKNOWN,"/* nested groups need searches and compares, so grab a new handle */",undetermined
15280,httpd,UNKNOWN,/* _comparedn is a searche */,undetermined
15281,httpd,UNKNOWN,"/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */",undetermined
15282,httpd,UNKNOWN,/* Build the username filter */,undetermined
15283,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15284,httpd,UNKNOWN,"/* Search failed, log error and return failure */",undetermined
15285,httpd,UNKNOWN,"/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */",undetermined
15286,httpd,UNKNOWN,/* Build the username filter */,undetermined
15287,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15288,httpd,UNKNOWN,"/* Search failed, log error and return failure */",undetermined
15289,httpd,UNKNOWN,"/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */",undetermined
15290,httpd,UNKNOWN,/* Build the username filter */,undetermined
15291,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15292,httpd,UNKNOWN,"/* Search failed, log error and return failure */",undetermined
15293,httpd,UNKNOWN,/* Build the username filter */,undetermined
15294,httpd,UNKNOWN,/* Search for the user DN */,undetermined
15295,httpd,UNKNOWN,/* Make sure that the filtered search returned the correct user dn */,undetermined
15296,httpd,UNKNOWN,/* ldap-filter is the only authz that requires a search and a compare */,undetermined
15297,httpd,UNKNOWN,"/*
 * Use the ldap url parsing routines to break up the ldap url into
 * host and port.
 */",undetermined
15298,httpd,UNKNOWN,"/* Set all the values, or at least some sane defaults */",undetermined
15299,httpd,UNKNOWN,"/*
             * Get rid of the surrounding parens; later on when generating the
             * filter, they'll be put back.
             */",undetermined
15300,httpd,UNKNOWN,"/* ""ldaps"" indicates secure ldap connections desired
      */",undetermined
15301,httpd,UNKNOWN,"/*
    authn_ldap_config_t *sec = (authn_ldap_config_t *)
                                    ap_get_module_config(s->module_config,
                                                         &authnz_ldap_module);

    if (sec->secure)
    {
        if (!util_ldap_ssl_supported(s))
        {
            ap_log_error(APLOG_MARK, APLOG_CRIT, 0, s,
                     ""LDAP: SSL connections (ldaps://) not supported by utilLDAP"");
            return(!OK);
        }
    }
    */",undetermined
15302,httpd,UNKNOWN,/* make sure that mod_ldap (util_ldap) is loaded */,undetermined
15303,httpd,UNKNOWN,/* Register authn provider */,undetermined
15304,httpd,UNKNOWN,/* Register authz providers */,undetermined
15305,httpd,UNKNOWN,/* dir config creater */,undetermined
15306,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15307,httpd,UNKNOWN,/* server config */,undetermined
15308,httpd,UNKNOWN,/* merge server config */,undetermined
15309,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15310,httpd,UNKNOWN,/* register hooks */,undetermined
15311,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15312,httpd,UNKNOWN,"/*
 * Security options etc.
 *
 * Module derived from code originally written by Rob McCool
 *
 */",undetermined
15313,httpd,UNKNOWN,"/** true if this is not a real container but produced by AuthMerging;
     *  only used for logging */",undetermined
15314,httpd,UNKNOWN,"/* Only authz_forbidden_on_fail has been set in new. Don't treat
         * it as a new auth config w.r.t. AuthMerging */",undetermined
15315,httpd,UNKNOWN,"/* This is a fake authz provider that really merges various authz alias
 * configurations and then invokes them.
 */",undetermined
15316,httpd,UNKNOWN,"/* Look up the provider alias in the alias list.
     * Get the the dir_config and call ap_Merge_per_dir_configs()
     * Call the real provider->check_authorization() function
     * return the result of the above function call
     */",undetermined
15317,httpd,UNKNOWN,"/* If we found the alias provider in the list, then merge the directory
           configurations and call the real provider */",undetermined
15318,httpd,UNKNOWN,/* Pull the real provider name and the alias name from the block header */,undetermined
15319,httpd,UNKNOWN,"/* Walk the subsection configuration to get the per_dir config that we will
     * merge just before the real provider is called.
     */",undetermined
15320,httpd,UNKNOWN,"/* Save off the new directory config along with the original
         * provider name and function pointer data
         */",undetermined
15321,httpd,UNKNOWN,"/* by the time the config file is used, the provider should be loaded
         * and registered with us.
         */",undetermined
15322,httpd,UNKNOWN,/* Register the fake provider so that we get called first */,undetermined
15323,httpd,UNKNOWN,/* lookup and cache the actual provider now */,undetermined
15324,httpd,UNKNOWN,"/* by the time the config file is used, the provider should be loaded
     * and registered with us.
     */",undetermined
15325,httpd,UNKNOWN,"/* if the provider doesn't provide the appropriate function, reject it */",undetermined
15326,httpd,UNKNOWN,/* trigger NOT_IN_LIMIT errors as if this were a <Limit> directive */,undetermined
15327,httpd,UNKNOWN,/* be associative */,undetermined
15328,httpd,UNKNOWN,/* avoid one level of recursion when De Morgan permits */,undetermined
15329,httpd,UNKNOWN,/* check to make sure that the request method requires authorization */,undetermined
15330,httpd,UNKNOWN,"/*
                 * Handling of AUTHZ_DENIED/AUTHZ_DENIED_NO_USER: Return
                 * AUTHZ_DENIED_NO_USER if providing a user may change the
                 * result, AUTHZ_DENIED otherwise.
                 */",undetermined
15331,httpd,UNKNOWN,/* AUTHZ_LOGIC_OR */,undetermined
15332,httpd,UNKNOWN,"/* For negated directives, if the original result was denied
             * then the new result is neutral since we can not grant
             * access simply because authorization was not rejected.
             */",undetermined
15333,httpd,UNKNOWN,"/* there's an AuthType configured, but no authorization
             * directives applied to support it
             */",undetermined
15334,httpd,UNKNOWN,"/*
             * If we're returning 401 to an authenticated user, tell them to
             * try again. If unauthenticated, note_auth_failure has already
             * been called during auth.
             */",undetermined
15335,httpd,UNKNOWN,"/*
             * We need a user before we can decide what to do.
             * Get out of the way and proceed with authentication.
             */",undetermined
15336,httpd,UNKNOWN,"/*
                 * If we're returning 401 to an authenticated user, tell them to
                 * try again. If unauthenticated, note_auth_failure has already
                 * been called during auth.
                 */",undetermined
15337,httpd,UNKNOWN,"/* We'll assume that the module has already said what its
         * error was in the logs.
         */",undetermined
15338,httpd,UNKNOWN,"/*
 * env authz provider
 */",undetermined
15339,httpd,UNKNOWN,"/* The 'env' provider will allow the configuration to specify a list of
        env variables to check rather than a single variable.  This is different
        from the previous host based syntax. */",undetermined
15340,httpd,UNKNOWN,"/*
 * all authz provider
 */",undetermined
15341,httpd,UNKNOWN,"/*
     * If the argument to the 'all' provider is 'granted' then just let
     * everybody in. This would be equivalent to the previous syntax of
     * 'allow from all'. If the argument is 'denied' we reject everbody,
     * which is equivalent to 'deny from all'.
     */",undetermined
15342,httpd,UNKNOWN,/* *parsed_require_line is already NULL */,undetermined
15343,httpd,UNKNOWN,"/*
 * method authz provider
 */",undetermined
15344,httpd,UNKNOWN,"/*
 * expr authz provider
 */",undetermined
15345,httpd,UNKNOWN,/* dir config creater */,undetermined
15346,httpd,UNKNOWN,/* dir merger */,undetermined
15347,httpd,UNKNOWN,/* server config */,undetermined
15348,httpd,UNKNOWN,/* merge server config */,undetermined
15349,httpd,UNKNOWN,/* register hooks */,undetermined
15350,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15351,httpd,UNKNOWN,"/* Export a hook for modules that manage clientside sessions
 * (e.g. mod_auth_cookie)
 * to deal with those when we successfully login/logout at the server
 *
 * XXX: WHY would this be specific to dbd_authz?  Why wouldn't we track
 * this across all authz user providers in a lower level mod, such as
 * mod_auth_basic/digest?
 */",undetermined
15352,httpd,UNKNOWN,/* save the label here for our own use */,undetermined
15353,httpd,UNKNOWN,"/* OK, this is non-critical; we can just not-redirect */",undetermined
15354,httpd,UNKNOWN,/* we can't break out here or row won't get cleaned up */,undetermined
15355,httpd,UNKNOWN,/* SELECT group FROM authz WHERE user = %s */,undetermined
15356,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15357,httpd,UNKNOWN,"/* Create a set of AUTHZ_DBD_DECLARE(type), AUTHZ_DBD_DECLARE_NONSTD(type) and
 * AUTHZ_DBD_DECLARE_DATA with appropriate export and import tags
 */",undetermined
15358,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15359,httpd,UNKNOWN,/* for ap_hook_(check_user_id | auth_checker)*/,undetermined
15360,httpd,UNKNOWN,"/* This should go into APR; perhaps with some nice
 * caching/locking/flocking of the open dbm file.
 */",undetermined
15361,httpd,UNKNOWN,"/* We do something strange with the group file.  If the group file
 * contains any : we assume the format is
 *      key=username value="":""groupname ["":""anything here is ignored]
 * otherwise we now (0.8.14+) assume that the format is
 *      key=username value=groupname
 * The first allows the password and group files to be the same
 * physical DBM file;   key=username value=password"":""groupname["":""anything]
 *
 * mark@telescope.org, 22Sep95
 */",undetermined
15362,httpd,UNKNOWN,/* Try key2 only if key1 failed */,undetermined
15363,httpd,UNKNOWN,/* fetch group data from dbm file only once. */,undetermined
15364,httpd,UNKNOWN,"/* no groups available, so exit immediately */",undetermined
15365,httpd,UNKNOWN,/* fetch group data from dbm file. */,undetermined
15366,httpd,UNKNOWN,"/* no groups available, so exit immediately */",undetermined
15367,httpd,UNKNOWN,/* dir config creater */,undetermined
15368,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15369,httpd,UNKNOWN,/* server config */,undetermined
15370,httpd,UNKNOWN,/* merge server config */,undetermined
15371,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15372,httpd,UNKNOWN,/* register hooks */,undetermined
15373,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15374,httpd,UNKNOWN,"/* This module is triggered by an
 *
 *          AuthGroupFile standard /path/to/file
 *
 * and the presense of a
 *
 *         require group <list-of-groups>
 *
 * In an applicable limit/directory block for that method.
 *
 * If there are no AuthGroupFile directives valid for
 * the request; we DECLINED.
 *
 * If the AuthGroupFile is defined; but somehow not
 * accessible: we SERVER_ERROR (was DECLINED).
 *
 * If there are no 'require ' directives defined for
 * this request then we DECLINED (was OK).
 *
 * If there are no 'require ' directives valid for
 * this request method then we DECLINED. (was OK)
 *
 * If there are any 'require group' blocks and we
 * are not in any group - we HTTP_UNAUTHORIZE
 *
 */",undetermined
15375,httpd,UNKNOWN,/* apr_isspace */,undetermined
15376,httpd,UNKNOWN,"/* If there is no group file - then we are not
     * configured. So decline.
     */",undetermined
15377,httpd,UNKNOWN,"/* no groups available, so exit immediately */",undetermined
15378,httpd,UNKNOWN,"/* If there is no group file - then we are not
     * configured. So decline.
     */",undetermined
15379,httpd,UNKNOWN,"/* no groups available, so exit immediately */",undetermined
15380,httpd,UNKNOWN,"/* No need to emit a error log entry because the call
        to authz_owner_get_file_group already did it
        for us.
        */",undetermined
15381,httpd,UNKNOWN,/* dir config creater */,undetermined
15382,httpd,UNKNOWN,/* dir merger -- default is to override */,undetermined
15383,httpd,UNKNOWN,/* server config */,undetermined
15384,httpd,UNKNOWN,/* merge server config */,undetermined
15385,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15386,httpd,UNKNOWN,/* register hooks */,undetermined
15387,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15388,httpd,UNKNOWN,"/*
 * Security options etc.
 *
 * Module derived from code originally written by Rob McCool
 *
 */",undetermined
15389,httpd,UNKNOWN,"/*
 * To save memory if the same subnets are used in hundres of vhosts, we store
 * each subnet only once and use this temporary hash to find it again.
 */",undetermined
15390,httpd,UNKNOWN,"/* Make sure we matched an *entire* subdomain --- if the user
         * said 'allow from good.com', we don't want people from nogood.com
         * to be able to get in.
         */",undetermined
15391,httpd,UNKNOWN,/* matched whole thing */,undetermined
15392,httpd,UNKNOWN,"/* The 'ip' provider will allow the configuration to specify a list of
        ip addresses to check rather than a single address.  This is different
        from the previous host based syntax. */",undetermined
15393,httpd,UNKNOWN,/* we already have parsed this subnet */,undetermined
15394,httpd,UNKNOWN,/* looked nothing like an IP address */,undetermined
15395,httpd,UNKNOWN,/* apr_ipsubnet_test should accept const but doesn't */,undetermined
15396,httpd,UNKNOWN,/* authz_core will log the require line and the result at DEBUG */,undetermined
15397,httpd,UNKNOWN,"/* The 'host' provider will allow the configuration to specify a list of
            host names to check rather than a single name.  This is different
            from the previous host based syntax. */",undetermined
15398,httpd,UNKNOWN,/* authz_core will log the require line and the result at DEBUG */,undetermined
15399,httpd,UNKNOWN,"/* we only use this hash in the parse config phase, ptemp is enough */",undetermined
15400,httpd,UNKNOWN,/* make sure we don't use this during .htaccess parsing */,undetermined
15401,httpd,UNKNOWN,/* dir config creater */,undetermined
15402,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15403,httpd,UNKNOWN,/* server config */,undetermined
15404,httpd,UNKNOWN,/* merge server config */,undetermined
15405,httpd,UNKNOWN,/* register hooks */,undetermined
15406,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15407,httpd,UNKNOWN,/* APR_HAS_USER */,undetermined
15408,httpd,UNKNOWN,/* this user is authorized */,undetermined
15409,httpd,UNKNOWN,/* APR_HAS_USER */,undetermined
15410,httpd,UNKNOWN,"/* file-group only figures out the file's group and lets
    * other modules do the actual authorization (against a group file/db).
    * Thus, these modules have to hook themselves after
    * mod_authz_owner and of course recognize 'file-group', too.
    */",undetermined
15411,httpd,UNKNOWN,/* APR_HAS_USER */,undetermined
15412,httpd,UNKNOWN,/* APR_HAS_USER */,undetermined
15413,httpd,UNKNOWN,/* dir config creater */,undetermined
15414,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15415,httpd,UNKNOWN,/* server config */,undetermined
15416,httpd,UNKNOWN,/* merge server config */,undetermined
15417,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15418,httpd,UNKNOWN,/* register hooks */,undetermined
15419,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15420,httpd,UNKNOWN,/* just here to stop compiler warnings for now. */,undetermined
15421,httpd,UNKNOWN,/* dir config creater */,undetermined
15422,httpd,UNKNOWN,/* dir merger --- default is to override */,undetermined
15423,httpd,UNKNOWN,/* server config */,undetermined
15424,httpd,UNKNOWN,/* merge server config */,undetermined
15425,httpd,UNKNOWN,/* command apr_table_t */,undetermined
15426,httpd,UNKNOWN,/* register hooks */,undetermined
15427,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15428,httpd,UNKNOWN,"/**
 * @file  ap_compat.h
 * @brief Redefine Apache 1.3 symbols
 */",undetermined
15429,httpd,UNKNOWN,/* redefine 1.3.x symbols to the new symbol names */,undetermined
15430,httpd,UNKNOWN,/* AP_COMPAT_H */,undetermined
15431,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15432,httpd,UNKNOWN,"/**
 * @file ap_config.h
 * @brief Symbol export macros and hook functions
 */",undetermined
15433,httpd,UNKNOWN,"/* Although this file doesn't declare any hooks, declare the exports group here */",undetermined
15434,httpd,UNKNOWN,"/**
 * @defgroup exports Apache exports
 * @ingroup  APACHE_CORE
 */",undetermined
15435,httpd,UNKNOWN,/* define these just so doxygen documents them */,undetermined
15436,httpd,UNKNOWN,"/**
 * AP_DECLARE_STATIC is defined when including Apache's Core headers,
 * to provide static linkage when the dynamic library may be unavailable.
 *
 * @see AP_DECLARE_EXPORT
 *
 * AP_DECLARE_STATIC and AP_DECLARE_EXPORT are left undefined when
 * including Apache's Core headers, to import and link the symbols from the
 * dynamic Apache Core library and assure appropriate indirection and calling
 * conventions at compile time.
 */",undetermined
15437,httpd,UNKNOWN,"/**
 * AP_DECLARE_EXPORT is defined when building the Apache Core dynamic
 * library, so that all public symbols are exported.
 *
 * @see AP_DECLARE_STATIC
 */",undetermined
15438,httpd,UNKNOWN,/* def DOXYGEN */,undetermined
15439,httpd,UNKNOWN,"/**
 * Apache Core dso functions are declared with AP_DECLARE(), so they may
 * use the most appropriate calling convention.  Hook functions and other
 * Core functions with variable arguments must use AP_DECLARE_NONSTD().
 * @code
 * AP_DECLARE(rettype) ap_func(args)
 * @endcode
 */",undetermined
15440,httpd,UNKNOWN,"/**
 * Apache Core dso variable argument and hook functions are declared with
 * AP_DECLARE_NONSTD(), as they must use the C language calling convention.
 * @see AP_DECLARE
 * @code
 * AP_DECLARE_NONSTD(rettype) ap_func(args [...])
 * @endcode
 */",undetermined
15441,httpd,UNKNOWN,"/**
 * Apache Core dso variables are declared with AP_MODULE_DECLARE_DATA.
 * This assures the appropriate indirection is invoked at compile time.
 *
 * @note AP_DECLARE_DATA extern type apr_variable; syntax is required for
 * declarations within headers to properly import the variable.
 * @code
 * AP_DECLARE_DATA type apr_variable
 * @endcode
 */",undetermined
15442,httpd,UNKNOWN,"/**
 * Declare a dso module's exported module structure as AP_MODULE_DECLARE_DATA.
 *
 * Unless AP_MODULE_DECLARE_STATIC is defined at compile time, symbols
 * declared with AP_MODULE_DECLARE_DATA are always exported.
 * @code
 * module AP_MODULE_DECLARE_DATA mod_tag
 * @endcode
 */",undetermined
15443,httpd,UNKNOWN,"/**
 * AP_MODULE_DECLARE_EXPORT is a no-op.  Unless contradicted by the
 * AP_MODULE_DECLARE_STATIC compile-time symbol, it is assumed and defined.
 *
 * The old SHARED_MODULE compile-time symbol is now the default behavior,
 * so it is no longer referenced anywhere with Apache 2.0.
 */",undetermined
15444,httpd,UNKNOWN,/* Where the main/parent process's pid is logged */,undetermined
15445,httpd,UNKNOWN,"/* If APR has OTHER_CHILD logic, use reliable piped logs. */",undetermined
15446,httpd,UNKNOWN,"/* Presume that the compiler supports C99-style designated
 * initializers if using GCC (but not G++), or for any other compiler
 * which claims C99 support. */",undetermined
15447,httpd,UNKNOWN,/* check for supported attributes on clang */,undetermined
15448,httpd,UNKNOWN,/* AP_CONFIG_H */,undetermined
15449,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15450,httpd,UNKNOWN,"/**
 * @file ap_expr.h
 * @brief Expression parser
 *
 * @defgroup AP_EXPR Expression parser
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15451,httpd,UNKNOWN,/** A node in the expression parse tree */,undetermined
15452,httpd,UNKNOWN,/** Struct describing a parsed expression */,undetermined
15453,httpd,UNKNOWN,/** The root of the actual expression parse tree */,undetermined
15454,httpd,UNKNOWN,"/** The filename where the expression has been defined (for logging).
     *  May be NULL
     */",undetermined
15455,httpd,UNKNOWN,/** The line number where the expression has been defined (for logging). */,undetermined
15456,httpd,UNKNOWN,"/** Flags relevant for the expression, see AP_EXPR_FLAG_* */",undetermined
15457,httpd,UNKNOWN,/** The module that is used for loglevel configuration */,undetermined
15458,httpd,UNKNOWN,"/** Use ssl_expr compatibility mode (changes the meaning of the comparison
 * operators)
 */",undetermined
15459,httpd,UNKNOWN,/** Don't add siginificant request headers to the Vary response header */,undetermined
15460,httpd,UNKNOWN,"/** Don't allow functions/vars that bypass the current request's access
 *  restrictions or would otherwise leak confidential information.
 *  Used by e.g. mod_include.
 */",undetermined
15461,httpd,UNKNOWN,"/** Expression evaluates to a string, not to a bool */",undetermined
15462,httpd,UNKNOWN,"/**
 * Evaluate a parse tree, simple interface
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param err Where an error message should be stored
 * @return > 0 if expression evaluates to true, == 0 if false, < 0 on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */",undetermined
15463,httpd,UNKNOWN,"/**
 * Evaluate a parse tree, with access to regexp backreference
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param nmatch size of the regex match vector pmatch
 * @param pmatch information about regex matches
 * @param source the string that pmatch applies to
 * @param err Where an error message should be stored
 * @return > 0 if expression evaluates to true, == 0 if false, < 0 on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note nmatch/pmatch/source can be used both to make previous matches
 *       available to ap_expr_exec_re and to use ap_expr_exec_re's matches
 *       later on.
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */",undetermined
15464,httpd,UNKNOWN,"/** Context used during evaluation of a parse tree, created by ap_expr_exec */",undetermined
15465,httpd,UNKNOWN,/** the current request */,undetermined
15466,httpd,UNKNOWN,/** the current connection */,undetermined
15467,httpd,UNKNOWN,/** the current connection */,undetermined
15468,httpd,UNKNOWN,/** the pool to use */,undetermined
15469,httpd,UNKNOWN,/** where to store the error string */,undetermined
15470,httpd,UNKNOWN,/** ap_expr_info_t for the expression */,undetermined
15471,httpd,UNKNOWN,/** regex match information for back references */,undetermined
15472,httpd,UNKNOWN,/** size of the vector pointed to by re_pmatch */,undetermined
15473,httpd,UNKNOWN,/** the string corresponding to the re_pmatch */,undetermined
15474,httpd,UNKNOWN,"/** A string where the comma separated names of headers are stored
     * to be later added to the Vary: header. If NULL, the caller is not
     * interested in this information.
     */",undetermined
15475,httpd,UNKNOWN,/** where to store the result string */,undetermined
15476,httpd,UNKNOWN,/** Arbitrary context data provided by the caller for custom functions */,undetermined
15477,httpd,UNKNOWN,/** The current recursion level */,undetermined
15478,httpd,UNKNOWN,"/**
 * Evaluate a parse tree, full featured version
 * @param ctx The evaluation context with all data filled in
 * @return > 0 if expression evaluates to true, == 0 if false, < 0 on error
 * @note *ctx->err will be set to NULL on success, or to an error message on
 *       error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header if ctx->vary_this is set.
 */",undetermined
15479,httpd,UNKNOWN,"/**
 * Evaluate a parse tree of a string valued expression
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param err Where an error message should be stored
 * @return The result string, NULL on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */",undetermined
15480,httpd,UNKNOWN,"/**
 * Evaluate a parse tree of a string valued expression
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param nmatch size of the regex match vector pmatch
 * @param pmatch information about regex matches
 * @param source the string that pmatch applies to
 * @param err Where an error message should be stored
 * @return The result string, NULL on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note nmatch/pmatch/source can be used both to make previous matches
 *       available to ap_expr_exec_re and to use ap_expr_exec_re's matches
 *       later on.
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */",undetermined
15481,httpd,UNKNOWN,"/**
 * The parser can be extended with variable lookup, functions, and
 * and operators.
 *
 * During parsing, the parser calls the lookup function to resolve a
 * name into a function pointer and an opaque context for the function.
 * If the argument to a function or operator is constant, the lookup function
 * may also parse that argument and store the parsed data in the context.
 *
 * The default lookup function is the hook ::ap_expr_lookup_default which just
 * calls ap_run_expr_lookup. Modules can use it to make functions and
 * variables generally available.
 *
 * An ap_expr consumer can also provide its own custom lookup function to
 * modify the set of variables and functions that are available. The custom
 * lookup function can in turn call 'ap_run_expr_lookup'.
 */",undetermined
15482,httpd,UNKNOWN,"/** Unary operator, takes one string argument and returns a bool value.
 * The name must have the form '-z' (one letter only).
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The (right) operand
 * @return 0 or 1
 */",undetermined
15483,httpd,UNKNOWN,"/** Binary operator, takes two string arguments and returns a bool value.
 * The name must have the form '-cmp' (at least two letters).
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg1 The left operand
 * @param arg2 The right operand
 * @return 0 or 1
 */",undetermined
15484,httpd,UNKNOWN,"/** String valued function, takes a string argument and returns a string
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The argument
 * @return The functions result string, may be NULL for 'empty string'
 */",undetermined
15485,httpd,UNKNOWN,"/** List valued function, takes a string argument and returns a list of strings
 * Can currently only be called following the builtin '-in' operator.
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The argument
 * @return The functions result list of strings, may be NULL for 'empty array'
 */",undetermined
15486,httpd,UNKNOWN,"/** Variable lookup function, takes no argument and returns a string
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @return The expanded variable
 */",undetermined
15487,httpd,UNKNOWN,/** parameter struct passed to the lookup hook functions */,undetermined
15488,httpd,UNKNOWN,/** type of the looked up object */,undetermined
15489,httpd,UNKNOWN,/** name of the looked up object */,undetermined
15490,httpd,UNKNOWN,/** where to store the function pointer */,undetermined
15491,httpd,UNKNOWN,/** where to store the function's context */,undetermined
15492,httpd,UNKNOWN,/** where to store the error message (if any) */,undetermined
15493,httpd,UNKNOWN,"/** arg for pre-parsing (only if a simple string).
     *  For binary ops, this is the right argument. */",undetermined
15494,httpd,UNKNOWN,"/** Function for looking up the provider function for a variable, operator
 *  or function in an expression.
 *  @param parms The parameter struct, also determins where the result is
 *               stored.
 *  @return OK on success,
 *          !OK on failure,
 *          DECLINED if the requested name is not handled by this function
 */",undetermined
15495,httpd,UNKNOWN,"/** Default lookup function which just calls ap_run_expr_lookup().
 *  ap_run_expr_lookup cannot be used directly because it has the wrong
 *  calling convention under Windows.
 */",undetermined
15496,httpd,UNKNOWN,"/**
 * Parse an expression into a parse tree
 * @param pool Pool
 * @param ptemp temp pool
 * @param info The ap_expr_info_t struct (with values filled in)
 * @param expr The expression string to parse
 * @param lookup_fn The lookup function to use, NULL for default
 * @return NULL on success, error message on error.
 *         A pointer to the resulting parse tree will be stored in
 *         info->root_node.
 */",undetermined
15497,httpd,UNKNOWN,"/**
 * High level interface to ap_expr_parse that also creates ap_expr_info_t and
 * uses info from cmd_parms to fill in most of it.
 * @param cmd The cmd_parms struct
 * @param expr The expression string to parse
 * @param flags The flags to use, see AP_EXPR_FLAG_*
 * @param err Set to NULL on success, error message on error
 * @param lookup_fn The lookup function used to lookup vars, functions, and
 *        operators
 * @param module_index The module_index to set for the expression
 * @return The parsed expression
 * @note Usually ap_expr_parse_cmd() should be used
 */",undetermined
15498,httpd,UNKNOWN,"/**
 * Convenience wrapper for ap_expr_parse_cmd_mi() that sets
 * module_index = APLOG_MODULE_INDEX
 */",undetermined
15499,httpd,UNKNOWN,"/**
  * Internal initialisation of ap_expr (for httpd internal use)
  */",undetermined
15500,httpd,UNKNOWN,/* AP_EXPR_H */,undetermined
15501,httpd,UNKNOWN,/** @} */,undetermined
15502,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15503,httpd,UNKNOWN,"/**
 * @file ap_hooks.h
 * @brief ap hook functions and macros
 */",undetermined
15504,httpd,UNKNOWN,"/* Although this file doesn't declare any hooks, declare the hook group here */",undetermined
15505,httpd,UNKNOWN,"/**
 * @defgroup hooks Apache Hooks
 * @ingroup  APACHE_CORE
 */",undetermined
15506,httpd,UNKNOWN,/* define these just so doxygen documents them */,undetermined
15507,httpd,UNKNOWN,"/**
 * AP_DECLARE_STATIC is defined when including Apache's Core headers,
 * to provide static linkage when the dynamic library may be unavailable.
 *
 * @see AP_DECLARE_EXPORT
 *
 * AP_DECLARE_STATIC and AP_DECLARE_EXPORT are left undefined when
 * including Apache's Core headers, to import and link the symbols from the
 * dynamic Apache Core library and assure appropriate indirection and calling
 * conventions at compile time.
 */",undetermined
15508,httpd,UNKNOWN,"/**
 * AP_DECLARE_EXPORT is defined when building the Apache Core dynamic
 * library, so that all public symbols are exported.
 *
 * @see AP_DECLARE_STATIC
 */",undetermined
15509,httpd,UNKNOWN,/* def DOXYGEN */,undetermined
15510,httpd,UNKNOWN,"/**
 * Declare a hook function
 * @param ret The return type of the hook
 * @param name The hook's name (as a literal)
 * @param args The arguments the hook function takes, in brackets.
 */",undetermined
15511,httpd,UNKNOWN,/** @internal */,undetermined
15512,httpd,UNKNOWN,"/**
 * Implement an Apache core hook that has no return code, and
 * therefore runs all of the registered functions. The implementation
 * is called ap_run_<i>name</i>.
 *
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * ""(int x,void *y)""
 * @param args_use The arguments for the hook as used in a call, for example
 * ""(x,y)""
 * @note If IMPLEMENTing a hook that is not linked into the Apache core,
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_VOID.
 */",undetermined
15513,httpd,UNKNOWN,"/**
 * Implement an Apache core hook that runs until one of the functions
 * returns something other than ok or decline. That return value is
 * then returned from the hook runner. If the hooks run to completion,
 * then ok is returned. Note that if no hook runs it would probably be
 * more correct to return decline, but this currently does not do
 * so. The implementation is called ap_run_<i>name</i>.
 *
 * @param ret The return type of the hook (and the hook runner)
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * ""(int x,void *y)""
 * @param args_use The arguments for the hook as used in a call, for example
 * ""(x,y)""
 * @param ok The ""ok"" return value
 * @param decline The ""decline"" return value
 * @return ok, decline or an error.
 * @note If IMPLEMENTing a hook that is not linked into the Apache core,
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_RUN_ALL.
 */",undetermined
15514,httpd,UNKNOWN,"/**
 * Implement a hook that runs until a function returns something other than
 * decline. If all functions return decline, the hook runner returns decline.
 * The implementation is called ap_run_<i>name</i>.
 *
 * @param ret The return type of the hook (and the hook runner)
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * ""(int x,void *y)""
 * @param args_use The arguments for the hook as used in a call, for example
 * ""(x,y)""
 * @param decline The ""decline"" return value
 * @return decline or an error.
 * @note If IMPLEMENTing a hook that is not linked into the Apache core
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST.
 */",undetermined
15515,httpd,UNKNOWN,"/* Note that the other optional hook implementations are straightforward but
 * have not yet been needed
 */",undetermined
15516,httpd,UNKNOWN,"/**
 * Implement an optional hook. This is exactly the same as a standard hook
 * implementation, except the hook is optional.
 * @see AP_IMPLEMENT_HOOK_RUN_ALL
 */",undetermined
15517,httpd,UNKNOWN,"/**
 * Hook an optional hook. Unlike static hooks, this uses a macro instead of a
 * function.
 */",undetermined
15518,httpd,UNKNOWN,/* AP_HOOKS_H */,undetermined
15519,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15520,httpd,UNKNOWN,"/**
 * @file  ap_listen.h
 * @brief Apache Listeners Library
 *
 * @defgroup APACHE_CORE_LISTEN Apache Listeners Library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15521,httpd,UNKNOWN,"/**
 * @brief Apache's listeners record.
 *
 * These are used in the Multi-Processing Modules
 * to setup all of the sockets for the MPM to listen to and accept on.
 */",undetermined
15522,httpd,UNKNOWN,"/**
     * The next listener in the list
     */",undetermined
15523,httpd,UNKNOWN,"/**
     * The actual socket
     */",undetermined
15524,httpd,UNKNOWN,"/**
     * The sockaddr the socket should bind to
     */",undetermined
15525,httpd,UNKNOWN,"/**
     * The accept function for this socket
     */",undetermined
15526,httpd,UNKNOWN,"/**
     * Is this socket currently active
     */",undetermined
15527,httpd,UNKNOWN,"/**
     * The default protocol for this listening socket.
     */",undetermined
15528,httpd,UNKNOWN,"/**
 * The global list of ap_listen_rec structures
 */",undetermined
15529,httpd,UNKNOWN,"/**
 * Setup all of the defaults for the listener list
 */",undetermined
15530,httpd,UNKNOWN,"/**
 * Loop through the global ap_listen_rec list and create all of the required
 * sockets.  This executes the listen and bind on the sockets.
 * @param s The global server_rec
 * @return The number of open sockets.
 */",undetermined
15531,httpd,UNKNOWN,"/**
 * Loop through the global ap_listen_rec list and close each of the sockets.
 */",undetermined
15532,httpd,UNKNOWN,"/**
 * FIXMEDOC
 */",undetermined
15533,httpd,UNKNOWN,"/* Although these functions are exported from libmain, they are not really
 * public functions.  These functions are actually called while parsing the
 * config file, when one of the LISTEN_COMMANDS directives is read.  These
 * should not ever be called by external modules.  ALL MPMs should include
 * LISTEN_COMMANDS in their command_rec table so that these functions are
 * called.
 */",undetermined
15534,httpd,UNKNOWN,/** @} */,undetermined
15535,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15536,httpd,UNKNOWN,"/**
 * @file  ap_mmn.h
 * @brief Module Magic Number
 *
 * @defgroup APACHE_CORE_MMN Module Magic Number
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15537,httpd,UNKNOWN,"/*
 * MODULE_MAGIC_NUMBER_MAJOR
 * Major API changes that could cause compatibility problems for older modules
 * such as structure size changes.  No binary compatibility is possible across
 * a change in the major version.
 *
 * MODULE_MAGIC_NUMBER_MINOR
 * Minor API changes that do not cause binary compatibility problems.
 * Should be reset to 0 when upgrading MODULE_MAGIC_NUMBER_MAJOR.
 *
 * See the AP_MODULE_MAGIC_AT_LEAST macro below for an example.
 */",undetermined
15538,httpd,UNKNOWN,"/*
 * 20010224   (2.0.13-dev) MODULE_MAGIC_COOKIE reset to ""AP20""
 * 20010523   (2.0.19-dev) bump for scoreboard structure reordering
 * 20010627   (2.0.19-dev) more API changes than I can count
 * 20010726   (2.0.22-dev) more big API changes
 * 20010808   (2.0.23-dev) dir d_is_absolute bit introduced, bucket changes, etc
 * 20010825   (2.0.25-dev) removed d_is_absolute, introduced map_to_storage hook
 * 20011002   (2.0.26-dev) removed 1.3-deprecated request_rec.content_language
 * 20011127   (2.0.29-dev) bump for postconfig hook change, and removal of
 *                         socket from connection record
 * 20011212   (2.0.30-dev) bump for new used_path_info member of request_rec
 * 20011218   (2.0.30-dev) bump for new sbh member of conn_rec, different
 *                         declarations for scoreboard, new parameter to
 *                         create_connection hook
 * 20020102   (2.0.30-dev) bump for changed type of limit_req_body in
 *                         core_dir_config
 * 20020109   (2.0.31-dev) bump for changed shm and scoreboard declarations
 * 20020111   (2.0.31-dev) bump for ETag fields added at end of cor_dir_config
 * 20020114   (2.0.31-dev) mod_dav changed how it asks its provider to fulfill
 *                         a GET request
 * 20020118   (2.0.31-dev) Input filtering split of blocking and mode
 * 20020127   (2.0.31-dev) bump for pre_mpm hook change
 * 20020128   (2.0.31-dev) bump for pre_config hook change
 * 20020218   (2.0.33-dev) bump for AddOutputFilterByType directive
 * 20020220   (2.0.33-dev) bump for scoreboard.h structure change
 * 20020302   (2.0.33-dev) bump for protocol_filter additions.
 * 20020306   (2.0.34-dev) bump for filter type renames.
 * 20020318   (2.0.34-dev) mod_dav's API for REPORT generation changed
 * 20020319   (2.0.34-dev) M_INVALID changed, plus new M_* methods for RFC 3253
 * 20020327   (2.0.35-dev) Add parameter to quick_handler hook
 * 20020329   (2.0.35-dev) bump for addition of freelists to bucket API
 * 20020329.1 (2.0.36)     minor bump for new arg to opt fn ap_cgi_build_command
 * 20020506   (2.0.37-dev) Removed r->boundary in request_rec.
 * 20020529   (2.0.37-dev) Standardized the names of some apr_pool_*_set funcs
 * 20020602   (2.0.37-dev) Bucket API change (metadata buckets)
 * 20020612   (2.0.38-dev) Changed server_rec->[keep_alive_]timeout to apr time
 * 20020625   (2.0.40-dev) Changed conn_rec->keepalive to an enumeration
 * 20020628   (2.0.40-dev) Added filter_init to filter registration functions
 * 20020903   (2.0.41-dev) APR's error constants changed
 * 20020903.1 (2.1.0-dev)  allow_encoded_slashes added to core_dir_config
 * 20020903.2 (2.0.46-dev) add ap_escape_logitem
 * 20030213.1 (2.1.0-dev)  changed log_writer optional fn's to return previous
 *                         handler
 * 20030821   (2.1.0-dev)  bumped mod_include's entire API
 * 20030821.1 (2.1.0-dev)  added XHTML doctypes
 * 20030821.2 (2.1.0-dev)  added ap_escape_errorlog_item
 * 20030821.3 (2.1.0-dev)  added ap_get_server_revision / ap_version_t
 * 20040425   (2.1.0-dev)  removed ap_add_named_module API
 *                         changed ap_add_module, ap_add_loaded_module,
 *                         ap_setup_prelinked_modules,
 *                         ap_process_resource_config
 * 20040425.1 (2.1.0-dev)  Added ap_module_symbol_t and
 *                         ap_prelinked_module_symbols
 * 20050101.0 (2.1.2-dev)  Axed misnamed http_method for http_scheme
 *                         (which it was!)
 * 20050127.0 (2.1.3-dev)  renamed regex_t->ap_regex_t,
 *                         regmatch_t->ap_regmatch_t, REG_*->AP_REG_*,
 *                         removed reg* in place of ap_reg*; added ap_regex.h
 * 20050217.0 (2.1.3-dev)  Axed find_child_by_pid, mpm_*_completion_context
 *                         (winnt mpm) symbols from the public sector, and
 *                         decorated real_exit_code with ap_ in the win32/os.h.
 * 20050305.0 (2.1.4-dev)  added pid and generation fields to worker_score
 * 20050305.1 (2.1.5-dev)  added ap_vhost_iterate_given_conn.
 * 20050305.2 (2.1.5-dev)  added AP_INIT_TAKE_ARGV.
 * 20050305.3 (2.1.5-dev)  added Protocol Framework.
 * 20050701.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to ""AP21""!
 * 20050701.1 (2.1.7-dev)  trace_enable member added to core server_config
 * 20050708.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to ""AP22""!
 * 20050708.1 (2.1.7-dev)  add proxy request_status hook (minor)
 * 20050919.0 (2.1.8-dev)  mod_ssl ssl_ext_list optional function added
 * 20051005.0 (2.1.8-dev)  NET_TIME filter eliminated
 * 20051005.0 (2.3.0-dev)  Bump MODULE_MAGIC_COOKIE to ""AP24""!
 * 20051115.0 (2.3.0-dev)  Added use_canonical_phys_port to core_dir_config
 * 20060110.0 (2.3.0-dev)  Conversion of Authz to be provider based
 *                         addition of <SatisfyAll><SatisfyOne>
 *                         removal of Satisfy, Allow, Deny, Order
 * 20060110.1 (2.3.0-dev)  minex and minex_set members added to
 *                         cache_server_conf (minor)
 * 20060110.2 (2.3.0-dev)  flush_packets and flush_wait members added to
 *                         proxy_server (minor)
 * 20060110.3 (2.3.0-dev)  added inreslist member to proxy_conn_rec (minor)
 * 20060110.4 (2.3.0-dev)  Added server_scheme member to server_rec (minor)
 * 20060905.0 (2.3.0-dev)  Replaced ap_get_server_version() with
 *                         ap_get_server_banner() and ap_get_server_description()
 * 20060905.1 (2.3.0-dev)  Enable retry=0 for the worker (minor)
 * 20060905.2 (2.3.0-dev)  Added ap_all_available_mutexes_string,
 *                         ap_available_mutexes_string and
 *                         ap_parse_mutex()
 * 20060905.3 (2.3.0-dev)  Added conn_rec::clogging_input_filters.
 * 20060905.4 (2.3.0-dev)  Added proxy_balancer::sticky_path.
 * 20060905.5 (2.3.0-dev)  Added ap_mpm_safe_kill()
 * 20070823.0 (2.3.0-dev)  Removed ap_all_available_mutexes_string,
 *                         ap_available_mutexes_string for macros
 * 20070823.1 (2.3.0-dev)  add ap_send_interim_response()
 * 20071023.0 (2.3.0-dev)  add ap_get_scoreboard(sbh) split from the less
 *                         conventional ap_get_scoreboard(proc, thread)
 * 20071023.1 (2.3.0-dev)  Add flags field to struct proxy_alias
 * 20071023.2 (2.3.0-dev)  Add ap_mod_status_reqtail
 * 20071023.3 (2.3.0-dev)  Declare ap_time_process_request() as part of the
 *                         public scoreboard API.
 * 20071108.1 (2.3.0-dev)  Add the optional kept_body brigade to request_rec
 * 20071108.2 (2.3.0-dev)  Add st and keep fields to struct util_ldap_connection_t
 * 20071108.3 (2.3.0-dev)  Add API guarantee for adding connection filters
 *                         with non-NULL request_rec pointer (ap_add_*_filter*)
 * 20071108.4 (2.3.0-dev)  Add ap_proxy_ssl_connection_cleanup
 * 20071108.5 (2.3.0-dev)  Add *scpool to proxy_conn_rec structure
 * 20071108.6 (2.3.0-dev)  Add *r and need_flush to proxy_conn_rec structure
 * 20071108.7 (2.3.0-dev)  Add *ftp_directory_charset to proxy_dir_conf
 * 20071108.8 (2.3.0-dev)  Add optional function ap_logio_add_bytes_in() to mog_logio
 * 20071108.9 (2.3.0-dev)  Add chroot support to unixd_config
 * 20071108.10(2.3.0-dev)  Introduce new ap_expr API
 * 20071108.11(2.3.0-dev)  Revise/Expand new ap_expr API
 * 20071108.12(2.3.0-dev)  Remove ap_expr_clone from the API (same day it was added)
 * 20080403.0 (2.3.0-dev)  Add condition field to core dir config
 * 20080403.1 (2.3.0-dev)  Add authn/z hook and provider registration wrappers.
 * 20080403.2 (2.3.0-dev)  Add ap_escape_path_segment_buffer() and ap_unescape_all().
 * 20080407.0 (2.3.0-dev)  Remove ap_graceful_stop_signalled.
 * 20080407.1              Deprecate ap_cache_cacheable_hdrs_out and add two
 *                         generalized ap_cache_cacheable_headers_(in|out).
 * 20080528.0 (2.3.0-dev)  Switch order of ftp_directory_charset and
 *                         interpolate_env in proxy_dir_conf.
 *                         Rationale: see r661069.
 * 20080528.1 (2.3.0-dev)  add has_realm_hash() to authn_provider struct
 * 20080722.0 (2.3.0-dev)  remove has_realm_hash() from authn_provider struct
 * 20080722.1 (2.3.0-dev)  Add conn_timeout and conn_timeout_set to
 *                         proxy_worker struct.
 * 20080722.2 (2.3.0-dev)  Add scolonsep to proxy_balancer
 * 20080829.0 (2.3.0-dev)  Add cookie attributes when removing cookies
 * 20080830.0 (2.3.0-dev)  Cookies can be set on headers_out and err_headers_out
 * 20080920.0 (2.3.0-dev)  Add ap_mpm_register_timed_callback.
 * 20080920.1 (2.3.0-dev)  Export mod_rewrite.h in the public API.
 * 20080920.2 (2.3.0-dev)  Added ap_timeout_parameter_parse to util.c / httpd.h
 * 20081101.0 (2.3.0-dev)  Remove unused AUTHZ_GROUP_NOTE define.
 * 20081102.0 (2.3.0-dev)  Remove authz_provider_list, authz_request_state,
 *                         and AUTHZ_ACCESS_PASSED_NOTE.
 * 20081104.0 (2.3.0-dev)  Remove r and need_flush fields from proxy_conn_rec
 *                         as they are no longer used and add
 *                         ap_proxy_buckets_lifetime_transform to mod_proxy.h
 * 20081129.0 (2.3.0-dev)  Move AP_FILTER_ERROR and AP_NOBODY_READ|WROTE
 *                         from util_filter.h to httpd.h and change their
 *                         numeric values so they do not overlap with other
 *                         potential status codes
 * 20081201.0 (2.3.0-dev)  Rename several APIs to include ap_ prefix.
 * 20081201.1 (2.3.0-dev)  Added ap_args_to_table and ap_body_to_table.
 * 20081212.0 (2.3.0-dev)  Remove sb_type from process_score in scoreboard.h.
 * 20081231.0 (2.3.0-dev)  Switch ap_escape_html API: add ap_escape_html2,
 *                         and make ap_escape_html a macro for it.
 * 20090130.0 (2.3.2-dev)  Add ap_ prefix to unixd_setup_child().
 * 20090131.0 (2.3.2-dev)  Remove ap_default_type(), disable DefaultType
 * 20090208.0 (2.3.2-dev)  Add conn_rec::current_thread.
 * 20090208.1 (2.3.3-dev)  Add ap_retained_data_create()/ap_retained_data_get()
 * 20090401.0 (2.3.3-dev)  Remove ap_threads_per_child, ap_max_daemons_limit,
 *                         ap_my_generation, etc.  ap_mpm_query() can't be called
 *                         until after the register-hooks phase.
 * 20090401.1 (2.3.3-dev)  Protected log.c internals, http_log.h changes
 * 20090401.2 (2.3.3-dev)  Added tmp_flush_bb to core_output_filter_ctx_t
 * 20090401.3 (2.3.3-dev)  Added DAV options provider to mod_dav.h
 * 20090925.0 (2.3.3-dev)  Added server_rec::context and added *server_rec
 *                         param to ap_wait_or_timeout()
 * 20090925.1 (2.3.3-dev)  Add optional function ap_logio_get_last_bytes() to
 *                         mod_logio
 * 20091011.0 (2.3.3-dev)  Move preserve_host{,_set} from proxy_server_conf to
 *                         proxy_dir_conf
 * 20091011.1 (2.3.3-dev)  add debug_level to util_ldap_state_t
 * 20091031.0 (2.3.3-dev)  remove public LDAP referral-related macros
 * 20091119.0 (2.3.4-dev)  dav_error interface uses apr_status_t parm, not errno
 * 20091119.1 (2.3.4-dev)  ap_mutex_register(), ap_{proc,global}_mutex_create()
 * 20091229.0 (2.3.5-dev)  Move allowed_connect_ports from proxy_server_conf
 *                         to mod_proxy_connect
 * 20091230.0 (2.3.5-dev)  Move ftp_directory_charset from proxy_dir_conf
 *                         to proxy_ftp_dir_conf(mod_proxy_ftp)
 * 20091230.1 (2.3.5-dev)  add util_ldap_state_t.opTimeout
 * 20091230.2 (2.3.5-dev)  add ap_get_server_name_for_url()
 * 20091230.3 (2.3.6-dev)  add ap_parse_log_level()
 * 20091230.4 (2.3.6-dev)  export ap_process_request_after_handler() for mod_serf
 * 20100208.0 (2.3.6-dev)  ap_socache_provider_t API changes to store and iterate
 * 20100208.1 (2.3.6-dev)  Added forward member to proxy_conn_rec
 * 20100208.2 (2.3.6-dev)  Added ap_log_command_line().
 * 20100223.0 (2.3.6-dev)  LDAP client_certs per-server moved to per-dir
 * 20100223.1 (2.3.6-dev)  Added ap_process_fnmatch_configs().
 * 20100504.0 (2.3.6-dev)  Added name arg to ap_{proc,global}_mutex_create().
 * 20100604.0 (2.3.6-dev)  Remove unused core_dir_config::loglevel
 * 20100606.0 (2.3.6-dev)  Make ap_log_*error macro wrappers around
 *                         ap_log_*error_ to save argument preparation and
 *                         function call overhead.
 *                         Introduce per-module loglevels, including new APIs
 *                         APLOG_USE_MODULE() and AP_DECLARE_MODULE().
 * 20100606.1 (2.3.6-dev)  Added extended timestamp formatting via
 *                         ap_recent_ctime_ex().
 * 20100609.0 (2.3.6-dev)  Dropped ap_body_to_table due to missing constraints.
 * 20100609.1 (2.3.7-dev)  Introduce ap_log_cserror()
 * 20100609.2 (2.3.7-dev)  Add deferred write pool to core_output_filter_ctx
 * 20100625.0 (2.3.7-dev)  Add 'userctx' to socache iterator callback prototype
 * 20100630.0 (2.3.7-dev)  make module_levels vector of char instead of int
 * 20100701.0 (2.3.7-dev)  re-order struct members to improve alignment
 * 20100701.1 (2.3.7-dev)  add note_auth_failure hook
 * 20100701.2 (2.3.7-dev)  add ap_proxy_*_wid() functions
 * 20100714.0 (2.3.7-dev)  add access_checker_ex hook, add AUTHZ_DENIED_NO_USER
 *                         to authz_status, call authz providers twice to allow
 *                         authz without authenticated user
 * 20100719.0 (2.3.7-dev)  Add symbol name parameter to ap_add_module and
 *                         ap_add_loaded_module. Add ap_find_module_short_name
 * 20100723.0 (2.3.7-dev)  Remove ct_output_filters from core rec
 * 20100723.1 (2.3.7-dev)  Added ap_proxy_hashfunc() and hash elements to
 *                         proxy worker structs
 * 20100723.2 (2.3.7-dev)  Add ap_request_has_body()
 * 20100723.3 (2.3.8-dev)  Add ap_check_mpm()
 * 20100905.0 (2.3.9-dev)  Add log_id to conn and req recs. Add error log
 *                         format handlers. Support AP_CTIME_OPTION_COMPACT in
 *                         ap_recent_ctime_ex().
 * 20100905.1 (2.3.9-dev)  Add ap_cache_check_allowed()
 * 20100912.0 (2.3.9-dev)  Add an additional ""out"" brigade parameter to the
 *                         mod_cache store_body() provider function.
 * 20100916.0 (2.3.9-dev)  Add commit_entity() to the mod_cache provider
 *                         interface.
 * 20100918.0 (2.3.9-dev)  Move the request_rec within mod_include to be
 *                         exposed within include_ctx_t.
 * 20100919.0 (2.3.9-dev)  Authz providers: Add parsed_require_line parameter
 *                         to check_authorization() function. Add
 *                         parse_require_line() function.
 * 20100919.1 (2.3.9-dev)  Introduce ap_rxplus util/API
 * 20100921.0 (2.3.9-dev)  Add an apr_bucket_brigade to the create_entity
 *                         provider interface for mod_cache.h.
 * 20100922.0 (2.3.9-dev)  Move cache_* functions from mod_cache.h to a
 *                         private header file.
 * 20100923.0 (2.3.9-dev)  Remove MOD_CACHE_REQUEST_REC, remove deprecated
 *                         ap_cache_cacheable_hdrs_out, trim cache_object_t,
 *                         make ap_cache_accept_headers, ap_cache_accept_headers
 *                         ap_cache_try_lock, ap_cache_check_freshness,
 *                         cache_server_conf, cache_enable, cache_disable,
 *                         cache_request_rec and cache_provider_list private.
 * 20100923.1 (2.3.9-dev)  Add cache_status hook.
 * 20100923.2 (2.3.9-dev)  Add generate_log_id hook.
 *                         Make root parameter of ap_expr_eval() const.
 * 20100923.3 (2.3.9-dev)  Add ""last"" member to ap_directive_t
 * 20101012.0 (2.3.9-dev)  Add header to cache_status hook.
 * 20101016.0 (2.3.9-dev)  Remove ap_cache_check_allowed().
 * 20101017.0 (2.3.9-dev)  Make ap_cache_control() public, add cache_control_t
 *                         to mod_disk_cache format.
 * 20101106.0 (2.3.9-dev)  Replace the ap_expr parser derived from
 *                         mod_include's parser with one derived from
 *                         mod_ssl's parser. Clean up ap_expr's public
 *                         interface.
 * 20101106.1 (2.3.9-dev)  Add ap_pool_cleanup_set_null() generic cleanup
 * 20101106.2 (2.3.9-dev)  Add suexec_disabled_reason field to ap_unixd_config
 * 20101113.0 (2.3.9-dev)  Add source address to mod_proxy.h
 * 20101113.1 (2.3.9-dev)  Add ap_set_flag_slot_char()
 * 20101113.2 (2.3.9-dev)  Add ap_expr_exec_re()
 * 20101204.0 (2.3.10-dev) Add _t to ap_expr's typedef names
 * 20101223.0 (2.3.11-dev) Remove cleaned from proxy_conn_rec.
 * 20101223.1 (2.3.11-dev) Rework mod_proxy, et.al. Remove proxy_worker_stat
 *                         and replace w/ proxy_worker_shared; remove worker
 *                         info from scoreboard and use slotmem; Allow
 *                         dynamic growth of balancer members; Remove
 *                         BalancerNonce in favor of 'nonce' parameter.
 * 20110117.0 (2.3.11-dev) Merge <If> sections in separate step (ap_if_walk).
 *                         Add core_dir_config->sec_if. Add ap_add_if_conf().
 *                         Add pool argument to ap_add_file_conf().
 * 20110117.1 (2.3.11-dev) Add ap_pstr2_alnum() and ap_str2_alnum()
 * 20110203.0 (2.3.11-dev) Raise DYNAMIC_MODULE_LIMIT to 256
 * 20110203.1 (2.3.11-dev) Add ap_state_query()
 * 20110203.2 (2.3.11-dev) Add ap_run_pre_read_request() hook and
 *                         ap_parse_form_data() util
 * 20110312.0 (2.3.12-dev) remove uldap_connection_cleanup and add
                           util_ldap_state_t.connectionPoolTTL,
                           util_ldap_connection_t.freed, and
                           util_ldap_connection_t.rebind_pool.
 * 20110312.1 (2.3.12-dev) Add core_dir_config.decode_encoded_slashes.
 * 20110328.0 (2.3.12-dev) change type and name of connectionPoolTTL in util_ldap_state_t
                           connectionPoolTTL (connection_pool_ttl, int->apr_interval_t)
 * 20110329.0 (2.3.12-dev) Change single-bit signed fields to unsigned in
 *                         proxy and cache interfaces.
 *                         Change ap_configfile_t/ap_cfg_getline()/
 *                         ap_cfg_getc() API, add ap_pcfg_strerror()
 *                         Axe mpm_note_child_killed hook, change
 *                         ap_reclaim_child_process and ap_recover_child_process
 *                         interfaces.
 * 20110329.1 (2.3.12-dev) Add ap_reserve_module_slots()/ap_reserve_module_slots_directive()
 *                         change AP_CORE_DECLARE to AP_DECLARE: ap_create_request_config()
 *                         change AP_DECLARE to AP_CORE_DECLARE: ap_register_log_hooks()
 * 20110329.2 (2.3.12-dev) Add child_status and end_generation hooks.
 * 20110329.3 (2.3.12-dev) Add format field to ap_errorlog_info.
 * 20110329.4 (2.3.13-dev) bgrowth and max_balancers to proxy_server_conf.
 * 20110329.5 (2.3.13-dev) Add ap_regexec_len()
 * 20110329.6 (2.3.13-dev) Add AP_EXPR_FLAGS_RESTRICTED, ap_expr_eval_ctx_t->data,
 *                         ap_expr_exec_ctx()
 * 20110604.0 (2.3.13-dev) Make ap_rputs() inline
 * 20110605.0 (2.3.13-dev) add core_dir_config->condition_ifelse, change return
 *                         type of ap_add_if_conf().
 *                         Add members of core_request_config: document_root,
 *                         context_document_root, context_prefix.
 *                         Add ap_context_*(), ap_set_context_info(), ap_set_document_root()
 * 20110605.1 (2.3.13-dev) add ap_(get|set)_core_module_config()
 * 20110605.2 (2.3.13-dev) add ap_get_conn_socket()
 * 20110619.0 (2.3.13-dev) add async connection infos to process_score in scoreboard,
 *                         add ap_start_lingering_close(),
 *                         add conn_state_e:CONN_STATE_LINGER_NORMAL and CONN_STATE_LINGER_SHORT
 * 20110619.1 (2.3.13-dev) add ap_str_toupper()
 * 20110702.0 (2.3.14-dev) make ap_expr_parse_cmd() macro wrapper for new
 *                         ap_expr_parse_cmd_mi() function, add ap_expr_str_*() functions,
 *                         rename AP_EXPR_FLAGS_* -> AP_EXPR_FLAG_*
 * 20110702.1 (2.3.14-dev) Add ap_scan_script_header_err*_ex functions
 * 20110723.0 (2.3.14-dev) Revert addition of ap_ldap*
 * 20110724.0 (2.3.14-dev) Add override_list as parameter to ap_parse_htaccess
 *                         Add member override_list to cmd_parms_struct,
 *                         core_dir_config and htaccess_result
 * 20110724.1 (2.3.15-dev) add NOT_IN_HTACCESS
 * 20110724.2 (2.3.15-dev) retries and retry_delay in util_ldap_state_t
 * 20110724.3 (2.3.15-dev) add util_varbuf.h / ap_varbuf API
 * 20110724.4 (2.3.15-dev) add max_ranges to core_dir_config
 * 20110724.5 (2.3.15-dev) add ap_set_accept_ranges()
 * 20110724.6 (2.3.15-dev) add max_overlaps and max_reversals to core_dir_config
 * 20110724.7 (2.3.15-dev) add ap_random_insecure_bytes(), ap_random_pick()
 * 20110724.8 (2.3.15-dev) add ap_abort_on_oom(), ap_malloc(), ap_calloc(),
 *                         ap_realloc()
 * 20110724.9 (2.3.15-dev) add ap_varbuf_pdup() and ap_varbuf_regsub()
 * 20110724.10(2.3.15-dev) Export ap_max_mem_free
 * 20111009.0 (2.3.15-dev) Remove ap_proxy_removestr(),
 *                         add ap_unixd_config.group_name
 * 20111014.0 (2.3.15-dev) Remove cookie_path_str and cookie_domain_str from
 *                         proxy_dir_conf
 * 20111025.0 (2.3.15-dev) Add return value and maxlen to ap_varbuf_regsub(),
 *                         add ap_pregsub_ex()
 * 20111025.1 (2.3.15-dev) Add ap_escape_urlencoded(), ap_escape_urlencoded_buffer()
 *                         and ap_unescape_urlencoded().
 * 20111025.2 (2.3.15-dev) Add ap_lua_ssl_val to mod_lua
 * 20111025.3 (2.4.0-dev)  Add reclvl to ap_expr_eval_ctx_t
 * 20111122.0 (2.4.0-dev)  Remove parts of conn_state_t that are private to the MPM
 * 20111123.0 (2.4.0-dev)  Pass ap_errorlog_info struct to error_log hook,
 *                         add pool to ap_errorlog_info.
 * 20111130.0 (2.4.0-dev)  c->remote_ip becomes c->peer_ip and r->client_ip,
 *                         c->remote_addr becomes c->peer_addr and r->client_addr
 * 20111201.0 (2.4.0-dev)  Add invalidate_entity() to the cache provider.
 * 20111202.0 (2.4.0-dev)  Use apr_status_t across mod_session API.
 * 20111202.1 (2.4.0-dev)  add APLOGNO()
 * 20111203.0 (2.4.0-dev)  Optional ap_proxy_retry_worker(), remove
 *                         ap_proxy_string_read(), ap_cache_liststr(),
 *                         ap_proxy_buckets_lifetime_transform(),
 *                         ap_proxy_date_canon(), ap_proxy_is_ipaddr(),
 *                         ap_proxy_is_domainname(), ap_proxy_is_hostname(),
 *                         ap_proxy_is_word(), ap_proxy_hex2sec(),
 *                         ap_proxy_sec2hex(), ap_proxy_make_fake_req(),
 *                         ap_proxy_strmatch_path, ap_proxy_strmatch_domain,
 *                         ap_proxy_table_unmerge(), proxy_lb_workers.
 * 20120109.0 (2.4.1-dev)  Changes sizeof(overrides_t) in core config.
 * 20120109.1 (2.4.1-dev)  remove sb_type in global_score.
 * 20120109.2 (2.4.1-dev)  Make core_output_filter_ctx_t and core_ctx_t
 *                         private;
 *                         move core_net rec definition to http_core.h;
 *                         add insert_network_bucket hook, AP_DECLINED
 * 20120211.0 (2.4.1-dev)  Change re_nsub in ap_regex_t from apr_size_t to int.
 * 20120211.1 (2.4.2-dev)  Add AP_HAVE_C99
 * 20120211.2 (2.4.2-dev)  Add ap_runtime_dir_relative
 * 20120211.3 (2.4.2-dev)  Add forcerecovery to proxy_balancer_shared struct
 * 20120211.4 (2.4.3-dev)  Add ap_list_provider_groups()
 * 20120211.5 (2.4.3-dev)  Add missing HTTP status codes registered with IANA.
 * 20120211.6 (2.4.3-dev)  Add ap_proxy_checkproxyblock2.
 * 20120211.7 (2.4.3-dev)  Add ap_get_loadavg()
 * 20120211.8 (2.4.3-dev)  Add sticky_separator to proxy_balancer_shared struct.
 * 20120211.9 (2.4.4-dev)  Add fgrab() to ap_slotmem_provider_t.
 * 20120211.10 (2.4.4-dev) Add in bal_persist field to proxy_server_conf
 * 20120211.11 (2.4.4-dev) Add ap_bin2hex()
 * 20120211.12 (2.4.5-dev) Add ap_remove_input|output_filter_byhandle()
 * 20120211.13 (2.4.5-dev) Add ap_get_exec_line
 * 20120211.14 (2.4.5-dev) Add ppinherit and inherit to proxy_server_conf
 * 20120211.15 (2.4.5-dev) Add dav_join_error()
 * 20120211.16 (2.4.5-dev) Add cache_control_t.invalidated
 * 20120211.17 (2.4.5-dev) Add ap_find_etag_weak(), ap_find_etag_strong()
 * 20120211.18 (2.4.5-dev) Add ap_condition_e, ap_condition_if_match(),
 *                         ap_condition_if_unmodified_since(),
 *                         ap_condition_if_none_match(),
 *                         ap_condition_if_modified_since(),
 *                         ap_condition_if_range()
 * 20120211.19 (2.4.5-dev) Add post_perdir_config hook.
 * 20120211.20 (2.4.5-dev) Add dirwalk_stat hook.
 * 20120211.21 (2.4.5-dev) Add in ap_proxy_create_hdrbrgd() and
 *                         ap_proxy_pass_brigade()
 * 20120211.22 (2.4.5-dev) No longer prevent usage of strtoul()
 * 20120211.23 (2.4.5-dev) Add ap_proxy_clear_connection()
 */",undetermined
15539,httpd,UNKNOWN,"/* ""AP24"" */",undetermined
15540,httpd,UNKNOWN,/* 0...n */,undetermined
15541,httpd,UNKNOWN,"/**
 * Determine if the server's current MODULE_MAGIC_NUMBER is at least a
 * specified value.
 *
 * Useful for testing for features.
 * For example, suppose you wish to use the apr_table_overlap
 *    function.  You can do this:
 *
 * \code
 * #if AP_MODULE_MAGIC_AT_LEAST(19980812,2)
 *     ... use apr_table_overlap()
 * #else
 *     ... alternative code which doesn't use apr_table_overlap()
 * #endif
 * \endcode
 *
 * @param major The major module magic number
 * @param minor The minor module magic number
 * @def AP_MODULE_MAGIC_AT_LEAST(int major, int minor)
 */",undetermined
15542,httpd,UNKNOWN,/** @deprecated present for backwards compatibility */,undetermined
15543,httpd,UNKNOWN,/* !APACHE_AP_MMN_H */,undetermined
15544,httpd,UNKNOWN,/** @} */,undetermined
15545,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15546,httpd,UNKNOWN,"/**
 * @file  ap_mpm.h
 * @brief Apache Multi-Processing Module library
 *
 * @defgroup APACHE_CORE_MPM Multi-Processing Module library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15547,httpd,UNKNOWN,"/*
    The MPM, ""multi-processing model"" provides an abstraction of the
    interface with the OS for distributing incoming connections to
    threads/process for processing.  http_main invokes the MPM, and
    the MPM runs until a shutdown/restart has been indicated.
    The MPM calls out to the apache core via the ap_process_connection
    function when a connection arrives.

    The MPM may or may not be multithreaded.  In the event that it is
    multithreaded, at any instant it guarantees a 1:1 mapping of threads
    ap_process_connection invocations.

    Note: In the future it will be possible for ap_process_connection
    to return to the MPM prior to finishing the entire connection; and
    the MPM will proceed with asynchronous handling for the connection;
    in the future the MPM may call ap_process_connection again -- but
    does not guarantee it will occur on the same thread as the first call.

    The MPM further guarantees that no asynchronous behaviour such as
    longjmps and signals will interfere with the user code that is
    invoked through ap_process_connection.  The MPM may reserve some
    signals for its use (i.e. SIGUSR1), but guarantees that these signals
    are ignored when executing outside the MPM code itself.  (This
    allows broken user code that does not handle EINTR to function
    properly.)

    The suggested server restart and stop behaviour will be ""graceful"".
    However the MPM may choose to terminate processes when the user
    requests a non-graceful restart/stop.  When this occurs, the MPM kills
    all threads with extreme prejudice, and destroys the pchild pool.
    User cleanups registered in the pchild apr_pool_t will be invoked at
    this point.  (This can pose some complications, the user cleanups
    are asynchronous behaviour not unlike longjmp/signal... but if the
    admin is asking for a non-graceful shutdown, how much effort should
    we put into doing it in a nice way?)

    unix/posix notes:
    - The MPM does not set a SIGALRM handler, user code may use SIGALRM.
        But the preferred method of handling timeouts is to use the
        timeouts provided by the BUFF abstraction.
    - The proper setting for SIGPIPE is SIG_IGN, if user code changes it
        for any of their own processing, it must be restored to SIG_IGN
        prior to executing or returning to any apache code.
    TODO: add SIGPIPE debugging check somewhere to make sure it's SIG_IGN
*/",undetermined
15548,httpd,UNKNOWN,"/**
 * Pass control to the MPM for steady-state processing.  It is responsible
 * for controlling the parent and child processes.  It will run until a
 * restart/shutdown is indicated.
 * @param pconf the configuration pool, reset before the config file is read
 * @param plog the log pool, reset after the config file is read
 * @param server_conf the global server config.
 * @return DONE for shutdown OK otherwise.
 */",undetermined
15549,httpd,UNKNOWN,"/**
 * Spawn a process with privileges that another module has requested
 * @param r The request_rec of the current request
 * @param newproc The resulting process handle.
 * @param progname The program to run
 * @param args the arguments to pass to the new program.  The first
 *                   one should be the program name.
 * @param env The new environment apr_table_t for the new process.  This
 *            should be a list of NULL-terminated strings.
 * @param attr the procattr we should use to determine how to create the new
 *         process
 * @param p The pool to use.
 */",undetermined
15550,httpd,UNKNOWN,/* Subtypes/Values for AP_MPMQ_IS_THREADED and AP_MPMQ_IS_FORKED        */,undetermined
15551,httpd,UNKNOWN,/* This value specifies that an */,undetermined
15552,httpd,UNKNOWN,/* MPM is not capable of        */,undetermined
15553,httpd,UNKNOWN,/* threading or forking.        */,undetermined
15554,httpd,UNKNOWN,/* This value specifies that    */,undetermined
15555,httpd,UNKNOWN,/* an MPM is using a static     */,undetermined
15556,httpd,UNKNOWN,/* number of threads or daemons */,undetermined
15557,httpd,UNKNOWN,/* This value specifies that    */,undetermined
15558,httpd,UNKNOWN,/* an MPM is using a dynamic    */,undetermined
15559,httpd,UNKNOWN,/* number of threads or daemons */,undetermined
15560,httpd,UNKNOWN,/* Values returned for AP_MPMQ_MPM_STATE */,undetermined
15561,httpd,UNKNOWN,/* Max # of daemons used so far */,undetermined
15562,httpd,UNKNOWN,/* MPM can do threading         */,undetermined
15563,httpd,UNKNOWN,/* MPM can do forking           */,undetermined
15564,httpd,UNKNOWN,/* The compiled max # daemons   */,undetermined
15565,httpd,UNKNOWN,/* The compiled max # threads   */,undetermined
15566,httpd,UNKNOWN,/* # of threads/child by config */,undetermined
15567,httpd,UNKNOWN,/* Min # of spare daemons       */,undetermined
15568,httpd,UNKNOWN,/* Min # of spare threads       */,undetermined
15569,httpd,UNKNOWN,/* Max # of spare daemons       */,undetermined
15570,httpd,UNKNOWN,/* Max # of spare threads       */,undetermined
15571,httpd,UNKNOWN,/* Max # of requests per daemon */,undetermined
15572,httpd,UNKNOWN,/* Max # of daemons by config   */,undetermined
15573,httpd,UNKNOWN,"/* starting, running, stopping  */",undetermined
15574,httpd,UNKNOWN,/* MPM can process async connections  */,undetermined
15575,httpd,UNKNOWN,/* MPM generation */,undetermined
15576,httpd,UNKNOWN,/* MPM can drive serf internally  */,undetermined
15577,httpd,UNKNOWN,"/**
 * Query a property of the current MPM.
 * @param query_code One of APM_MPMQ_*
 * @param result A location to place the result of the query
 * @return APR_EGENERAL if an mpm-query hook has not been registered;
 * APR_SUCCESS or APR_ENOTIMPL otherwise
 * @remark The MPM doesn't register the implementing hook until the
 * register_hooks hook is called, so modules cannot use ap_mpm_query()
 * until after that point.
 * @fn int ap_mpm_query(int query_code, int *result)
 */",undetermined
15578,httpd,UNKNOWN,/* only added support in the Event MPM....  check for APR_ENOTIMPL */,undetermined
15579,httpd,UNKNOWN,"/**
 * Allow a module to remain aware of MPM child process state changes,
 * along with the generation and scoreboard slot of the process changing
 * state.
 *
 * With some MPMs (event and worker), an active MPM child process may lose
 * its scoreboard slot if the child process is exiting and the scoreboard
 * slot is needed by other processes.  When this occurs, the hook will be
 * called with the MPM_CHILD_LOST_SLOT state.
 *
 * @param s The main server_rec.
 * @param pid The id of the MPM child process.
 * @param gen The server generation of that child process.
 * @param slot The scoreboard slot number, or -1.  It will be -1 when an
 * MPM child process exits, and that child had previously lost its
 * scoreboard slot.
 * @param state One of the mpm_child_status values.  Modules should ignore
 * unrecognized values.
 */",undetermined
15580,httpd,UNKNOWN,"/**
 * Allow a module to be notified when the last child process of a generation
 * exits.
 *
 * @param s The main server_rec.
 * @param gen The server generation which is now completely finished.
 */",undetermined
15581,httpd,UNKNOWN,"/* Defining GPROF when compiling uses the moncontrol() function to
 * disable gprof profiling in the parent, and enable it only for
 * request processing in children (or in one_process mode).  It's
 * absolutely required to get useful gprof results under linux
 * because the profile itimers and such are disabled across a
 * fork().  It's probably useful elsewhere as well.
 */",undetermined
15582,httpd,UNKNOWN,/*AP_ENABLE_EXCEPTION_HOOK*/,undetermined
15583,httpd,UNKNOWN,/** @} */,undetermined
15584,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15585,httpd,UNKNOWN,"/**
 * @file  ap_provider.h
 * @brief Apache Provider API
 *
 * @defgroup APACHE_CORE_PROVIDER Provider API
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15586,httpd,UNKNOWN,"/**
 * This function is used to register a provider with the global
 * provider pool.
 * @param pool The pool to create any storage from
 * @param provider_group The group to store the provider in
 * @param provider_name The name for this provider
 * @param provider_version The version for this provider
 * @param provider Opaque structure for this provider
 * @return APR_SUCCESS if all went well
 */",undetermined
15587,httpd,UNKNOWN,"/**
 * This function is used to retrieve a provider from the global
 * provider pool.
 * @param provider_group The group to look for this provider in
 * @param provider_name The name for the provider
 * @param provider_version The version for the provider
 * @return provider pointer to provider if found, NULL otherwise
 */",undetermined
15588,httpd,UNKNOWN,"/**
 * This function is used to retrieve a list (array) of provider
 * names from the specified group with the specified version.
 * @param pool The pool to create any storage from
 * @param provider_group The group to look for this provider in
 * @param provider_version The version for the provider
 * @return pointer to array of ap_list_provider_names_t of provider names (could be empty)
 */",undetermined
15589,httpd,UNKNOWN,"/**
 * This function is used to retrieve a list (array) of provider groups and versions
 * @param pool The pool to create any storage from
 * @return pointer to array of ap_list_provider_groups_t of provider groups
 *         and versions (could be empty)
 */",undetermined
15590,httpd,UNKNOWN,/** @} */,undetermined
15591,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15592,httpd,UNKNOWN,"/* Derived from PCRE's pcreposix.h.

            Copyright (c) 1997-2004 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/",undetermined
15593,httpd,UNKNOWN,"/**
 * @file ap_regex.h
 * @brief Apache Regex defines
 */",undetermined
15594,httpd,UNKNOWN,/* Allow for C++ users */,undetermined
15595,httpd,UNKNOWN,"/* Options for ap_regcomp, ap_regexec, and ap_rxplus versions: */",undetermined
15596,httpd,UNKNOWN,/** use a case-insensitive match */,undetermined
15597,httpd,UNKNOWN,/** don't match newlines against '.' etc */,undetermined
15598,httpd,UNKNOWN,/** ^ will not match against start-of-string */,undetermined
15599,httpd,UNKNOWN,/** $ will not match against end-of-string */,undetermined
15600,httpd,UNKNOWN,/** unused */,undetermined
15601,httpd,UNKNOWN,/** unused */,undetermined
15602,httpd,UNKNOWN,/* perl's /g (needs fixing) */,undetermined
15603,httpd,UNKNOWN,/* nomem in our code */,undetermined
15604,httpd,UNKNOWN,/* perl's /s flag */,undetermined
15605,httpd,UNKNOWN,/* Error values: */,undetermined
15606,httpd,UNKNOWN,/** internal error ? */,undetermined
15607,httpd,UNKNOWN,/** failed to get memory */,undetermined
15608,httpd,UNKNOWN,/** invalid argument */,undetermined
15609,httpd,UNKNOWN,/** match failed */,undetermined
15610,httpd,UNKNOWN,/* The structure representing a compiled regular expression. */,undetermined
15611,httpd,UNKNOWN,/* The structure in which a captured offset is returned. */,undetermined
15612,httpd,UNKNOWN,/* The functions */,undetermined
15613,httpd,UNKNOWN,"/**
 * Compile a regular expression.
 * @param preg Returned compiled regex
 * @param regex The regular expression string
 * @param cflags Bitwise OR of AP_REG_* flags (ICASE and NEWLINE supported,
 *                                             other flags are ignored)
 * @return Zero on success or non-zero on error
 */",undetermined
15614,httpd,UNKNOWN,"/**
 * Match a NUL-terminated string against a pre-compiled regex.
 * @param preg The pre-compiled regex
 * @param string The string to match
 * @param nmatch Provide information regarding the location of any matches
 * @param pmatch Provide information regarding the location of any matches
 * @param eflags Bitwise OR of AP_REG_* flags (NOTBOL and NOTEOL supported,
 *                                             other flags are ignored)
 * @return 0 for successful match, \p AP_REG_NOMATCH otherwise
 */",undetermined
15615,httpd,UNKNOWN,"/**
 * Match a string with given length against a pre-compiled regex. The string
 * does not need to be NUL-terminated.
 * @param preg The pre-compiled regex
 * @param buff The string to match
 * @param len Length of the string to match
 * @param nmatch Provide information regarding the location of any matches
 * @param pmatch Provide information regarding the location of any matches
 * @param eflags Bitwise OR of AP_REG_* flags (NOTBOL and NOTEOL supported,
 *                                             other flags are ignored)
 * @return 0 for successful match, AP_REG_NOMATCH otherwise
 */",undetermined
15616,httpd,UNKNOWN,"/**
 * Return the error code returned by regcomp or regexec into error messages
 * @param errcode the error code returned by regexec or regcomp
 * @param preg The precompiled regex
 * @param errbuf A buffer to store the error in
 * @param errbuf_size The size of the buffer
 */",undetermined
15617,httpd,UNKNOWN,"/** Destroy a pre-compiled regex.
 * @param preg The pre-compiled regex to free.
 */",undetermined
15618,httpd,UNKNOWN,/* ap_rxplus: higher-level regexps */,undetermined
15619,httpd,UNKNOWN,"/**
 * Compile a pattern into a regexp.
 * supports perl-like formats
 *    match-string
 *    /match-string/flags
 *    s/match-string/replacement-string/flags
 *    Intended to support more perl-like stuff as and when round tuits happen
 * match-string is anything supported by ap_regcomp
 * replacement-string is a substitution string as supported in ap_pregsub
 * flags should correspond with perl syntax: treat failure to do so as a bug
 *                                           (documentation TBD)
 * @param pool Pool to allocate from
 * @param pattern Pattern to compile
 * @return Compiled regexp, or NULL in case of compile/syntax error
 */",undetermined
15620,httpd,UNKNOWN,"/**
 * Apply a regexp operation to a string.
 * @param pool Pool to allocate from
 * @param rx The regex match to apply
 * @param pattern The string to apply it to
 *                NOTE: This MUST be kept in scope to use regexp memory
 * @param newpattern The modified string (ignored if the operation doesn't
 *                                        modify the string)
 * @return Number of times a match happens.  Normally 0 (no match) or 1
 *         (match found), but may be greater if a transforming pattern
 *         is applied with the 'g' flag.
 */",undetermined
15621,httpd,UNKNOWN,"/**
 * Number of matches in the regexp operation's memory
 * This may be 0 if no match is in memory, or up to nmatch from compilation
 * @param rx The regexp
 * @return Number of matches in memory
 */",undetermined
15622,httpd,UNKNOWN,"/**
 * Get a pointer to a match from regex memory
 * NOTE: this relies on the match pattern from the last call to
 *       ap_rxplus_exec still being valid (i.e. not freed or out-of-scope)
 * @param rx The regexp
 * @param n The match number to retrieve (must be between 0 and nmatch)
 * @param len Returns the length of the match.
 * @param match Returns the match pattern
 */",undetermined
15623,httpd,UNKNOWN,"/**
 * Get a match from regex memory in a string copy
 * NOTE: this relies on the match pattern from the last call to
 *       ap_rxplus_exec still being valid (i.e. not freed or out-of-scope)
 * @param pool Pool to allocate from
 * @param rx The regexp
 * @param n The match number to retrieve (must be between 0 and nmatch)
 * @return The matched string
 */",undetermined
15624,httpd,UNKNOWN,"/* extern ""C"" */",undetermined
15625,httpd,UNKNOWN,/* AP_REGEX_T */,undetermined
15626,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15627,httpd,UNKNOWN,"/**
 * @file ap_regkey.h
 * @brief APR-style Win32 Registry Manipulation
 */",undetermined
15628,httpd,UNKNOWN,/* Just for AP_DECLARE */,undetermined
15629,httpd,UNKNOWN,"/* Used to recover AP_REGKEY_* constants
 */",undetermined
15630,httpd,UNKNOWN,"/**
 * Win32 Only: Constants for ap_regkey_open()
 */",undetermined
15631,httpd,UNKNOWN,"/**
 * Win32 Only: Flags for ap_regkey_value_set()
 */",undetermined
15632,httpd,UNKNOWN,"/**
 * Win32 Only: Open the specified registry key.
 * @param newkey The opened registry key
 * @param parentkey The open registry key of the parent, or one of
 * <PRE>
 *           AP_REGKEY_CLASSES_ROOT
 *           AP_REGKEY_CURRENT_CONFIG
 *           AP_REGKEY_CURRENT_USER
 *           AP_REGKEY_LOCAL_MACHINE
 *           AP_REGKEY_USERS
 *           AP_REGKEY_PERFORMANCE_DATA
 *           AP_REGKEY_DYN_DATA
 * </PRE>
 * @param keyname The path of the key relative to the parent key
 * @param flags Or'ed value of:
 * <PRE>
 *           APR_READ             open key for reading
 *           APR_WRITE            open key for writing
 *           APR_CREATE           create the key if it doesn't exist
 *           APR_EXCL             return error if APR_CREATE and key exists
 * </PRE>
 * @param pool The pool in which newkey is allocated
 */",undetermined
15633,httpd,UNKNOWN,"/**
 * Win32 Only: Close the registry key opened or created by ap_regkey_open().
 * @param key The registry key to close
 */",undetermined
15634,httpd,UNKNOWN,"/**
 * Win32 Only: Remove the given registry key.
 * @param parent The open registry key of the parent, or one of
 * <PRE>
 *           AP_REGKEY_CLASSES_ROOT
 *           AP_REGKEY_CURRENT_CONFIG
 *           AP_REGKEY_CURRENT_USER
 *           AP_REGKEY_LOCAL_MACHINE
 *           AP_REGKEY_USERS
 *           AP_REGKEY_PERFORMANCE_DATA
 *           AP_REGKEY_DYN_DATA
 * </PRE>
 * @param keyname The path of the key relative to the parent key
 * @param pool The pool used for temp allocations
 * @remark ap_regkey_remove() is not recursive, although it removes
 * all values within the given keyname, it will not remove a key
 * containing subkeys.
 */",undetermined
15635,httpd,UNKNOWN,"/**
 * Win32 Only: Retrieve a registry value string from an open key.
 * @param result The string value retrieved
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass """" for the default)
 * @param pool The pool used to store the result
 * @remark There is no toggle to prevent environment variable expansion
 * if the registry value is set with AP_REG_EXPAND (REG_EXPAND_SZ), such
 * expansions are always performed.
 */",undetermined
15636,httpd,UNKNOWN,"/**
 * Win32 Only: Store a registry value string into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass """" for the default)
 * @param value The string to store for the named value
 * @param flags The option AP_REGKEY_EXPAND or 0, where AP_REGKEY_EXPAND
 * values will find all %foo% variables expanded from the environment.
 * @param pool The pool used for temp allocations
 */",undetermined
15637,httpd,UNKNOWN,"/**
 * Win32 Only: Retrieve a raw byte value from an open key.
 * @param result The raw bytes value retrieved
 * @param resultsize Pointer to a variable to store the number raw bytes retrieved
 * @param resulttype Pointer to a variable to store the registry type of the value retrieved
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass """" for the default)
 * @param pool The pool used to store the result
 */",undetermined
15638,httpd,UNKNOWN,"/**
 * Win32 Only: Store a raw bytes value into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass """" for the default)
 * @param value The bytes to store for the named value
 * @param valuesize The number of bytes for value
 * @param valuetype The
 * values will find all %foo% variables expanded from the environment.
 * @param pool The pool used for temp allocations
 */",undetermined
15639,httpd,UNKNOWN,"/**
 * Win32 Only: Retrieve a registry value string from an open key.
 * @param result The string elements retrieved from a REG_MULTI_SZ string array
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass """" for the default)
 * @param pool The pool used to store the result
 */",undetermined
15640,httpd,UNKNOWN,"/**
 * Win32 Only: Store a registry value string array into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass """" for the default)
 * @param nelts The string elements to store in a REG_MULTI_SZ string array
 * @param elts The number of elements in the elts string array
 * @param pool The pool used for temp allocations
 */",undetermined
15641,httpd,UNKNOWN,"/**
 * Win32 Only: Remove a registry value from an open key.
 * @param key The registry key to remove the value from
 * @param valuename The named value to remove (pass """" for the default)
 * @param pool The pool used for temp allocations
 */",undetermined
15642,httpd,UNKNOWN,/* def WIN32 || def DOXYGEN */,undetermined
15643,httpd,UNKNOWN,/* AP_REGKEY_H */,undetermined
15644,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15645,httpd,UNKNOWN,"/**
 * @file ap_release.h
 * @brief Version Release defines
 */",undetermined
15646,httpd,UNKNOWN,"/*
 * The below defines the base string of the Server: header. Additional
 * tokens can be added via the ap_add_version_component() API call.
 *
 * The tokens are listed in order of their significance for identifying the
 * application.
 *
 * ""Product tokens should be short and to the point -- use of them for
 * advertizing or other non-essential information is explicitly forbidden.""
 *
 * Example: ""Apache/1.1.0 MrWidget/0.1-alpha""
 */",undetermined
15647,httpd,UNKNOWN,/* Synchronize the above with docs/manual/style/version.ent */,undetermined
15648,httpd,UNKNOWN,"/* APR_STRINGIFY is defined here, and also in apr_general.h, so wrap it */",undetermined
15649,httpd,UNKNOWN,/** Properly quote a value as a string in the C preprocessor */,undetermined
15650,httpd,UNKNOWN,/** Helper macro for APR_STRINGIFY */,undetermined
15651,httpd,UNKNOWN,/* keep old macros as well */,undetermined
15652,httpd,UNKNOWN,/* macro for Win32 .rc files using numeric csv representation */,undetermined
15653,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15654,httpd,UNKNOWN,"/* Memory handler for a shared memory divided in slot.
 */",undetermined
15655,httpd,UNKNOWN,"/**
 * @file  ap_slotmem.h
 * @brief Memory Slot Extension Storage Module for Apache
 *
 * @defgroup MEM mem
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
15656,httpd,UNKNOWN,/* for getpid() */,undetermined
15657,httpd,UNKNOWN,"/*
 * Values for ap_slotmem_type_t::
 *
 * AP_SLOTMEM_TYPE_PERSIST: For transitory providers, persist
 *    the data on the file-system
 *
 * AP_SLOTMEM_TYPE_NOTMPSAFE:
 *
 * AP_SLOTMEM_TYPE_PREALLOC: Access to slots require they be grabbed 1st
 *
 * AP_SLOTMEM_TYPE_CLEARINUSE: If persisting, clear 'inuse' array before
 *    storing
 */",undetermined
15658,httpd,UNKNOWN,"/**
 * callback function used for slotmem doall.
 * @param mem is the memory associated with a worker.
 * @param data is what is passed to slotmem.
 * @param pool is pool used
 * @return APR_SUCCESS if all went well
 */",undetermined
15659,httpd,UNKNOWN,"/*
     * Name of the provider method
     */",undetermined
15660,httpd,UNKNOWN,"/**
     * call the callback on all worker slots
     * @param s ap_slotmem_instance_t to use.
     * @param funct callback function to call for each element.
     * @param data parameter for the callback function.
     * @param pool is pool used
     * @return APR_SUCCESS if all went well
     */",undetermined
15661,httpd,UNKNOWN,"/**
     * create a new slotmem with each item size is item_size.
     * This would create shared memory, basically.
     * @param inst where to store pointer to slotmem
     * @param name a key used for debugging and in mod_status output or allow another process to share this space.
     * @param item_size size of each item
     * @param item_num number of item to create.
     * @param type type of slotmem.
     * @param pool is pool used
     * @return APR_SUCCESS if all went well
     */",undetermined
15662,httpd,UNKNOWN,"/**
     * attach to an existing slotmem.
     * This would attach to  shared memory, basically.
     * @param inst where to store pointer to slotmem
     * @param name a key used for debugging and in mod_status output or allow another process to share this space.
     * @param item_size size of each item
     * @param item_num max number of item.
     * @param pool is pool to memory allocate.
     * @return APR_SUCCESS if all went well
     */",undetermined
15663,httpd,UNKNOWN,"/**
     * get the memory ptr associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param mem address to store the pointer to the slot
     * @return APR_SUCCESS if all went well
     */",undetermined
15664,httpd,UNKNOWN,"/**
     * get/read the data associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param dest address to store the data
     * @param dest_len length of dataset to retrieve
     * @return APR_SUCCESS if all went well
     */",undetermined
15665,httpd,UNKNOWN,"/**
     * put/write the data associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param src address of the data to store in the slot
     * @param src_len length of dataset to store in the slot
     * @return APR_SUCCESS if all went well
     */",undetermined
15666,httpd,UNKNOWN,"/**
     * return number of slots allocated for this entry.
     * @param s ap_slotmem_instance_t to use.
     * @return number of slots
     */",undetermined
15667,httpd,UNKNOWN,"/**
     * return number of free (not used) slots allocated for this entry.
     * Valid for slots which are AP_SLOTMEM_TYPE_PREGRAB as well as
     * any which use get/release.
     * @param s ap_slotmem_instance_t to use.
     * @return number of slots
     */",undetermined
15668,httpd,UNKNOWN,"/**
     * return slot size allocated for this entry.
     * @param s ap_slotmem_instance_t to use.
     * @return size of slot
     */",undetermined
15669,httpd,UNKNOWN,"/**
     * grab (or alloc) a free slot
     * @param s ap_slotmem_instance_t to use.
     * @param item_id ptr to the available slot id and marked as in-use
     * @return APR_SUCCESS if all went well
     */",undetermined
15670,httpd,UNKNOWN,"/**
     * release (or free) the slot associated with this item_id
     * @param s ap_slotmem_instance_t to use.
     * @param item_id slot id to free and mark as no longer in-use
     * @return APR_SUCCESS if all went well
     */",undetermined
15671,httpd,UNKNOWN,"/**
     * forced grab (or alloc) a slot associated with this item_id
     * @param s ap_slotmem_instance_t to use.
     * @param item_id to the specified slot id and marked as in-use
     * @return APR_SUCCESS if all went well
     */",undetermined
15672,httpd,UNKNOWN,/** @} */,undetermined
15673,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15674,httpd,UNKNOWN,"/**
 * @file ap_socache.h
 * @brief Small object cache provider interface.
 *
 * @defgroup AP_SOCACHE ap_socache
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
15675,httpd,UNKNOWN,"/** If this flag is set, the store/retrieve/remove/status interfaces
 * of the provider are NOT safe to be called concurrently from
 * multiple processes or threads, and an external global mutex must be
 * used to serialize access to the provider.
 */",undetermined
15676,httpd,UNKNOWN,"/* XXX: Even if store/retrieve/remove is atomic, isn't it useful to note
 * independently that status and iterate may or may not be?
 */",undetermined
15677,httpd,UNKNOWN,/** A cache instance. */,undetermined
15678,httpd,UNKNOWN,"/** Hints which may be passed to the init function; providers may
 * ignore some or all of these hints. */",undetermined
15679,httpd,UNKNOWN,/** Approximate average length of IDs: */,undetermined
15680,httpd,UNKNOWN,/** Approximate average size of objects: */,undetermined
15681,httpd,UNKNOWN,/** Suggested interval between expiry cleanup runs; */,undetermined
15682,httpd,UNKNOWN,"/**
 * Iterator callback prototype for the ap_socache_provider_t->iterate() method
 * @param instance The cache instance
 * @param s Associated server context (for logging)
 * @param userctx User defined pointer passed from the iterator call
 * @param id Unique ID for the object (binary blob)
 * with a trailing null char for convenience
 * @param idlen Length of id blob
 * @param data Output buffer to place retrieved data (binary blob)
 * with a trailing null char for convenience
 * @param datalen Length of data buffer
 * @param pool Pool for temporary allocations
 * @return APR status value; return APR_SUCCESS or the iteration will halt;
 * this value is returned to the ap_socache_provider_t->iterate() caller
 */",undetermined
15683,httpd,UNKNOWN,"/** A socache provider structure.  socache providers are registered
 * with the ap_provider.h interface using the AP_SOCACHE_PROVIDER_*
 * constants. */",undetermined
15684,httpd,UNKNOWN,/** Canonical provider name. */,undetermined
15685,httpd,UNKNOWN,/** Bitmask of AP_SOCACHE_FLAG_* flags. */,undetermined
15686,httpd,UNKNOWN,"/**
     * Create a session cache based on the given configuration string.
     * The instance pointer returned in the instance parameter will be
     * passed as the first argument to subsequent invocations.
     *
     * @param instance Output parameter to which instance object is written.
     * @param arg User-specified configuration string.  May be NULL to
     *        force use of defaults.
     * @param tmp Pool to be used for any temporary allocations
     * @param p Pool to be use for any allocations lasting as long as
     * the created instance
     * @return NULL on success, or an error string on failure.
     */",undetermined
15687,httpd,UNKNOWN,"/**
     * Initialize the cache.  The cname must be of maximum length 16
     * characters, and uniquely identifies the consumer of the cache
     * within the server; using the module name is recommended, e.g.
     * ""mod_ssl-sess"".  This string may be used within a filesystem
     * path so use of only alphanumeric [a-z0-9_-] characters is
     * recommended.  If hints is non-NULL, it gives a set of hints for
     * the provider.  Returns APR error code.
     *
     * @param instance The cache instance
     * @param cname A unique string identifying the consumer of this API
     * @param hints Optional hints argument describing expected cache use
     * @param s Server structure to which the cache is associated
     * @param pool Pool for long-lived allocations
     * @return APR status value indicating success.
     */",undetermined
15688,httpd,UNKNOWN,"/**
     * Destroy a given cache instance object.
     * @param instance The cache instance to destroy.
     * @param s Associated server structure (for logging purposes)
     */",undetermined
15689,httpd,UNKNOWN,"/**
     * Store an object in a cache instance.
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param expiry Absolute time at which the object expires
     * @param data Data to store; binary blob
     * @param datalen Length of data blob
     * @param pool Pool for temporary allocations.
     * @return APR status value.
     */",undetermined
15690,httpd,UNKNOWN,"/**
     * Retrieve a cached object.
     * 
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param data Output buffer to place retrievd data (binary blob)
     * @param datalen On entry, length of data buffer; on exit, the
     * number of bytes written to the data buffer.
     * @param pool Pool for temporary allocations.
     * @return APR status value; APR_NOTFOUND if the object was not
     * found
     */",undetermined
15691,httpd,UNKNOWN,"/**
     * Remove an object from the cache
     *
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param pool Pool for temporary allocations.
     */",undetermined
15692,httpd,UNKNOWN,"/** 
     * Dump the status of a cache instance for mod_status.  Will use
     * the ap_r* interfaces to produce appropriate status output.
     * XXX: ap_r* are deprecated, bad dogfood
     *
     * @param instance The cache instance
     * @param r The request structure
     * @param flags The AP_STATUS_* constants used (see mod_status.h)
     */",undetermined
15693,httpd,UNKNOWN,"/**
     * Dump all cached objects through an iterator callback.
     * @param instance The cache instance
     * @param s Associated server context (for processing and logging)
     * @param userctx User defined pointer passed through to the iterator
     * @param iterator The user provided callback function which will receive
     * individual calls for each unexpired id/data pair
     * @param pool Pool for temporary allocations.
     * @return APR status value; APR_NOTFOUND if the object was not
     * found
     */",undetermined
15694,httpd,UNKNOWN,/** The provider group used to register socache providers. */,undetermined
15695,httpd,UNKNOWN,/** The provider version used to register socache providers. */,undetermined
15696,httpd,UNKNOWN,/** Default provider name. */,undetermined
15697,httpd,UNKNOWN,/* AP_SOCACHE_H */,undetermined
15698,httpd,UNKNOWN,/** @} */,undetermined
15699,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15700,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15701,httpd,UNKNOWN,"/**
 * @file  heartbeat.h
 * @brief commun structures for mod_heartmonitor.c  and mod_lbmethod_heartbeat.c
 *
 * @defgroup HEARTBEAT mem
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
15702,httpd,UNKNOWN,"/*
 * Worse Case: IPv4-Mapped IPv6 Address
 * 0000:0000:0000:0000:0000:FFFF:255.255.255.255
 */",undetermined
15703,httpd,UNKNOWN,"/* default name of heartbeat data file, created in the configured
 * runtime directory when mod_slotmem_shm is not available
 */",undetermined
15704,httpd,UNKNOWN,/** @} */,undetermined
15705,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15706,httpd,UNKNOWN,"/**
 * @file http_config.h
 * @brief Apache Configuration
 *
 * @defgroup APACHE_CORE_CONFIG Configuration
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15707,httpd,UNKNOWN,"/*
 * The central data structures around here...
 */",undetermined
15708,httpd,UNKNOWN,/* Command dispatch structures... */,undetermined
15709,httpd,UNKNOWN,"/**
 * How the directives arguments should be parsed.
 * @remark Note that for all of these except RAW_ARGS, the config routine is
 *      passed a freshly allocated string which can be modified or stored
 *      or whatever...
 */",undetermined
15710,httpd,UNKNOWN,/**< cmd_func parses command line itself */,undetermined
15711,httpd,UNKNOWN,/**< one argument only */,undetermined
15712,httpd,UNKNOWN,/**< two arguments only */,undetermined
15713,httpd,UNKNOWN,"/**< one argument, occuring multiple times
                         * (e.g., IndexIgnore)
                         */",undetermined
15714,httpd,UNKNOWN,"/**< two arguments, 2nd occurs multiple times
                         * (e.g., AddIcon)
                         */",undetermined
15715,httpd,UNKNOWN,/**< One of 'On' or 'Off' */,undetermined
15716,httpd,UNKNOWN,"/**< No args at all, e.g. &lt;/Directory&gt; */",undetermined
15717,httpd,UNKNOWN,/**< one or two arguments */,undetermined
15718,httpd,UNKNOWN,/**< three arguments only */,undetermined
15719,httpd,UNKNOWN,/**< two or three arguments */,undetermined
15720,httpd,UNKNOWN,"/**< one, two or three arguments */",undetermined
15721,httpd,UNKNOWN,/**< one or three arguments */,undetermined
15722,httpd,UNKNOWN,/**< an argc and argv are passed */,undetermined
15723,httpd,UNKNOWN,"/**
 * This structure is passed to a command which is being invoked,
 * to carry a large variety of miscellaneous data which is all of
 * use to *somebody*...
 */",undetermined
15724,httpd,UNKNOWN,"/**
 * All the types of functions that can be used in directives
 * @internal
 */",undetermined
15725,httpd,UNKNOWN,/** function to call for a no-args */,undetermined
15726,httpd,UNKNOWN,/** function to call for a raw-args */,undetermined
15727,httpd,UNKNOWN,/** function to call for a argv/argc */,undetermined
15728,httpd,UNKNOWN,/** function to call for a take1 */,undetermined
15729,httpd,UNKNOWN,/** function to call for a take2 */,undetermined
15730,httpd,UNKNOWN,/** function to call for a take3 */,undetermined
15731,httpd,UNKNOWN,/** function to call for a flag */,undetermined
15732,httpd,UNKNOWN,/** This configuration directive does not take any arguments */,undetermined
15733,httpd,UNKNOWN,/** This configuration directive will handle its own parsing of arguments*/,undetermined
15734,httpd,UNKNOWN,/** This configuration directive will handle its own parsing of arguments*/,undetermined
15735,httpd,UNKNOWN,/** This configuration directive takes 1 argument*/,undetermined
15736,httpd,UNKNOWN,/** This configuration directive takes 2 arguments */,undetermined
15737,httpd,UNKNOWN,/** This configuration directive takes 3 arguments */,undetermined
15738,httpd,UNKNOWN,/** This configuration directive takes a flag (on/off) as a argument*/,undetermined
15739,httpd,UNKNOWN,/** mechanism for declaring a directive with no arguments */,undetermined
15740,httpd,UNKNOWN,/** mechanism for declaring a directive with raw argument parsing */,undetermined
15741,httpd,UNKNOWN,/** mechanism for declaring a directive with raw argument parsing */,undetermined
15742,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 1 argument */,undetermined
15743,httpd,UNKNOWN,/** mechanism for declaring a directive which takes multiple arguments */,undetermined
15744,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 2 arguments */,undetermined
15745,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 1 or 2 arguments */,undetermined
15746,httpd,UNKNOWN,/** mechanism for declaring a directive which takes multiple 2 arguments */,undetermined
15747,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 1 or 3 arguments */,undetermined
15748,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 2 or 3 arguments */,undetermined
15749,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 1 to 3 arguments */,undetermined
15750,httpd,UNKNOWN,/** mechanism for declaring a directive which takes 3 arguments */,undetermined
15751,httpd,UNKNOWN,/** mechanism for declaring a directive which takes a flag (on/off) argument */,undetermined
15752,httpd,UNKNOWN,/* AP_HAVE_DESIGNATED_INITIALIZER */,undetermined
15753,httpd,UNKNOWN,/* AP_HAVE_DESIGNATED_INITIALIZER */,undetermined
15754,httpd,UNKNOWN,"/**
 * The command record structure.  Each modules can define a table of these
 * to define the directives it will implement.
 */",undetermined
15755,httpd,UNKNOWN,/** Name of this command */,undetermined
15756,httpd,UNKNOWN,/** The function to be called when this directive is parsed */,undetermined
15757,httpd,UNKNOWN,"/** Extra data, for functions which implement multiple commands... */",undetermined
15758,httpd,UNKNOWN,/** What overrides need to be allowed to enable this command. */,undetermined
15759,httpd,UNKNOWN,/** What the command expects as arguments */,undetermined
15760,httpd,UNKNOWN,"/** 'usage' message, in case of syntax errors */",undetermined
15761,httpd,UNKNOWN,"/**
 * @defgroup ConfigDirectives Allowed locations for configuration directives.
 *
 * The allowed locations for a configuration directive are the union of
 * those indicated by each set bit in the req_override mask.
 *
 * @{
 */",undetermined
15762,httpd,UNKNOWN,/**< *.conf is not available anywhere in this override */,undetermined
15763,httpd,UNKNOWN,"/**< *.conf inside &lt;Directory&gt; or &lt;Location&gt;
                                and .htaccess when AllowOverride Limit */",undetermined
15764,httpd,UNKNOWN,"/**< *.conf anywhere
                                and .htaccess when AllowOverride Options */",undetermined
15765,httpd,UNKNOWN,"/**< *.conf anywhere
                                and .htaccess when AllowOverride FileInfo */",undetermined
15766,httpd,UNKNOWN,"/**< *.conf inside &lt;Directory&gt; or &lt;Location&gt;
                                and .htaccess when AllowOverride AuthConfig */",undetermined
15767,httpd,UNKNOWN,"/**< *.conf anywhere
                                and .htaccess when AllowOverride Indexes */",undetermined
15768,httpd,UNKNOWN,/**< bit to indicate that AllowOverride has not been set */,undetermined
15769,httpd,UNKNOWN,/**< *.conf inside &lt;Directory&gt; or &lt;Location&gt; */,undetermined
15770,httpd,UNKNOWN,/**< *.conf outside &lt;Directory&gt; or &lt;Location&gt; */,undetermined
15771,httpd,UNKNOWN,"/**< force directive to execute a command
                which would modify the configuration (like including another
                file, or IFModule */",undetermined
15772,httpd,UNKNOWN,"/* Flags to determine whether syntax errors in .htaccess should be
 * treated as nonfatal (log and ignore errors)
 */",undetermined
15773,httpd,UNKNOWN,/* Violation of AllowOverride rule */,undetermined
15774,httpd,UNKNOWN,/* Unrecognised directive */,undetermined
15775,httpd,UNKNOWN,/** this directive can be placed anywhere */,undetermined
15776,httpd,UNKNOWN,/** @} */,undetermined
15777,httpd,UNKNOWN,"/**
 * This can be returned by a function if they don't wish to handle
 * a command. Make it something not likely someone will actually use
 * as an error code.
 */",undetermined
15778,httpd,UNKNOWN,/** Common structure for reading of config files / passwd files etc. */,undetermined
15779,httpd,UNKNOWN,/**< an apr_file_getc()-like function */,undetermined
15780,httpd,UNKNOWN,/**< an apr_file_gets()-like function */,undetermined
15781,httpd,UNKNOWN,/**< a close handler function */,undetermined
15782,httpd,UNKNOWN,/**< the argument passed to getch/getstr/close */,undetermined
15783,httpd,UNKNOWN,/**< the filename / description */,undetermined
15784,httpd,UNKNOWN,"/**< current line number, starting at 1 */",undetermined
15785,httpd,UNKNOWN,"/**
 * This structure is passed to a command which is being invoked,
 * to carry a large variety of miscellaneous data which is all of
 * use to *somebody*...
 */",undetermined
15786,httpd,UNKNOWN,/** Argument to command from cmd_table */,undetermined
15787,httpd,UNKNOWN,/** Which allow-override bits are set */,undetermined
15788,httpd,UNKNOWN,/** Which allow-override-opts bits are set */,undetermined
15789,httpd,UNKNOWN,/** Table of directives allowed per AllowOverrideList */,undetermined
15790,httpd,UNKNOWN,/** Which methods are &lt;Limit&gt;ed */,undetermined
15791,httpd,UNKNOWN,/** methods which are limited */,undetermined
15792,httpd,UNKNOWN,/** methods which are xlimited */,undetermined
15793,httpd,UNKNOWN,/** Config file structure. */,undetermined
15794,httpd,UNKNOWN,/** the directive specifying this command */,undetermined
15795,httpd,UNKNOWN,/** Pool to allocate new storage in */,undetermined
15796,httpd,UNKNOWN,"/** Pool for scratch memory; persists during configuration, but
     *  wiped before the first request is served...  */",undetermined
15797,httpd,UNKNOWN,/** Server_rec being configured for */,undetermined
15798,httpd,UNKNOWN,"/** If configuring for a directory, pathname of that directory.
     *  NOPE!  That's what it meant previous to the existence of &lt;Files&gt;,
     * &lt;Location&gt; and regex matching.  Now the only usefulness that can be
     * derived from this field is whether a command is being called in a
     * server context (path == NULL) or being called in a dir context
     * (path != NULL).  */",undetermined
15799,httpd,UNKNOWN,/** configuration command */,undetermined
15800,httpd,UNKNOWN,/** per_dir_config vector passed to handle_command */,undetermined
15801,httpd,UNKNOWN,/** directive with syntax error */,undetermined
15802,httpd,UNKNOWN,"/**
 * Module structures.  Just about everything is dispatched through
 * these, directly or indirectly (through the command and handler
 * tables).
 */",undetermined
15803,httpd,UNKNOWN,"/** API version, *not* module version; check that module is
     * compatible with this version of the server.
     */",undetermined
15804,httpd,UNKNOWN,"/** API minor version. Provides API feature milestones. Not checked
     *  during module init */",undetermined
15805,httpd,UNKNOWN,/** Index to this modules structures in config vectors.  */,undetermined
15806,httpd,UNKNOWN,/** The name of the module's C file */,undetermined
15807,httpd,UNKNOWN,/** The handle for the DSO.  Internal use only */,undetermined
15808,httpd,UNKNOWN,"/** A pointer to the next module in the list
     *  @var module_struct *next
     */",undetermined
15809,httpd,UNKNOWN,"/** Magic Cookie to identify a module structure;  It's mainly
     *  important for the DSO facility (see also mod_so).  */",undetermined
15810,httpd,UNKNOWN,"/** Function to allow MPMs to re-write command line arguments.  This
     *  hook is only available to MPMs.
     *  @param The process that the server is running in.
     */",undetermined
15811,httpd,UNKNOWN,"/** Function to allow all modules to create per directory configuration
     *  structures.
     *  @param p The pool to use for all allocations.
     *  @param dir The directory currently being processed.
     *  @return The per-directory structure created
     */",undetermined
15812,httpd,UNKNOWN,"/** Function to allow all modules to merge the per directory configuration
     *  structures for two directories.
     *  @param p The pool to use for all allocations.
     *  @param base_conf The directory structure created for the parent directory.
     *  @param new_conf The directory structure currently being processed.
     *  @return The new per-directory structure created
     */",undetermined
15813,httpd,UNKNOWN,"/** Function to allow all modules to create per server configuration
     *  structures.
     *  @param p The pool to use for all allocations.
     *  @param s The server currently being processed.
     *  @return The per-server structure created
     */",undetermined
15814,httpd,UNKNOWN,"/** Function to allow all modules to merge the per server configuration
     *  structures for two servers.
     *  @param p The pool to use for all allocations.
     *  @param base_conf The directory structure created for the parent directory.
     *  @param new_conf The directory structure currently being processed.
     *  @return The new per-directory structure created
     */",undetermined
15815,httpd,UNKNOWN,"/** A command_rec table that describes all of the directives this module
     * defines. */",undetermined
15816,httpd,UNKNOWN,"/** A hook to allow modules to hook other points in the request processing.
     *  In this function, modules should call the ap_hook_*() functions to
     *  register an interest in a specific step in processing the current
     *  request.
     *  @param p the pool to use for all allocations
     */",undetermined
15817,httpd,UNKNOWN,"/**
 * The APLOG_USE_MODULE macro is used choose which module a file belongs to.
 * This is necessary to allow per-module loglevel configuration.
 *
 * APLOG_USE_MODULE indirectly sets APLOG_MODULE_INDEX and APLOG_MARK.
 *
 * If a module should be backward compatible with versions before 2.3.6,
 * APLOG_USE_MODULE needs to be enclosed in a ifdef APLOG_USE_MODULE block.
 *
 * @param foo name of the module symbol of the current module, without the
 *            trailing ""_module"" part
 * @see APLOG_MARK
 */",undetermined
15818,httpd,UNKNOWN,"/**
 * AP_DECLARE_MODULE is a convenience macro that combines a call of
 * APLOG_USE_MODULE with the definition of the module symbol.
 *
 * If a module should be backward compatible with versions before 2.3.6,
 * APLOG_USE_MODULE should be used explicitly instead of AP_DECLARE_MODULE.
 */",undetermined
15819,httpd,UNKNOWN,"/**
 * @defgroup ModuleInit Module structure initializers
 *
 * Initializer for the first few module slots, which are only
 * really set up once we start running.  Note that the first two slots
 * provide a version check; this should allow us to deal with changes to
 * the API. The major number should reflect changes to the API handler table
 * itself or removal of functionality. The minor number should reflect
 * additions of functionality to the existing API. (the server can detect
 * an old-format module, and either handle it back-compatibly, or at least
 * signal an error). See src/include/ap_mmn.h for MMN version history.
 * @{
 */",undetermined
15820,httpd,UNKNOWN,"/** The one used in Apache 1.3, which will deliberately cause an error */",undetermined
15821,httpd,UNKNOWN,/** Use this in all standard modules */,undetermined
15822,httpd,UNKNOWN,/* rewrite args spot */,undetermined
15823,httpd,UNKNOWN,/** Use this only in MPMs */,undetermined
15824,httpd,UNKNOWN,/** @} */,undetermined
15825,httpd,UNKNOWN,/* CONFIGURATION VECTOR FUNCTIONS */,undetermined
15826,httpd,UNKNOWN,/** configuration vector structure */,undetermined
15827,httpd,UNKNOWN,"/**
 * Generic accessors for other modules to get at their own module-specific
 * data
 * @param cv The vector in which the modules configuration is stored.
 *        usually r->per_dir_config or s->module_config
 * @param m The module to get the data for.
 * @return The module-specific data
 */",undetermined
15828,httpd,UNKNOWN,"/**
 * Generic accessors for other modules to set at their own module-specific
 * data
 * @param cv The vector in which the modules configuration is stored.
 *        usually r->per_dir_config or s->module_config
 * @param m The module to set the data for.
 * @param val The module-specific data to set
 */",undetermined
15829,httpd,UNKNOWN,/* AP_DEBUG */,undetermined
15830,httpd,UNKNOWN,"/**
 * Generic accessor for modules to get the module-specific loglevel
 * @param s The server from which to get the loglevel.
 * @param index The module_index of the module to get the loglevel for.
 * @return The module-specific loglevel
 */",undetermined
15831,httpd,UNKNOWN,"/**
 * Generic accessor for modules the module-specific loglevel
 * @param c The connection from which to get the loglevel.
 * @param index The module_index of the module to get the loglevel for.
 * @return The module-specific loglevel
 */",undetermined
15832,httpd,UNKNOWN,"/**
 * Generic accessor for modules the module-specific loglevel
 * @param c The connection from which to get the loglevel.
 * @param s The server from which to get the loglevel if c does not have a
 *          specific loglevel configuration.
 * @param index The module_index of the module to get the loglevel for.
 * @return The module-specific loglevel
 */",undetermined
15833,httpd,UNKNOWN,"/**
 * Generic accessor for modules to get the module-specific loglevel
 * @param r The request from which to get the loglevel.
 * @param index The module_index of the module to get the loglevel for.
 * @return The module-specific loglevel
 */",undetermined
15834,httpd,UNKNOWN,"/**
 * Accessor to set module-specific loglevel
 * @param p A pool
 * @param l The ap_logconf struct to modify.
 * @param index The module_index of the module to set the loglevel for.
 * @param level The new log level
 */",undetermined
15835,httpd,UNKNOWN,/* AP_DEBUG */,undetermined
15836,httpd,UNKNOWN,"/**
 * Set all module-specific loglevels to val
 * @param l The log config for which to set the loglevels.
 * @param val the value to set all loglevels to
 */",undetermined
15837,httpd,UNKNOWN,"/**
 * Generic command handling function for strings
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive
 * @return An error string or NULL on success
 */",undetermined
15838,httpd,UNKNOWN,"/**
 * Generic command handling function for integers
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive
 * @return An error string or NULL on success
 */",undetermined
15839,httpd,UNKNOWN,"/**
 * Parsing function for log level
 * @param str The string to parse
 * @param val The parsed log level
 * @return An error string or NULL on success
 */",undetermined
15840,httpd,UNKNOWN,"/**
 * Return true if the specified method is limited by being listed in
 * a &lt;Limit&gt; container, or by *not* being listed in a &lt;LimitExcept&gt;
 * container.
 *
 * @param   method  Pointer to a string specifying the method to check.
 * @param   cmd     Pointer to the cmd_parms structure passed to the
 *                  directive handler.
 * @return  0 if the method is not limited in the current scope
 */",undetermined
15841,httpd,UNKNOWN,"/**
 * Generic command handling function for strings, always sets the value
 * to a lowercase string
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive
 * @return An error string or NULL on success
 */",undetermined
15842,httpd,UNKNOWN,"/**
 * Generic command handling function for flags stored in an int
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive (either 1 or 0)
 * @return An error string or NULL on success
 */",undetermined
15843,httpd,UNKNOWN,"/**
 * Generic command handling function for flags stored in a char
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive (either 1 or 0)
 * @return An error string or NULL on success
 */",undetermined
15844,httpd,UNKNOWN,"/**
 * Generic command handling function for files
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive
 * @return An error string or NULL on success
 */",undetermined
15845,httpd,UNKNOWN,"/**
 * Generic command handling function to respond with cmd->help as an error
 * @param cmd The command parameters for this directive
 * @param struct_ptr pointer into a given type
 * @param arg The argument to the directive
 * @return The cmd->help value as the error string
 * @note This allows simple declarations such as:
 * @code
 *     AP_INIT_RAW_ARGS(""Foo"", ap_set_deprecated, NULL, OR_ALL,
 *         ""The Foo directive is no longer supported, use Bar""),
 * @endcode
 */",undetermined
15846,httpd,UNKNOWN,"/**
 * For modules which need to read config files, open logs, etc. this returns
 * the canonical form of fname made absolute to ap_server_root.
 * @param p pool to allocate data from
 * @param fname The file name
 */",undetermined
15847,httpd,UNKNOWN,"/**
 * Compute the name of a run-time file (e.g., shared memory ""file"") relative
 * to the appropriate run-time directory.  Absolute paths are returned as-is.
 * The run-time directory is configured via the DefaultRuntimeDir directive or
 * at build time.
 */",undetermined
15848,httpd,UNKNOWN,"/* Finally, the hook for dynamically loading modules in... */",undetermined
15849,httpd,UNKNOWN,"/**
 * Add a module to the server
 * @param m The module structure of the module to add
 * @param p The pool of the same lifetime as the module
 * @param s The module's symbol name (used for logging)
 */",undetermined
15850,httpd,UNKNOWN,"/**
 * Remove a module from the server.  There are some caveats:
 * when the module is removed, its slot is lost so all the current
 * per-dir and per-server configurations are invalid. So we should
 * only ever call this function when you are invalidating almost
 * all our current data. I.e. when doing a restart.
 * @param m the module structure of the module to remove
 */",undetermined
15851,httpd,UNKNOWN,"/**
 * Add a module to the chained modules list and the list of loaded modules
 * @param mod The module structure of the module to add
 * @param p The pool with the same lifetime as the module
 * @param s The module's symbol name (used for logging)
 */",undetermined
15852,httpd,UNKNOWN,"/**
 * Remove a module fromthe chained modules list and the list of loaded modules
 * @param mod the module structure of the module to remove
 */",undetermined
15853,httpd,UNKNOWN,"/**
 * Find the name of the specified module
 * @param m The module to get the name for
 * @return the name of the module
 */",undetermined
15854,httpd,UNKNOWN,"/**
 * Find the short name of the module identified by the specified module index
 * @param module_index The module index to get the name for
 * @return the name of the module, NULL if not found
 */",undetermined
15855,httpd,UNKNOWN,"/**
 * Find a module based on the name of the module
 * @param name the name of the module
 * @return the module structure if found, NULL otherwise
 */",undetermined
15856,httpd,UNKNOWN,"/**
 * Open a ap_configfile_t as apr_file_t
 * @param ret_cfg open ap_configfile_t struct pointer
 * @param p The pool to allocate the structure from
 * @param name the name of the file to open
 */",undetermined
15857,httpd,UNKNOWN,"/**
 * Allocate a ap_configfile_t handle with user defined functions and params
 * @param p The pool to allocate from
 * @param descr The name of the file
 * @param param The argument passed to getch/getstr/close
 * @param getc_func The getch function
 * @param gets_func The getstr function
 * @param close_func The close function
 */",undetermined
15858,httpd,UNKNOWN,"/**
 * Read one line from open ap_configfile_t, strip leading and trailing
 * whitespace, increase line number
 * @param buf place to store the line read
 * @param bufsize size of the buffer
 * @param cfp File to read from
 * @return error status, APR_ENOSPC if bufsize is too small for the line
 */",undetermined
15859,httpd,UNKNOWN,"/**
 * Read one char from open configfile_t, increase line number upon LF
 * @param ch place to store the char read
 * @param cfp The file to read from
 * @return error status
 */",undetermined
15860,httpd,UNKNOWN,"/**
 * Detach from open ap_configfile_t, calling the close handler
 * @param cfp The file to close
 * @return 1 on sucess, 0 on failure
 */",undetermined
15861,httpd,UNKNOWN,"/**
 * Convert a return value from ap_cfg_getline or ap_cfg_getc to a user friendly
 * string.
 * @param p The pool to allocate the string from
 * @param cfp The config file
 * @param rc The return value to convert
 * @return The error string, NULL if rc == APR_SUCCESS
 */",undetermined
15862,httpd,UNKNOWN,"/**
 * Read all data between the current &lt;foo&gt; and the matching &lt;/foo&gt;.  All
 * of this data is forgotten immediately.
 * @param cmd The cmd_parms to pass to the directives inside the container
 * @param directive The directive name to read until
 * @return Error string on failure, NULL on success
 * @note If cmd->pool == cmd->temp_pool, ap_soak_end_container() will assume
 *       .htaccess context and use a lower maximum line length.
 */",undetermined
15863,httpd,UNKNOWN,"/**
 * Read all data between the current &lt;foo&gt; and the matching &lt;/foo&gt; and build
 * a config tree from it
 * @param p pool to allocate from
 * @param temp_pool Temporary pool to allocate from
 * @param parms The cmd_parms to pass to all directives read
 * @param current The current node in the tree
 * @param curr_parent The current parent node
 * @param orig_directive The directive to read until hit.
 * @return Error string on failure, NULL on success
 * @note If p == temp_pool, ap_build_cont_config() will assume .htaccess
 *       context and use a lower maximum line length.
*/",undetermined
15864,httpd,UNKNOWN,"/**
 * Build a config tree from a config file
 * @param parms The cmd_parms to pass to all of the directives in the file
 * @param conf_pool The pconf pool
 * @param temp_pool The temporary pool
 * @param conftree Place to store the root node of the config tree
 * @return Error string on erro, NULL otherwise
 * @note If conf_pool == temp_pool, ap_build_config() will assume .htaccess
 *       context and use a lower maximum line length.
 */",undetermined
15865,httpd,UNKNOWN,"/**
 * Walk a config tree and setup the server's internal structures
 * @param conftree The config tree to walk
 * @param parms The cmd_parms to pass to all functions
 * @param section_vector The per-section config vector.
 * @return Error string on error, NULL otherwise
 */",undetermined
15866,httpd,UNKNOWN,"/**
 * @defgroup ap_check_cmd_context Check command context
 * @{
 */",undetermined
15867,httpd,UNKNOWN,"/**
 * Check the context a command is used in.
 * @param cmd The command to check
 * @param forbidden Where the command is forbidden.
 * @return Error string on error, NULL on success
 */",undetermined
15868,httpd,UNKNOWN,/**< Forbidden in &lt;VirtualHost&gt; */,undetermined
15869,httpd,UNKNOWN,/**< Forbidden in &lt;Limit&gt; */,undetermined
15870,httpd,UNKNOWN,/**< Forbidden in &lt;Directory&gt; */,undetermined
15871,httpd,UNKNOWN,/**< Forbidden in &lt;Location&gt; */,undetermined
15872,httpd,UNKNOWN,/**< Forbidden in &lt;Files&gt; or &lt;If&gt;*/,undetermined
15873,httpd,UNKNOWN,/**< Forbidden in .htaccess files */,undetermined
15874,httpd,UNKNOWN,/** Forbidden in &lt;Directory&gt;/&lt;Location&gt;/&lt;Files&gt;&lt;If&gt;*/,undetermined
15875,httpd,UNKNOWN,/** Forbidden in &lt;VirtualHost&gt;/&lt;Limit&gt;/&lt;Directory&gt;/&lt;Location&gt;/&lt;Files&gt;/&lt;If&gt; */,undetermined
15876,httpd,UNKNOWN,/** @} */,undetermined
15877,httpd,UNKNOWN,"/**
 * @brief This structure is used to assign symbol names to module pointers
 */",undetermined
15878,httpd,UNKNOWN,"/**
 * The topmost module in the list
 * @var module *ap_top_module
 */",undetermined
15879,httpd,UNKNOWN,"/**
 * Array of all statically linked modules
 * @var module *ap_prelinked_modules[]
 */",undetermined
15880,httpd,UNKNOWN,"/**
 * Array of all statically linked modulenames (symbols)
 * @var ap_module_symbol_t ap_prelinked_module_symbols[]
 */",undetermined
15881,httpd,UNKNOWN,"/**
 * Array of all preloaded modules
 * @var module *ap_preloaded_modules[]
 */",undetermined
15882,httpd,UNKNOWN,"/**
 * Array of all loaded modules
 * @var module **ap_loaded_modules
 */",undetermined
15883,httpd,UNKNOWN,/* For mod_so.c... */,undetermined
15884,httpd,UNKNOWN,"/** Run a single module's two create_config hooks
 *  @param p the pool to allocate from
 *  @param s The server to configure for.
 *  @param m The module to configure
 */",undetermined
15885,httpd,UNKNOWN,/* For http_main.c... */,undetermined
15886,httpd,UNKNOWN,"/**
 * Add all of the prelinked modules into the loaded module list
 * @param process The process that is currently running the server
 */",undetermined
15887,httpd,UNKNOWN,"/**
 * Show the preloaded configuration directives, the help string explaining
 * the directive arguments, in what module they are handled, and in
 * what parts of the configuration they are allowed.  Used for httpd -h.
 */",undetermined
15888,httpd,UNKNOWN,"/**
 * Show the preloaded module names.  Used for httpd -l.
 */",undetermined
15889,httpd,UNKNOWN,"/**
 * Show the MPM name.  Used in reporting modules such as mod_info to
 * provide extra information to the user
 */",undetermined
15890,httpd,UNKNOWN,"/**
 * Read all config files and setup the server
 * @param process The process running the server
 * @param temp_pool A pool to allocate temporary data from.
 * @param config_name The name of the config file
 * @param conftree Place to store the root of the config tree
 * @return The setup server_rec list.
 */",undetermined
15891,httpd,UNKNOWN,"/**
 * Run all rewrite args hooks for loaded modules
 * @param process The process currently running the server
 */",undetermined
15892,httpd,UNKNOWN,"/**
 * Run the register hooks function for a specified module
 * @param m The module to run the register hooks function fo
 * @param p The pool valid for the lifetime of the module
 */",undetermined
15893,httpd,UNKNOWN,"/**
 * Setup all virtual hosts
 * @param p The pool to allocate from
 * @param main_server The head of the server_rec list
 */",undetermined
15894,httpd,UNKNOWN,"/**
 * Reserve some modules slots for modules loaded by other means than
 * EXEC_ON_READ directives.
 * Relevant modules should call this in the pre_config stage.
 * @param count The number of slots to reserve.
 */",undetermined
15895,httpd,UNKNOWN,"/**
 * Reserve some modules slots for modules loaded by a specific
 * non-EXEC_ON_READ config directive.
 * This counts how often the given directive is used in the config and calls
 * ap_reserve_module_slots() accordingly.
 * @param directive The name of the directive
 */",undetermined
15896,httpd,UNKNOWN,/* For http_request.c... */,undetermined
15897,httpd,UNKNOWN,"/**
 * Setup the config vector for a request_rec
 * @param p The pool to allocate the config vector from
 * @return The config vector
 */",undetermined
15898,httpd,UNKNOWN,"/**
 * Setup the config vector for per dir module configs
 * @param p The pool to allocate the config vector from
 * @return The config vector
 */",undetermined
15899,httpd,UNKNOWN,"/**
 * Run all of the modules merge per dir config functions
 * @param p The pool to pass to the merge functions
 * @param base The base directory config structure
 * @param new_conf The new directory config structure
 */",undetermined
15900,httpd,UNKNOWN,"/**
 * Allocate new ap_logconf and make (deep) copy of old ap_logconf
 * @param p The pool to alloc from
 * @param old The ap_logconf to copy (may be NULL)
 * @return The new ap_logconf struct
 */",undetermined
15901,httpd,UNKNOWN,"/**
 * Merge old ap_logconf into new ap_logconf.
 * old and new must have the same life time.
 * @param old_conf The ap_logconf to merge from
 * @param new_conf The ap_logconf to merge into
 */",undetermined
15902,httpd,UNKNOWN,/* For http_connection.c... */,undetermined
15903,httpd,UNKNOWN,"/**
 * Setup the config vector for a connection_rec
 * @param p The pool to allocate the config vector from
 * @return The config vector
 */",undetermined
15904,httpd,UNKNOWN,/* For http_core.c... (&lt;Directory&gt; command and virtual hosts) */,undetermined
15905,httpd,UNKNOWN,"/**
 * parse an htaccess file
 * @param result htaccess_result
 * @param r The request currently being served
 * @param override Which overrides are active
 * @param override_opts Which allow-override-opts bits are set
 * @param override_list Table of directives allowed for override
 * @param path The path to the htaccess file
 * @param access_name The list of possible names for .htaccess files
 * int The status of the current request
 */",undetermined
15906,httpd,UNKNOWN,"/**
 * Setup a virtual host
 * @param p The pool to allocate all memory from
 * @param hostname The hostname of the virtual hsot
 * @param main_server The main server for this Apache configuration
 * @param ps Place to store the new server_rec
 * return Error string on error, NULL on success
 */",undetermined
15907,httpd,UNKNOWN,"/**
 * Process a config file for Apache
 * @param s The server rec to use for the command parms
 * @param fname The name of the config file
 * @param conftree The root node of the created config tree
 * @param p Pool for general allocation
 * @param ptemp Pool for temporary allocation
 */",undetermined
15908,httpd,UNKNOWN,"/**
 * Process all matching files as Apache configs
 * @param s The server rec to use for the command parms
 * @param fname The filename pattern of the config file
 * @param conftree The root node of the created config tree
 * @param p Pool for general allocation
 * @param ptemp Pool for temporary allocation
 * @param optional Whether a no-match wildcard is allowed
 * @see apr_fnmatch for pattern handling
 */",undetermined
15909,httpd,UNKNOWN,"/**
 * Process all directives in the config tree
 * @param s The server rec to use in the command parms
 * @param conftree The config tree to process
 * @param p The pool for general allocation
 * @param ptemp The pool for temporary allocations
 * @return OK if no problems
 */",undetermined
15910,httpd,UNKNOWN,"/**
 * Store data which will be retained across unload/load of modules
 * @param key The unique key associated with this module's retained data
 * @param size in bytes of the retained data (to be allocated)
 * @return Address of new retained data structure, initially cleared
 */",undetermined
15911,httpd,UNKNOWN,"/**
 * Retrieve data which was stored by ap_retained_data_create()
 * @param key The unique key associated with this module's retained data
 * @return Address of previously retained data structure, or NULL if not yet saved
 */",undetermined
15912,httpd,UNKNOWN,"/* Module-method dispatchers, also for http_request.c */",undetermined
15913,httpd,UNKNOWN,"/**
 * Run the handler phase of each module until a module accepts the
 * responsibility of serving the request
 * @param r The current request
 * @return The status of the current request
 */",undetermined
15914,httpd,UNKNOWN,/* for mod_perl */,undetermined
15915,httpd,UNKNOWN,"/**
 * Find a given directive in a command_rec table
 * @param name The directive to search for
 * @param cmds The table to search
 * @return The directive definition of the specified directive
 */",undetermined
15916,httpd,UNKNOWN,"/**
 * Find a given directive in a list of modules.
 * @param cmd_name The directive to search for
 * @param mod Pointer to the first module in the linked list; will be set to
 *            the module providing cmd_name
 * @return The directive definition of the specified directive.
 *         *mod will be changed to point to the module containing the
 *         directive.
 */",undetermined
15917,httpd,UNKNOWN,"/**
 * Ask a module to create per-server and per-section (dir/loc/file) configs
 * (if it hasn't happened already). The results are stored in the server's
 * config, and the specified per-section config vector.
 * @param server The server to operate upon.
 * @param section_vector The per-section config vector.
 * @param section Which section to create a config for.
 * @param mod The module which is defining the config data.
 * @param pconf A pool for all configuration allocations.
 * @return The (new) per-section config data.
 */",undetermined
15918,httpd,UNKNOWN,/* Hooks */,undetermined
15919,httpd,UNKNOWN,"/**
 * Run the header parser functions for each module
 * @param r The current request
 * @return OK or DECLINED
 */",undetermined
15920,httpd,UNKNOWN,"/**
 * Run the pre_config function for each module
 * @param pconf The config pool
 * @param plog The logging streams pool
 * @param ptemp The temporary pool
 * @return OK or DECLINED on success anything else is a error
 */",undetermined
15921,httpd,UNKNOWN,"/**
 * Run the check_config function for each module
 * @param pconf The config pool
 * @param plog The logging streams pool
 * @param ptemp The temporary pool
 * @param s the server to operate upon
 * @return OK or DECLINED on success anything else is a error
 */",undetermined
15922,httpd,UNKNOWN,"/**
 * Run the test_config function for each module; this hook is run
 * only if the server was invoked to test the configuration syntax.
 * @param pconf The config pool
 * @param s The list of server_recs
 * @note To avoid reordering problems due to different buffering, hook
 *       functions should only apr_file_*() to print to stdout/stderr and
 *       not simple printf()/fprintf().
 *     
 */",undetermined
15923,httpd,UNKNOWN,"/**
 * Run the post_config function for each module
 * @param pconf The config pool
 * @param plog The logging streams pool
 * @param ptemp The temporary pool
 * @param s The list of server_recs
 * @return OK or DECLINED on success anything else is a error
 */",undetermined
15924,httpd,UNKNOWN,"/**
 * Run the open_logs functions for each module
 * @param pconf The config pool
 * @param plog The logging streams pool
 * @param ptemp The temporary pool
 * @param s The list of server_recs
 * @return OK or DECLINED on success anything else is a error
 */",undetermined
15925,httpd,UNKNOWN,"/**
 * Run the child_init functions for each module
 * @param pchild The child pool
 * @param s The list of server_recs in this server
 */",undetermined
15926,httpd,UNKNOWN,"/**
 * Run the handler functions for each module
 * @param r The request_rec
 * @remark non-wildcard handlers should HOOK_MIDDLE, wildcard HOOK_LAST
 */",undetermined
15927,httpd,UNKNOWN,"/**
 * Run the quick handler functions for each module. The quick_handler
 * is run before any other requests hooks are called (location_walk,
 * directory_walk, access checking, et. al.). This hook was added
 * to provide a quick way to serve content from a URI keyed cache.
 *
 * @param r The request_rec
 * @param lookup_uri Controls whether the caller actually wants content or not.
 * lookup is set when the quick_handler is called out of
 * ap_sub_req_lookup_uri()
 */",undetermined
15928,httpd,UNKNOWN,"/**
 * Retrieve the optional functions for each module.
 * This is run immediately before the server starts. Optional functions should
 * be registered during the hook registration phase.
 */",undetermined
15929,httpd,UNKNOWN,"/**
 * A generic pool cleanup that will reset a pointer to NULL. For use with
 * apr_pool_cleanup_register.
 * @param data The address of the pointer
 * @return APR_SUCCESS
 */",undetermined
15930,httpd,UNKNOWN,/* !APACHE_HTTP_CONFIG_H */,undetermined
15931,httpd,UNKNOWN,/** @} */,undetermined
15932,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15933,httpd,UNKNOWN,"/**
 * @file  http_connection.h
 * @brief Apache connection library
 *
 * @defgroup APACHE_CORE_CONNECTION Connection Library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15934,httpd,UNKNOWN,"/**
 * @file  http_connection.h
 * @brief Apache connection library
 */",undetermined
15935,httpd,UNKNOWN,"/**
 * This is the protocol module driver.  This calls all of the
 * pre-connection and connection hooks for all protocol modules.
 * @param c The connection on which the request is read
 * @param csd The mechanism on which this connection is to be read.
 *            Most times this will be a socket, but it is up to the module
 *            that accepts the request to determine the exact type.
 */",undetermined
15936,httpd,UNKNOWN,"/**
 * Flushes all remain data in the client send buffer
 * @param c The connection to flush
 */",undetermined
15937,httpd,UNKNOWN,"/**
 * This function is responsible for the following cases:
 * <pre>
 * we now proceed to read from the client until we get EOF, or until
 * MAX_SECS_TO_LINGER has passed.  the reasons for doing this are
 * documented in a draft:
 *
 * http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-connection-00.txt
 *
 * in a nutshell -- if we don't make this effort we risk causing
 * TCP RST packets to be sent which can tear down a connection before
 * all the response data has been sent to the client.
 * </pre>
 * @param c The connection we are closing
 */",undetermined
15938,httpd,UNKNOWN,/* Hooks */,undetermined
15939,httpd,UNKNOWN,"/**
 * create_connection is a RUN_FIRST hook which allows modules to create
 * connections. In general, you should not install filters with the
 * create_connection hook. If you require vhost configuration information
 * to make filter installation decisions, you must use the pre_connection
 * or install_network_transport hook. This hook should close the connection
 * if it encounters a fatal error condition.
 *
 * @param p The pool from which to allocate the connection record
 * @param server The server record to create the connection too.
 * @param csd The socket that has been accepted
 * @param conn_id A unique identifier for this connection.  The ID only
 *                needs to be unique at that time, not forever.
 * @param sbh A handle to scoreboard information for this connection.
 * @param alloc The bucket allocator to use for all bucket/brigade creations
 * @return An allocated connection record or NULL.
 */",undetermined
15940,httpd,UNKNOWN,"/**
 * This hook gives protocol modules an opportunity to set everything up
 * before calling the protocol handler.  All pre-connection hooks are
 * run until one returns something other than ok or decline
 * @param c The connection on which the request has been received.
 * @param csd The mechanism on which this connection is to be read.
 *            Most times this will be a socket, but it is up to the module
 *            that accepts the request to determine the exact type.
 * @return OK or DECLINED
 */",undetermined
15941,httpd,UNKNOWN,"/**
 * This hook implements different protocols.  After a connection has been
 * established, the protocol module must read and serve the request.  This
 * function does that for each protocol module.  The first protocol module
 * to handle the request is the last module run.
 * @param c The connection on which the request has been received.
 * @return OK or DECLINED
 */",undetermined
15942,httpd,UNKNOWN,/** End Of Connection (EOC) bucket */,undetermined
15943,httpd,UNKNOWN,"/**
 * Determine if a bucket is an End Of Connection (EOC) bucket
 * @param e The bucket to inspect
 * @return true or false
 */",undetermined
15944,httpd,UNKNOWN,"/**
 * Make the bucket passed in an End Of Connection (EOC) bucket
 * @param b The bucket to make into an EOC bucket
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
15945,httpd,UNKNOWN,"/**
 * Create a bucket referring to an End Of Connection (EOC). This indicates
 * that the connection will be closed.
 * @param list The freelist from which this bucket should be allocated
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
15946,httpd,UNKNOWN,/* !APACHE_HTTP_REQUEST_H */,undetermined
15947,httpd,UNKNOWN,/** @} */,undetermined
15948,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
15949,httpd,UNKNOWN,"/**
 * @file  http_core.h
 * @brief CORE HTTP Daemon
 *
 * @defgroup APACHE_CORE_HTTPD Core HTTP Daemon
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
15950,httpd,UNKNOWN,"/* ****************************************************************
 *
 * The most basic server code is encapsulated in a single module
 * known as the core, which is just *barely* functional enough to
 * serve documents, though not terribly well.
 *
 * Largely for NCSA back-compatibility reasons, the core needs to
 * make pieces of its config structures available to other modules.
 * The accessors are declared here, along with the interpretation
 * of one of them (allow_options).
 */",undetermined
15951,httpd,UNKNOWN,"/**
 * @defgroup APACHE_CORE_HTTPD_ACESSORS Acessors
 *
 * @brief File/Directory Accessor directives
 *
 * @{
 */",undetermined
15952,httpd,UNKNOWN,/** No directives */,undetermined
15953,httpd,UNKNOWN,/** Indexes directive */,undetermined
15954,httpd,UNKNOWN,/** SSI is enabled without exec= permission  */,undetermined
15955,httpd,UNKNOWN,/**  FollowSymLinks directive */,undetermined
15956,httpd,UNKNOWN,/**  ExecCGI directive */,undetermined
15957,httpd,UNKNOWN,/**  directive unset */,undetermined
15958,httpd,UNKNOWN,"/**  SSI exec= permission is permitted, iff OPT_INCLUDES is also set */",undetermined
15959,httpd,UNKNOWN,/** SymLinksIfOwnerMatch directive */,undetermined
15960,httpd,UNKNOWN,/** MultiViews directive */,undetermined
15961,httpd,UNKNOWN,/**  All directives */,undetermined
15962,httpd,UNKNOWN,/** @} */,undetermined
15963,httpd,UNKNOWN,"/**
 * @defgroup get_remote_host Remote Host Resolution
 * @ingroup APACHE_CORE_HTTPD
 * @{
 */",undetermined
15964,httpd,UNKNOWN,"/** REMOTE_HOST returns the hostname, or NULL if the hostname
 * lookup fails.  It will force a DNS lookup according to the
 * HostnameLookups setting.
 */",undetermined
15965,httpd,UNKNOWN,"/** REMOTE_NAME returns the hostname, or the dotted quad if the
 * hostname lookup fails.  It will force a DNS lookup according
 * to the HostnameLookups setting.
 */",undetermined
15966,httpd,UNKNOWN,"/** REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is
 * never forced.
 */",undetermined
15967,httpd,UNKNOWN,"/** REMOTE_DOUBLE_REV will always force a DNS lookup, and also force
 * a double reverse lookup, regardless of the HostnameLookups
 * setting.  The result is the (double reverse checked) hostname,
 * or NULL if any of the lookups fail.
 */",undetermined
15968,httpd,UNKNOWN,/** @} // get_remote_host */,undetermined
15969,httpd,UNKNOWN,/** all of the requirements must be met */,undetermined
15970,httpd,UNKNOWN,/**  any of the requirements must be met */,undetermined
15971,httpd,UNKNOWN,/** There are no applicable satisfy lines */,undetermined
15972,httpd,UNKNOWN,"/** Make sure we don't write less than 8000 bytes at any one time.
 */",undetermined
15973,httpd,UNKNOWN,/** default maximum of internal redirects */,undetermined
15974,httpd,UNKNOWN,/** default maximum subrequest nesting level */,undetermined
15975,httpd,UNKNOWN,"/**
 * Retrieve the value of Options for this request
 * @param r The current request
 * @return the Options bitmask
 */",undetermined
15976,httpd,UNKNOWN,"/**
 * Retrieve the value of the AllowOverride for this request
 * @param r The current request
 * @return the overrides bitmask
 */",undetermined
15977,httpd,UNKNOWN,"/**
 * Retrieve the document root for this server
 * @param r The current request
 * @warning Don't use this!  If your request went through a Userdir, or
 * something like that, it'll screw you.  But it's back-compatible...
 * @return The document root
 */",undetermined
15978,httpd,UNKNOWN,"/**
 * Lookup the remote client's DNS name or IP address
 * @ingroup get_remote_host
 * @param conn The current connection
 * @param dir_config The directory config vector from the request
 * @param type The type of lookup to perform.  One of:
 * <pre>
 *     REMOTE_HOST returns the hostname, or NULL if the hostname
 *                 lookup fails.  It will force a DNS lookup according to the
 *                 HostnameLookups setting.
 *     REMOTE_NAME returns the hostname, or the dotted quad if the
 *                 hostname lookup fails.  It will force a DNS lookup according
 *                 to the HostnameLookups setting.
 *     REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is
 *                     never forced.
 *     REMOTE_DOUBLE_REV will always force a DNS lookup, and also force
 *                   a double reverse lookup, regardless of the HostnameLookups
 *                   setting.  The result is the (double reverse checked)
 *                   hostname, or NULL if any of the lookups fail.
 * </pre>
 * @param str_is_ip unless NULL is passed, this will be set to non-zero on output when an IP address
 *        string is returned
 * @return The remote hostname
 */",undetermined
15979,httpd,UNKNOWN,"/**
 * Retrieve the login name of the remote user.  Undef if it could not be
 * determined
 * @param r The current request
 * @return The user logged in to the client machine
 */",undetermined
15980,httpd,UNKNOWN,"/* Used for constructing self-referencing URLs, and things like SERVER_PORT,
 * and SERVER_NAME.
 */",undetermined
15981,httpd,UNKNOWN,"/**
 * build a fully qualified URL from the uri and information in the request rec
 * @param p The pool to allocate the URL from
 * @param uri The path to the requested file
 * @param r The current request
 * @return A fully qualified URL
 */",undetermined
15982,httpd,UNKNOWN,"/**
 * Get the current server name from the request
 * @param r The current request
 * @return the server name
 */",undetermined
15983,httpd,UNKNOWN,"/**
 * Get the current server name from the request for the purposes
 * of using in a URL.  If the server name is an IPv6 literal
 * address, it will be returned in URL format (e.g., ""[fe80::1]"").
 * @param r The current request
 * @return the server name
 */",undetermined
15984,httpd,UNKNOWN,"/**
 * Get the current server port
 * @param r The current request
 * @return The server's port
 */",undetermined
15985,httpd,UNKNOWN,"/**
 * Return the limit on bytes in request msg body
 * @param r The current request
 * @return the maximum number of bytes in the request msg body
 */",undetermined
15986,httpd,UNKNOWN,"/**
 * Return the limit on bytes in XML request msg body
 * @param r The current request
 * @return the maximum number of bytes in XML request msg body
 */",undetermined
15987,httpd,UNKNOWN,"/**
 * Install a custom response handler for a given status
 * @param r The current request
 * @param status The status for which the custom response should be used
 * @param string The custom response.  This can be a static string, a file
 *               or a URL
 */",undetermined
15988,httpd,UNKNOWN,"/**
 * Check if the current request is beyond the configured max. number of redirects or subrequests
 * @param r The current request
 * @return true (is exceeded) or false
 */",undetermined
15989,httpd,UNKNOWN,"/**
 * Check for a definition from the server command line
 * @param name The define to check for
 * @return 1 if defined, 0 otherwise
 */",undetermined
15990,httpd,UNKNOWN,/* FIXME! See STATUS about how */,undetermined
15991,httpd,UNKNOWN,"/* Authentication stuff.  This is one of the places where compatibility
 * with the old config files *really* hurts; they don't discriminate at
 * all between different authentication schemes, meaning that we need
 * to maintain common state for all of them in the core, and make it
 * available to the other modules through interfaces.
 */",undetermined
15992,httpd,UNKNOWN,/** @see require_line */,undetermined
15993,httpd,UNKNOWN,"/**
 * @brief A structure to keep track of authorization requirements
*/",undetermined
15994,httpd,UNKNOWN,/** Where the require line is in the config file. */,undetermined
15995,httpd,UNKNOWN,/** The complete string from the command line */,undetermined
15996,httpd,UNKNOWN,"/**
 * Return the type of authorization required for this request
 * @param r The current request
 * @return The authorization required
 */",undetermined
15997,httpd,UNKNOWN,"/**
 * Return the current Authorization realm
 * @param r The current request
 * @return The current authorization realm
 */",undetermined
15998,httpd,UNKNOWN,"/**
 * How the requires lines must be met.
 * @param r The current request
 * @return How the requirements must be met.  One of:
 * <pre>
 *      SATISFY_ANY    -- any of the requirements must be met.
 *      SATISFY_ALL    -- all of the requirements must be met.
 *      SATISFY_NOSPEC -- There are no applicable satisfy lines
 * </pre>
 */",undetermined
15999,httpd,UNKNOWN,"/**
 * Core is also unlike other modules in being implemented in more than
 * one file... so, data structures are declared here, even though most of
 * the code that cares really is in http_core.c.  Also, another accessor.
 */",undetermined
16000,httpd,UNKNOWN,"/**
 * Accessor for core_module's specific data. Equivalent to
 * ap_get_module_config(cv, &core_module) but more efficient.
 * @param cv The vector in which the modules configuration is stored.
 *        usually r->per_dir_config or s->module_config
 * @return The module-specific data
 */",undetermined
16001,httpd,UNKNOWN,"/**
 * Accessor to set core_module's specific data. Equivalent to
 * ap_set_module_config(cv, &core_module, val) but more efficient.
 * @param cv The vector in which the modules configuration is stored.
 *        usually r->per_dir_config or s->module_config
 * @param val The module-specific data to set
 */",undetermined
16002,httpd,UNKNOWN,"/** Get the socket from the core network filter. This should be used instead of
 * accessing the core connection config directly.
 * @param c The connection record
 * @return The socket
 */",undetermined
16003,httpd,UNKNOWN,"/**
 * @brief  Per-request configuration
*/",undetermined
16004,httpd,UNKNOWN,"/** bucket brigade used by getline for look-ahead and
     * ap_get_client_block for holding left-over request body */",undetermined
16005,httpd,UNKNOWN,"/** an array of per-request working data elements, accessed
     * by ID using ap_get_request_note()
     * (Use ap_register_request_note() during initialization
     * to add elements)
     */",undetermined
16006,httpd,UNKNOWN,"/** Custom response strings registered via ap_custom_response(),
     * or NULL; check per-dir config if nothing found here
     */",undetermined
16007,httpd,UNKNOWN,"/* from ap_custom_response(), not from
                                   * ErrorDocument
                                   */",undetermined
16008,httpd,UNKNOWN,"/** per-request document root of the server. This allows mass vhosting
     * modules better compatibility with some scripts. Normally the
     * context_* info should be used instead */",undetermined
16009,httpd,UNKNOWN,"/*
     * more fine-grained context information which is set by modules like
     * mod_alias and mod_userdir
     */",undetermined
16010,httpd,UNKNOWN,"/** the context root directory on disk for the current resource,
     *  without trailing slash
     */",undetermined
16011,httpd,UNKNOWN,"/** the URI prefix that corresponds to the context_document_root directory,
     *  without trailing slash
     */",undetermined
16012,httpd,UNKNOWN,"/** There is a script processor installed on the output filter chain,
     * so it needs the default_handler to deliver a (script) file into
     * the chain so it can process it. Normally, default_handler only
     * serves files on a GET request (assuming the file is actual content),
     * since other methods are not content-retrieval. This flag overrides
     * that behavior, stating that the ""content"" is actually a script and
     * won't actually be delivered as the response for the non-GET method.
     */",undetermined
16013,httpd,UNKNOWN,"/** Should addition of charset= be suppressed for this request?
     */",undetermined
16014,httpd,UNKNOWN,"/* Standard entries that are guaranteed to be accessible via
 * ap_get_request_note() for each request (additional entries
 * can be added with ap_register_request_note())
 */",undetermined
16015,httpd,UNKNOWN,"/**
 * Reserve an element in the core_request_config->notes array
 * for some application-specific data
 * @return An integer key that can be passed to ap_get_request_note()
 *         during request processing to access this element for the
 *         current request.
 */",undetermined
16016,httpd,UNKNOWN,"/**
 * Retrieve a pointer to an element in the core_request_config->notes array
 * @param r The request
 * @param note_num  A key for the element: either a value obtained from
 *        ap_register_request_note() or one of the predefined AP_NOTE_*
 *        values.
 * @return NULL if the note_num is invalid, otherwise a pointer to the
 *         requested note element.
 * @remark At the start of a request, each note element is NULL.  The
 *         handle provided by ap_get_request_note() is a pointer-to-pointer
 *         so that the caller can point the element to some app-specific
 *         data structure.  The caller should guarantee that any such
 *         structure will last as long as the request itself.
 */",undetermined
16017,httpd,UNKNOWN,"/*
 * Bits of info that go into making an ETag for a file
 * document.  Why a long?  Because char historically
 * proved too short for Options, and int can be different
 * sizes on different platforms.
 */",undetermined
16018,httpd,UNKNOWN,/* This is the default value used */,undetermined
16019,httpd,UNKNOWN,"/**
 * @brief Server Signature Enumeration
 */",undetermined
16020,httpd,UNKNOWN,"/**
 * @brief Per-directory configuration
 */",undetermined
16021,httpd,UNKNOWN,/** path of the directory/regex/etc. see also d_is_fnmatch/absolute below */,undetermined
16022,httpd,UNKNOWN,/** the number of slashes in d */,undetermined
16023,httpd,UNKNOWN,"/** If (opts & OPT_UNSET) then no absolute assignment to options has
     * been made.
     * invariant: (opts_add & opts_remove) == 0
     * Which said another way means that the last relative (options + or -)
     * assignment made to each bit is recorded in exactly one of opts_add
     * or opts_remove.
     */",undetermined
16024,httpd,UNKNOWN,"/* Custom response config. These can contain text or a URL to redirect to.
     * if response_code_strings is NULL then there are none in the config,
     * if it's not null then it's allocated to sizeof(char*)*RESPONSE_CODES.
     * This lets us do quick merges in merge_core_dir_configs().
     */",undetermined
16025,httpd,UNKNOWN,"/* from ErrorDocument, not from
                                   * ap_custom_response() */",undetermined
16026,httpd,UNKNOWN,/* Hostname resolution etc */,undetermined
16027,httpd,UNKNOWN,/* calculate Content-MD5? */,undetermined
16028,httpd,UNKNOWN,"/* since is_fnmatch(conf->d) was being called so frequently in
     * directory_walk() and its relatives, this field was created and
     * is set to the result of that call.
     */",undetermined
16029,httpd,UNKNOWN,"/* should we force a charset on any outgoing parameterless content-type?
     * if so, which charset?
     */",undetermined
16030,httpd,UNKNOWN,/* System Resource Control */,undetermined
16031,httpd,UNKNOWN,/* limit on bytes in request msg body */,undetermined
16032,httpd,UNKNOWN,/* limit on bytes in XML request msg body */,undetermined
16033,httpd,UNKNOWN,/* logging options */,undetermined
16034,httpd,UNKNOWN,/* Access control */,undetermined
16035,httpd,UNKNOWN,/* forced with ForceType  */,undetermined
16036,httpd,UNKNOWN,/* forced with SetHandler */,undetermined
16037,httpd,UNKNOWN,/* forced with SetOutputFilters */,undetermined
16038,httpd,UNKNOWN,/* forced with SetInputFilters */,undetermined
16039,httpd,UNKNOWN,/* forced with AcceptPathInfo */,undetermined
16040,httpd,UNKNOWN,"/*
     * What attributes/data should be included in ETag generation?
     */",undetermined
16041,httpd,UNKNOWN,"/*
     * Run-time performance tuning
     */",undetermined
16042,httpd,UNKNOWN,/* whether files in this dir can be mmap'ed */,undetermined
16043,httpd,UNKNOWN,/* files in this dir can be sendfile'ed */,undetermined
16044,httpd,UNKNOWN,"/* URLs may contain %2f w/o being
                                             * pitched indiscriminately */",undetermined
16045,httpd,UNKNOWN,/* whether to decode encoded slashes in URLs */,undetermined
16046,httpd,UNKNOWN,"/* is this an <If>, <ElseIf>, or <Else> */",undetermined
16047,httpd,UNKNOWN,/* Conditionally merge <If> sections */,undetermined
16048,httpd,UNKNOWN,/** per-dir log config */,undetermined
16049,httpd,UNKNOWN,/** Table of directives allowed per AllowOverrideList */,undetermined
16050,httpd,UNKNOWN,/** Number of Ranges before returning HTTP_OK. **/,undetermined
16051,httpd,UNKNOWN,/** Max number of Range overlaps (merges) allowed **/,undetermined
16052,httpd,UNKNOWN,"/** Max number of Range reversals (eg: 200-300, 100-125) allowed **/",undetermined
16053,httpd,UNKNOWN,/* macro to implement off by default behaviour */,undetermined
16054,httpd,UNKNOWN,/* Per-server core configuration */,undetermined
16055,httpd,UNKNOWN,"/* Name translations --- we want the core to be able to do *something*
     * so it's at least a minimally functional web server on its own (and
     * can be tested that way).  But let's keep it to the bare minimum:
     */",undetermined
16056,httpd,UNKNOWN,/* Access control */,undetermined
16057,httpd,UNKNOWN,/* recursion backstopper */,undetermined
16058,httpd,UNKNOWN,/* maximum number of internal redirects */,undetermined
16059,httpd,UNKNOWN,/* maximum nesting level of subrequests */,undetermined
16060,httpd,UNKNOWN,/* array of ap_errorlog_format_item for error log format string */,undetermined
16061,httpd,UNKNOWN,"/*
     * two arrays of arrays of ap_errorlog_format_item for additional information
     * logged to the error log once per connection/request
     */",undetermined
16062,httpd,UNKNOWN,/* TRACE control */,undetermined
16063,httpd,UNKNOWN,/* for AddOutputFiltersByType in core.c */,undetermined
16064,httpd,UNKNOWN,/* for http_config.c */,undetermined
16065,httpd,UNKNOWN,/* for mod_perl */,undetermined
16066,httpd,UNKNOWN,/* Core filters; not exported. */,undetermined
16067,httpd,UNKNOWN,/** Connection to the client */,undetermined
16068,httpd,UNKNOWN,/** connection record */,undetermined
16069,httpd,UNKNOWN,"/**
 * Insert the network bucket into the core input filter's input brigade.
 * This hook is intended for MPMs or protocol modules that need to do special
 * socket setup.
 * @param c The connection
 * @param bb The brigade to insert the bucket into
 * @param socket The socket to put into a bucket
 * @return AP_DECLINED if the current function does not handle this connection,
 *         APR_SUCCESS or an error otherwise.
 */",undetermined
16070,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * Runtime status/management
 */",undetermined
16071,httpd,UNKNOWN,/* Handles for core filters */,undetermined
16072,httpd,UNKNOWN,"/**
 * This hook provdes a way for modules to provide metrics/statistics about
 * their operational status.
 *
 * @param p A pool to use to create entries in the hash table
 * @param val The name of the parameter(s) that is wanted. This is
 *            tree-structured would be in the form ('*' is all the tree,
 *            'module.*' all of the module , 'module.foo.*', or
 *            'module.foo.bar' )
 * @param ht The hash table to store the results. Keys are item names, and
 *           the values point to ap_mgmt_item_t structures.
 * @ingroup hooks
 */",undetermined
16073,httpd,UNKNOWN,/* ---------------------------------------------------------------------- */,undetermined
16074,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * I/O logging with mod_logio
 */",undetermined
16075,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * Error log formats
 */",undetermined
16076,httpd,UNKNOWN,"/**
 * The info structure passed to callback functions of errorlog handlers.
 * Not all information is available in all contexts. In particular, all
 * pointers may be NULL.
 */",undetermined
16077,httpd,UNKNOWN,"/** current server_rec.
     *  Should be preferred over c->base_server and r->server
     */",undetermined
16078,httpd,UNKNOWN,"/** current conn_rec.
     *  Should be preferred over r->connection
     */",undetermined
16079,httpd,UNKNOWN,/** current request_rec. */,undetermined
16080,httpd,UNKNOWN,"/** r->main if r is a subrequest, otherwise equal to r */",undetermined
16081,httpd,UNKNOWN,"/** pool passed to ap_log_perror, NULL otherwise */",undetermined
16082,httpd,UNKNOWN,"/** name of source file where the log message was produced, NULL if N/A. */",undetermined
16083,httpd,UNKNOWN,"/** line number in the source file, 0 if N/A */",undetermined
16084,httpd,UNKNOWN,"/** module index of module that produced the log message, APLOG_NO_MODULE if N/A. */",undetermined
16085,httpd,UNKNOWN,"/** log level of error message (flags like APLOG_STARTUP have been removed), -1 if N/A */",undetermined
16086,httpd,UNKNOWN,"/** apr error status related to the log message, 0 if no error */",undetermined
16087,httpd,UNKNOWN,"/** 1 if logging to syslog, 0 otherwise */",undetermined
16088,httpd,UNKNOWN,"/** 1 if APLOG_STARTUP was set for the log message, 0 otherwise */",undetermined
16089,httpd,UNKNOWN,/** message format */,undetermined
16090,httpd,UNKNOWN,"/**
 * callback function prototype for a external errorlog handler
 * @note To avoid unbounded memory usage, these functions must not allocate
 * memory from the server, connection, or request pools. If an errorlog
 * handler absolutely needs a pool to pass to other functions, it must create
 * and destroy a sub-pool.
 */",undetermined
16091,httpd,UNKNOWN,"/**
 * Register external errorlog handler
 * @param p config pool to use
 * @param tag the new format specifier (i.e. the letter after the %)
 * @param handler the handler function
 * @param flags flags (reserved, set to 0)
 */",undetermined
16092,httpd,UNKNOWN,/* for future extensions */,undetermined
16093,httpd,UNKNOWN,/** item starts a new field */,undetermined
16094,httpd,UNKNOWN,/** item is the actual error message */,undetermined
16095,httpd,UNKNOWN,/** skip whole line if item is zero-length */,undetermined
16096,httpd,UNKNOWN,/** log zero-length item as '-' */,undetermined
16097,httpd,UNKNOWN,/** ap_errorlog_handler function */,undetermined
16098,httpd,UNKNOWN,/** argument passed to item in {} */,undetermined
16099,httpd,UNKNOWN,/** a combination of the AP_ERRORLOG_* flags */,undetermined
16100,httpd,UNKNOWN,/** only log item if the message's log level is higher than this */,undetermined
16101,httpd,UNKNOWN,"/**
 * hook method to log error messages
 * @ingroup hooks
 * @param info pointer to ap_errorlog_info struct which contains all
 *        the details
 * @param errstr the (unformatted) message to log
 * @warning Allocating from the usual pools (pool, info->c->pool, info->p->pool)
 *          must be avoided because it can cause memory leaks.
 *          Use a subpool if necessary.
 */",undetermined
16102,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * ident lookups with mod_ident
 */",undetermined
16103,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * authorization values with mod_authz_core
 */",undetermined
16104,httpd,UNKNOWN,"/* ----------------------------------------------------------------------
 *
 * authorization values with mod_access_compat
 */",undetermined
16105,httpd,UNKNOWN,/* ---------------------------------------------------------------------- */,undetermined
16106,httpd,UNKNOWN,"/** Query the server for some state information
 * @param query_code Which information is requested
 * @return the requested state information
 */",undetermined
16107,httpd,UNKNOWN,"/*
 * possible values for query_code in ap_state_query()
 */",undetermined
16108,httpd,UNKNOWN,/** current status of the server */,undetermined
16109,httpd,UNKNOWN,/** are we going to serve requests or are we just testing/dumping config */,undetermined
16110,httpd,UNKNOWN,/** generation of the top-level apache parent */,undetermined
16111,httpd,UNKNOWN,"/*
 * return values for ap_state_query()
 */",undetermined
16112,httpd,UNKNOWN,/** return value for unknown query_code */,undetermined
16113,httpd,UNKNOWN,/* values returned for AP_SQ_MAIN_STATE */,undetermined
16114,httpd,UNKNOWN,/** before the config preflight */,undetermined
16115,httpd,UNKNOWN,"/** initial configuration run for setting up log config, etc. */",undetermined
16116,httpd,UNKNOWN,/** tearing down configuration */,undetermined
16117,httpd,UNKNOWN,/** normal configuration run */,undetermined
16118,httpd,UNKNOWN,/** running the MPM */,undetermined
16119,httpd,UNKNOWN,/** cleaning up for exit */,undetermined
16120,httpd,UNKNOWN,/* values returned for AP_SQ_RUN_MODE */,undetermined
16121,httpd,UNKNOWN,/** command line not yet parsed */,undetermined
16122,httpd,UNKNOWN,/** normal operation (server requests or signal server) */,undetermined
16123,httpd,UNKNOWN,/** config test only */,undetermined
16124,httpd,UNKNOWN,/** only dump some parts of the config */,undetermined
16125,httpd,UNKNOWN,/* !APACHE_HTTP_CORE_H */,undetermined
16126,httpd,UNKNOWN,/** @} */,undetermined
16127,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16128,httpd,UNKNOWN,"/**
 * @file  http_log.h
 * @brief Apache Logging library
 *
 * @defgroup APACHE_CORE_LOG Logging library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16129,httpd,UNKNOWN,/* system is unusable */,undetermined
16130,httpd,UNKNOWN,/* action must be taken immediately */,undetermined
16131,httpd,UNKNOWN,/* critical conditions */,undetermined
16132,httpd,UNKNOWN,/* error conditions */,undetermined
16133,httpd,UNKNOWN,/* warning conditions */,undetermined
16134,httpd,UNKNOWN,/* normal but significant condition */,undetermined
16135,httpd,UNKNOWN,/* informational */,undetermined
16136,httpd,UNKNOWN,/* debug-level messages */,undetermined
16137,httpd,UNKNOWN,/* trace-level 1 messages */,undetermined
16138,httpd,UNKNOWN,/* trace-level 2 messages */,undetermined
16139,httpd,UNKNOWN,/* trace-level 3 messages */,undetermined
16140,httpd,UNKNOWN,/* trace-level 4 messages */,undetermined
16141,httpd,UNKNOWN,/* trace-level 5 messages */,undetermined
16142,httpd,UNKNOWN,/* trace-level 6 messages */,undetermined
16143,httpd,UNKNOWN,/* trace-level 7 messages */,undetermined
16144,httpd,UNKNOWN,/* trace-level 8 messages */,undetermined
16145,httpd,UNKNOWN,/* mask off the level value */,undetermined
16146,httpd,UNKNOWN,/* system is unusable */,undetermined
16147,httpd,UNKNOWN,/* action must be taken immediately */,undetermined
16148,httpd,UNKNOWN,/* critical conditions */,undetermined
16149,httpd,UNKNOWN,/* error conditions */,undetermined
16150,httpd,UNKNOWN,/* warning conditions */,undetermined
16151,httpd,UNKNOWN,/* normal but significant condition */,undetermined
16152,httpd,UNKNOWN,/* informational */,undetermined
16153,httpd,UNKNOWN,/* debug-level messages */,undetermined
16154,httpd,UNKNOWN,/* trace-level 1 messages */,undetermined
16155,httpd,UNKNOWN,/* trace-level 2 messages */,undetermined
16156,httpd,UNKNOWN,/* trace-level 3 messages */,undetermined
16157,httpd,UNKNOWN,/* trace-level 4 messages */,undetermined
16158,httpd,UNKNOWN,/* trace-level 5 messages */,undetermined
16159,httpd,UNKNOWN,/* trace-level 6 messages */,undetermined
16160,httpd,UNKNOWN,/* trace-level 7 messages */,undetermined
16161,httpd,UNKNOWN,/* trace-level 8 messages */,undetermined
16162,httpd,UNKNOWN,/* mask off the level value */,undetermined
16163,httpd,UNKNOWN,"/* APLOG_NOERRNO is ignored and should not be used.  It will be
 * removed in a future release of Apache.
 */",undetermined
16164,httpd,UNKNOWN,"/** Use APLOG_TOCLIENT on ap_log_rerror() to give content
 * handlers the option of including the error text in the
 * ErrorDocument sent back to the client. Setting APLOG_TOCLIENT
 * will cause the error text to be saved in the request_rec->notes
 * table, keyed to the string ""error-notes"", if and only if:
 * - the severity level of the message is APLOG_WARNING or greater
 * - there are no other ""error-notes"" set in request_rec->notes
 * Once error-notes is set, it is up to the content handler to
 * determine whether this text should be sent back to the client.
 * Note: Client generated text streams sent back to the client MUST
 * be escaped to prevent CSS attacks.
 */",undetermined
16165,httpd,UNKNOWN,"/* normal but significant condition on startup, usually printed to stderr */",undetermined
16166,httpd,UNKNOWN,"/**
 * APLOGNO() should be used at the start of the format string passed
 * to ap_log_error() and friends. The argument must be a 5 digit decimal
 * number. It creates a tag of the form ""AH02182: ""
 * See docs/log-message-tags/README for details.
 */",undetermined
16167,httpd,UNKNOWN,"/**
 * APLOG_NO_MODULE may be passed as module_index to ap_log_error() and related
 * functions if the module causing the log message is not known. Normally this
 * should not be used directly. Use ::APLOG_MARK or ::APLOG_MODULE_INDEX
 * instead.
 *
 * @see APLOG_MARK
 * @see APLOG_MODULE_INDEX
 * @see ap_log_error
 */",undetermined
16168,httpd,UNKNOWN,"/**
 * C++ modules must invoke ::APLOG_USE_MODULE or ::AP_DECLARE_MODULE in
 * every file which uses ap_log_* before the first use of ::APLOG_MARK
 * or ::APLOG_MODULE_INDEX.
 * (C modules *should* do that as well, to enable module-specific log
 * levels. C modules need not obey the ordering, though).
 */",undetermined
16169,httpd,UNKNOWN,/* __cplusplus */,undetermined
16170,httpd,UNKNOWN,"/**
 * Constant to store module_index for the current file.
 * Objects with static storage duration are set to NULL if not
 * initialized explicitly. This means that if aplog_module_index
 * is not initalized using the ::APLOG_USE_MODULE or the
 * ::AP_DECLARE_MODULE macro, we can safely fall back to
 * use ::APLOG_NO_MODULE. This variable will usually be optimized away.
 */",undetermined
16171,httpd,UNKNOWN,/* __cplusplus */,undetermined
16172,httpd,UNKNOWN,"/**
 * APLOG_MODULE_INDEX contains the module_index of the current module if
 * it has been set via the ::APLOG_USE_MODULE or ::AP_DECLARE_MODULE macro.
 * Otherwise it contains ::APLOG_NO_MODULE (for example in unmodified httpd
 * 2.2 modules).
 *
 * If ::APLOG_MARK is used in ap_log_error() and related functions,
 * ::APLOG_MODULE_INDEX will be passed as module_index. In cases where
 * ::APLOG_MARK cannot be used, ::APLOG_MODULE_INDEX should normally be passed
 * as module_index.
 *
 * @see APLOG_MARK
 * @see ap_log_error
 */",undetermined
16173,httpd,UNKNOWN,/* __cplusplus */,undetermined
16174,httpd,UNKNOWN,/* __cplusplus */,undetermined
16175,httpd,UNKNOWN,"/**
 * APLOG_MAX_LOGLEVEL can be defined to remove logging above some
 * specified level at compile time.
 *
 * This requires a C99 compiler.
 */",undetermined
16176,httpd,UNKNOWN,"/**
 * APLOG_MARK is a convenience macro for use as the first three parameters in
 * ap_log_error() and related functions, i.e. file, line, and module_index.
 *
 * The module_index parameter was introduced in version 2.3.6. Before that
 * version, APLOG_MARK only replaced the file and line parameters.
 * This means that APLOG_MARK can be used with ap_log_*error in all versions
 * of Apache httpd.
 *
 * @see APLOG_MODULE_INDEX
 * @see ap_log_error
 * @see ap_log_cerror
 * @see ap_log_rerror
 * @see ap_log_cserror
 */",undetermined
16177,httpd,UNKNOWN,"/**
 * Set up for logging to stderr.
 * @param p The pool to allocate out of
 */",undetermined
16178,httpd,UNKNOWN,"/**
 * Replace logging to stderr with logging to the given file.
 * @param p The pool to allocate out of
 * @param file Name of the file to log stderr output
 */",undetermined
16179,httpd,UNKNOWN,"/**
 * Open the error log and replace stderr with it.
 * @param pconf Not used
 * @param plog  The pool to allocate the logs from
 * @param ptemp Pool used for temporary allocations
 * @param s_main The main server
 * @note ap_open_logs isn't expected to be used by modules, it is
 * an internal core function
 */",undetermined
16180,httpd,UNKNOWN,"/**
 * Perform special processing for piped loggers in MPM child
 * processes.
 * @param p Not used
 * @param s Not used
 * @note ap_logs_child_init is not for use by modules; it is an
 * internal core function
 */",undetermined
16181,httpd,UNKNOWN,"/*
 * The primary logging functions, ap_log_error, ap_log_rerror, ap_log_cerror,
 * and ap_log_perror use a printf style format string to build the log message.
 * It is VERY IMPORTANT that you not include any raw data from the network,
 * such as the request-URI or request header fields, within the format
 * string.  Doing so makes the server vulnerable to a denial-of-service
 * attack and other messy behavior.  Instead, use a simple format string
 * like ""%s"", followed by the string containing the untrusted data.
 */",undetermined
16182,httpd,UNKNOWN,"/**
 * ap_log_error() - log messages which are not related to a particular
 * request or connection.  This uses a printf-like format to log messages
 * to the error_log.
 * @param file The file in which this function is called
 * @param line The line number on which this function is called
 * @param module_index The module_index of the module generating this message
 * @param level The level of this error message
 * @param status The status code from the previous command
 * @param s The server on which we are logging
 * @param fmt The format string
 * @param ... The arguments to use to fill out fmt.
 * @note ap_log_error is implemented as a macro
 * @note Use APLOG_MARK to fill out file and line
 * @note If a request_rec is available, use that with ap_log_rerror()
 * in preference to calling this function.  Otherwise, if a conn_rec is
 * available, use that with ap_log_cerror() in preference to calling
 * this function.
 * @warning It is VERY IMPORTANT that you not include any raw data from
 * the network, such as the request-URI or request header fields, within
 * the format string.  Doing so makes the server vulnerable to a
 * denial-of-service attack and other messy behavior.  Instead, use a
 * simple format string like ""%s"", followed by the string containing the
 * untrusted data.
 */",undetermined
16183,httpd,UNKNOWN,/* need additional step to expand APLOG_MARK first */,undetermined
16184,httpd,UNKNOWN,/* need server_rec *sr = ... for the case if s is verbatim NULL */,undetermined
16185,httpd,UNKNOWN,"/**
 * ap_log_perror() - log messages which are not related to a particular
 * request, connection, or virtual server.  This uses a printf-like
 * format to log messages to the error_log.
 * @param file The file in which this function is called
 * @param line The line number on which this function is called
 * @param module_index ignored dummy value for use by APLOG_MARK
 * @param level The level of this error message
 * @param status The status code from the previous command
 * @param p The pool which we are logging for
 * @param fmt The format string
 * @param ... The arguments to use to fill out fmt.
 * @note ap_log_perror is implemented as a macro
 * @note Use APLOG_MARK to fill out file, line, and module_index
 * @warning It is VERY IMPORTANT that you not include any raw data from
 * the network, such as the request-URI or request header fields, within
 * the format string.  Doing so makes the server vulnerable to a
 * denial-of-service attack and other messy behavior.  Instead, use a
 * simple format string like ""%s"", followed by the string containing the
 * untrusted data.
 */",undetermined
16186,httpd,UNKNOWN,/* need additional step to expand APLOG_MARK first */,undetermined
16187,httpd,UNKNOWN,"/**
 * ap_log_rerror() - log messages which are related to a particular
 * request.  This uses a printf-like format to log messages to the
 * error_log.
 * @param file The file in which this function is called
 * @param line The line number on which this function is called
 * @param module_index The module_index of the module generating this message
 * @param level The level of this error message
 * @param status The status code from the previous command
 * @param r The request which we are logging for
 * @param fmt The format string
 * @param ... The arguments to use to fill out fmt.
 * @note ap_log_rerror is implemented as a macro
 * @note Use APLOG_MARK to fill out file, line, and module_index
 * @warning It is VERY IMPORTANT that you not include any raw data from
 * the network, such as the request-URI or request header fields, within
 * the format string.  Doing so makes the server vulnerable to a
 * denial-of-service attack and other messy behavior.  Instead, use a
 * simple format string like ""%s"", followed by the string containing the
 * untrusted data.
 */",undetermined
16188,httpd,UNKNOWN,/* need additional step to expand APLOG_MARK first */,undetermined
16189,httpd,UNKNOWN,"/**
 * ap_log_cerror() - log messages which are related to a particular
 * connection.  This uses a printf-like format to log messages to the
 * error_log.
 * @param file The file in which this function is called
 * @param line The line number on which this function is called
 * @param level The level of this error message
 * @param module_index The module_index of the module generating this message
 * @param status The status code from the previous command
 * @param c The connection which we are logging for
 * @param fmt The format string
 * @param ... The arguments to use to fill out fmt.
 * @note ap_log_cerror is implemented as a macro
 * @note Use APLOG_MARK to fill out file, line, and module_index
 * @note If a request_rec is available, use that with ap_log_rerror()
 * in preference to calling this function.
 * @warning It is VERY IMPORTANT that you not include any raw data from
 * the network, such as the request-URI or request header fields, within
 * the format string.  Doing so makes the server vulnerable to a
 * denial-of-service attack and other messy behavior.  Instead, use a
 * simple format string like ""%s"", followed by the string containing the
 * untrusted data.
 */",undetermined
16190,httpd,UNKNOWN,/* need additional step to expand APLOG_MARK first */,undetermined
16191,httpd,UNKNOWN,"/**
 * ap_log_cserror() - log messages which are related to a particular
 * connection and to a vhost other than c->base_server.  This uses a
 * printf-like format to log messages to the error_log.
 * @param file The file in which this function is called
 * @param line The line number on which this function is called
 * @param level The level of this error message
 * @param module_index The module_index of the module generating this message
 * @param status The status code from the previous command
 * @param c The connection which we are logging for
 * @param s The server which we are logging for
 * @param fmt The format string
 * @param ... The arguments to use to fill out fmt.
 * @note ap_log_cserror is implemented as a macro
 * @note Use APLOG_MARK to fill out file, line, and module_index
 * @note If a request_rec is available, use that with ap_log_rerror()
 * in preference to calling this function. This function is mainly useful for
 * modules like mod_ssl to use before the request_rec is created.
 * @warning It is VERY IMPORTANT that you not include any raw data from
 * the network, such as the request-URI or request header fields, within
 * the format string.  Doing so makes the server vulnerable to a
 * denial-of-service attack and other messy behavior.  Instead, use a
 * simple format string like ""%s"", followed by the string containing the
 * untrusted data.
 */",undetermined
16192,httpd,UNKNOWN,/* need additional step to expand APLOG_MARK first */,undetermined
16193,httpd,UNKNOWN,"/**
 * Convert stderr to the error log
 * @param s The current server
 */",undetermined
16194,httpd,UNKNOWN,"/**
 * Log the command line used to start the server.
 * @param p The pool to use for logging
 * @param s The server_rec whose process's command line we want to log.
 * The command line is logged to that server's error log.
 */",undetermined
16195,httpd,UNKNOWN,"/**
 * Log the current pid of the parent process
 * @param p The pool to use for processing
 * @param fname The name of the file to log to.  If the filename is not
 * absolute then it is assumed to be relative to ServerRoot.
 */",undetermined
16196,httpd,UNKNOWN,"/**
 * Remove the pidfile.
 * @param p The pool to use for processing
 * @param fname The name of the pid file to remove.  If the filename is not
 * absolute then it is assumed to be relative to ServerRoot.
 */",undetermined
16197,httpd,UNKNOWN,"/**
 * Retrieve the pid from a pidfile.
 * @param p The pool to use for processing
 * @param filename The name of the file containing the pid.  If the filename is not
 * absolute then it is assumed to be relative to ServerRoot.
 * @param mypid Pointer to pid_t (valid only if return APR_SUCCESS)
 */",undetermined
16198,httpd,UNKNOWN,/** @see piped_log */,undetermined
16199,httpd,UNKNOWN,"/**
 * Open the piped log process
 * @param p The pool to allocate out of
 * @param program The program to run in the logging process
 * @return The piped log structure
 * @note The log program is invoked as @p APR_PROGRAM_ENV,
 *      @see ap_open_piped_log_ex to modify this behavior
 */",undetermined
16200,httpd,UNKNOWN,"/**
 * Open the piped log process specifying the execution choice for program
 * @param p The pool to allocate out of
 * @param program The program to run in the logging process
 * @param cmdtype How to invoke program, e.g. APR_PROGRAM, APR_SHELLCMD_ENV, etc
 * @return The piped log structure
 */",undetermined
16201,httpd,UNKNOWN,"/**
 * Close the piped log and kill the logging process
 * @param pl The piped log structure
 */",undetermined
16202,httpd,UNKNOWN,"/**
 * A function to return the read side of the piped log pipe
 * @param pl The piped log structure
 * @return The native file descriptor
 */",undetermined
16203,httpd,UNKNOWN,"/**
 * A function to return the write side of the piped log pipe
 * @param pl The piped log structure
 * @return The native file descriptor
 */",undetermined
16204,httpd,UNKNOWN,"/**
 * hook method to generate unique id for connection or request
 * @ingroup hooks
 * @param c the conn_rec of the connections
 * @param r the request_req (may be NULL)
 * @param id the place where to store the unique id
 * @return OK or DECLINE
 */",undetermined
16205,httpd,UNKNOWN,/* !APACHE_HTTP_LOG_H */,undetermined
16206,httpd,UNKNOWN,/** @} */,undetermined
16207,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16208,httpd,UNKNOWN,"/**
 * @file  http_main.h
 * @brief Command line options
 *
 * @defgroup APACHE_CORE_MAIN Command line options
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16209,httpd,UNKNOWN,"/** AP_SERVER_BASEARGS is the command argument list parsed by http_main.c
 * in apr_getopt() format.  Use this for default'ing args that the MPM
 * can safely ignore and pass on from its rewrite_args() handler.
 */",undetermined
16210,httpd,UNKNOWN,/** The name of the Apache executable */,undetermined
16211,httpd,UNKNOWN,/** The global server's ServerRoot */,undetermined
16212,httpd,UNKNOWN,"/** The global server's DefaultRuntimeDir
 * This is not usable directly in the general case; use
 * ap_runtime_dir_relative() instead.
 */",undetermined
16213,httpd,UNKNOWN,/** The global server's server_rec */,undetermined
16214,httpd,UNKNOWN,"/** global pool, for access prior to creation of server_rec */",undetermined
16215,httpd,UNKNOWN,"/** state of the server (startup, exiting, ...) */",undetermined
16216,httpd,UNKNOWN,"/** run mode (normal, config test, config dump, ...) */",undetermined
16217,httpd,UNKNOWN,"/** run mode (normal, config test, config dump, ...) */",undetermined
16218,httpd,UNKNOWN,"/* for -C, -c and -D switches */",undetermined
16219,httpd,UNKNOWN,"/** An array of all -C directives.  These are processed before the server's
 *  config file */",undetermined
16220,httpd,UNKNOWN,"/** An array of all -c directives.  These are processed after the server's
 *  config file */",undetermined
16221,httpd,UNKNOWN,"/** An array of all -D defines on the command line.  This allows people to
 *  effect the server based on command line options */",undetermined
16222,httpd,UNKNOWN,/** Available integer for using the -T switch */,undetermined
16223,httpd,UNKNOWN,"/**
 * An optional function to send signal to server on presence of '-k'
 * command line argument.
 * @param status The exit status after sending signal
 * @param pool Memory pool to allocate from
 */",undetermined
16224,httpd,UNKNOWN,/* !APACHE_HTTP_MAIN_H */,undetermined
16225,httpd,UNKNOWN,/** @} */,undetermined
16226,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16227,httpd,UNKNOWN,"/**
 * @file  http_protocol.h
 * @brief HTTP protocol handling
 *
 * @defgroup APACHE_CORE_PROTO HTTP Protocol Handling
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16228,httpd,UNKNOWN,"/**
 * This hook allows modules to insert filters for the current error response
 * @param r the current request
 * @ingroup hooks
 */",undetermined
16229,httpd,UNKNOWN,"/** This is an optimization.  We keep a record of the filter_rec that
 * stores the old_write filter, so that we can avoid strcmp's later.
 */",undetermined
16230,httpd,UNKNOWN,"/*
 * Prototypes for routines which either talk directly back to the user,
 * or control the ones that eventually do.
 */",undetermined
16231,httpd,UNKNOWN,"/**
 * Read a request and fill in the fields.
 * @param c The current connection
 * @return The new request_rec
 */",undetermined
16232,httpd,UNKNOWN,"/**
 * Read the mime-encoded headers.
 * @param r The current request
 */",undetermined
16233,httpd,UNKNOWN,"/**
 * Optimized version of ap_get_mime_headers() that requires a
 * temporary brigade to work with
 * @param r The current request
 * @param bb temp brigade
 */",undetermined
16234,httpd,UNKNOWN,/* Finish up stuff after a request */,undetermined
16235,httpd,UNKNOWN,"/**
 * Called at completion of sending the response.  It sends the terminating
 * protocol information.
 * @param r The current request
 */",undetermined
16236,httpd,UNKNOWN,"/**
 * Send error back to client.
 * @param r The current request
 * @param recursive_error last arg indicates error status in case we get
 *      an error in the process of trying to deal with an ErrorDocument
 *      to handle some other error.  In that case, we print the default
 *      report for the first thing that went wrong, and more briefly report
 *      on the problem with the ErrorDocument.
 */",undetermined
16237,httpd,UNKNOWN,"/* Set last modified header line from the lastmod date of the associated file.
 * Also, set content length.
 *
 * May return an error status, typically HTTP_NOT_MODIFIED (that when the
 * permit_cache argument is set to one).
 */",undetermined
16238,httpd,UNKNOWN,"/**
 * Set the content length for this request
 * @param r The current request
 * @param length The new content length
 */",undetermined
16239,httpd,UNKNOWN,"/**
 * Set the keepalive status for this request
 * @param r The current request
 * @return 1 if keepalive can be set, 0 otherwise
 */",undetermined
16240,httpd,UNKNOWN,"/**
 * Return the latest rational time from a request/mtime pair.  Mtime is
 * returned unless it's in the future, in which case we return the current time.
 * @param r The current request
 * @param mtime The last modified time
 * @return the latest rational time.
 */",undetermined
16241,httpd,UNKNOWN,"/**
 * Build the content-type that should be sent to the client from the
 * content-type specified.  The following rules are followed:
 *    - if type is NULL or """", return NULL (do not set content-type).
 *    - if charset adding is disabled, stop processing and return type.
 *    - then, if there are no parameters on type, add the default charset
 *    - return type
 * @param r The current request
 * @param type The content type
 * @return The content-type
 */",undetermined
16242,httpd,UNKNOWN,"/**
 * Precompile metadata structures used by ap_make_content_type()
 * @param pool The pool to use for allocations
 */",undetermined
16243,httpd,UNKNOWN,"/**
 * Construct an entity tag from the resource information.  If it's a real
 * file, build in some of the file characteristics.
 * @param r The current request
 * @param force_weak Force the entity tag to be weak - it could be modified
 *                   again in as short an interval.
 * @return The entity tag
 */",undetermined
16244,httpd,UNKNOWN,"/**
 * Set the E-tag outgoing header
 * @param r The current request
 */",undetermined
16245,httpd,UNKNOWN,"/**
 * Set the last modified time for the file being sent
 * @param r The current request
 */",undetermined
16246,httpd,UNKNOWN,"/**
 * Tests conditional request rules for the If-Match header.
 * @param r The current request
 * @param headers The response headers to check against
 * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH
 *         if the header does not match, AP_CONDITION_STRONG for a strong
 *         match. Weak matches are not permitted for the If-Match header.
 */",undetermined
16247,httpd,UNKNOWN,"/**
 * Tests conditional request rules for the If-Unmodified-Since header.
 * @param r The current request
 * @param headers The response headers to check against
 * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH
 *         if the header does not match, AP_CONDITION_WEAK if a weak match
 *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a
 *         strong match.
 */",undetermined
16248,httpd,UNKNOWN,"/**
 * Tests conditional request rules for the If-None-Match header.
 * @param r The current request
 * @param headers The response headers to check against
 * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH
 *         if the header does not match, AP_CONDITION_WEAK if a weak match
 *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a
 *         strong match.
 */",undetermined
16249,httpd,UNKNOWN,"/**
 * Tests conditional request rules for the If-Modified-Since header.
 * @param r The current request
 * @param headers The response headers to check against
 * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH
 *         if the header does not match, AP_CONDITION_WEAK if a weak match
 *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a
 *         strong match.
 */",undetermined
16250,httpd,UNKNOWN,"/**
 * Tests conditional request rules for the If-Range header.
 * @param r The current request
 * @param headers The response headers to check against
 * @return AP_CONDITION_NONE if either the If-Range or Range header is
 *         missing, AP_CONDITION_NOMATCH if the header does not match,
 *         AP_CONDITION_STRONG for a strong match. Weak matches are not
 *         permitted for the If-Range header.
 */",undetermined
16251,httpd,UNKNOWN,"/**
 * Implements condition GET rules for HTTP/1.1 specification.  This function
 * inspects the client headers and determines if the response fulfills
 * the requirements specified.
 * @param r The current request
 * @return OK if the response fulfills the condition GET rules, some
 *         other status code otherwise
 */",undetermined
16252,httpd,UNKNOWN,"/* Other ways to send stuff at the client.  All of these keep track
 * of bytes_sent automatically.  This indirection is intended to make
 * it a little more painless to slide things like HTTP-NG packetization
 * underneath the main body of the code later.  In the meantime, it lets
 * us centralize a bit of accounting (bytes_sent).
 *
 * These also return the number of bytes written by the call.
 * They should only be called with a timeout registered, for obvious reaasons.
 * (Ditto the send_header stuff).
 */",undetermined
16253,httpd,UNKNOWN,"/**
 * Send an entire file to the client, using sendfile if supported by the
 * current platform
 * @param fd The file to send.
 * @param r The current request
 * @param offset Offset into the file to start sending.
 * @param length Amount of data to send
 * @param nbytes Amount of data actually sent
 */",undetermined
16254,httpd,UNKNOWN,"/**
 * Send an MMAP'ed file to the client
 * @param mm The MMAP'ed file to send
 * @param r The current request
 * @param offset The offset into the MMAP to start sending
 * @param length The amount of data to send
 * @return The number of bytes sent
 */",undetermined
16255,httpd,UNKNOWN,"/**
 * Register a new request method, and return the offset that will be
 * associated with that method.
 *
 * @param p        The pool to create registered method numbers from.
 * @param methname The name of the new method to register.
 * @return         An int value representing an offset into a bitmask.
 */",undetermined
16256,httpd,UNKNOWN,"/**
 * Initialize the method_registry and allocate memory for it.
 *
 * @param p Pool to allocate memory for the registry from.
 */",undetermined
16257,httpd,UNKNOWN,"/**
 * This is a convenience macro to ease with checking a mask
 * against a method name.
 */",undetermined
16258,httpd,UNKNOWN,"/**
 * Create a new method list with the specified number of preallocated
 * slots for extension methods.
 *
 * @param   p       Pointer to a pool in which the structure should be
 *                  allocated.
 * @param   nelts   Number of preallocated extension slots
 * @return  Pointer to the newly created structure.
 */",undetermined
16259,httpd,UNKNOWN,"/**
 * Copy a method list
 *
 * @param   dest List to copy to
 * @param   src  List to copy from
 */",undetermined
16260,httpd,UNKNOWN,"/**
 * Search for an HTTP method name in an ap_method_list_t structure, and
 * return true if found.
 *
 * @param   method  String containing the name of the method to check.
 * @param   l       Pointer to a method list, such as r->allowed_methods.
 * @return  1 if method is in the list, otherwise 0
 */",undetermined
16261,httpd,UNKNOWN,"/**
 * Add an HTTP method name to an ap_method_list_t structure if it isn't
 * already listed.
 *
 * @param   method  String containing the name of the method to check.
 * @param   l       Pointer to a method list, such as r->allowed_methods.
 * @return  None.
 */",undetermined
16262,httpd,UNKNOWN,"/**
 * Remove an HTTP method name from an ap_method_list_t structure.
 *
 * @param   l       Pointer to a method list, such as r->allowed_methods.
 * @param   method  String containing the name of the method to remove.
 * @return  None.
 */",undetermined
16263,httpd,UNKNOWN,"/**
 * Reset a method list to be completely empty.
 *
 * @param   l       Pointer to a method list, such as r->allowed_methods.
 * @return  None.
 */",undetermined
16264,httpd,UNKNOWN,"/**
 * Set the content type for this request (r->content_type).
 * @param r The current request
 * @param ct The new content type
 * @warning This function must be called to set r->content_type in order
 * for the AddOutputFilterByType directive to work correctly.
 */",undetermined
16265,httpd,UNKNOWN,"/**
 * Set the Accept-Ranges header for this response
 * @param r The current request
 */",undetermined
16266,httpd,UNKNOWN,"/* Hmmm... could macrofy these for now, and maybe forever, though the
 * definitions of the macros would get a whole lot hairier.
 */",undetermined
16267,httpd,UNKNOWN,"/**
 * Output one character for this request
 * @param c the character to output
 * @param r the current request
 * @return The number of bytes sent
 */",undetermined
16268,httpd,UNKNOWN,"/**
 * Write a buffer for the current request
 * @param buf The buffer to write
 * @param nbyte The number of bytes to send from the buffer
 * @param r The current request
 * @return The number of bytes sent
 */",undetermined
16269,httpd,UNKNOWN,"/**
 * Output a string for the current request
 * @param str The string to output
 * @param r The current request
 * @return The number of bytes sent
 * @note ap_rputs may be implemented as macro or inline function
 */",undetermined
16270,httpd,UNKNOWN,"/**
 * Write an unspecified number of strings to the request
 * @param r The current request
 * @param ... The strings to write
 * @return The number of bytes sent
 */",undetermined
16271,httpd,UNKNOWN,"/**
 * Output data to the client in a printf format
 * @param r The current request
 * @param fmt The format string
 * @param vlist The arguments to use to fill out the format string
 * @return The number of bytes sent
 */",undetermined
16272,httpd,UNKNOWN,"/**
 * Output data to the client in a printf format
 * @param r The current request
 * @param fmt The format string
 * @param ... The arguments to use to fill out the format string
 * @return The number of bytes sent
 */",undetermined
16273,httpd,UNKNOWN,"/**
 * Flush all of the data for the current request to the client
 * @param r The current request
 * @return 0 on success, -1 if an error occurred
 */",undetermined
16274,httpd,UNKNOWN,"/**
 * Index used in custom_responses array for a specific error code
 * (only use outside protocol.c is in getting them configured).
 * @param status HTTP status code
 * @return The index of the response
 */",undetermined
16275,httpd,UNKNOWN,"/**
 * Return the Status-Line for a given status code (excluding the
 * HTTP-Version field). If an invalid or unknown status code is
 * passed, ""500 Internal Server Error"" will be returned.
 * @param status The HTTP status code
 * @return The Status-Line
 */",undetermined
16276,httpd,UNKNOWN,"/* Reading a block of data from the client connection (e.g., POST arg) */",undetermined
16277,httpd,UNKNOWN,"/**
 * Setup the client to allow Apache to read the request body.
 * @param r The current request
 * @param read_policy How the server should interpret a chunked
 *                    transfer-encoding.  One of: <pre>
 *    REQUEST_NO_BODY          Send 413 error if message has any body
 *    REQUEST_CHUNKED_ERROR    Send 411 error if body without Content-Length
 *    REQUEST_CHUNKED_DECHUNK  If chunked, remove the chunks for me.
 * </pre>
 * @return either OK or an error code
 */",undetermined
16278,httpd,UNKNOWN,"/**
 * Determine if the client has sent any data.  This also sends a
 * 100 Continue response to HTTP/1.1 clients, so modules should not be called
 * until the module is ready to read content.
 * @warning Never call this function more than once.
 * @param r The current request
 * @return 0 if there is no message to read, 1 otherwise
 */",undetermined
16279,httpd,UNKNOWN,"/**
 * Call this in a loop.  It will put data into a buffer and return the length
 * of the input block
 * @param r The current request
 * @param buffer The buffer in which to store the data
 * @param bufsiz The size of the buffer
 * @return Number of bytes inserted into the buffer.  When done reading, 0
 *         if EOF, or -1 if there was an error
 */",undetermined
16280,httpd,UNKNOWN,"/**
 * In HTTP/1.1, any method can have a body.  However, most GET handlers
 * wouldn't know what to do with a request body if they received one.
 * This helper routine tests for and reads any message body in the request,
 * simply discarding whatever it receives.  We need to do this because
 * failing to read the request body would cause it to be interpreted
 * as the next request on a persistent connection.
 * @param r The current request
 * @return error status if request is malformed, OK otherwise
 */",undetermined
16281,httpd,UNKNOWN,"/**
 * Setup the output headers so that the client knows how to authenticate
 * itself the next time, if an authentication request failed.
 * @param r The current request
 */",undetermined
16282,httpd,UNKNOWN,"/**
 * @deprecated @see ap_note_auth_failure
 */",undetermined
16283,httpd,UNKNOWN,"/**
 * @deprecated @see ap_note_auth_failure
 */",undetermined
16284,httpd,UNKNOWN,"/**
 * This hook allows modules to add support for a specific auth type to
 * ap_note_auth_failure
 * @param r the current request
 * @param auth_type the configured auth_type
 * @return OK, DECLINED
 */",undetermined
16285,httpd,UNKNOWN,"/**
 * Get the password from the request headers
 * @param r The current request
 * @param pw The password as set in the headers
 * @return 0 (OK) if it set the 'pw' argument (and assured
 *         a correct value in r->user); otherwise it returns
 *         an error code, either HTTP_INTERNAL_SERVER_ERROR if things are
 *         really confused, HTTP_UNAUTHORIZED if no authentication at all
 *         seemed to be in use, or DECLINED if there was authentication but
 *         it wasn't Basic (in which case, the caller should presumably
 *         decline as well).
 */",undetermined
16286,httpd,UNKNOWN,"/**
 * parse_uri: break apart the uri
 * @warning Side Effects:
 *    @li sets r->args to rest after '?' (or NULL if no '?')
 *    @li sets r->uri to request uri (without r->args part)
 *    @li sets r->hostname (if not set already) from request (scheme://host:port)
 * @param r The current request
 * @param uri The uri to break apart
 */",undetermined
16287,httpd,UNKNOWN,"/**
 * Get the next line of input for the request
 * @param s The buffer into which to read the line
 * @param n The size of the buffer
 * @param r The request
 * @param fold Whether to merge continuation lines
 * @return The length of the line, if successful
 *         n, if the line is too big to fit in the buffer
 *         -1 for miscellaneous errors
 */",undetermined
16288,httpd,UNKNOWN,"/**
 * Get the next line of input for the request
 *
 * Note: on ASCII boxes, ap_rgetline is a macro which simply calls
 *       ap_rgetline_core to get the line of input.
 *
 *       on EBCDIC boxes, ap_rgetline is a wrapper function which
 *       translates ASCII protocol lines to the local EBCDIC code page
 *       after getting the line of input.
 *
 * @param s Pointer to the pointer to the buffer into which the line
 *          should be read; if *s==NULL, a buffer of the necessary size
 *          to hold the data will be allocated from the request pool
 * @param n The size of the buffer
 * @param read The length of the line.
 * @param r The request
 * @param fold Whether to merge continuation lines
 * @param bb Working brigade to use when reading buckets
 * @return APR_SUCCESS, if successful
 *         APR_ENOSPC, if the line is too big to fit in the buffer
 *         Other errors where appropriate
 */",undetermined
16289,httpd,UNKNOWN,/* ASCII box */,undetermined
16290,httpd,UNKNOWN,/** @see ap_rgetline */,undetermined
16291,httpd,UNKNOWN,"/**
 * Get the method number associated with the given string, assumed to
 * contain an HTTP method.  Returns M_INVALID if not recognized.
 * @param method A string containing a valid HTTP method
 * @return The method number
 */",undetermined
16292,httpd,UNKNOWN,"/**
 * Get the method name associated with the given internal method
 * number.  Returns NULL if not recognized.
 * @param p A pool to use for temporary allocations.
 * @param methnum An integer value corresponding to an internal method number
 * @return The name corresponding to the method number
 */",undetermined
16293,httpd,UNKNOWN,/* Hooks */,undetermined
16294,httpd,UNKNOWN,"/*
 * pre_read_request --- run right before read_request_line(),
 *                  and not run during any subrequests.
 */",undetermined
16295,httpd,UNKNOWN,"/**
 * This hook allows modules to affect the request or connection immediately before
 * the request has been read, and before any other phases have been processes.
 * @param r The current request of the soon-to-be-read request
 * @param c The connection
 * @return None/void
 */",undetermined
16296,httpd,UNKNOWN,"/*
 * post_read_request --- run right after read_request or internal_redirect,
 *                  and not run during any subrequests.
 */",undetermined
16297,httpd,UNKNOWN,"/**
 * This hook allows modules to affect the request immediately after the request
 * has been read, and before any other phases have been processes.  This allows
 * modules to make decisions based upon the input header fields
 * @param r The current request
 * @return OK or DECLINED
 */",undetermined
16298,httpd,UNKNOWN,"/**
 * This hook allows modules to perform any module-specific logging activities
 * over and above the normal server things.
 * @param r The current request
 * @return OK, DECLINED, or HTTP_...
 */",undetermined
16299,httpd,UNKNOWN,"/**
 * This hook allows modules to retrieve the http scheme for a request.  This
 * allows Apache modules to easily extend the schemes that Apache understands
 * @param r The current request
 * @return The http scheme from the request
 */",undetermined
16300,httpd,UNKNOWN,"/**
 * Return the default port from the current request
 * @param r The current request
 * @return The current port
 */",undetermined
16301,httpd,UNKNOWN,/** @see ap_bucket_type_error */,undetermined
16302,httpd,UNKNOWN,"/**
 * @struct ap_bucket_error
 * @brief  A bucket referring to an HTTP error
 *
 * This bucket can be passed down the filter stack to indicate that an
 * HTTP error occurred while running a filter.  In order for this bucket
 * to be used successfully, it MUST be sent as the first bucket in the
 * first brigade to be sent from a given filter.
 */",undetermined
16303,httpd,UNKNOWN,/** Number of buckets using this memory */,undetermined
16304,httpd,UNKNOWN,/** The error code */,undetermined
16305,httpd,UNKNOWN,/** The error string */,undetermined
16306,httpd,UNKNOWN,/** @see ap_bucket_type_error */,undetermined
16307,httpd,UNKNOWN,"/**
 * Determine if a bucket is an error bucket
 * @param e The bucket to inspect
 * @return true or false
 */",undetermined
16308,httpd,UNKNOWN,"/**
 * Make the bucket passed in an error bucket
 * @param b The bucket to make into an error bucket
 * @param error The HTTP error code to put in the bucket.
 * @param buf An optional error string to put in the bucket.
 * @param p A pool to allocate out of.
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
16309,httpd,UNKNOWN,"/**
 * Create a bucket referring to an HTTP error.
 * @param error The HTTP error code to put in the bucket.
 * @param buf An optional error string to put in the bucket.
 * @param p A pool to allocate the error string out of.
 * @param list The bucket allocator from which to allocate the bucket
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
16310,httpd,UNKNOWN,"/**
 * Sett up the protocol fields for subsidiary requests
 * @param rnew New Sub Request
 * @param r current request
 */",undetermined
16311,httpd,UNKNOWN,"/**
 * A wrapup function to keep the internal accounting straight.
 * Indicates that there is no more content coming.
 * @param sub_r Subrequest that is now compete
 */",undetermined
16312,httpd,UNKNOWN,"/**
 * Send an interim (HTTP 1xx) response immediately.
 * @param r The request
 * @param send_headers Whether to send&clear headers in r->headers_out
 */",undetermined
16313,httpd,UNKNOWN,/* !APACHE_HTTP_PROTOCOL_H */,undetermined
16314,httpd,UNKNOWN,/** @} */,undetermined
16315,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16316,httpd,UNKNOWN,"/**
 * @file http_request.h
 * @brief Apache Request library
 *
 * @defgroup APACHE_CORE_REQ Apache Request Processing
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16317,httpd,UNKNOWN,"/*
 * request.c is the code which handles the main line of request
 * processing, once a request has been read in (finding the right per-
 * directory configuration, building it if necessary, and calling all
 * the module dispatch functions in the right order).
 *
 * The pieces here which are public to the modules, allow them to learn
 * how the server would handle some other file or URI, or perhaps even
 * direct the server to serve that other file instead of the one the
 * client requested directly.
 *
 * There are two ways to do that.  The first is the sub_request mechanism,
 * which handles looking up files and URIs as adjuncts to some other
 * request (e.g., directory entries for multiviews and directory listings);
 * the lookup functions stop short of actually running the request, but
 * (e.g., for includes), a module may call for the request to be run
 * by calling run_sub_req.  The space allocated to create sub_reqs can be
 * reclaimed by calling destroy_sub_req --- be sure to copy anything you care
 * about which was allocated in its apr_pool_t elsewhere before doing this.
 */",undetermined
16318,httpd,UNKNOWN,"/**
 * An internal handler used by the ap_process_request, all subrequest mechanisms
 * and the redirect mechanism.
 * @param r The request, subrequest or internal redirect to pre-process
 * @return The return code for the request
 */",undetermined
16319,httpd,UNKNOWN,"/**
 * Create a subrequest from the given URI.  This subrequest can be
 * inspected to find information about the requested URI
 * @param new_uri The URI to lookup
 * @param r The current request
 * @param next_filter The first filter the sub_request should use.  If this is
 *                    NULL, it defaults to the first filter for the main request
 * @return The new request record
 */",undetermined
16320,httpd,UNKNOWN,"/**
 * Create a subrequest for the given file.  This subrequest can be
 * inspected to find information about the requested file
 * @param new_file The file to lookup
 * @param r The current request
 * @param next_filter The first filter the sub_request should use.  If this is
 *                    NULL, it defaults to the first filter for the main request
 * @return The new request record
 */",undetermined
16321,httpd,UNKNOWN,"/**
 * Create a subrequest for the given apr_dir_read result.  This subrequest
 * can be inspected to find information about the requested file
 * @param finfo The apr_dir_read result to lookup
 * @param r The current request
 * @param subtype What type of subrequest to perform, one of;
 * <PRE>
 *      AP_SUBREQ_NO_ARGS     ignore r->args and r->path_info
 *      AP_SUBREQ_MERGE_ARGS  merge r->args and r->path_info
 * </PRE>
 * @param next_filter The first filter the sub_request should use.  If this is
 *                    NULL, it defaults to the first filter for the main request
 * @return The new request record
 * @note The apr_dir_read flags value APR_FINFO_MIN|APR_FINFO_NAME flag is the
 * minimum recommended query if the results will be passed to apr_dir_read.
 * The file info passed must include the name, and must have the same relative
 * directory as the current request.
 */",undetermined
16322,httpd,UNKNOWN,"/**
 * Create a subrequest for the given URI using a specific method.  This
 * subrequest can be inspected to find information about the requested URI
 * @param method The method to use in the new subrequest
 * @param new_uri The URI to lookup
 * @param r The current request
 * @param next_filter The first filter the sub_request should use.  If this is
 *                    NULL, it defaults to the first filter for the main request
 * @return The new request record
 */",undetermined
16323,httpd,UNKNOWN,"/**
 * An output filter to strip EOS buckets from sub-requests.  This always
 * has to be inserted at the end of a sub-requests filter stack.
 * @param f The current filter
 * @param bb The brigade to filter
 * @return status code
 */",undetermined
16324,httpd,UNKNOWN,"/**
 * Run the handler for the subrequest
 * @param r The subrequest to run
 * @return The return code for the subrequest
 */",undetermined
16325,httpd,UNKNOWN,"/**
 * Free the memory associated with a subrequest
 * @param r The subrequest to finish
 */",undetermined
16326,httpd,UNKNOWN,"/*
 * Then there's the case that you want some other request to be served
 * as the top-level request INSTEAD of what the client requested directly.
 * If so, call this from a handler, and then immediately return OK.
 */",undetermined
16327,httpd,UNKNOWN,"/**
 * Redirect the current request to some other uri
 * @param new_uri The URI to replace the current request with
 * @param r The current request
 */",undetermined
16328,httpd,UNKNOWN,"/**
 * This function is designed for things like actions or CGI scripts, when
 * using AddHandler, and you want to preserve the content type across
 * an internal redirect.
 * @param new_uri The URI to replace the current request with.
 * @param r The current request
 */",undetermined
16329,httpd,UNKNOWN,"/**
 * Redirect the current request to a sub_req, merging the pools
 * @param sub_req A subrequest created from this request
 * @param r The current request
 * @note the sub_req's pool will be merged into r's pool, be very careful
 * not to destroy this subrequest, it will be destroyed with the main request!
 */",undetermined
16330,httpd,UNKNOWN,"/**
 * Can be used within any handler to determine if any authentication
 * is required for the current request
 * @param r The current request
 * @return 1 if authentication is required, 0 otherwise
 */",undetermined
16331,httpd,UNKNOWN,"/**
 * @defgroup APACHE_CORE_REQ_AUTH Access Control for Sub-Requests and
 *                                Internal Redirects
 * @ingroup  APACHE_CORE_REQ
 * @{
 */",undetermined
16332,httpd,UNKNOWN,"/**< Run access control hooks on all
                                          internal requests with URIs
                                          distinct from that of initial
                                          request */",undetermined
16333,httpd,UNKNOWN,"/**< Run access control hooks only on
                                          internal requests with
                                          configurations distinct from
                                          that of initial request */",undetermined
16334,httpd,UNKNOWN,"/**< mask to extract internal request
                                               processing mode */",undetermined
16335,httpd,UNKNOWN,"/**
 * Clear flag which determines when access control hooks will be run for
 * internal requests.
 */",undetermined
16336,httpd,UNKNOWN,"/**
 * Determine whether access control hooks will be run for all internal
 * requests with URIs distinct from that of the initial request, or only
 * those for which different configurations apply than those which applied
 * to the initial request.  To accomodate legacy external modules which
 * may expect access control hooks to be run for all internal requests
 * with distinct URIs, this is the default behaviour unless all access
 * control hooks and authentication and authorization providers are
 * registered with AP_AUTH_INTERNAL_PER_CONF.
 * @param ptemp Pool used for temporary allocations
 */",undetermined
16337,httpd,UNKNOWN,"/**
 * Register an authentication or authorization provider with the global
 * provider pool.
 * @param pool The pool to create any storage from
 * @param provider_group The group to store the provider in
 * @param provider_name The name for this provider
 * @param provider_version The version for this provider
 * @param provider Opaque structure for this provider
 * @param type Internal request processing mode, either
 *             AP_AUTH_INTERNAL_PER_URI or AP_AUTH_INTERNAL_PER_CONF
 * @return APR_SUCCESS if all went well
 */",undetermined
16338,httpd,UNKNOWN,/** @} */,undetermined
16339,httpd,UNKNOWN,"/* Optional functions coming from mod_authn_core and mod_authz_core
 * that list all registered authn/z providers.
 */",undetermined
16340,httpd,UNKNOWN,"/**
 * Determine if the current request is the main request or a subrequest
 * @param r The current request
 * @return 1 if this is the main request, 0 otherwise
 */",undetermined
16341,httpd,UNKNOWN,"/**
 * Function to set the r->mtime field to the specified value if it's later
 * than what's already there.
 * @param r The current request
 * @param dependency_mtime Time to set the mtime to
 */",undetermined
16342,httpd,UNKNOWN,"/**
 * Add one or more methods to the list permitted to access the resource.
 * Usually executed by the content handler before the response header is
 * sent, but sometimes invoked at an earlier phase if a module knows it
 * can set the list authoritatively.  Note that the methods are ADDED
 * to any already permitted unless the reset flag is non-zero.  The
 * list is used to generate the Allow response header field when it
 * is needed.
 * @param   r     The pointer to the request identifying the resource.
 * @param   reset Boolean flag indicating whether this list should
 *                completely replace any current settings.
 * @param   ...   A NULL-terminated list of strings, each identifying a
 *                method name to add.
 * @return  None.
 */",undetermined
16343,httpd,UNKNOWN,"/**
 * Add one or more methods to the list permitted to access the resource.
 * Usually executed by the content handler before the response header is
 * sent, but sometimes invoked at an earlier phase if a module knows it
 * can set the list authoritatively.  Note that the methods are ADDED
 * to any already permitted unless the reset flag is non-zero.  The
 * list is used to generate the Allow response header field when it
 * is needed.
 * @param   r     The pointer to the request identifying the resource.
 * @param   reset Boolean flag indicating whether this list should
 *                completely replace any current settings.
 * @param   ...   A list of method identifiers, from the ""M_"" series
 *                defined in httpd.h, terminated with a value of -1
 *                (e.g., ""M_GET, M_POST, M_OPTIONS, -1"")
 * @return  None.
 */",undetermined
16344,httpd,UNKNOWN,"/**
 * Process a top-level request from a client, and synchronously write
 * the response to the client
 * @param r The current request
 */",undetermined
16345,httpd,UNKNOWN,"/* For post-processing after a handler has finished with a request.
 * (Commonly used after it was suspended)
 */",undetermined
16346,httpd,UNKNOWN,"/**
 * Process a top-level request from a client, allowing some or all of
 * the response to remain buffered in the core output filter for later,
 * asynchronous write completion
 * @param r The current request
 */",undetermined
16347,httpd,UNKNOWN,"/**
 * Kill the current request
 * @param type Why the request is dieing
 * @param r The current request
 */",undetermined
16348,httpd,UNKNOWN,/* Hooks */,undetermined
16349,httpd,UNKNOWN,"/**
 * Gives modules a chance to create their request_config entry when the
 * request is created.
 * @param r The current request
 * @ingroup hooks
 */",undetermined
16350,httpd,UNKNOWN,"/**
 * This hook allow modules an opportunity to translate the URI into an
 * actual filename.  If no modules do anything special, the server's default
 * rules will be followed.
 * @param r The current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 */",undetermined
16351,httpd,UNKNOWN,"/**
 * This hook allow modules to set the per_dir_config based on their own
 * context (such as ""<Proxy>"" sections) and responds to contextless requests
 * such as TRACE that need no security or filesystem mapping.
 * based on the filesystem.
 * @param r The current request
 * @return DONE (or HTTP_) if this contextless request was just fulfilled
 * (such as TRACE), OK if this is not a file, and DECLINED if this is a file.
 * The core map_to_storage (HOOK_RUN_REALLY_LAST) will directory_walk
 * and file_walk the r->filename.
 *
 * @ingroup hooks
 */",undetermined
16352,httpd,UNKNOWN,"/**
 * This hook is used to analyze the request headers, authenticate the user,
 * and set the user information in the request record (r->user and
 * r->ap_auth_type). This hook is only run when Apache determines that
 * authentication/authorization is required for this resource (as determined
 * by the 'Require' directive). It runs after the access_checker hook, and
 * before the auth_checker hook. This hook should be registered with
 * ap_hook_check_authn().
 *
 * @param r The current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 * @see ap_hook_check_authn
 */",undetermined
16353,httpd,UNKNOWN,"/**
 * Allows modules to perform module-specific fixing of header fields.  This
 * is invoked just before any content-handler
 * @param r The current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 */",undetermined
16354,httpd,UNKNOWN,"/**
 * This routine is called to determine and/or set the various document type
 * information bits, like Content-type (via r->content_type), language, et
 * cetera.
 * @param r the current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 */",undetermined
16355,httpd,UNKNOWN,"/**
 * This hook is used to apply additional access control to this resource.
 * It runs *before* a user is authenticated, so this hook is really to
 * apply additional restrictions independent of a user. It also runs
 * independent of 'Require' directive usage. This hook should be registered
 * with ap_hook_check_access().
 *
 * @param r the current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 * @see ap_hook_check_access
 */",undetermined
16356,httpd,UNKNOWN,"/**
 * This hook is used to apply additional access control and/or bypass
 * authentication for this resource. It runs *before* a user is authenticated,
 * but after the auth_checker hook.
 * This hook should be registered with ap_hook_check_access_ex().
 *
 * @param r the current request
 * @return OK (allow acces), DECLINED (let later modules decide),
 *         or HTTP_... (deny access)
 * @ingroup hooks
 * @see ap_hook_check_access_ex
 */",undetermined
16357,httpd,UNKNOWN,"/**
 * This hook is used to check to see if the resource being requested
 * is available for the authenticated user (r->user and r->ap_auth_type).
 * It runs after the access_checker and check_user_id hooks. Note that
 * it will *only* be called if Apache determines that access control has
 * been applied to this resource (through a 'Require' directive). This
 * hook should be registered with ap_hook_check_authz().
 *
 * @param r the current request
 * @return OK, DECLINED, or HTTP_...
 * @ingroup hooks
 * @see ap_hook_check_authz
 */",undetermined
16358,httpd,UNKNOWN,"/**
 * Register a hook function that will apply additional access control to
 * the current request.
 * @param pf An access_checker hook function
 * @param aszPre A NULL-terminated array of strings that name modules whose
 *               hooks should precede this one
 * @param aszSucc A NULL-terminated array of strings that name modules whose
 *                hooks should succeed this one
 * @param nOrder An integer determining order before honouring aszPre and
 *               aszSucc (for example, HOOK_MIDDLE)
 * @param type Internal request processing mode, either
 *             AP_AUTH_INTERNAL_PER_URI or AP_AUTH_INTERNAL_PER_CONF
 */",undetermined
16359,httpd,UNKNOWN,"/**
 * Register a hook function that will apply additional access control
 * and/or bypass authentication for the current request.
 * @param pf An access_checker_ex hook function
 * @param aszPre A NULL-terminated array of strings that name modules whose
 *               hooks should precede this one
 * @param aszSucc A NULL-terminated array of strings that name modules whose
 *                hooks should succeed this one
 * @param nOrder An integer determining order before honouring aszPre and
 *               aszSucc (for example, HOOK_MIDDLE)
 * @param type Internal request processing mode, either
 *             AP_AUTH_INTERNAL_PER_URI or AP_AUTH_INTERNAL_PER_CONF
 */",undetermined
16360,httpd,UNKNOWN,"/**
 * Register a hook function that will analyze the request headers,
 * authenticate the user, and set the user information in the request record.
 * @param pf A check_user_id hook function
 * @param aszPre A NULL-terminated array of strings that name modules whose
 *               hooks should precede this one
 * @param aszSucc A NULL-terminated array of strings that name modules whose
 *                hooks should succeed this one
 * @param nOrder An integer determining order before honouring aszPre and
 *               aszSucc (for example, HOOK_MIDDLE)
 * @param type Internal request processing mode, either
 *             AP_AUTH_INTERNAL_PER_URI or AP_AUTH_INTERNAL_PER_CONF
 */",undetermined
16361,httpd,UNKNOWN,"/**
 * Register a hook function that determine if the resource being requested
 * is available for the currently authenticated user.
 * @param pf An auth_checker hook function
 * @param aszPre A NULL-terminated array of strings that name modules whose
 *               hooks should precede this one
 * @param aszSucc A NULL-terminated array of strings that name modules whose
 *                hooks should succeed this one
 * @param nOrder An integer determining order before honouring aszPre and
 *               aszSucc (for example, HOOK_MIDDLE)
 * @param type Internal request processing mode, either
 *             AP_AUTH_INTERNAL_PER_URI or AP_AUTH_INTERNAL_PER_CONF
 */",undetermined
16362,httpd,UNKNOWN,"/**
 * This hook allows modules to insert filters for the current request
 * @param r the current request
 * @ingroup hooks
 */",undetermined
16363,httpd,UNKNOWN,"/**
 * This hook allows modules to affect the request immediately after the
 * per-directory configuration for the request has been generated.
 * @param r The current request
 * @return OK (allow acces), DECLINED (let later modules decide),
 *         or HTTP_... (deny access)
 * @ingroup hooks
 */",undetermined
16364,httpd,UNKNOWN,"/**
 * This hook allows modules to handle/emulate the apr_stat() calls
 * needed for directory walk.
 * @param r The current request
 * @return apr_status_t or AP_DECLINED (let later modules decide)
 * @ingroup hooks
 */",undetermined
16365,httpd,UNKNOWN,/** End Of REQUEST (EOR) bucket */,undetermined
16366,httpd,UNKNOWN,"/**
 * Determine if a bucket is an End Of REQUEST (EOR) bucket
 * @param e The bucket to inspect
 * @return true or false
 */",undetermined
16367,httpd,UNKNOWN,"/**
 * Make the bucket passed in an End Of REQUEST (EOR) bucket
 * @param b The bucket to make into an EOR bucket
 * @param r The request to destroy when this bucket is destroyed
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
16368,httpd,UNKNOWN,"/**
 * Create a bucket referring to an End Of REQUEST (EOR). This bucket
 * holds a pointer to the request_rec, so that the request can be
 * destroyed right after all of the output has been sent to the client.
 *
 * @param list The freelist from which this bucket should be allocated
 * @param r The request to destroy when this bucket is destroyed
 * @return The new bucket, or NULL if allocation failed
 */",undetermined
16369,httpd,UNKNOWN,/* !APACHE_HTTP_REQUEST_H */,undetermined
16370,httpd,UNKNOWN,/** @} */,undetermined
16371,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16372,httpd,UNKNOWN,"/**
 * @file  http_vhost.h
 * @brief Virtual Host package
 *
 * @defgroup APACHE_CORE_VHOST Virtual Host Package
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16373,httpd,UNKNOWN,"/**
 * called before any config is read
 * @param p Pool to allocate out of
 */",undetermined
16374,httpd,UNKNOWN,"/**
 * called after the config has been read to compile the tables needed to do
 * the run-time vhost lookups
 * @param p The pool to allocate out of
 * @param main_server The start of the virtual host list
 */",undetermined
16375,httpd,UNKNOWN,"/**
 * handle addresses in ""<VirtualHost>"" statement
 * @param p The pool to allocate out of
 * @param hostname The hostname in the VirtualHost statement
 * @param s The list of Virtual Hosts.
 */",undetermined
16376,httpd,UNKNOWN,"/**
 * handle NameVirtualHost directive
 * @param cmd Command Parameters structure
 * @param dummy NOT USED
 * @param arg a host of the form ""<address>[:port]""
 */",undetermined
16377,httpd,UNKNOWN,"/**
 * Callback function for every Name Based Virtual Host.
 * @param baton Opaque user object
 * @param conn The current Connection
 * @param s The current Server
 * @see ap_vhost_iterate_given_conn
 * @return 0 on success, any non-zero return will stop the iteration.
 */",undetermined
16378,httpd,UNKNOWN,"/**
 * For every virtual host on this connection, call func_cb.
 * @param conn The current connection
 * @param func_cb Function called for every Name Based Virtual Host for this
 *                connection.
 * @param baton Opaque object passed to func_cb.
 * @return The return value from func_cb.
 * @note If func_cb returns non-zero, the function will return at this point,
 *       and not continue iterating the virtual hosts.
 */",undetermined
16379,httpd,UNKNOWN,"/**
 * given an ip address only, give our best guess as to what vhost it is
 * @param conn The current connection
 */",undetermined
16380,httpd,UNKNOWN,"/**
 * ap_update_vhost_given_ip is never enough, and this is always called after
 * the headers have been read.  It may change r->server.
 * @param r The current request
 */",undetermined
16381,httpd,UNKNOWN,"/**
 * Match the host in the header with the hostname of the server for this
 * request.
 * @param r The current request
 * @param host The hostname in the headers
 * @param port The port from the headers
 * @return return 1 if the host:port matches any of the aliases of r->server,
 * return 0 otherwise
 */",undetermined
16382,httpd,UNKNOWN,/* !APACHE_HTTP_VHOST_H */,undetermined
16383,httpd,UNKNOWN,/** @} */,undetermined
16384,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16385,httpd,UNKNOWN,"/**
 * @file httpd.h
 * @brief HTTP Daemon routines
 *
 * @defgroup APACHE Apache HTTP Server
 *
 * Top level group of which all other groups are a member
 * @{
 *
 * @defgroup APACHE_MODS Loadable modules
 *           Top level group for modules
 * @defgroup APACHE_OS Operating System Specific
 * @defgroup APACHE_INTERNAL Internal interfaces
 * @defgroup APACHE_CORE Core routines
 * @{
 * @defgroup APACHE_CORE_DAEMON HTTP Daemon Routine
 * @{
 */",undetermined
16386,httpd,UNKNOWN,"/* XXX - We need to push more stuff to other .h files, or even .c files, to
 * make this file smaller
 */",undetermined
16387,httpd,UNKNOWN,/* Headers in which EVERYONE has an interest... */,undetermined
16388,httpd,UNKNOWN,"/* Note: apr_uri.h is also included, see below */",undetermined
16389,httpd,UNKNOWN,/* ----------------------------- config dir ------------------------------ */,undetermined
16390,httpd,UNKNOWN,"/** Define this to be the default server home dir. Most things later in this
 * file with a relative pathname will have this added.
 */",undetermined
16391,httpd,UNKNOWN,/** Set default for OS/2 file system */,undetermined
16392,httpd,UNKNOWN,/** Set default for Windows file system */,undetermined
16393,httpd,UNKNOWN,/** Set the default for NetWare */,undetermined
16394,httpd,UNKNOWN,/** Set for all other OSs */,undetermined
16395,httpd,UNKNOWN,/* HTTPD_ROOT */,undetermined
16396,httpd,UNKNOWN,"/*
 * --------- You shouldn't have to edit anything below this line ----------
 *
 * Any modifications to any defaults not defined above should be done in the
 * respective configuration file.
 *
 */",undetermined
16397,httpd,UNKNOWN,"/**
 * Default location of documents.  Can be overridden by the DocumentRoot
 * directive.
 */",undetermined
16398,httpd,UNKNOWN,/* Set default for OS/2 file system */,undetermined
16399,httpd,UNKNOWN,/* Set default for non OS/2 file system */,undetermined
16400,httpd,UNKNOWN,/* DOCUMENT_LOCATION */,undetermined
16401,httpd,UNKNOWN,/** Maximum number of dynamically loaded modules */,undetermined
16402,httpd,UNKNOWN,/** Default administrator's address */,undetermined
16403,httpd,UNKNOWN,/** The name of the log files */,undetermined
16404,httpd,UNKNOWN,/* DEFAULT_ERRORLOG */,undetermined
16405,httpd,UNKNOWN,/** Define this to be what your per-directory security files are called */,undetermined
16406,httpd,UNKNOWN,/* Set default for OS/2 file system */,undetermined
16407,httpd,UNKNOWN,/* DEFAULT_ACCESS_FNAME */,undetermined
16408,httpd,UNKNOWN,/** The name of the server config file */,undetermined
16409,httpd,UNKNOWN,/** The default path for CGI scripts if none is currently set */,undetermined
16410,httpd,UNKNOWN,"/** The path to the suExec wrapper, can be overridden in Configuration */",undetermined
16411,httpd,UNKNOWN,/** The timeout for waiting for messages */,undetermined
16412,httpd,UNKNOWN,/** The timeout for waiting for keepalive timeout until next request */,undetermined
16413,httpd,UNKNOWN,/** The number of requests to entertain per connection */,undetermined
16414,httpd,UNKNOWN,"/*
 * Limits on the size of various request items.  These limits primarily
 * exist to prevent simple denial-of-service attacks on a server based
 * on misuse of the protocol.  The recommended values will depend on the
 * nature of the server resources -- CGI scripts and database backends
 * might require large values, but most servers could get by with much
 * smaller limits than we use below.  The request message body size can
 * be limited by the per-dir config directive LimitRequestBody.
 *
 * Internal buffer sizes are two bytes more than the DEFAULT_LIMIT_REQUEST_LINE
 * and DEFAULT_LIMIT_REQUEST_FIELDSIZE below, which explains the 8190.
 * These two limits can be lowered or raised by the server config
 * directives LimitRequestLine and LimitRequestFieldsize, respectively.
 *
 * DEFAULT_LIMIT_REQUEST_FIELDS can be modified or disabled (set = 0) by
 * the server config directive LimitRequestFields.
 */",undetermined
16415,httpd,UNKNOWN,/** default limit on bytes in Request-Line (Method+URI+HTTP-version) */,undetermined
16416,httpd,UNKNOWN,/** default limit on bytes in any one header field  */,undetermined
16417,httpd,UNKNOWN,/** default limit on number of request header fields */,undetermined
16418,httpd,UNKNOWN,"/**
 * The default default character set name to add if AddDefaultCharset is
 * enabled.  Overridden with AddDefaultCharsetName.
 */",undetermined
16419,httpd,UNKNOWN,/** default HTTP Server protocol */,undetermined
16420,httpd,UNKNOWN,/* ------------------ stuff that modules are allowed to look at ----------- */,undetermined
16421,httpd,UNKNOWN,/** Define this to be what your HTML directory content files are called */,undetermined
16422,httpd,UNKNOWN,/** The name of the MIME types file */,undetermined
16423,httpd,UNKNOWN,"/*
 * Define the HTML doctype strings centrally.
 */",undetermined
16424,httpd,UNKNOWN,/** HTML 2.0 Doctype */,undetermined
16425,httpd,UNKNOWN,/** HTML 3.2 Doctype */,undetermined
16426,httpd,UNKNOWN,/** HTML 4.0 Strict Doctype */,undetermined
16427,httpd,UNKNOWN,/** HTML 4.0 Transitional Doctype */,undetermined
16428,httpd,UNKNOWN,/** HTML 4.0 Frameset Doctype */,undetermined
16429,httpd,UNKNOWN,/** XHTML 1.0 Strict Doctype */,undetermined
16430,httpd,UNKNOWN,/** XHTML 1.0 Transitional Doctype */,undetermined
16431,httpd,UNKNOWN,/** XHTML 1.0 Frameset Doctype */,undetermined
16432,httpd,UNKNOWN,"/** Internal representation for a HTTP protocol number, e.g., HTTP/1.1 */",undetermined
16433,httpd,UNKNOWN,/** Major part of HTTP protocol */,undetermined
16434,httpd,UNKNOWN,/** Minor part of HTTP protocol */,undetermined
16435,httpd,UNKNOWN,/* -------------- Port number for server running standalone --------------- */,undetermined
16436,httpd,UNKNOWN,/** default HTTP Port */,undetermined
16437,httpd,UNKNOWN,/** default HTTPS Port */,undetermined
16438,httpd,UNKNOWN,"/**
 * Check whether @a port is the default port for the request @a r.
 * @param port The port number
 * @param r The request
 * @see #ap_default_port
 */",undetermined
16439,httpd,UNKNOWN,"/**
 * Get the default port for a request (which depends on the scheme).
 * @param r The request
 */",undetermined
16440,httpd,UNKNOWN,"/**
 * Get the scheme for a request.
 * @param r The request
 */",undetermined
16441,httpd,UNKNOWN,/** The default string length */,undetermined
16442,httpd,UNKNOWN,/** The length of a Huge string */,undetermined
16443,httpd,UNKNOWN,/** The size of the server's internal read-write buffers */,undetermined
16444,httpd,UNKNOWN,/** The max number of regex captures that can be expanded by ap_pregsub */,undetermined
16445,httpd,UNKNOWN,"/**
 * APR_HAS_LARGE_FILES introduces the problem of spliting sendfile into
 * mutiple buckets, no greater than MAX(apr_size_t), and more granular
 * than that in case the brigade code/filters attempt to read it directly.
 * ### 16mb is an invention, no idea if it is reasonable.
 */",undetermined
16446,httpd,UNKNOWN,/* 2^24 */,undetermined
16447,httpd,UNKNOWN,"/**
 * MPM child process exit status values
 * The MPM parent process may check the status to see if special
 * error handling is required.
 */",undetermined
16448,httpd,UNKNOWN,/** a normal exit */,undetermined
16449,httpd,UNKNOWN,/** A fatal error arising during the server's init sequence */,undetermined
16450,httpd,UNKNOWN,/**  The child died during its init sequence */,undetermined
16451,httpd,UNKNOWN,"/**
 *   The child exited due to a resource shortage.
 *   The parent should limit the rate of forking until
 *   the situation is resolved.
 */",undetermined
16452,httpd,UNKNOWN,"/**
 *     A fatal error, resulting in the whole server aborting.
 *     If a child exits with this error, the parent process
 *     considers this a server-wide fatal error and aborts.
 */",undetermined
16453,httpd,UNKNOWN,"/**
 * Stuff marked #AP_DECLARE is part of the API, and intended for use
 * by modules. Its purpose is to allow us to add attributes that
 * particular platforms or compilers require to every exported function.
 */",undetermined
16454,httpd,UNKNOWN,"/**
 * Stuff marked #AP_DECLARE_NONSTD is part of the API, and intended for
 * use by modules.  The difference between #AP_DECLARE and
 * #AP_DECLARE_NONSTD is that the latter is required for any functions
 * which use varargs or are used via indirect function call.  This
 * is to accomodate the two calling conventions in windows dlls.
 */",undetermined
16455,httpd,UNKNOWN,"/**
 * @internal
 * modules should not use functions marked AP_CORE_DECLARE
 */",undetermined
16456,httpd,UNKNOWN,"/**
 * @internal
 * modules should not use functions marked AP_CORE_DECLARE_NONSTD
 */",undetermined
16457,httpd,UNKNOWN,"/**
 * @defgroup APACHE_APR_STATUS_T HTTPD specific values of apr_status_t
 * @{
 */",undetermined
16458,httpd,UNKNOWN,/** The function declines to handle the request */,undetermined
16459,httpd,UNKNOWN,/** @} */,undetermined
16460,httpd,UNKNOWN,"/**
 * @brief The numeric version information is broken out into fields within this
 * structure.
 */",undetermined
16461,httpd,UNKNOWN,/**< major number */,undetermined
16462,httpd,UNKNOWN,/**< minor number */,undetermined
16463,httpd,UNKNOWN,/**< patch number */,undetermined
16464,httpd,UNKNOWN,"/**< additional string like ""-dev"" */",undetermined
16465,httpd,UNKNOWN,"/**
 * Return httpd's version information in a numeric form.
 *
 *  @param version Pointer to a version structure for returning the version
 *                 information.
 */",undetermined
16466,httpd,UNKNOWN,"/**
 * Get the server banner in a form suitable for sending over the
 * network, with the level of information controlled by the
 * ServerTokens directive.
 * @return The server banner
 */",undetermined
16467,httpd,UNKNOWN,"/**
 * Get the server description in a form suitable for local displays,
 * status reports, or logging.  This includes the detailed server
 * version and information about some modules.  It is not affected
 * by the ServerTokens directive.
 * @return The server description
 */",undetermined
16468,httpd,UNKNOWN,"/**
 * Add a component to the server description and banner strings
 * @param pconf The pool to allocate the component from
 * @param component The string to add
 */",undetermined
16469,httpd,UNKNOWN,"/**
 * Get the date a time that the server was built
 * @return The server build time string
 */",undetermined
16470,httpd,UNKNOWN,/* non-HTTP status codes returned by hooks */,undetermined
16471,httpd,UNKNOWN,/**< Module has handled this stage. */,undetermined
16472,httpd,UNKNOWN,/**< Module declines to handle */,undetermined
16473,httpd,UNKNOWN,"/**< Module has served the response completely
                                 *  - it's safe to die() with no more output
                                 */",undetermined
16474,httpd,UNKNOWN,"/**< Module will handle the remainder of the request.
                      * The core will never invoke the request again, */",undetermined
16475,httpd,UNKNOWN,"/** Returned by the bottom-most filter if no data was written.
 *  @see ap_pass_brigade(). */",undetermined
16476,httpd,UNKNOWN,"/** Returned by the bottom-most filter if no data was read.
 *  @see ap_get_brigade(). */",undetermined
16477,httpd,UNKNOWN,"/** Returned by any filter if the filter chain encounters an error
 *  and has already dealt with the error response.
 */",undetermined
16478,httpd,UNKNOWN,"/**
 * @defgroup HTTP_Status HTTP Status Codes
 * @{
 */",undetermined
16479,httpd,UNKNOWN,"/**
 * The size of the static status_lines array in http_protocol.c for
 * storing all of the potential response status-lines (a sparse table).
 * When adding a new code here add it to status_lines as well.
 * A future version should dynamically generate the apr_table_t at startup.
 */",undetermined
16480,httpd,UNKNOWN,/** is the status code informational */,undetermined
16481,httpd,UNKNOWN,/** is the status code OK ?*/,undetermined
16482,httpd,UNKNOWN,/** is the status code a redirect */,undetermined
16483,httpd,UNKNOWN,/** is the status code a error (client or server) */,undetermined
16484,httpd,UNKNOWN,/** is the status code a client error  */,undetermined
16485,httpd,UNKNOWN,/** is the status code a server error  */,undetermined
16486,httpd,UNKNOWN,/** is the status code a (potentially) valid response code?  */,undetermined
16487,httpd,UNKNOWN,/** should the status code drop the connection */,undetermined
16488,httpd,UNKNOWN,/** @} */,undetermined
16489,httpd,UNKNOWN,"/**
 * @defgroup Methods List of Methods recognized by the server
 * @ingroup APACHE_CORE_DAEMON
 * @{
 *
 * @brief Methods recognized (but not necessarily handled) by the server.
 *
 * These constants are used in bit shifting masks of size int, so it is
 * unsafe to have more methods than bits in an int.  HEAD == M_GET.
 * This list must be tracked by the list in http_protocol.c in routine
 * ap_method_name_of().
 *
 */",undetermined
16490,httpd,UNKNOWN,/** RFC 2616: HTTP */,undetermined
16491,httpd,UNKNOWN,/*  :             */,undetermined
16492,httpd,UNKNOWN,/** RFC 2616: HTTP */,undetermined
16493,httpd,UNKNOWN,/** no rfc(!)  ### remove this one? */,undetermined
16494,httpd,UNKNOWN,/** RFC 2518: WebDAV */,undetermined
16495,httpd,UNKNOWN,/*  :               */,undetermined
16496,httpd,UNKNOWN,/** RFC 2518: WebDAV */,undetermined
16497,httpd,UNKNOWN,/** RFC 3253: WebDAV Versioning */,undetermined
16498,httpd,UNKNOWN,/*  :                          */,undetermined
16499,httpd,UNKNOWN,/** no valid method */,undetermined
16500,httpd,UNKNOWN,"/**
 * METHODS needs to be equal to the number of bits
 * we are using for limit masks.
 */",undetermined
16501,httpd,UNKNOWN,"/**
 * The method mask bit to shift for anding with a bitmask.
 */",undetermined
16502,httpd,UNKNOWN,/** @} */,undetermined
16503,httpd,UNKNOWN,/** @see ap_method_list_t */,undetermined
16504,httpd,UNKNOWN,"/**
 * @struct ap_method_list_t
 * @brief  Structure for handling HTTP methods.
 *
 * Methods known to the server are accessed via a bitmask shortcut;
 * extension methods are handled by an array.
 */",undetermined
16505,httpd,UNKNOWN,/** The bitmask used for known methods */,undetermined
16506,httpd,UNKNOWN,/** the array used for extension methods */,undetermined
16507,httpd,UNKNOWN,"/**
 * @defgroup module_magic Module Magic mime types
 * @{
 */",undetermined
16508,httpd,UNKNOWN,/** Magic for mod_cgi[d] */,undetermined
16509,httpd,UNKNOWN,/** Magic for mod_include */,undetermined
16510,httpd,UNKNOWN,/** Magic for mod_include */,undetermined
16511,httpd,UNKNOWN,/** Magic for mod_dir */,undetermined
16512,httpd,UNKNOWN,/** @} */,undetermined
16513,httpd,UNKNOWN,/* Just in case your linefeed isn't the one the other end is expecting. */,undetermined
16514,httpd,UNKNOWN,/** linefeed */,undetermined
16515,httpd,UNKNOWN,/** carrige return */,undetermined
16516,httpd,UNKNOWN,/** carrige return /Line Feed Combo */,undetermined
16517,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
16518,httpd,UNKNOWN,"/* For platforms using the EBCDIC charset, the transition ASCII->EBCDIC is done
 * in the buff package (bread/bputs/bwrite).  Everywhere else, we use
 * ""native EBCDIC"" CR and NL characters. These are therefore
 * defined as
 * '\r' and '\n'.
 */",undetermined
16519,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
16520,httpd,UNKNOWN,/** Useful for common code with either platform charset. */,undetermined
16521,httpd,UNKNOWN,"/**
 * @defgroup values_request_rec_body Possible values for request_rec.read_body
 * @{
 * Possible values for request_rec.read_body (set by handling module):
 */",undetermined
16522,httpd,UNKNOWN,/** Send 413 error if message has any body */,undetermined
16523,httpd,UNKNOWN,/** Send 411 error if body without Content-Length */,undetermined
16524,httpd,UNKNOWN,"/** If chunked, remove the chunks for me. */",undetermined
16525,httpd,UNKNOWN,/** @} // values_request_rec_body */,undetermined
16526,httpd,UNKNOWN,"/**
 * @defgroup values_request_rec_used_path_info Possible values for request_rec.used_path_info
 * @ingroup APACHE_CORE_DAEMON
 * @{
 * Possible values for request_rec.used_path_info:
 */",undetermined
16527,httpd,UNKNOWN,/** Accept the path_info from the request */,undetermined
16528,httpd,UNKNOWN,/** Return a 404 error if path_info was given */,undetermined
16529,httpd,UNKNOWN,/** Module may chose to use the given path_info */,undetermined
16530,httpd,UNKNOWN,/** @} // values_request_rec_used_path_info */,undetermined
16531,httpd,UNKNOWN,"/*
 * Things which may vary per file-lookup WITHIN a request ---
 * e.g., state of MIME config.  Basically, the name of an object, info
 * about the object, and any other info we may ahve which may need to
 * change as we go poking around looking for it (e.g., overridden by
 * .htaccess files).
 *
 * Note how the default state of almost all these things is properly
 * zero, so that allocating it with pcalloc does the right thing without
 * a whole lot of hairy initialization... so long as we are willing to
 * make the (fairly) portable assumption that the bit pattern of a NULL
 * pointer is, in fact, zero.
 */",undetermined
16532,httpd,UNKNOWN,"/**
 * @brief This represents the result of calling htaccess; these are cached for
 * each request.
 */",undetermined
16533,httpd,UNKNOWN,/** the directory to which this applies */,undetermined
16534,httpd,UNKNOWN,/** the overrides allowed for the .htaccess file */,undetermined
16535,httpd,UNKNOWN,/** the override options allowed for the .htaccess file */,undetermined
16536,httpd,UNKNOWN,/** Table of allowed directives for override */,undetermined
16537,httpd,UNKNOWN,/** the configuration directives */,undetermined
16538,httpd,UNKNOWN,"/** the next one, or NULL if no more; N.B. never change this */",undetermined
16539,httpd,UNKNOWN,"/* The following four types define a hierarchy of activities, so that
 * given a request_rec r you can write r->connection->server->process
 * to get to the process_rec.  While this reduces substantially the
 * number of arguments that various hooks require beware that in
 * threaded versions of the server you must consider multiplexing
 * issues.  */",undetermined
16540,httpd,UNKNOWN,/** A structure that represents one process */,undetermined
16541,httpd,UNKNOWN,/** A structure that represents a virtual server */,undetermined
16542,httpd,UNKNOWN,/** A structure that represents one connection */,undetermined
16543,httpd,UNKNOWN,/** A structure that represents the current request */,undetermined
16544,httpd,UNKNOWN,/** A structure that represents the status of the current connection */,undetermined
16545,httpd,UNKNOWN,/* ### would be nice to not include this from httpd.h ... */,undetermined
16546,httpd,UNKNOWN,/* This comes after we have defined the request_rec type */,undetermined
16547,httpd,UNKNOWN,"/**
 * @brief A structure that represents one process
 */",undetermined
16548,httpd,UNKNOWN,/** Global pool. Cleared upon normal exit */,undetermined
16549,httpd,UNKNOWN,/** Configuration pool. Cleared upon restart */,undetermined
16550,httpd,UNKNOWN,/** The program name used to execute the program */,undetermined
16551,httpd,UNKNOWN,/** The command line arguments */,undetermined
16552,httpd,UNKNOWN,/** Number of command line arguments passed to the program */,undetermined
16553,httpd,UNKNOWN,"/**
 * @brief A structure that represents the current request
 */",undetermined
16554,httpd,UNKNOWN,/** The pool associated with the request */,undetermined
16555,httpd,UNKNOWN,/** The connection to the client */,undetermined
16556,httpd,UNKNOWN,/** The virtual host for this request */,undetermined
16557,httpd,UNKNOWN,/** Pointer to the redirected request if this is an external redirect */,undetermined
16558,httpd,UNKNOWN,/** Pointer to the previous request if this is an internal redirect */,undetermined
16559,httpd,UNKNOWN,"/** Pointer to the main request if this is a sub-request
     * (see http_request.h) */",undetermined
16560,httpd,UNKNOWN,"/* Info about the request itself... we begin with stuff that only
     * protocol.c should ever touch...
     */",undetermined
16561,httpd,UNKNOWN,/** First line of request */,undetermined
16562,httpd,UNKNOWN,"/** HTTP/0.9, ""simple"" request (e.g. GET /foo\n w/no headers) */",undetermined
16563,httpd,UNKNOWN,"/** A proxy request (calculated during post_read_request/translate_name)
     *  possible values PROXYREQ_NONE, PROXYREQ_PROXY, PROXYREQ_REVERSE,
     *                  PROXYREQ_RESPONSE
     */",undetermined
16564,httpd,UNKNOWN,"/** HEAD request, as opposed to GET */",undetermined
16565,httpd,UNKNOWN,/** Protocol version number of protocol; 1.1 = 1001 */,undetermined
16566,httpd,UNKNOWN,"/** Protocol string, as given to us, or HTTP/0.9 */",undetermined
16567,httpd,UNKNOWN,"/** Host, as set by full URI or Host: */",undetermined
16568,httpd,UNKNOWN,/** Time when the request started */,undetermined
16569,httpd,UNKNOWN,"/** Status line, if set by script */",undetermined
16570,httpd,UNKNOWN,/** Status line */,undetermined
16571,httpd,UNKNOWN,"/* Request method, two ways; also, protocol, etc..  Outside of protocol.c,
     * look, but don't touch.
     */",undetermined
16572,httpd,UNKNOWN,"/** M_GET, M_POST, etc. */",undetermined
16573,httpd,UNKNOWN,"/** Request method (eg. GET, HEAD, POST, etc.) */",undetermined
16574,httpd,UNKNOWN,"/**
     *  'allowed' is a bitvector of the allowed methods.
     *
     *  A handler must ensure that the request method is one that
     *  it is capable of handling.  Generally modules should DECLINE
     *  any request methods they do not handle.  Prior to aborting the
     *  handler like this the handler should set r->allowed to the list
     *  of methods that it is willing to handle.  This bitvector is used
     *  to construct the ""Allow:"" header required for OPTIONS requests,
     *  and HTTP_METHOD_NOT_ALLOWED and HTTP_NOT_IMPLEMENTED status codes.
     *
     *  Since the default_handler deals with OPTIONS, all modules can
     *  usually decline to deal with OPTIONS.  TRACE is always allowed,
     *  modules don't need to set it explicitly.
     *
     *  Since the default_handler will always handle a GET, a
     *  module which does *not* implement GET should probably return
     *  HTTP_METHOD_NOT_ALLOWED.  Unfortunately this means that a Script GET
     *  handler can't be installed by mod_actions.
     */",undetermined
16575,httpd,UNKNOWN,/** Array of extension methods */,undetermined
16576,httpd,UNKNOWN,/** List of allowed methods */,undetermined
16577,httpd,UNKNOWN,/** byte count in stream is for body */,undetermined
16578,httpd,UNKNOWN,"/** body byte count, for easy access */",undetermined
16579,httpd,UNKNOWN,/** Last modified time of the requested resource */,undetermined
16580,httpd,UNKNOWN,/* HTTP/1.1 connection-level features */,undetermined
16581,httpd,UNKNOWN,/** The Range: header */,undetermined
16582,httpd,UNKNOWN,"/** The ""real"" content length */",undetermined
16583,httpd,UNKNOWN,/** sending chunked transfer-coding */,undetermined
16584,httpd,UNKNOWN,"/** Method for reading the request body
     * (eg. REQUEST_CHUNKED_ERROR, REQUEST_NO_BODY,
     *  REQUEST_CHUNKED_DECHUNK, etc...) */",undetermined
16585,httpd,UNKNOWN,/** reading chunked transfer-coding */,undetermined
16586,httpd,UNKNOWN,/** is client waiting for a 100 response? */,undetermined
16587,httpd,UNKNOWN,/** The optional kept body of the request. */,undetermined
16588,httpd,UNKNOWN,/** For ap_body_to_table(): parsed body */,undetermined
16589,httpd,UNKNOWN,"/* XXX: ap_body_to_table has been removed. Remove body_table too or
     * XXX: keep it to reintroduce ap_body_to_table without major bump? */",undetermined
16590,httpd,UNKNOWN,/** Remaining bytes left to read from the request body */,undetermined
16591,httpd,UNKNOWN,/** Number of bytes that have been read  from the request body */,undetermined
16592,httpd,UNKNOWN,"/* MIME header environments, in and out.  Also, an array containing
     * environment variables to be passed to subprocesses, so people can
     * write modules to add to that environment.
     *
     * The difference between headers_out and err_headers_out is that the
     * latter are printed even on error, and persist across internal redirects
     * (so the headers printed for ErrorDocument handlers will have them).
     *
     * The 'notes' apr_table_t is for notes from one module to another, with no
     * other set purpose in mind...
     */",undetermined
16593,httpd,UNKNOWN,/** MIME header environment from the request */,undetermined
16594,httpd,UNKNOWN,/** MIME header environment for the response */,undetermined
16595,httpd,UNKNOWN,"/** MIME header environment for the response, printed even on errors and
     * persist across internal redirects */",undetermined
16596,httpd,UNKNOWN,/** Array of environment variables to be used for sub processes */,undetermined
16597,httpd,UNKNOWN,/** Notes from one module to another */,undetermined
16598,httpd,UNKNOWN,"/* content_type, handler, content_encoding, and all content_languages
     * MUST be lowercased strings.  They may be pointers to static strings;
     * they should not be modified in place.
     */",undetermined
16599,httpd,UNKNOWN,/** The content-type for the current request */,undetermined
16600,httpd,UNKNOWN,/* Break these out --- we dispatch on 'em */,undetermined
16601,httpd,UNKNOWN,/** The handler string that we use to call a handler function */,undetermined
16602,httpd,UNKNOWN,/* What we *really* dispatch on */,undetermined
16603,httpd,UNKNOWN,/** How to encode the data */,undetermined
16604,httpd,UNKNOWN,/** Array of strings representing the content languages */,undetermined
16605,httpd,UNKNOWN,/** variant list validator (if negotiated) */,undetermined
16606,httpd,UNKNOWN,"/** If an authentication check was made, this gets set to the user name. */",undetermined
16607,httpd,UNKNOWN,"/** If an authentication check was made, this gets set to the auth type. */",undetermined
16608,httpd,UNKNOWN,"/* What object is being requested (either directly, or via include
     * or content-negotiation mapping).
     */",undetermined
16609,httpd,UNKNOWN,/** The URI without any parsing performed */,undetermined
16610,httpd,UNKNOWN,"/** The path portion of the URI, or ""/"" if no path provided */",undetermined
16611,httpd,UNKNOWN,/** The filename on disk corresponding to this response */,undetermined
16612,httpd,UNKNOWN,"/* XXX: What does this mean? Please define ""canonicalize"" -aaron */",undetermined
16613,httpd,UNKNOWN,"/** The true filename, we canonicalize r->filename if these don't match */",undetermined
16614,httpd,UNKNOWN,/** The PATH_INFO extracted from this request */,undetermined
16615,httpd,UNKNOWN,/** The QUERY_ARGS extracted from this request */,undetermined
16616,httpd,UNKNOWN,"/**
     * Flag for the handler to accept or reject path_info on
     * the current request.  All modules should respect the
     * AP_REQ_ACCEPT_PATH_INFO and AP_REQ_REJECT_PATH_INFO
     * values, while AP_REQ_DEFAULT_PATH_INFO indicates they
     * may follow existing conventions.  This is set to the
     * user's preference upon HOOK_VERY_FIRST of the fixups.
     */",undetermined
16617,httpd,UNKNOWN,/** A flag to determine if the eos bucket has been sent yet */,undetermined
16618,httpd,UNKNOWN,"/* Various other config info which may change with .htaccess files
     * These are config vectors, with one void* pointer for each module
     * (the thing pointed to being the module's business).
     */",undetermined
16619,httpd,UNKNOWN,"/** Options set in config files, etc. */",undetermined
16620,httpd,UNKNOWN,/** Notes on *this* request */,undetermined
16621,httpd,UNKNOWN,"/** Optional request log level configuration. Will usually point
     *  to a server or per_dir config, i.e. must be copied before
     *  modifying */",undetermined
16622,httpd,UNKNOWN,"/** Id to identify request in access and error log. Set when the first
     *  error log entry for this request is generated.
     */",undetermined
16623,httpd,UNKNOWN,"/**
     * A linked list of the .htaccess configuration directives
     * accessed by this request.
     * N.B. always add to the head of the list, _never_ to the end.
     * that way, a sub request's list can (temporarily) point to a parent's list
     */",undetermined
16624,httpd,UNKNOWN,/** A list of output filters to be used for this request */,undetermined
16625,httpd,UNKNOWN,/** A list of input filters to be used for this request */,undetermined
16626,httpd,UNKNOWN,"/** A list of protocol level output filters to be used for this
     *  request */",undetermined
16627,httpd,UNKNOWN,"/** A list of protocol level input filters to be used for this
     *  request */",undetermined
16628,httpd,UNKNOWN,/** This response can not be cached */,undetermined
16629,httpd,UNKNOWN,/** There is no local copy of this response */,undetermined
16630,httpd,UNKNOWN,"/** Mutex protect callbacks registered with ap_mpm_register_timed_callback
     * from being run before the original handler finishes running
     */",undetermined
16631,httpd,UNKNOWN,/** A struct containing the components of URI */,undetermined
16632,httpd,UNKNOWN,/**  finfo.protection (st_mode) set to zero if no such file */,undetermined
16633,httpd,UNKNOWN,"/** remote address information from conn_rec, can be overridden if
     * necessary by a module.
     * This is the address that originated the request.
     */",undetermined
16634,httpd,UNKNOWN,"/**
 * @defgroup ProxyReq Proxy request types
 *
 * Possible values of request_rec->proxyreq. A request could be normal,
 *  proxied or reverse proxied. Normally proxied and reverse proxied are
 *  grouped together as just ""proxied"", but sometimes it's necessary to
 *  tell the difference between the two, such as for authentication.
 * @{
 */",undetermined
16635,httpd,UNKNOWN,/**< No proxy */,undetermined
16636,httpd,UNKNOWN,/**< Standard proxy */,undetermined
16637,httpd,UNKNOWN,/**< Reverse proxy */,undetermined
16638,httpd,UNKNOWN,/**< Origin response */,undetermined
16639,httpd,UNKNOWN,/* @} */,undetermined
16640,httpd,UNKNOWN,"/**
 * @brief Enumeration of connection keepalive options
 */",undetermined
16641,httpd,UNKNOWN,"/**
 * @brief Structure to store things which are per connection
 */",undetermined
16642,httpd,UNKNOWN,/** Pool associated with this connection */,undetermined
16643,httpd,UNKNOWN,/** Physical vhost this conn came in on */,undetermined
16644,httpd,UNKNOWN,/** used by http_vhost.c */,undetermined
16645,httpd,UNKNOWN,/* Information about the connection itself */,undetermined
16646,httpd,UNKNOWN,/** local address */,undetermined
16647,httpd,UNKNOWN,"/** remote address; this is the end-point of the next hop, for the address
     *  of the request creator, see useragent_addr in request_rec
     */",undetermined
16648,httpd,UNKNOWN,"/** Client's IP address; this is the end-point of the next hop, for the
     *  IP of the request creator, see useragent_ip in request_rec
     */",undetermined
16649,httpd,UNKNOWN,"/** Client's DNS name, if known.  NULL if DNS hasn't been checked,
     *  """" if it has and no address was found.  N.B. Only access this though
     * get_remote_host() */",undetermined
16650,httpd,UNKNOWN,"/** Only ever set if doing rfc1413 lookups.  N.B. Only access this through
     *  get_remote_logname() */",undetermined
16651,httpd,UNKNOWN,/** server IP address */,undetermined
16652,httpd,UNKNOWN,"/** used for ap_get_server_name when UseCanonicalName is set to DNS
     *  (ignores setting of HostnameLookups) */",undetermined
16653,httpd,UNKNOWN,/** ID of this connection; unique at any point in time */,undetermined
16654,httpd,UNKNOWN,"/** Config vector containing pointers to connections per-server
     *  config structures. */",undetermined
16655,httpd,UNKNOWN,"/** Notes on *this* connection: send note from one module to
     *  another. must remain valid for all requests on this conn */",undetermined
16656,httpd,UNKNOWN,/** A list of input filters to be used for this connection */,undetermined
16657,httpd,UNKNOWN,/** A list of output filters to be used for this connection */,undetermined
16658,httpd,UNKNOWN,/** handle to scoreboard information for this connection */,undetermined
16659,httpd,UNKNOWN,/** The bucket allocator to use for all bucket/brigade creations */,undetermined
16660,httpd,UNKNOWN,/** The current state of this connection; may be NULL if not used by MPM */,undetermined
16661,httpd,UNKNOWN,/** Is there data pending in the input filters? */,undetermined
16662,httpd,UNKNOWN,/** Is there data pending in the output filters? */,undetermined
16663,httpd,UNKNOWN,"/** Are there any filters that clogg/buffer the input stream, breaking
     *  the event mpm.
     */",undetermined
16664,httpd,UNKNOWN,"/** have we done double-reverse DNS? -1 yes/failure, 0 not yet,
     *  1 yes/success */",undetermined
16665,httpd,UNKNOWN,/** Are we still talking? */,undetermined
16666,httpd,UNKNOWN,"/** Are we going to keep the connection alive for another request?
     * @see ap_conn_keepalive_e */",undetermined
16667,httpd,UNKNOWN,/** How many times have we used it? */,undetermined
16668,httpd,UNKNOWN,"/** Optional connection log level configuration. May point to a server or
     *  per_dir config, i.e. must be copied before modifying */",undetermined
16669,httpd,UNKNOWN,"/** Id to identify this connection in error log. Set when the first
     *  error log entry for this connection is generated.
     */",undetermined
16670,httpd,UNKNOWN,"/** This points to the current thread being used to process this request,
     * over the lifetime of a request, the value may change. Users of the connection
     * record should not rely upon it staying the same between calls that involve
     * the MPM.
     */",undetermined
16671,httpd,UNKNOWN,"/**
 * Enumeration of connection states
 * The two states CONN_STATE_LINGER_NORMAL and CONN_STATE_LINGER_SHORT may
 * only be set by the MPM. Use CONN_STATE_LINGER outside of the MPM.
 */",undetermined
16672,httpd,UNKNOWN,/* connection may be closed with lingering */,undetermined
16673,httpd,UNKNOWN,/* MPM has started lingering close with normal timeout */,undetermined
16674,httpd,UNKNOWN,/* MPM has started lingering close with short timeout */,undetermined
16675,httpd,UNKNOWN,"/**
 * @brief A structure to contain connection state information
 */",undetermined
16676,httpd,UNKNOWN,/** Current state of the connection */,undetermined
16677,httpd,UNKNOWN,/* Per-vhost config... */,undetermined
16678,httpd,UNKNOWN,"/**
 * The address 255.255.255.255, when used as a virtualhost address,
 * will become the ""default"" server when the ip doesn't match other vhosts.
 */",undetermined
16679,httpd,UNKNOWN,"/**
 * @struct server_addr_rec
 * @brief  A structure to be used for Per-vhost config
 */",undetermined
16680,httpd,UNKNOWN,/** The next server in the list */,undetermined
16681,httpd,UNKNOWN,"/** The name given in ""<VirtualHost>"" */",undetermined
16682,httpd,UNKNOWN,"/** The bound address, for this server */",undetermined
16683,httpd,UNKNOWN,"/** The bound port, for this server */",undetermined
16684,httpd,UNKNOWN,/** The per-module log levels */,undetermined
16685,httpd,UNKNOWN,/** The log level for this server */,undetermined
16686,httpd,UNKNOWN,"/**
 * @brief A structure to store information for each virtual server
 */",undetermined
16687,httpd,UNKNOWN,/** The process this server is running in */,undetermined
16688,httpd,UNKNOWN,/** The next server in the list */,undetermined
16689,httpd,UNKNOWN,/* Log files --- note that transfer log is now in the modules... */,undetermined
16690,httpd,UNKNOWN,/** The name of the error log */,undetermined
16691,httpd,UNKNOWN,/** A file descriptor that references the error log */,undetermined
16692,httpd,UNKNOWN,/** The log level configuration */,undetermined
16693,httpd,UNKNOWN,"/* Module-specific configuration for server, and defaults... */",undetermined
16694,httpd,UNKNOWN,"/** Config vector containing pointers to modules' per-server config
     *  structures. */",undetermined
16695,httpd,UNKNOWN,"/** MIME type info, etc., before we start checking per-directory info */",undetermined
16696,httpd,UNKNOWN,/** The name of the server */,undetermined
16697,httpd,UNKNOWN,/** The line of the config file that the server was defined on */,undetermined
16698,httpd,UNKNOWN,/** true if this is the virtual server */,undetermined
16699,httpd,UNKNOWN,/* Information for redirects */,undetermined
16700,httpd,UNKNOWN,"/** for redirects, etc. */",undetermined
16701,httpd,UNKNOWN,/** The server request scheme for redirect responses */,undetermined
16702,httpd,UNKNOWN,/* Contact information */,undetermined
16703,httpd,UNKNOWN,/** The admin's contact information */,undetermined
16704,httpd,UNKNOWN,/** The server hostname */,undetermined
16705,httpd,UNKNOWN,/* Transaction handling */,undetermined
16706,httpd,UNKNOWN,/** I haven't got a clue */,undetermined
16707,httpd,UNKNOWN,"/** Timeout, as an apr interval, before we give up */",undetermined
16708,httpd,UNKNOWN,/** The apr interval we will wait for another request */,undetermined
16709,httpd,UNKNOWN,/** Maximum requests per connection */,undetermined
16710,httpd,UNKNOWN,/** Use persistent connections? */,undetermined
16711,httpd,UNKNOWN,/** Normal names for ServerAlias servers */,undetermined
16712,httpd,UNKNOWN,/** Wildcarded names for ServerAlias servers */,undetermined
16713,httpd,UNKNOWN,/** Pathname for ServerPath */,undetermined
16714,httpd,UNKNOWN,/** Length of path */,undetermined
16715,httpd,UNKNOWN,/** limit on size of the HTTP request line    */,undetermined
16716,httpd,UNKNOWN,/** limit on size of any request header field */,undetermined
16717,httpd,UNKNOWN,/** limit on number of request header fields  */,undetermined
16718,httpd,UNKNOWN,/** Opaque storage location */,undetermined
16719,httpd,UNKNOWN,"/**
 * @struct ap_sload_t
 * @brief  A structure to hold server load params
 */",undetermined
16720,httpd,UNKNOWN,/* percentage of process/threads ready/idle (0->100)*/,undetermined
16721,httpd,UNKNOWN,/* percentage of process/threads busy (0->100) */,undetermined
16722,httpd,UNKNOWN,/* total bytes served */,undetermined
16723,httpd,UNKNOWN,/* total access count */,undetermined
16724,httpd,UNKNOWN,"/**
 * @struct ap_loadavg_t
 * @brief  A structure to hold various server loadavg
 */",undetermined
16725,httpd,UNKNOWN,"/* current loadavg, ala getloadavg() */",undetermined
16726,httpd,UNKNOWN,/* 5 min loadavg */,undetermined
16727,httpd,UNKNOWN,/* 15 min loadavg */,undetermined
16728,httpd,UNKNOWN,"/**
 * Get the context_document_root for a request. This is a generalization of
 * the document root, which is too limited in the presence of mappers like
 * mod_userdir and mod_alias. The context_document_root is the directory
 * on disk that maps to the context_prefix URI prefix.
 * @param r The request
 * @note For resources that do not map to the file system or for very complex
 * mappings, this information may still be wrong.
 */",undetermined
16729,httpd,UNKNOWN,"/**
 * Get the context_prefix for a request. The context_prefix URI prefix
 * maps to the context_document_root on disk.
 * @param r The request
 */",undetermined
16730,httpd,UNKNOWN,"/** Set context_prefix and context_document_root for a request.
 * @param r The request
 * @param prefix the URI prefix, without trailing slash
 * @param document_root the corresponding directory on disk, without trailing
 * slash
 * @note If one of prefix of document_root is NULL, the corrsponding
 * property will not be changed.
 */",undetermined
16731,httpd,UNKNOWN,"/** Set per-request document root. This is for mass virtual hosting modules
 * that want to provide the correct DOCUMENT_ROOT value to scripts.
 * @param r The request
 * @param document_root the document root for the request.
 */",undetermined
16732,httpd,UNKNOWN,"/**
 * Examine a field value (such as a media-/content-type) string and return
 * it sans any parameters; e.g., strip off any ';charset=foo' and the like.
 * @param p Pool to allocate memory from
 * @param intype The field to examine
 * @return A copy of the field minus any parameters
 */",undetermined
16733,httpd,UNKNOWN,"/**
 * Convert a time from an integer into a string in a specified format
 * @param p The pool to allocate memory from
 * @param t The time to convert
 * @param fmt The format to use for the conversion
 * @param gmt Convert the time for GMT?
 * @return The string that represents the specified time
 */",undetermined
16734,httpd,UNKNOWN,"/* String handling. The *_nc variants allow you to use non-const char **s as
   arguments (unfortunately C won't automatically convert a char ** to a const
   char **) */",undetermined
16735,httpd,UNKNOWN,"/**
 * Get the characters until the first occurrence of a specified character
 * @param p The pool to allocate memory from
 * @param line The string to get the characters from
 * @param stop The character to stop at
 * @return A copy of the characters up to the first stop character
 */",undetermined
16736,httpd,UNKNOWN,"/**
 * Get the characters until the first occurrence of a specified character
 * @param p The pool to allocate memory from
 * @param line The string to get the characters from
 * @param stop The character to stop at
 * @return A copy of the characters up to the first stop character
 * @note This is the same as ap_getword(), except it doesn't use const char **.
 */",undetermined
16737,httpd,UNKNOWN,"/**
 * Get the first word from a given string.  A word is defined as all characters
 * up to the first whitespace.
 * @param p The pool to allocate memory from
 * @param line The string to traverse
 * @return The first word in the line
 */",undetermined
16738,httpd,UNKNOWN,"/**
 * Get the first word from a given string.  A word is defined as all characters
 * up to the first whitespace.
 * @param p The pool to allocate memory from
 * @param line The string to traverse
 * @return The first word in the line
 * @note The same as ap_getword_white(), except it doesn't use const char**
 */",undetermined
16739,httpd,UNKNOWN,"/**
 * Get all characters from the first occurrence of @a stop to the first ""\0""
 * @param p The pool to allocate memory from
 * @param line The line to traverse
 * @param stop The character to start at
 * @return A copy of all characters after the first occurrence of the specified
 *         character
 */",undetermined
16740,httpd,UNKNOWN,"/**
 * Get all characters from the first occurrence of @a stop to the first ""\0""
 * @param p The pool to allocate memory from
 * @param line The line to traverse
 * @param stop The character to start at
 * @return A copy of all characters after the first occurrence of the specified
 *         character
 * @note The same as ap_getword_nulls(), except it doesn't use const char **.
 */",undetermined
16741,httpd,UNKNOWN,"/**
 * Get the second word in the string paying attention to quoting
 * @param p The pool to allocate from
 * @param line The line to traverse
 * @return A copy of the string
 */",undetermined
16742,httpd,UNKNOWN,"/**
 * Get the second word in the string paying attention to quoting
 * @param p The pool to allocate from
 * @param line The line to traverse
 * @return A copy of the string
 * @note The same as ap_getword_conf(), except it doesn't use const char **.
 */",undetermined
16743,httpd,UNKNOWN,"/**
 * Check a string for any config define or environment variable construct
 * and replace each of them by the value of that variable, if it exists.
 * The default syntax of the constructs is ${ENV} but can be changed by
 * setting the define::* config defines. If the variable does not exist,
 * leave the ${ENV} construct alone but print a warning.
 * @param p The pool to allocate from
 * @param word The string to check
 * @return The string with the replaced environment variables
 */",undetermined
16744,httpd,UNKNOWN,"/**
 * Size an HTTP header field list item, as separated by a comma.
 * @param field The field to size
 * @param len The length of the field
 * @return The return value is a pointer to the beginning of the non-empty
 * list item within the original string (or NULL if there is none) and the
 * address of field is shifted to the next non-comma, non-whitespace
 * character.  len is the length of the item excluding any beginning whitespace.
 */",undetermined
16745,httpd,UNKNOWN,"/**
 * Retrieve an HTTP header field list item, as separated by a comma,
 * while stripping insignificant whitespace and lowercasing anything not in
 * a quoted string or comment.
 * @param p The pool to allocate from
 * @param field The field to retrieve
 * @return The return value is a new string containing the converted list
 *         item (or NULL if none) and the address pointed to by field is
 *         shifted to the next non-comma, non-whitespace.
 */",undetermined
16746,httpd,UNKNOWN,"/**
 * Find an item in canonical form (lowercase, no extra spaces) within
 * an HTTP field value list.
 * @param p The pool to allocate from
 * @param line The field value list to search
 * @param tok The token to search for
 * @return 1 if found, 0 if not found.
 */",undetermined
16747,httpd,UNKNOWN,"/**
 * Do a weak ETag comparison within an HTTP field value list.
 * @param p The pool to allocate from
 * @param line The field value list to search
 * @param tok The token to search for
 * @return 1 if found, 0 if not found.
 */",undetermined
16748,httpd,UNKNOWN,"/**
 * Do a strong ETag comparison within an HTTP field value list.
 * @param p The pool to allocate from
 * @param line The field value list to search
 * @param tok The token to search for
 * @return 1 if found, 0 if not found.
 */",undetermined
16749,httpd,UNKNOWN,"/**
 * Retrieve a token, spacing over it and adjusting the pointer to
 * the first non-white byte afterwards.  Note that these tokens
 * are delimited by semis and commas and can also be delimited
 * by whitespace at the caller's option.
 * @param p The pool to allocate from
 * @param accept_line The line to retrieve the token from (adjusted afterwards)
 * @param accept_white Is it delimited by whitespace
 * @return the token
 */",undetermined
16750,httpd,UNKNOWN,"/**
 * Find http tokens, see the definition of token from RFC2068
 * @param p The pool to allocate from
 * @param line The line to find the token
 * @param tok The token to find
 * @return 1 if the token is found, 0 otherwise
 */",undetermined
16751,httpd,UNKNOWN,"/**
 * find http tokens from the end of the line
 * @param p The pool to allocate from
 * @param line The line to find the token
 * @param tok The token to find
 * @return 1 if the token is found, 0 otherwise
 */",undetermined
16752,httpd,UNKNOWN,"/**
 * Check for an Absolute URI syntax
 * @param u The string to check
 * @return 1 if URI, 0 otherwise
 */",undetermined
16753,httpd,UNKNOWN,"/**
 * Unescape a string
 * @param url The string to unescape
 * @return 0 on success, non-zero otherwise
 */",undetermined
16754,httpd,UNKNOWN,"/**
 * Unescape a URL
 * @param url The url to unescape
 * @return 0 on success, non-zero otherwise
 */",undetermined
16755,httpd,UNKNOWN,"/**
 * Unescape a URL, but leaving %2f (slashes) escaped
 * @param url The url to unescape
 * @param decode_slashes Whether or not slashes should be decoded
 * @return 0 on success, non-zero otherwise
 */",undetermined
16756,httpd,UNKNOWN,"/**
 * Unescape an application/x-www-form-urlencoded string
 * @param query The query to unescape
 * @return 0 on success, non-zero otherwise
 */",undetermined
16757,httpd,UNKNOWN,"/**
 * Convert all double slashes to single slashes
 * @param name The string to convert
 */",undetermined
16758,httpd,UNKNOWN,"/**
 * Remove all ./ and xx/../ substrings from a file name. Also remove
 * any leading ../ or /../ substrings.
 * @param name the file name to parse
 */",undetermined
16759,httpd,UNKNOWN,"/**
 * Escape a path segment, as defined in RFC 1808
 * @param p The pool to allocate from
 * @param s The path to convert
 * @return The converted URL
 */",undetermined
16760,httpd,UNKNOWN,"/**
 * Escape a path segment, as defined in RFC 1808, to a preallocated buffer.
 * @param c The preallocated buffer to write to
 * @param s The path to convert
 * @return The converted URL (c)
 */",undetermined
16761,httpd,UNKNOWN,"/**
 * convert an OS path to a URL in an OS dependant way.
 * @param p The pool to allocate from
 * @param path The path to convert
 * @param partial if set, assume that the path will be appended to something
 *        with a '/' in it (and thus does not prefix ""./"")
 * @return The converted URL
 */",undetermined
16762,httpd,UNKNOWN,/** @see ap_os_escape_path */,undetermined
16763,httpd,UNKNOWN,"/**
 * Escape a string as application/x-www-form-urlencoded
 * @param p The pool to allocate from
 * @param s The path to convert
 * @return The converted URL
 */",undetermined
16764,httpd,UNKNOWN,"/**
 * Escape a string as application/x-www-form-urlencoded, to a preallocated buffer
 * @param c The preallocated buffer to write to
 * @param s The path to convert
 * @return The converted URL (c)
 */",undetermined
16765,httpd,UNKNOWN,"/**
 * Escape an html string
 * @param p The pool to allocate from
 * @param s The html to escape
 * @return The escaped string
 */",undetermined
16766,httpd,UNKNOWN,"/**
 * Escape an html string
 * @param p The pool to allocate from
 * @param s The html to escape
 * @param toasc Whether to escape all non-ASCII chars to \&\#nnn;
 * @return The escaped string
 */",undetermined
16767,httpd,UNKNOWN,"/**
 * Escape a string for logging
 * @param p The pool to allocate from
 * @param str The string to escape
 * @return The escaped string
 */",undetermined
16768,httpd,UNKNOWN,"/**
 * Escape a string for logging into the error log (without a pool)
 * @param dest The buffer to write to
 * @param source The string to escape
 * @param buflen The buffer size for the escaped string (including ""\0"")
 * @return The len of the escaped string (always < maxlen)
 */",undetermined
16769,httpd,UNKNOWN,"/**
 * Construct a full hostname
 * @param p The pool to allocate from
 * @param hostname The hostname of the server
 * @param port The port the server is running on
 * @param r The current request
 * @return The server's hostname
 */",undetermined
16770,httpd,UNKNOWN,"/**
 * Escape a shell command
 * @param p The pool to allocate from
 * @param s The command to escape
 * @return The escaped shell command
 */",undetermined
16771,httpd,UNKNOWN,"/**
 * Count the number of directories in a path
 * @param path The path to count
 * @return The number of directories
 */",undetermined
16772,httpd,UNKNOWN,"/**
 * Copy at most @a n leading directories of @a s into @a d. @a d
 * should be at least as large as @a s plus 1 extra byte
 *
 * @param d The location to copy to
 * @param s The location to copy from
 * @param n The number of directories to copy
 * @return value is the ever useful pointer to the trailing ""\0"" of d
 * @note on platforms with drive letters, n = 0 returns the ""/"" root,
 * whereas n = 1 returns the ""d:/"" root.  On all other platforms, n = 0
 * returns the empty string.  */",undetermined
16773,httpd,UNKNOWN,"/**
 * Return the parent directory name (including trailing /) of the file
 * @a s
 * @param p The pool to allocate from
 * @param s The file to get the parent of
 * @return A copy of the file's parent directory
 */",undetermined
16774,httpd,UNKNOWN,"/**
 * Given a directory and filename, create a single path from them.  This
 * function is smart enough to ensure that there is a single '/' between the
 * directory and file names
 * @param a The pool to allocate from
 * @param dir The directory name
 * @param f The filename
 * @return A copy of the full path
 * @note Never consider using this function if you are dealing with filesystem
 * names that need to remain canonical, unless you are merging an apr_dir_read
 * path and returned filename.  Otherwise, the result is not canonical.
 */",undetermined
16775,httpd,UNKNOWN,"/**
 * Test if the given path has an an absolute path.
 * @param p The pool to allocate from
 * @param dir The directory name
 * @note The converse is not necessarily true, some OS's (Win32/OS2/Netware) have
 * multiple forms of absolute paths.  This only reports if the path is absolute
 * in a canonical sense.
 */",undetermined
16776,httpd,UNKNOWN,"/**
 * Does the provided string contain wildcard characters?  This is useful
 * for determining if the string should be passed to strcmp_match or to strcmp.
 * The only wildcard characters recognized are '?' and '*'
 * @param str The string to check
 * @return 1 if the string has wildcards, 0 otherwise
 */",undetermined
16777,httpd,UNKNOWN,"/**
 * Determine if a string matches a patterm containing the wildcards '?' or '*'
 * @param str The string to check
 * @param expected The pattern to match against
 * @return 0 if the two strings match, 1 otherwise
 */",undetermined
16778,httpd,UNKNOWN,"/**
 * Determine if a string matches a patterm containing the wildcards '?' or '*',
 * ignoring case
 * @param str The string to check
 * @param expected The pattern to match against
 * @return 0 if the two strings match, 1 otherwise
 */",undetermined
16779,httpd,UNKNOWN,"/**
 * Find the first occurrence of the substring s2 in s1, regardless of case
 * @param s1 The string to search
 * @param s2 The substring to search for
 * @return A pointer to the beginning of the substring
 * @remark See apr_strmatch() for a faster alternative
 */",undetermined
16780,httpd,UNKNOWN,"/**
 * Return a pointer to the location inside of bigstring immediately after prefix
 * @param bigstring The input string
 * @param prefix The prefix to strip away
 * @return A pointer relative to bigstring after prefix
 */",undetermined
16781,httpd,UNKNOWN,"/**
 * Decode a base64 encoded string into memory allocated from a pool
 * @param p The pool to allocate from
 * @param bufcoded The encoded string
 * @return The decoded string
 */",undetermined
16782,httpd,UNKNOWN,"/**
 * Encode a string into memory allocated from a pool in base 64 format
 * @param p The pool to allocate from
 * @param string The plaintext string
 * @return The encoded string
 */",undetermined
16783,httpd,UNKNOWN,"/**
 * Compile a regular expression to be used later. The regex is freed when
 * the pool is destroyed.
 * @param p The pool to allocate from
 * @param pattern the regular expression to compile
 * @param cflags The bitwise or of one or more of the following:
 *   @li REG_EXTENDED - Use POSIX extended Regular Expressions
 *   @li REG_ICASE    - Ignore case
 *   @li REG_NOSUB    - Support for substring addressing of matches
 *       not required
 *   @li REG_NEWLINE  - Match-any-character operators don't match new-line
 * @return The compiled regular expression
 */",undetermined
16784,httpd,UNKNOWN,"/**
 * Free the memory associated with a compiled regular expression
 * @param p The pool the regex was allocated from
 * @param reg The regular expression to free
 * @note This function is only necessary if the regex should be cleaned
 * up before the pool
 */",undetermined
16785,httpd,UNKNOWN,"/**
 * After performing a successful regex match, you may use this function to
 * perform a series of string substitutions based on subexpressions that were
 * matched during the call to ap_regexec. This function is limited to
 * result strings of 64K. Consider using ap_pregsub_ex() instead.
 * @param p The pool to allocate from
 * @param input An arbitrary string containing $1 through $9.  These are
 *              replaced with the corresponding matched sub-expressions
 * @param source The string that was originally matched to the regex
 * @param nmatch the nmatch returned from ap_pregex
 * @param pmatch the pmatch array returned from ap_pregex
 * @return The substituted string, or NULL on error
 */",undetermined
16786,httpd,UNKNOWN,"/**
 * After performing a successful regex match, you may use this function to
 * perform a series of string substitutions based on subexpressions that were
 * matched during the call to ap_regexec
 * @param p The pool to allocate from
 * @param result where to store the result, will be set to NULL on error
 * @param input An arbitrary string containing $1 through $9.  These are
 *              replaced with the corresponding matched sub-expressions
 * @param source The string that was originally matched to the regex
 * @param nmatch the nmatch returned from ap_pregex
 * @param pmatch the pmatch array returned from ap_pregex
 * @param maxlen the maximum string length to return, 0 for unlimited
 * @return APR_SUCCESS if successful, APR_ENOMEM or other error code otherwise.
 */",undetermined
16787,httpd,UNKNOWN,"/**
 * We want to downcase the type/subtype for comparison purposes
 * but nothing else because ;parameter=foo values are case sensitive.
 * @param s The content-type to convert to lowercase
 */",undetermined
16788,httpd,UNKNOWN,"/**
 * convert a string to all lowercase
 * @param s The string to convert to lowercase
 */",undetermined
16789,httpd,UNKNOWN,"/**
 * convert a string to all uppercase
 * @param s The string to convert to uppercase
 */",undetermined
16790,httpd,UNKNOWN,"/**
 * Search a string from left to right for the first occurrence of a
 * specific character
 * @param str The string to search
 * @param c The character to search for
 * @return The index of the first occurrence of c in str
 */",undetermined
16791,httpd,UNKNOWN,/* Sigh... */,undetermined
16792,httpd,UNKNOWN,"/**
 * Search a string from right to left for the first occurrence of a
 * specific character
 * @param str The string to search
 * @param c The character to search for
 * @return The index of the first occurrence of c in str
 */",undetermined
16793,httpd,UNKNOWN,"/**
 * Given a string, replace any bare &quot; with \\&quot; .
 * @param p The pool to allocate memory from
 * @param instring The string to search for &quot;
 * @return A copy of the string with escaped quotes
 */",undetermined
16794,httpd,UNKNOWN,"/**
 * Given a string, append the PID deliminated by delim.
 * Usually used to create a pid-appended filepath name
 * (eg: /a/b/foo -> /a/b/foo.6726). A function, and not
 * a macro, to avoid unistd.h dependency
 * @param p The pool to allocate memory from
 * @param string The string to append the PID to
 * @param delim The string to use to deliminate the string from the PID
 * @return A copy of the string with the PID appended
 */",undetermined
16795,httpd,UNKNOWN,"/**
 * Parse a given timeout parameter string into an apr_interval_time_t value.
 * The unit of the time interval is given as postfix string to the numeric
 * string. Currently the following units are understood:
 *
 * ms    : milliseconds
 * s     : seconds
 * mi[n] : minutes
 * h     : hours
 *
 * If no unit is contained in the given timeout parameter the default_time_unit
 * will be used instead.
 * @param timeout_parameter The string containing the timeout parameter.
 * @param timeout The timeout value to be returned.
 * @param default_time_unit The default time unit to use if none is specified
 * in timeout_parameter.
 * @return Status value indicating whether the parsing was successful or not.
 */",undetermined
16796,httpd,UNKNOWN,"/**
 * Determine if a request has a request body or not.
 *
 * @param r the request_rec of the request
 * @return truth value
 */",undetermined
16797,httpd,UNKNOWN,"/**
 * Cleanup a string (mainly to be filesystem safe)
 * We only allow '_' and alphanumeric chars. Non-printable
 * map to 'x' and all others map to '_'
 *
 * @param  p pool to use to allocate dest
 * @param  src string to clean up
 * @param  dest cleaned up, allocated string
 * @return Status value indicating whether the cleaning was successful or not.
 */",undetermined
16798,httpd,UNKNOWN,"/**
 * Cleanup a string (mainly to be filesystem safe)
 * We only allow '_' and alphanumeric chars. Non-printable
 * map to 'x' and all others map to '_'
 *
 * @param  src string to clean up
 * @param  dest cleaned up, pre-allocated string
 * @return Status value indicating whether the cleaning was successful or not.
 */",undetermined
16799,httpd,UNKNOWN,"/**
 * Structure to store the contents of an HTTP form of the type
 * application/x-www-form-urlencoded.
 *
 * Currently it contains the name as a char* of maximum length
 * HUGE_STRING_LEN, and a value in the form of a bucket brigade
 * of arbitrary length.
 */",undetermined
16800,httpd,UNKNOWN,"/**
 * Read the body and parse any form found, which must be of the
 * type application/x-www-form-urlencoded.
 * @param r request containing POSTed form data
 * @param f filter
 * @param ptr returned array of ap_form_pair_t
 * @param num max num of params or -1 for unlimited
 * @param size max size allowed for parsed data
 * @return OK or HTTP error
 */",undetermined
16801,httpd,UNKNOWN,/* Misc system hackery */,undetermined
16802,httpd,UNKNOWN,"/**
 * Given the name of an object in the file system determine if it is a directory
 * @param p The pool to allocate from
 * @param name The name of the object to check
 * @return 1 if it is a directory, 0 otherwise
 */",undetermined
16803,httpd,UNKNOWN,"/**
 * Given the name of an object in the file system determine if it is a directory - this version is symlink aware
 * @param p The pool to allocate from
 * @param name The name of the object to check
 * @return 1 if it is a directory, 0 otherwise
 */",undetermined
16804,httpd,UNKNOWN,/* _OSD_POSIX */,undetermined
16805,httpd,UNKNOWN,"/**
 * Determine the local host name for the current machine
 * @param p The pool to allocate from
 * @return A copy of the local host name
 */",undetermined
16806,httpd,UNKNOWN,"/**
 * Log an assertion to the error log
 * @param szExp The assertion that failed
 * @param szFile The file the assertion is in
 * @param nLine The line the assertion is defined on
 */",undetermined
16807,httpd,UNKNOWN,"/**
 * @internal Internal Assert function
 */",undetermined
16808,httpd,UNKNOWN,"/**
 * Redefine assert() to something more useful for an Apache...
 *
 * Use ap_assert() if the condition should always be checked.
 * Use AP_DEBUG_ASSERT() if the condition should only be checked when AP_DEBUG
 * is defined.
 */",undetermined
16809,httpd,UNKNOWN,"/**
 * @defgroup stopsignal Flags which indicate places where the server should stop for debugging.
 * @{
 * A set of flags which indicate places where the server should raise(SIGSTOP).
 * This is useful for debugging, because you can then attach to that process
 * with gdb and continue.  This is important in cases where one_process
 * debugging isn't possible.
 */",undetermined
16810,httpd,UNKNOWN,/** stop on a Detach */,undetermined
16811,httpd,UNKNOWN,/** stop making a child process */,undetermined
16812,httpd,UNKNOWN,/** stop spawning a child process */,undetermined
16813,httpd,UNKNOWN,/** stop spawning a child process with a piped log */,undetermined
16814,httpd,UNKNOWN,/** stop spawning a CGI child process */,undetermined
16815,httpd,UNKNOWN,/** Macro to get GDB started */,undetermined
16816,httpd,UNKNOWN,/** @} */,undetermined
16817,httpd,UNKNOWN,"/**
 * Get HTML describing the address and (optionally) admin of the server.
 * @param prefix Text which is prepended to the return value
 * @param r The request_rec
 * @return HTML describing the server, allocated in @a r's pool.
 */",undetermined
16818,httpd,UNKNOWN,"/* The C library has functions that allow const to be silently dropped ...
     these macros detect the drop in maintainer mode, but use the native
     methods for normal builds

     Note that on some platforms (e.g., AIX with gcc, Solaris with gcc), string.h needs
     to be included before the macros are defined or compilation will fail.
  */",undetermined
16819,httpd,UNKNOWN,/** use this instead of strchr */,undetermined
16820,httpd,UNKNOWN,/** use this instead of strchr */,undetermined
16821,httpd,UNKNOWN,/** use this instead of strrchr */,undetermined
16822,httpd,UNKNOWN,/** use this instead of strrchr */,undetermined
16823,httpd,UNKNOWN,/** use this instead of strrstr*/,undetermined
16824,httpd,UNKNOWN,/** use this instead of strrstr*/,undetermined
16825,httpd,UNKNOWN,"/**
 * Generate pseudo random bytes.
 * This is a convenience interface to apr_random. It is cheaper but less
 * secure than apr_generate_random_bytes().
 * @param buf where to store the bytes
 * @param size number of bytes to generate
 * @note ap_random_insecure_bytes() is thread-safe, it uses a mutex on
 *       threaded MPMs.
 */",undetermined
16826,httpd,UNKNOWN,"/**
 * Get a pseudo random number in a range.
 * @param min low end of range
 * @param max high end of range
 * @return a number in the range
 */",undetermined
16827,httpd,UNKNOWN,"/**
 * Abort with a error message signifying out of memory
 */",undetermined
16828,httpd,UNKNOWN,"/**
 * Wrapper for malloc() that calls ap_abort_on_oom() if out of memory
 * @param size size of the memory block
 * @return pointer to the allocated memory
 * @note ap_malloc may be implemented as a macro
 */",undetermined
16829,httpd,UNKNOWN,"/**
 * Wrapper for calloc() that calls ap_abort_on_oom() if out of memory
 * @param nelem number of elements to allocate memory for
 * @param size size of a single element
 * @return pointer to the allocated memory
 * @note ap_calloc may be implemented as a macro
 */",undetermined
16830,httpd,UNKNOWN,"/**
 * Wrapper for realloc() that calls ap_abort_on_oom() if out of memory
 * @param ptr pointer to the old memory block (or NULL)
 * @param size new size of the memory block
 * @return pointer to the reallocated memory
 * @note ap_realloc may be implemented as a macro
 */",undetermined
16831,httpd,UNKNOWN,"/**
 * Get server load params
 * @param ld struct to populate: -1 in fields means error
 */",undetermined
16832,httpd,UNKNOWN,"/**
 * Get server load averages (ala getloadavg)
 * @param ld struct to populate: -1 in fields means error
 */",undetermined
16833,httpd,UNKNOWN,"/**
 * Convert binary data into a hex string
 * @param src pointer to the data
 * @param srclen length of the data
 * @param dest pointer to buffer of length (2 * srclen + 1). The resulting
 *        string will be NUL-terminated.
 */",undetermined
16834,httpd,UNKNOWN,"/**
 * Short function to execute a command and return the first line of
 * output minus \r \n. Useful for ""obscuring"" passwords via exec calls
 * @param p the pool to allocate from
 * @param cmd the command to execute
 * @param argv the arguments to pass to the cmd
 * @return ptr to characters or NULL on any error
 */",undetermined
16835,httpd,UNKNOWN,/* !APACHE_HTTPD_H */,undetermined
16836,httpd,UNKNOWN,/** @} //APACHE Daemon      */,undetermined
16837,httpd,UNKNOWN,/** @} //APACHE Core        */,undetermined
16838,httpd,UNKNOWN,/** @} //APACHE super group */,undetermined
16839,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16840,httpd,UNKNOWN,"/**
 * @file  mod_auth.h
 * @brief Authentication and Authorization Extension for Apache
 *
 * @defgroup MOD_AUTH mod_auth
 * @ingroup  APACHE_MODS
 */",undetermined
16841,httpd,UNKNOWN,/** all of the requirements must be met */,undetermined
16842,httpd,UNKNOWN,/**  any of the requirements must be met */,undetermined
16843,httpd,UNKNOWN,/** There are no applicable satisfy lines */,undetermined
16844,httpd,UNKNOWN,/* denied because r->user == NULL */,undetermined
16845,httpd,UNKNOWN,"/* Given a username and password, expected to return AUTH_GRANTED
     * if we can validate this user/password combination.
     */",undetermined
16846,httpd,UNKNOWN,"/* Given a user and realm, expected to return AUTH_USER_FOUND if we
     * can find a md5 hash of 'user:realm:password'
     */",undetermined
16847,httpd,UNKNOWN,/* A linked-list of authn providers. */,undetermined
16848,httpd,UNKNOWN,"/* Given a request_rec, expected to return AUTHZ_GRANTED
     * if we can authorize user access.
     * @param r the request record
     * @param require_line the argument to the authz provider
     * @param parsed_require_line the value set by parse_require_line(), if any
     */",undetermined
16849,httpd,UNKNOWN,"/** Check the syntax of a require line and optionally cache the parsed
     * line. This function may be NULL.
     * @param cmd the config directive
     * @param require_line the argument to the authz provider
     * @param parsed_require_line place to store parsed require_line for use by provider
     * @return Error message or NULL on success
     */",undetermined
16850,httpd,UNKNOWN,"/* ap_authn_cache_store: Optional function for authn providers
 * to enable cacheing their lookups with mod_authn_cache
 * @param r The request rec
 * @param module Module identifier
 * @param user User name to authenticate
 * @param realm Digest authn realm (NULL for basic authn)
 * @param data The value looked up by the authn provider, to cache
 */",undetermined
16851,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16852,httpd,UNKNOWN,"/**
 * @file  mod_core.h
 * @brief mod_core private header file
 *
 * @defgroup MOD_CORE mod_core
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
16853,httpd,UNKNOWN,/* Handles for core filters */,undetermined
16854,httpd,UNKNOWN,"/*
 * These (input) filters are internal to the mod_core operation.
 */",undetermined
16855,httpd,UNKNOWN,/* HTTP/1.1 chunked transfer encoding filter. */,undetermined
16856,httpd,UNKNOWN,/* Filter to handle any error buckets on output */,undetermined
16857,httpd,UNKNOWN,"/**
 * Send the minimal part of an HTTP response header.
 * @param r The current request
 * @param bb The brigade to add the header to.
 * @warning Modules should be very careful about using this, and should
 *          the default behavior.  Much of the HTTP/1.1 implementation
 *          correctness depends on the full headers.
 * @fn void ap_basic_http_header(request_rec *r, apr_bucket_brigade *bb)
 */",undetermined
16858,httpd,UNKNOWN,"/**
 * Send an appropriate response to an http TRACE request.
 * @param r The current request
 * @note returns DONE or the HTTP status error if it handles the TRACE,
 * or DECLINED if the request was not for TRACE.
 * request method was not TRACE.
 */",undetermined
16859,httpd,UNKNOWN,"/**
 * Send an appropriate response to an http OPTIONS request.
 * @param r The current request
 */",undetermined
16860,httpd,UNKNOWN,/* Used for multipart/byteranges boundary string */,undetermined
16861,httpd,UNKNOWN,/* Init RNG at startup */,undetermined
16862,httpd,UNKNOWN,/* Update RNG state in parent after fork */,undetermined
16863,httpd,UNKNOWN,/* !MOD_CORE_H */,undetermined
16864,httpd,UNKNOWN,/** @} */,undetermined
16865,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16866,httpd,UNKNOWN,"/**
 * @file  mod_request.h
 * @brief mod_request private header file
 *
 * @defgroup MOD_REQUEST mod_request
 * @ingroup  APACHE_MODS
 * @{
 */",undetermined
16867,httpd,UNKNOWN,"/**
 * Core per-directory configuration.
 */",undetermined
16868,httpd,UNKNOWN,/* !MOD_REQUEST_H */,undetermined
16869,httpd,UNKNOWN,/** @} */,undetermined
16870,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16871,httpd,UNKNOWN,"/* The purpose of this file is to store the code that MOST mpm's will need
 * this does not mean a function only goes into this file if every MPM needs
 * it.  It means that if a function is needed by more than one MPM, and
 * future maintenance would be served by making the code common, then the
 * function belongs here.
 *
 * This is going in src/main because it is not platform specific, it is
 * specific to multi-process servers, but NOT to Unix.  Which is why it
 * does not belong in src/os/unix
 */",undetermined
16872,httpd,UNKNOWN,"/**
 * @file  mpm_common.h
 * @brief Multi-Processing Modules functions
 *
 * @defgroup APACHE_MPM Multi-Processing Modules
 * @ingroup  APACHE
 * @{
 */",undetermined
16873,httpd,UNKNOWN,/* for TCP_NODELAY */,undetermined
16874,httpd,UNKNOWN,"/* The maximum length of the queue of pending connections, as defined
 * by listen(2).  Under some systems, it should be increased if you
 * are experiencing a heavy TCP SYN flood attack.
 *
 * It defaults to 511 instead of 512 because some systems store it
 * as an 8-bit datatype; 512 truncated to 8-bits is 0, while 511 is
 * 255 when truncated.
 */",undetermined
16875,httpd,UNKNOWN,/* Signal used to gracefully restart */,undetermined
16876,httpd,UNKNOWN,/* Signal used to gracefully restart (without SIG prefix) */,undetermined
16877,httpd,UNKNOWN,/* Signal used to gracefully restart (as a quoted string) */,undetermined
16878,httpd,UNKNOWN,/* Signal used to gracefully stop */,undetermined
16879,httpd,UNKNOWN,/* Signal used to gracefully stop (without SIG prefix) */,undetermined
16880,httpd,UNKNOWN,/* Signal used to gracefully stop (as a quoted string) */,undetermined
16881,httpd,UNKNOWN,"/**
 * Callback function used for ap_reclaim_child_processes() and
 * ap_relieve_child_processes().  The callback function will be
 * called for each terminated child process.
 */",undetermined
16882,httpd,UNKNOWN,"/**
 * Make sure all child processes that have been spawned by the parent process
 * have died.  This includes process registered as ""other_children"".
 *
 * @param terminate Either 1 or 0.  If 1, send the child processes SIGTERM
 *        each time through the loop.  If 0, give the process time to die
 *        on its own before signalling it.
 * @param mpm_callback Callback invoked for each dead child process
 *
 * @note The MPM child processes which are reclaimed are those listed
 * in the scoreboard as well as those currently registered via
 * ap_register_extra_mpm_process().
 */",undetermined
16883,httpd,UNKNOWN,"/**
 * Catch any child processes that have been spawned by the parent process
 * which have exited. This includes processes registered as ""other_children"".
 *
 * @param mpm_callback Callback invoked for each dead child process

 * @note The MPM child processes which are relieved are those listed
 * in the scoreboard as well as those currently registered via
 * ap_register_extra_mpm_process().
 */",undetermined
16884,httpd,UNKNOWN,"/**
 * Tell ap_reclaim_child_processes() and ap_relieve_child_processes() about
 * an MPM child process which has no entry in the scoreboard.
 * @param pid The process id of an MPM child process which should be
 * reclaimed when ap_reclaim_child_processes() is called.
 * @param gen The generation of this MPM child process.
 *
 * @note If an extra MPM child process terminates prior to calling
 * ap_reclaim_child_processes(), remove it from the list of such processes
 * by calling ap_unregister_extra_mpm_process().
 */",undetermined
16885,httpd,UNKNOWN,"/**
 * Unregister an MPM child process which was previously registered by a
 * call to ap_register_extra_mpm_process().
 * @param pid The process id of an MPM child process which no longer needs to
 * be reclaimed.
 * @param old_gen Set to the server generation of the process, if found.
 * @return 1 if the process was found and removed, 0 otherwise
 */",undetermined
16886,httpd,UNKNOWN,"/**
 * Safely signal an MPM child process, if the process is in the
 * current process group.  Otherwise fail.
 * @param pid the process id of a child process to signal
 * @param sig the signal number to send
 * @return APR_SUCCESS if signal is sent, otherwise an error as per kill(3);
 * APR_EINVAL is returned if passed either an invalid (< 1) pid, or if
 * the pid is not in the current process group
 */",undetermined
16887,httpd,UNKNOWN,"/**
 * Log why a child died to the error log, if the child died without the
 * parent signalling it.
 * @param pid The child that has died
 * @param why The return code of the child process
 * @param status The status returned from ap_wait_or_timeout
 * @return 0 on success, APEXIT_CHILDFATAL if MPM should terminate
 */",undetermined
16888,httpd,UNKNOWN,/* (!WIN32 && !NETWARE) || DOXYGEN */,undetermined
16889,httpd,UNKNOWN,"/**
 * Pool cleanup for end-generation hook implementation
 * (core httpd function)
 */",undetermined
16890,httpd,UNKNOWN,"/**
 * Run the monitor hook (once every ten calls), determine if any child
 * process has died and, if none died, sleep one second.
 * @param status The return code if a process has died
 * @param exitcode The returned exit status of the child, if a child process
 *                 dies, or the signal that caused the child to die.
 * @param ret The process id of the process that died
 * @param p The pool to allocate out of
 * @param s The server_rec to pass
 */",undetermined
16891,httpd,UNKNOWN,"/**
 * Turn off the nagle algorithm for the specified socket.  The nagle algorithm
 * says that we should delay sending partial packets in the hopes of getting
 * more data.  There are bad interactions between persistent connections and
 * Nagle's algorithm that have severe performance penalties.
 * @param s The socket to disable nagle for.
 */",undetermined
16892,httpd,UNKNOWN,/* NOOP */,undetermined
16893,httpd,UNKNOWN,"/**
 * Convert a username to a numeric ID
 * @param name The name to convert
 * @return The user id corresponding to a name
 * @fn uid_t ap_uname2id(const char *name)
 */",undetermined
16894,httpd,UNKNOWN,"/**
 * Convert a group name to a numeric ID
 * @param name The name to convert
 * @return The group id corresponding to a name
 * @fn gid_t ap_gname2id(const char *name)
 */",undetermined
16895,httpd,UNKNOWN,"/**
 * The initgroups() function initializes the group access list by reading the
 * group database /etc/group and using all groups of which user is a member.
 * The additional group basegid is also added to the list.
 * @param name The user name - must be non-NULL
 * @param basegid The basegid to add
 * @return returns 0 on success
 * @fn int initgroups(const char *name, gid_t basegid)
 */",undetermined
16896,httpd,UNKNOWN,"/**
 * Open the pipe-of-death.  The pipe of death is used to tell all child
 * processes that it is time to die gracefully.
 * @param p The pool to use for allocating the pipe
 * @param pod the pipe-of-death that is created.
 */",undetermined
16897,httpd,UNKNOWN,"/**
 * Check the pipe to determine if the process has been signalled to die.
 */",undetermined
16898,httpd,UNKNOWN,"/**
 * Close the pipe-of-death
 *
 * @param pod the pipe-of-death to close.
 */",undetermined
16899,httpd,UNKNOWN,"/**
 * Write data to the pipe-of-death, signalling that one child process
 * should die.
 * @param pod the pipe-of-death to write to.
 */",undetermined
16900,httpd,UNKNOWN,"/**
 * Write data to the pipe-of-death, signalling that all child process
 * should die.
 * @param pod The pipe-of-death to write to.
 * @param num The number of child processes to kill
 */",undetermined
16901,httpd,UNKNOWN,/* !WIN32 || DOXYGEN */,undetermined
16902,httpd,UNKNOWN,"/**
 * Check that exactly one MPM is loaded
 * Returns NULL if yes, error string if not.
 */",undetermined
16903,httpd,UNKNOWN,"/*
 * These data members are common to all mpms. Each new mpm
 * should either use the appropriate ap_mpm_set_* function
 * in their command table or create their own for custom or
 * OS specific needs. These should work for most.
 */",undetermined
16904,httpd,UNKNOWN,"/**
 * The maximum number of requests each child thread or
 * process handles before dying off
 */",undetermined
16905,httpd,UNKNOWN,"/**
 * The filename used to store the process id.
 */",undetermined
16906,httpd,UNKNOWN,"/*
 * The directory that the server changes directory to dump core.
 */",undetermined
16907,httpd,UNKNOWN,"/**
 * Set the timeout period for a graceful shutdown.
 */",undetermined
16908,httpd,UNKNOWN,/* core's implementation of child_status hook */,undetermined
16909,httpd,UNKNOWN,/* register modules that undertake to manage system security */,undetermined
16910,httpd,UNKNOWN,"/* implement the ap_mpm_query() function
 * The MPM should return OK+APR_ENOTIMPL for any unimplemented query codes;
 * modules which intercede for specific query codes should DECLINE for others.
 */",undetermined
16911,httpd,UNKNOWN,/* register the specified callback */,undetermined
16912,httpd,UNKNOWN,"/* get MPM name (e.g., ""prefork"" or ""event"") */",undetermined
16913,httpd,UNKNOWN,"/* mutex type string for accept mutex, if any; MPMs should use the
 * same mutex type for ease of configuration
 */",undetermined
16914,httpd,UNKNOWN,"/* internal pre-config logic for MPM-related settings, callable only from
 * core's pre-config hook
 */",undetermined
16915,httpd,UNKNOWN,/* !APACHE_MPM_COMMON_H */,undetermined
16916,httpd,UNKNOWN,/** @} */,undetermined
16917,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16918,httpd,UNKNOWN,"/**
 * @file  scoreboard.h
 * @brief Apache scoreboard library
 */",undetermined
16919,httpd,UNKNOWN,"/* Scoreboard file, if there is one */",undetermined
16920,httpd,UNKNOWN,"/* Scoreboard info on a process is, for now, kept very brief ---
 * just status value and pid (the latter so that the caretaker process
 * can properly update the scoreboard when a process dies).  We may want
 * to eventually add a separate set of long_score structures which would
 * give, for each process, the number of requests serviced, and info on
 * the current, or most recent, request.
 *
 * Status values:
 */",undetermined
16921,httpd,UNKNOWN,/* Server Starting up */,undetermined
16922,httpd,UNKNOWN,/* Waiting for connection (or accept() lock) */,undetermined
16923,httpd,UNKNOWN,/* Reading a client request */,undetermined
16924,httpd,UNKNOWN,/* Processing a client request */,undetermined
16925,httpd,UNKNOWN,/* Waiting for more requests via keepalive */,undetermined
16926,httpd,UNKNOWN,/* Logging the request */,undetermined
16927,httpd,UNKNOWN,/* Looking up a hostname */,undetermined
16928,httpd,UNKNOWN,/* Closing the connection */,undetermined
16929,httpd,UNKNOWN,/* server is gracefully finishing request */,undetermined
16930,httpd,UNKNOWN,/* Server is cleaning up idle children. */,undetermined
16931,httpd,UNKNOWN,/* number of status settings */,undetermined
16932,httpd,UNKNOWN,"/* Type used for generation indicies.  Startup and every restart cause a
 * new generation of children to be spawned.  Children within the same
 * generation share the same configuration information -- pointers to stuff
 * created at config time in the parent are valid across children.  However,
 * this can't work effectively with non-forked architectures.  So while the
 * arrays in the scoreboard never change between the parent and forked
 * children, so they do not require shm storage, the contents of the shm
 * may contain no pointers.
 */",undetermined
16933,httpd,UNKNOWN,"/* Is the scoreboard shared between processes or not?
 * Set by the MPM when the scoreboard is created.
 */",undetermined
16934,httpd,UNKNOWN,/* stuff which is worker specific */,undetermined
16935,httpd,UNKNOWN,"/* With some MPMs (e.g., worker), a worker_score can represent
     * a thread in a terminating process which is no longer
     * represented by the corresponding process_score.  These MPMs
     * should set pid and generation fields in the worker_score.
     */",undetermined
16936,httpd,UNKNOWN,/* Keep 'em small... */,undetermined
16937,httpd,UNKNOWN,/* We just want an idea... */,undetermined
16938,httpd,UNKNOWN,/* What virtual host is being accessed? */,undetermined
16939,httpd,UNKNOWN,"/* the generation of children which
                                         * should still be serving requests.
                                         */",undetermined
16940,httpd,UNKNOWN,/* stuff which the parent generally writes and the children rarely read */,undetermined
16941,httpd,UNKNOWN,/* generation of this child */,undetermined
16942,httpd,UNKNOWN,"/* the process whose pid is stored above is
                             * going down gracefully
                             */",undetermined
16943,httpd,UNKNOWN,"/* the process is busy and is not accepting more
                             * connections (for async MPMs)
                             */",undetermined
16944,httpd,UNKNOWN,/* total connections (for async MPMs) */,undetermined
16945,httpd,UNKNOWN,/* async connections doing write completion */,undetermined
16946,httpd,UNKNOWN,/* async connections in lingering close */,undetermined
16947,httpd,UNKNOWN,/* async connections in keep alive */,undetermined
16948,httpd,UNKNOWN,/* connections suspended by some module */,undetermined
16949,httpd,UNKNOWN,"/* Scoreboard is now in 'local' memory, since it isn't updated once created,
 * even in forked architectures.  Child created-processes (non-fork) will
 * set up these indicies into the (possibly relocated) shmem records.
 */",undetermined
16950,httpd,UNKNOWN,"/*
 * Creation and deletion (internal)
 */",undetermined
16951,httpd,UNKNOWN,"/*
 * APIs for MPMs and other modules
 */",undetermined
16952,httpd,UNKNOWN,"/*
 * Command handlers [internal]
 */",undetermined
16953,httpd,UNKNOWN,/* Hooks */,undetermined
16954,httpd,UNKNOWN,"/**
  * Hook for post scoreboard creation, pre mpm.
  * @param p       Apache pool to allocate from.
  * @param sb_type
  * @ingroup hooks
  * @return OK or DECLINE on success; anything else is a error
  */",undetermined
16955,httpd,UNKNOWN,/* for time_process_request() in http_main.c */,undetermined
16956,httpd,UNKNOWN,/* !APACHE_SCOREBOARD_H */,undetermined
16957,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16958,httpd,UNKNOWN,"/**
 * @file  util_cfgtree.h
 * @brief Config Tree Package
 *
 * @defgroup APACHE_CORE_CONFIG_TREE Config Tree Package
 * @ingroup  APACHE_CORE_CONFIG
 * @{
 */",undetermined
16959,httpd,UNKNOWN,"/**
 * @brief Structure used to build the config tree.
 *
 * The config tree only stores
 * the directives that will be active in the running server.  Directives
 * that contain other directions, such as &lt;Directory ...&gt; cause a sub-level
 * to be created, where the included directives are stored.  The closing
 * directive (&lt;/Directory&gt;) is not stored in the tree.
 */",undetermined
16960,httpd,UNKNOWN,/** The current directive */,undetermined
16961,httpd,UNKNOWN,"/** The arguments for the current directive, stored as a space
     *  separated list */",undetermined
16962,httpd,UNKNOWN,/** The next directive node in the tree */,undetermined
16963,httpd,UNKNOWN,/** The first child node of this directive */,undetermined
16964,httpd,UNKNOWN,/** The parent node of this directive */,undetermined
16965,httpd,UNKNOWN,/** directive's module can store add'l data here */,undetermined
16966,httpd,UNKNOWN,"/* ### these may go away in the future, but are needed for now */",undetermined
16967,httpd,UNKNOWN,/** The name of the file this directive was found in */,undetermined
16968,httpd,UNKNOWN,/** The line number the directive was on */,undetermined
16969,httpd,UNKNOWN,"/** A short-cut towards the last directive node in the tree.
     *  The value may not always be up-to-date but it always points to
     *  somewhere in the tree, nearer to the tail.
     *  This value is only set in the first node
     */",undetermined
16970,httpd,UNKNOWN,"/**
 * The root of the configuration tree
 */",undetermined
16971,httpd,UNKNOWN,"/**
 * Add a node to the configuration tree.
 * @param parent The current parent node.  If the added node is a first_child,
                 then this is changed to the current node
 * @param current The current node
 * @param toadd The node to add to the tree
 * @param child Is the node to add a child node
 * @return the added node
 */",undetermined
16972,httpd,UNKNOWN,/** @} */,undetermined
16973,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16974,httpd,UNKNOWN,"/**
 * @file  util_charset.h
 * @brief charset conversion
 *
 * @defgroup APACHE_CORE_CHARSET Charset Conversion
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16975,httpd,UNKNOWN,"/** On EBCDIC machine this is a translation handle used to translate the
 *  headers from the local machine format to ASCII for network transmission.
 *  On an ASCII machine this is NULL */",undetermined
16976,httpd,UNKNOWN,"/** On EBCDIC machine this is a translation handle used to translate the
 *  headers from ASCII to the local machine format after network transmission.
 *  On an ASCII machine this is NULL */",undetermined
16977,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
16978,httpd,UNKNOWN,/* !APACHE_UTIL_CHARSET_H */,undetermined
16979,httpd,UNKNOWN,/** @} */,undetermined
16980,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16981,httpd,UNKNOWN,"/**
 * @file util_cookies.h
 * @brief Apache cookie library
 */",undetermined
16982,httpd,UNKNOWN,"/**
 * @defgroup APACHE_CORE_COOKIE Cookies
 * @ingroup  APACHE_CORE
 *
 * RFC2109 and RFC2965 compliant HTTP cookies can be read from and written
 * to using this set of functions.
 *
 * @{
 *
 */",undetermined
16983,httpd,UNKNOWN,"/**
 * Write an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs The string containing additional cookie attributes. If NULL, the
 *              DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */",undetermined
16984,httpd,UNKNOWN,"/**
 * Write an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs2 The string containing additional cookie attributes. If NULL, the
 *               DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */",undetermined
16985,httpd,UNKNOWN,"/**
 * Remove an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 * @param attrs The string containing additional cookie attributes. If NULL, the
 *              CLEAR_ATTRS will be used.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */",undetermined
16986,httpd,UNKNOWN,"/**
 * Remove an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 * @param attrs2 The string containing additional cookie attributes. If NULL, the
 *               CLEAR_ATTRS will be used.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */",undetermined
16987,httpd,UNKNOWN,"/**
 * Read a cookie called name, placing its value in val.
 *
 * Both the Cookie and Cookie2 headers are scanned for the cookie.
 *
 * If the cookie is duplicated, this function returns APR_EGENERAL. If found,
 * and if remove is non zero, the cookie will be removed from the headers, and
 * thus kept private from the backend.
 */",undetermined
16988,httpd,UNKNOWN,"/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain the special characters '=', ';' and '&'.
 *
 * It is used to sanity check the cookie names.
 */",undetermined
16989,httpd,UNKNOWN,"/**
 * @}
 */",undetermined
16990,httpd,UNKNOWN,/* !UTIL_COOKIES_H */,undetermined
16991,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
16992,httpd,UNKNOWN,"/**
 * @file  util_ebcdic.h
 * @brief Utilities for EBCDIC conversion
 *
 * @defgroup APACHE_CORE_EBCDIC Utilities for EBCDIC conversion
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
16993,httpd,UNKNOWN,"/**
 * Setup all of the global translation handlers
 * @param pool pool to allocate out of
 */",undetermined
16994,httpd,UNKNOWN,"/**
 * Convert protocol data from the implementation character
 * set to ASCII.
 * @param buffer buffer to translate
 * @param len number of bytes to translate
 */",undetermined
16995,httpd,UNKNOWN,"/**
 * Convert protocol data to the implementation character
 * set from ASCII.
 * @param buffer buffer to translate
 * @param len number of bytes to translate
 */",undetermined
16996,httpd,UNKNOWN,"/**
 * Convert protocol data from the implementation charater
 * set to ASCII, then send it.
 * @param r   the current request
 * @param ... the strings to write, followed by a NULL pointer
 */",undetermined
16997,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
16998,httpd,UNKNOWN,/* NOOP */,undetermined
16999,httpd,UNKNOWN,/* NOOP */,undetermined
17000,httpd,UNKNOWN,/* APR_CHARSET_EBCDIC */,undetermined
17001,httpd,UNKNOWN,/* !APACHE_UTIL_EBCDIC_H */,undetermined
17002,httpd,UNKNOWN,/** @} */,undetermined
17003,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17004,httpd,UNKNOWN,"/**
 * @file util_filter.h
 * @brief Apache filter library
 */",undetermined
17005,httpd,UNKNOWN,"/**
 * @brief input filtering modes
 */",undetermined
17006,httpd,UNKNOWN,/** The filter should return at most readbytes data. */,undetermined
17007,httpd,UNKNOWN,"/** The filter should return at most one line of CRLF data.
     *  (If a potential line is too long or no CRLF is found, the
     *   filter may return partial data).
     */",undetermined
17008,httpd,UNKNOWN,/** The filter should implicitly eat any CRLF pairs that it sees. */,undetermined
17009,httpd,UNKNOWN,"/** The filter read should be treated as speculative and any returned
     *  data should be stored for later retrieval in another mode. */",undetermined
17010,httpd,UNKNOWN,"/** The filter read should be exhaustive and read until it can not
     *  read any more.
     *  Use this mode with extreme caution.
     */",undetermined
17011,httpd,UNKNOWN,"/** The filter should initialize the connection if needed,
     *  NNTP or FTP over SSL for example.
     */",undetermined
17012,httpd,UNKNOWN,"/**
 * @defgroup APACHE_CORE_FILTER Filter Chain
 * @ingroup  APACHE_CORE
 *
 * Filters operate using a ""chaining"" mechanism. The filters are chained
 * together into a sequence. When output is generated, it is passed through
 * each of the filters on this chain, until it reaches the end (or ""bottom"")
 * and is placed onto the network.
 *
 * The top of the chain, the code generating the output, is typically called
 * a ""content generator."" The content generator's output is fed into the
 * filter chain using the standard Apache output mechanisms: ap_rputs(),
 * ap_rprintf(), ap_rwrite(), etc.
 *
 * Each filter is defined by a callback. This callback takes the output from
 * the previous filter (or the content generator if there is no previous
 * filter), operates on it, and passes the result to the next filter in the
 * chain. This pass-off is performed using the ap_fc_* functions, such as
 * ap_fc_puts(), ap_fc_printf(), ap_fc_write(), etc.
 *
 * When content generation is complete, the system will pass an ""end of
 * stream"" marker into the filter chain. The filters will use this to flush
 * out any internal state and to detect incomplete syntax (for example, an
 * unterminated SSI directive).
 *
 * @{
 */",undetermined
17013,httpd,UNKNOWN,/* forward declare the filter type */,undetermined
17014,httpd,UNKNOWN,"/**
 * @name Filter callbacks
 *
 * This function type is used for filter callbacks. It will be passed a
 * pointer to ""this"" filter, and a ""bucket brigade"" containing the content
 * to be filtered.
 *
 * In filter->ctx, the callback will find its context. This context is
 * provided here, so that a filter may be installed multiple times, each
 * receiving its own per-install context pointer.
 *
 * Callbacks are associated with a filter definition, which is specified
 * by name. See ap_register_input_filter() and ap_register_output_filter()
 * for setting the association between a name for a filter and its
 * associated callback (and other information).
 *
 * If the initialization function argument passed to the registration
 * functions is non-NULL, it will be called iff the filter is in the input
 * or output filter chains and before any data is generated to allow the
 * filter to prepare for processing.
 *
 * The bucket brigade always belongs to the caller, but the filter
 * is free to use the buckets within it as it sees fit. Normally,
 * the brigade will be returned empty. Buckets *may not* be retained
 * between successive calls to the filter unless they have been
 * ""set aside"" with a call apr_bucket_setaside. Typically this will
 * be done with ap_save_brigade(). Buckets removed from the brigade
 * become the responsibility of the filter, which must arrange for
 * them to be deleted, either by doing so directly or by inserting
 * them in a brigade which will subsequently be destroyed.
 *
 * For the input and output filters, the return value of a filter should be
 * an APR status value.  For the init function, the return value should
 * be an HTTP error code or OK if it was successful.
 *
 * @ingroup filter
 * @{
 */",undetermined
17015,httpd,UNKNOWN,/** @} */,undetermined
17016,httpd,UNKNOWN,"/**
 * Filters have different types/classifications. These are used to group
 * and sort the filters to properly sequence their operation.
 *
 * The types have a particular sort order, which allows us to insert them
 * into the filter chain in a determistic order. Within a particular grouping,
 * the ordering is equivalent to the order of calls to ap_add_*_filter().
 */",undetermined
17017,httpd,UNKNOWN,"/** These filters are used to alter the content that is passed through
     *  them. Examples are SSI or PHP. */",undetermined
17018,httpd,UNKNOWN,"/** These filters are used to alter the content as a whole, but after all
     *  AP_FTYPE_RESOURCE filters are executed.  These filters should not
     *  change the content-type.  An example is deflate.  */",undetermined
17019,httpd,UNKNOWN,"/** These filters are used to handle the protocol between server and
     *  client.  Examples are HTTP and POP. */",undetermined
17020,httpd,UNKNOWN,"/** These filters implement transport encodings (e.g., chunking). */",undetermined
17021,httpd,UNKNOWN,"/** These filters will alter the content, but in ways that are
     *  more strongly associated with the connection.  Examples are
     *  splitting an HTTP connection into multiple requests and
     *  buffering HTTP responses across multiple requests.
     *
     *  It is important to note that these types of filters are not
     *  allowed in a sub-request. A sub-request's output can certainly
     *  be filtered by ::AP_FTYPE_RESOURCE filters, but all of the ""final
     *  processing"" is determined by the main request. */",undetermined
17022,httpd,UNKNOWN,"/** These filters don't alter the content.  They are responsible for
     *  sending/receiving data to/from the client. */",undetermined
17023,httpd,UNKNOWN,"/**
 * This is the request-time context structure for an installed filter (in
 * the output filter chain). It provides the callback to use for filtering,
 * the request this filter is associated with (which is important when
 * an output chain also includes sub-request filters), the context for this
 * installed filter, and the filter ordering/chaining fields.
 *
 * Filter callbacks are free to use ->ctx as they please, to store context
 * during the filter process. Generally, this is superior over associating
 * the state directly with the request. A callback should not change any of
 * the other fields.
 */",undetermined
17024,httpd,UNKNOWN,"/**
 * @brief This structure is used for recording information about the
 * registered filters. It associates a name with the filter's callback
 * and filter type.
 *
 * At the moment, these are simply linked in a chain, so a ->next pointer
 * is available.
 *
 * It is used for any filter that can be inserted in the filter chain.
 * This may be either a httpd-2.0 filter or a mod_filter harness.
 * In the latter case it contains dispatch, provider and protocol information.
 * In the former case, the new fields (from dispatch) are ignored.
 */",undetermined
17025,httpd,UNKNOWN,/** The registered name for this filter */,undetermined
17026,httpd,UNKNOWN,/** The function to call when this filter is invoked. */,undetermined
17027,httpd,UNKNOWN,"/** The function to call directly before the handlers are invoked
     * for a request.  The init function is called once directly
     * before running the handlers for a request or subrequest.  The
     * init function is never called for a connection filter (with
     * ftype >= AP_FTYPE_CONNECTION).  Any use of this function for
     * filters for protocols other than HTTP is specified by the
     * module supported that protocol.
     */",undetermined
17028,httpd,UNKNOWN,/** The next filter_rec in the list */,undetermined
17029,httpd,UNKNOWN,/** Providers for this filter */,undetermined
17030,httpd,UNKNOWN,"/** The type of filter, either AP_FTYPE_CONTENT or AP_FTYPE_CONNECTION.
     * An AP_FTYPE_CONTENT filter modifies the data based on information
     * found in the content.  An AP_FTYPE_CONNECTION filter modifies the
     * data based on the type of connection.
     */",undetermined
17031,httpd,UNKNOWN,/** Trace level for this filter */,undetermined
17032,httpd,UNKNOWN,/** Protocol flags for this filter */,undetermined
17033,httpd,UNKNOWN,"/**
 * @brief The representation of a filter chain.
 *
 * Each request has a list
 * of these structures which are called in turn to filter the data.  Sub
 * requests get an exact copy of the main requests filter chain.
 */",undetermined
17034,httpd,UNKNOWN,"/** The internal representation of this filter.  This includes
     *  the filter's name, type, and the actual function pointer.
     */",undetermined
17035,httpd,UNKNOWN,/** A place to store any data associated with the current filter */,undetermined
17036,httpd,UNKNOWN,/** The next filter in the chain */,undetermined
17037,httpd,UNKNOWN,"/** The request_rec associated with the current filter.  If a sub-request
     *  adds filters, then the sub-request is the request associated with the
     *  filter.
     */",undetermined
17038,httpd,UNKNOWN,"/** The conn_rec associated with the current filter.  This is analogous
     *  to the request_rec, except that it is used for connection filters.
     */",undetermined
17039,httpd,UNKNOWN,"/**
 * Get the current bucket brigade from the next filter on the filter
 * stack.  The filter returns an apr_status_t value.  If the bottom-most
 * filter doesn't read from the network, then ::AP_NOBODY_READ is returned.
 * The bucket brigade will be empty when there is nothing left to get.
 * @param filter The next filter in the chain
 * @param bucket The current bucket brigade.  The original brigade passed
 *               to ap_get_brigade() must be empty.
 * @param mode   The way in which the data should be read
 * @param block  How the operations should be performed
 *               ::APR_BLOCK_READ, ::APR_NONBLOCK_READ
 * @param readbytes How many bytes to read from the next filter.
 */",undetermined
17040,httpd,UNKNOWN,"/**
 * Pass the current bucket brigade down to the next filter on the filter
 * stack.  The filter returns an apr_status_t value.  If the bottom-most
 * filter doesn't write to the network, then ::AP_NOBODY_WROTE is returned.
 * @param filter The next filter in the chain
 * @param bucket The current bucket brigade
 *
 * @remark Ownership of the brigade is retained by the caller. On return,
 *         the contents of the brigade are UNDEFINED, and the caller must
 *         either call apr_brigade_cleanup or apr_brigade_destroy on
 *         the brigade.
 */",undetermined
17041,httpd,UNKNOWN,"/**
 * Pass the current bucket brigade down to the next filter on the filter
 * stack checking for filter errors.  The filter returns an apr_status_t value.
 * Returns ::OK if the brigade is successfully passed
 *         ::AP_FILTER_ERROR on a filter error
 *         ::HTTP_INTERNAL_SERVER_ERROR on all other errors
 * @param r      The request rec
 * @param bucket The current bucket brigade
 * @param fmt The format string. If NULL defaults to ""ap_pass_brigade returned""
 * @param ... The arguments to use to fill out the format string
 * @remark Ownership of the brigade is retained by the caller. On return,
 *         the contents of the brigade are UNDEFINED, and the caller must
 *         either call apr_brigade_cleanup or apr_brigade_destroy on
 *         the brigade.
 */",undetermined
17042,httpd,UNKNOWN,"/**
 * This function is used to register an input filter with the system.
 * After this registration is performed, then a filter may be added
 * into the filter chain by using ap_add_input_filter() and simply
 * specifying the name.
 *
 * @param name The name to attach to the filter function
 * @param filter_func The filter function to name
 * @param filter_init The function to call before the filter handlers
                      are invoked
 * @param ftype The type of filter function, either ::AP_FTYPE_CONTENT_SET or
 *              ::AP_FTYPE_CONNECTION
 * @see add_input_filter()
 */",undetermined
17043,httpd,UNKNOWN,/** @deprecated @see ap_register_output_filter_protocol */,undetermined
17044,httpd,UNKNOWN,"/* For httpd-?.? I suggest replacing the above with
#define ap_register_output_filter(name,ffunc,init,ftype) \
             ap_register_output_filter_protocol(name,ffunc,init,ftype,0)
*/",undetermined
17045,httpd,UNKNOWN,"/**
 * This function is used to register an output filter with the system.
 * After this registration is performed, then a filter may be added
 * directly to the filter chain by using ap_add_output_filter() and
 * simply specifying the name, or as a provider under mod_filter.
 *
 * @param name The name to attach to the filter function
 * @param filter_func The filter function to name
 * @param filter_init The function to call before the filter handlers
 *                    are invoked
 * @param ftype The type of filter function, either ::AP_FTYPE_CONTENT_SET or
 *              ::AP_FTYPE_CONNECTION
 * @param proto_flags Protocol flags: logical OR of AP_FILTER_PROTO_* bits
 * @return the filter rec
 * @see ap_add_output_filter()
 */",undetermined
17046,httpd,UNKNOWN,"/**
 * Adds a named filter into the filter chain on the specified request record.
 * The filter will be installed with the specified context pointer.
 *
 * Filters added in this way will always be placed at the end of the filters
 * that have the same type (thus, the filters have the same order as the
 * calls to ap_add_filter). If the current filter chain contains filters
 * from another request, then this filter will be added before those other
 * filters.
 *
 * To re-iterate that last comment.  This function is building a FIFO
 * list of filters.  Take note of that when adding your filter to the chain.
 *
 * @param name The name of the filter to add
 * @param ctx Context data to provide to the filter
 * @param r The request to add this filter for (or NULL if it isn't associated with a request)
 * @param c The connection to add the fillter for
 */",undetermined
17047,httpd,UNKNOWN,"/**
 * Variant of ap_add_input_filter() that accepts a registered filter handle
 * (as returned by ap_register_input_filter()) rather than a filter name
 *
 * @param f The filter handle to add
 * @param ctx Context data to provide to the filter
 * @param r The request to add this filter for (or NULL if it isn't associated with a request)
 * @param c The connection to add the fillter for
 */",undetermined
17048,httpd,UNKNOWN,"/**
 * Returns the filter handle for use with ap_add_input_filter_handle.
 *
 * @param name The filter name to look up
 */",undetermined
17049,httpd,UNKNOWN,"/**
 * Add a filter to the current request.  Filters are added in a FIFO manner.
 * The first filter added will be the first filter called.
 * @param name The name of the filter to add
 * @param ctx Context data to set in the filter
 * @param r The request to add this filter for (or NULL if it isn't associated with a request)
 * @param c The connection to add this filter for
 * @note If adding a connection-level output filter (i.e. where the type
 * is >= AP_FTYPE_CONNECTION) during processing of a request, the request
 * object r must be passed in to ensure the filter chains are modified
 * correctly.  f->r will still be initialized as NULL in the new filter.
 */",undetermined
17050,httpd,UNKNOWN,"/**
 * Variant of ap_add_output_filter() that accepts a registered filter handle
 * (as returned by ap_register_output_filter()) rather than a filter name
 *
 * @param f The filter handle to add
 * @param ctx Context data to set in the filter
 * @param r The request to add this filter for (or NULL if it isn't associated with a request)
 * @param c The connection to add the filter for
 * @note If adding a connection-level output filter (i.e. where the type
 * is >= AP_FTYPE_CONNECTION) during processing of a request, the request
 * object r must be passed in to ensure the filter chains are modified
 * correctly.  f->r will still be initialized as NULL in the new filter.
 */",undetermined
17051,httpd,UNKNOWN,"/**
 * Returns the filter handle for use with ap_add_output_filter_handle.
 *
 * @param name The filter name to look up
 */",undetermined
17052,httpd,UNKNOWN,"/**
 * Remove an input filter from either the request or connection stack
 * it is associated with.
 * @param f The filter to remove
 */",undetermined
17053,httpd,UNKNOWN,"/**
 * Remove an output filter from either the request or connection stack
 * it is associated with.
 * @param f The filter to remove
 */",undetermined
17054,httpd,UNKNOWN,"/**
 * Remove an input filter from either the request or connection stack
 * it is associated with.
 * @param next   The filter stack to search
 * @param handle The filter handle (name) to remove
 * @return APR_SUCCESS on removal or error
 */",undetermined
17055,httpd,UNKNOWN,"/**
 * Remove an output filter from either the request or connection stack
 * it is associated with.
 * @param next   The filter stack to search
 * @param handle The filter handle (name) to remove
 * @return APR_SUCCESS on removal or error
 */",undetermined
17056,httpd,UNKNOWN,"/* The next two filters are for abstraction purposes only.  They could be
 * done away with, but that would require that we break modules if we ever
 * want to change our filter registration method.  The basic idea, is that
 * all filters have a place to store data, the ctx pointer.  These functions
 * fill out that pointer with a bucket brigade, and retrieve that data on
 * the next call.  The nice thing about these functions, is that they
 * automatically concatenate the bucket brigades together for you.  This means
 * that if you have already stored a brigade in the filters ctx pointer, then
 * when you add more it will be tacked onto the end of that brigade.  When
 * you retrieve data, if you pass in a bucket brigade to the get function,
 * it will append the current brigade onto the one that you are retrieving.
 */",undetermined
17057,httpd,UNKNOWN,"/**
 * prepare a bucket brigade to be setaside.  If a different brigade was
 * set-aside earlier, then the two brigades are concatenated together.
 * @param f The current filter
 * @param save_to The brigade that was previously set-aside.  Regardless, the
 *             new bucket brigade is returned in this location.
 * @param b The bucket brigade to save aside.  This brigade is always empty
 *          on return
 * @param p Ensure that all data in the brigade lives as long as this pool
 */",undetermined
17058,httpd,UNKNOWN,"/**
 * Flush function for apr_brigade_* calls.  This calls ap_pass_brigade
 * to flush the brigade if the brigade buffer overflows.
 * @param bb The brigade to flush
 * @param ctx The filter to pass the brigade to
 * @note this function has nothing to do with FLUSH buckets. It is simply
 * a way to flush content out of a brigade and down a filter stack.
 */",undetermined
17059,httpd,UNKNOWN,"/**
 * Flush the current brigade down the filter stack.
 * @param f The filter we are passing to
 * @param bb The brigade to flush
 */",undetermined
17060,httpd,UNKNOWN,"/**
 * Write a buffer for the current filter, buffering if possible.
 * @param f the filter we are writing to
 * @param bb The brigade to buffer into
 * @param data The data to write
 * @param nbyte The number of bytes in the data
 */",undetermined
17061,httpd,UNKNOWN,"/**
 * Write a buffer for the current filter, buffering if possible.
 * @param f the filter we are writing to
 * @param bb The brigade to buffer into
 * @param str The string to write
 */",undetermined
17062,httpd,UNKNOWN,"/**
 * Write a character for the current filter, buffering if possible.
 * @param f the filter we are writing to
 * @param bb The brigade to buffer into
 * @param c The character to write
 */",undetermined
17063,httpd,UNKNOWN,"/**
 * Write an unspecified number of strings to the current filter
 * @param f the filter we are writing to
 * @param bb The brigade to buffer into
 * @param ... The strings to write
 */",undetermined
17064,httpd,UNKNOWN,"/**
 * Output data to the filter in printf format
 * @param f the filter we are writing to
 * @param bb The brigade to buffer into
 * @param fmt The format string
 * @param ... The arguments to use to fill out the format string
 */",undetermined
17065,httpd,UNKNOWN,"/**
 * set protocol requirements for an output content filter
 * (only works with AP_FTYPE_RESOURCE and AP_FTYPE_CONTENT_SET)
 * @param f the filter in question
 * @param proto_flags Logical OR of AP_FILTER_PROTO_* bits
 */",undetermined
17066,httpd,UNKNOWN,/** Filter changes contents (so invalidating checksums/etc) */,undetermined
17067,httpd,UNKNOWN,/** Filter changes length of contents (so invalidating content-length/etc) */,undetermined
17068,httpd,UNKNOWN,/** Filter requires complete input and can't work on byteranges */,undetermined
17069,httpd,UNKNOWN,/** Filter should not run in a proxy */,undetermined
17070,httpd,UNKNOWN,/** Filter makes output non-cacheable */,undetermined
17071,httpd,UNKNOWN,"/** Filter is incompatible with ""Cache-Control: no-transform"" */",undetermined
17072,httpd,UNKNOWN,"/**
 * @}
 */",undetermined
17073,httpd,UNKNOWN,/* !AP_FILTER_H */,undetermined
17074,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17075,httpd,UNKNOWN,"/**
 * @file util_ldap.h
 * @brief Apache LDAP library
 */",undetermined
17076,httpd,UNKNOWN,/* APR header files */,undetermined
17077,httpd,UNKNOWN,/* The LDAP API is currently only present in APR 1.x */,undetermined
17078,httpd,UNKNOWN,/* this whole thing disappears if LDAP is not enabled */,undetermined
17079,httpd,UNKNOWN,/* Apache header files */,undetermined
17080,httpd,UNKNOWN,"/* Create a set of LDAP_DECLARE macros with appropriate export
 * and import tags for the platform
 */",undetermined
17081,httpd,UNKNOWN,"/*
 * LDAP Connections
 */",undetermined
17082,httpd,UNKNOWN,/* Values that the deref member can have */,undetermined
17083,httpd,UNKNOWN,/* Structure representing an LDAP connection */,undetermined
17084,httpd,UNKNOWN,/* Pool from which this connection is created */,undetermined
17085,httpd,UNKNOWN,/* Lock to indicate this connection is in use */,undetermined
17086,httpd,UNKNOWN,/* Name of the LDAP server (or space separated list) */,undetermined
17087,httpd,UNKNOWN,/* Port of the LDAP server */,undetermined
17088,httpd,UNKNOWN,/* how to handle alias dereferening */,undetermined
17089,httpd,UNKNOWN,/* DN to bind to server (can be NULL) */,undetermined
17090,httpd,UNKNOWN,/* Password to bind to server (can be NULL) */,undetermined
17091,httpd,UNKNOWN,/* Flag to indicate whether this connection is bound yet */,undetermined
17092,httpd,UNKNOWN,/* SSL/TLS mode of the connection */,undetermined
17093,httpd,UNKNOWN,/* Client certificates on this connection */,undetermined
17094,httpd,UNKNOWN,/* Reason for an error failure */,undetermined
17095,httpd,UNKNOWN,/* The LDAP vhost config this connection belongs to */,undetermined
17096,httpd,UNKNOWN,/* Will this connection be kept when it's unlocked */,undetermined
17097,httpd,UNKNOWN,/* [on|off] (default = AP_LDAP_CHASEREFERRALS_ON)*/,undetermined
17098,httpd,UNKNOWN,/* # of referral hops to follow (default = AP_LDAP_DEFAULT_HOPLIMIT) */,undetermined
17099,httpd,UNKNOWN,/* the time this conn was placed back in the pool */,undetermined
17100,httpd,UNKNOWN,/* frequently cleared pool for rebind data */,undetermined
17101,httpd,UNKNOWN,/* Client certificates */,undetermined
17102,httpd,UNKNOWN,/* LDAP cache state information */,undetermined
17103,httpd,UNKNOWN,/* pool from which this state is allocated */,undetermined
17104,httpd,UNKNOWN,/* mutex lock for the connection list */,undetermined
17105,httpd,UNKNOWN,/* Size (in bytes) of shared memory cache */,undetermined
17106,httpd,UNKNOWN,/* filename for shm */,undetermined
17107,httpd,UNKNOWN,/* TTL for search cache */,undetermined
17108,httpd,UNKNOWN,/* Size (in entries) of search cache */,undetermined
17109,httpd,UNKNOWN,/* TTL for compare cache */,undetermined
17110,httpd,UNKNOWN,/* Size (in entries) of compare cache */,undetermined
17111,httpd,UNKNOWN,/* Global CA certificates */,undetermined
17112,httpd,UNKNOWN,/* cache ald */,undetermined
17113,httpd,UNKNOWN,/* SDK debug level */,undetermined
17114,httpd,UNKNOWN,/* number of retries for failed bind/search/compare */,undetermined
17115,httpd,UNKNOWN,/* delay between retries of failed bind/search/compare */,undetermined
17116,httpd,UNKNOWN,/* Used to store arrays of attribute labels/values. */,undetermined
17117,httpd,UNKNOWN,"/**
 * Open a connection to an LDAP server
 * @param ldc A structure containing the expanded details of the server
 *            to connect to. The handle to the LDAP connection is returned
 *            as ldc->ldap.
 * @tip This function connects to the LDAP server and binds. It does not
 *      connect if already connected (ldc->ldap != NULL). Does not bind
 *      if already bound.
 * @return If successful LDAP_SUCCESS is returned.
 * @fn int util_ldap_connection_open(request_rec *r,
 *                                        util_ldap_connection_t *ldc)
 */",undetermined
17118,httpd,UNKNOWN,"/**
 * Close a connection to an LDAP server
 * @param ldc A structure containing the expanded details of the server
 *            that was connected.
 * @tip This function unbinds from the LDAP server, and clears ldc->ldap.
 *      It is possible to rebind to this server again using the same ldc
 *      structure, using apr_ldap_open_connection().
 * @fn util_ldap_close_connection(util_ldap_connection_t *ldc)
 */",undetermined
17119,httpd,UNKNOWN,"/**
 * Unbind a connection to an LDAP server
 * @param ldc A structure containing the expanded details of the server
 *            that was connected.
 * @tip This function unbinds the LDAP connection, and disconnects from
 *      the server. It is used during error conditions, to bring the LDAP
 *      connection back to a known state.
 * @fn apr_status_t util_ldap_connection_unbind(util_ldap_connection_t *ldc)
 */",undetermined
17120,httpd,UNKNOWN,"/**
 * Find a connection in a list of connections
 * @param r The request record
 * @param host The hostname to connect to (multiple hosts space separated)
 * @param port The port to connect to
 * @param binddn The DN to bind with
 * @param bindpw The password to bind with
 * @param deref The dereferencing behavior
 * @param secure use SSL on the connection
 * @tip Once a connection is found and returned, a lock will be acquired to
 *      lock that particular connection, so that another thread does not try and
 *      use this connection while it is busy. Once you are finished with a connection,
 *      apr_ldap_connection_close() must be called to release this connection.
 * @fn util_ldap_connection_t *util_ldap_connection_find(request_rec *r, const char *host, int port,
 *                                                           const char *binddn, const char *bindpw, deref_options deref,
 *                                                           int netscapessl, int starttls)
 */",undetermined
17121,httpd,UNKNOWN,"/**
 * Compare two DNs for sameness
 * @param r The request record
 * @param ldc The LDAP connection being used.
 * @param url The URL of the LDAP connection - used for deciding which cache to use.
 * @param dn The first DN to compare.
 * @param reqdn The DN to compare the first DN to.
 * @param compare_dn_on_server Flag to determine whether the DNs should be checked using
 *                             LDAP calls or with a direct string comparision. A direct
 *                             string comparison is faster, but not as accurate - false
 *                             negative comparisons are possible.
 * @tip Two DNs can be equal and still fail a string comparison. Eg ""dc=example,dc=com""
 *      and ""dc=example, dc=com"". Use the compare_dn_on_server unless there are serious
 *      performance issues.
 * @fn int util_ldap_cache_comparedn(request_rec *r, util_ldap_connection_t *ldc,
 *                                        const char *url, const char *dn, const char *reqdn,
 *                                        int compare_dn_on_server)
 */",undetermined
17122,httpd,UNKNOWN,"/**
 * A generic LDAP compare function
 * @param r The request record
 * @param ldc The LDAP connection being used.
 * @param url The URL of the LDAP connection - used for deciding which cache to use.
 * @param dn The DN of the object in which we do the compare.
 * @param attrib The attribute within the object we are comparing for.
 * @param value The value of the attribute we are trying to compare for.
 * @tip Use this function to determine whether an attribute/value pair exists within an
 *      object. Typically this would be used to determine LDAP top-level group
 *      membership.
 * @fn int util_ldap_cache_compare(request_rec *r, util_ldap_connection_t *ldc,
 *                                      const char *url, const char *dn, const char *attrib, const char *value)
 */",undetermined
17123,httpd,UNKNOWN,"/**
 * An LDAP function that checks if the specified user is a member of a subgroup.
 * @param r The request record
 * @param ldc The LDAP connection being used.
 * @param url The URL of the LDAP connection - used for deciding which cache to use.
 * @param dn The DN of the object in which we find subgroups to search within.
 * @param attrib The attribute within group objects that identify users.
 * @param value The user attribute value we are trying to compare for.
 * @param subgroupAttrs The attributes within group objects that identify subgroups.
 *                      Array of strings.
 * @param subgroupclasses The objectClass values used to identify groups (and
 *                      subgroups). apr_array_header_t *.
 * @param cur_subgroup_depth Current recursive depth during subgroup processing.
 * @param max_subgroup_depth Maximum depth of recursion allowed during subgroup
 *                           processing.
 * @tip Use this function to determine whether an attribute/value pair exists within a
 *      starting group object or one of its nested subgroups. Typically this would be
 *      used to determine LDAP nested group membership.
 * @deffunc int util_ldap_cache_check_subgroups(request_rec *r, util_ldap_connection_t
 *                                      *ldc, const char *url, const char *dn,
 *                                      const char *attrib, const char value,
 *                                      char **subgroupAttrs, apr_array_header_t
 *                                      *subgroupclasses, int cur_subgroup_depth, int
 *                                      max_subgroup_depth )
 */",undetermined
17124,httpd,UNKNOWN,"/**
 * Checks a username/password combination by binding to the LDAP server
 * @param r The request record
 * @param ldc The LDAP connection being used.
 * @param url The URL of the LDAP connection - used for deciding which cache to use.
 * @param basedn The Base DN to search for the user in.
 * @param scope LDAP scope of the search.
 * @param attrs LDAP attributes to return in search.
 * @param filter The user to search for in the form of an LDAP filter. This filter must return
 *               exactly one user for the check to be successful.
 * @param bindpw The user password to bind as.
 * @param binddn The DN of the user will be returned in this variable.
 * @param retvals The values corresponding to the attributes requested in the attrs array.
 * @tip The filter supplied will be searched for. If a single entry is returned, an attempt
 *      is made to bind as that user. If this bind succeeds, the user is not validated.
 * @fn int util_ldap_cache_checkuserid(request_rec *r, util_ldap_connection_t *ldc,
 *                                          char *url, const char *basedn, int scope, char **attrs,
 *                                          char *filter, char *bindpw, char **binddn, char ***retvals)
 */",undetermined
17125,httpd,UNKNOWN,"/**
 * Searches for a specified user object in an LDAP directory
 * @param r The request record
 * @param ldc The LDAP connection being used.
 * @param url The URL of the LDAP connection - used for deciding which cache to use.
 * @param basedn The Base DN to search for the user in.
 * @param scope LDAP scope of the search.
 * @param attrs LDAP attributes to return in search.
 * @param filter The user to search for in the form of an LDAP filter. This filter must return
 *               exactly one user for the check to be successful.
 * @param binddn The DN of the user will be returned in this variable.
 * @param retvals The values corresponding to the attributes requested in the attrs array.
 * @tip The filter supplied will be searched for. If a single entry is returned, an attempt
 *      is made to bind as that user. If this bind succeeds, the user is not validated.
 * @fn int util_ldap_cache_getuserdn(request_rec *r, util_ldap_connection_t *ldc,
 *                                          char *url, const char *basedn, int scope, char **attrs,
 *                                          char *filter, char **binddn, char ***retvals)
 */",undetermined
17126,httpd,UNKNOWN,"/**
 * Checks if SSL support is available in mod_ldap
 * @fn int util_ldap_ssl_supported(request_rec *r)
 */",undetermined
17127,httpd,UNKNOWN,/* from apr_ldap_cache.c */,undetermined
17128,httpd,UNKNOWN,"/**
 * Init the LDAP cache
 * @param pool The pool to use to initialise the cache
 * @param reqsize The size of the shared memory segment to request. A size
 *                of zero requests the max size possible from
 *                apr_shmem_init()
 * @fn void util_ldap_cache_init(apr_pool_t *p, util_ldap_state_t *st)
 * @return The status code returned is the status code of the
 *         apr_smmem_init() call. Regardless of the status, the cache
 *         will be set up at least for in-process or in-thread operation.
 */",undetermined
17129,httpd,UNKNOWN,/* from apr_ldap_cache_mgr.c */,undetermined
17130,httpd,UNKNOWN,"/**
 * Display formatted stats for cache
 * @param The pool to allocate the returned string from
 * @tip This function returns a string allocated from the provided pool that describes
 *      various stats about the cache.
 * @fn char *util_ald_cache_display(apr_pool_t *pool, util_ldap_state_t *st)
 */",undetermined
17131,httpd,UNKNOWN,/* APR_HAS_LDAP */,undetermined
17132,httpd,UNKNOWN,/* UTIL_LDAP_H */,undetermined
17133,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17134,httpd,UNKNOWN,"/**
 * @file  util_md5.h
 * @brief Apache MD5 library
 *
 * @defgroup APACHE_CORE_MD5 MD5 Package Library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
17135,httpd,UNKNOWN,"/**
 * Create an MD5 checksum of a given string
 * @param a Pool to allocate out of
 * @param string String to get the checksum of
 * @return The checksum
 * @fn char *ap_md5(apr_pool_t *a, const unsigned char *string)
 */",undetermined
17136,httpd,UNKNOWN,"/**
 * Create an MD5 checksum of a string of binary data
 * @param a Pool to allocate out of
 * @param buf Buffer to generate checksum for
 * @param len The length of the buffer
 * @return The checksum
 * @fn char *ap_md5_binary(apr_pool_t *a, const unsigned char *buf, int len)
 */",undetermined
17137,httpd,UNKNOWN,"/**
 * Convert an MD5 checksum into a base64 encoding
 * @param p The pool to allocate out of
 * @param context The context to convert
 * @return The converted encoding
 * @fn char *ap_md5contextTo64(apr_pool_t *p, apr_md5_ctx_t *context)
 */",undetermined
17138,httpd,UNKNOWN,"/**
 * Create an MD5 Digest for a given file
 * @param p The pool to allocate out of
 * @param infile The file to create the digest for
 * @fn char *ap_md5digest(apr_pool_t *p, apr_file_t *infile)
 */",undetermined
17139,httpd,UNKNOWN,/* !APACHE_UTIL_MD5_H */,undetermined
17140,httpd,UNKNOWN,/** @} */,undetermined
17141,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17142,httpd,UNKNOWN,"/**
 * @file  util_mutex.h
 * @brief Apache Mutex support library
 *
 * @defgroup APACHE_CORE_MUTEX Mutex Library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
17143,httpd,UNKNOWN,"/**
 * Get Mutex config data and parse it
 * @param arg The mutex config string
 * @param pool The allocation pool
 * @param mutexmech The APR mutex locking mechanism
 * @param mutexfile The lockfile to use as required
 * @return APR status code
 * @fn apr_status_t ap_parse_mutex(const char *arg, apr_pool_t *pool,
                                        apr_lockmech_e *mutexmech,
                                        const char **mutexfile)
 */",undetermined
17144,httpd,UNKNOWN,/* private function to process the Mutex directive */,undetermined
17145,httpd,UNKNOWN,/* private function to initialize Mutex infrastructure */,undetermined
17146,httpd,UNKNOWN,"/**
 * option flags for ap_mutex_register(), ap_global_mutex_create(), and
 * ap_proc_mutex_create()
 */",undetermined
17147,httpd,UNKNOWN,"/* allow ""none"" as mutex implementation;
                                  * respected only on ap_mutex_register()
                                  */",undetermined
17148,httpd,UNKNOWN,"/* default to ""none"" for this mutex;
                                  * respected only on ap_mutex_register()
                                  */",undetermined
17149,httpd,UNKNOWN,"/**
 * Register a module's mutex type with core to allow configuration
 * with the Mutex directive.  This must be called in the pre_config
 * hook; otherwise, configuration directives referencing this mutex
 * type will be rejected.
 *
 * The default_dir and default_mech parameters allow a module to set
 * defaults for the lock file directory and mechanism.  These could
 * be based on compile-time settings.  These aren't required except
 * in special circumstances.
 *
 * The order of precedence for the choice of mechanism and lock file
 * directory is:
 *
 *   1. Mutex directive specifically for this mutex
 *      e.g., Mutex mpm-default flock:/tmp/mpmlocks
 *   2. Mutex directive for global default
 *      e.g., Mutex default flock:/tmp/httpdlocks
 *   3. Defaults for this mutex provided on the ap_mutex_register()
 *   4. Built-in defaults for all mutexes, which are
 *      APR_LOCK_DEFAULT and DEFAULT_REL_RUNTIMEDIR.
 *
 * @param pconf The pconf pool
 * @param type The type name of the mutex, used as the basename of the
 * file associated with the mutex, if any.  This must be unique among
 * all mutex types (mutex creation accommodates multi-instance mutex
 * types); mod_foo might have mutex  types ""foo-pipe"" and ""foo-shm""
 * @param default_dir Default dir for any lock file required for this
 * lock, to override built-in defaults; should be NULL for most
 * modules, to respect built-in defaults
 * @param default_mech Default mechanism for this lock, to override
 * built-in defaults; should be APR_LOCK_DEFAULT for most modules, to
 * respect built-in defaults
 * or NULL if there are no defaults for this mutex.
 * @param options combination of AP_MUTEX_* constants, or 0 for defaults
 */",undetermined
17150,httpd,UNKNOWN,"/**
 * Create an APR global mutex that has been registered previously with
 * ap_mutex_register().  Mutex files, permissions, and error logging will
 * be handled internally.
 * @param mutex The memory address where the newly created mutex will be
 * stored.  If this mutex is disabled, mutex will be set to NULL on
 * output.  (That is allowed only if the AP_MUTEX_ALLOW_NONE flag is
 * passed to ap_mutex_register().)
 * @param name The generated filename of the created mutex, or NULL if
 * no file was created.  Pass NULL if this result is not needed.
 * @param type The type name of the mutex, matching the type name passed
 * to ap_mutex_register().
 * @param instance_id A unique string to be used in the lock filename IFF
 * this mutex type is multi-instance, NULL otherwise.
 * @param server server_rec of main server
 * @param pool pool lifetime of the mutex
 * @param options combination of AP_MUTEX_* constants, or 0 for defaults
 * (currently none are defined for this function)
 */",undetermined
17151,httpd,UNKNOWN,"/**
 * Create an APR proc mutex that has been registered previously with
 * ap_mutex_register().  Mutex files, permissions, and error logging will
 * be handled internally.
 * @param mutex The memory address where the newly created mutex will be
 * stored.  If this mutex is disabled, mutex will be set to NULL on
 * output.  (That is allowed only if the AP_MUTEX_ALLOW_NONE flag is
 * passed to ap_mutex_register().)
 * @param name The generated filename of the created mutex, or NULL if
 * no file was created.  Pass NULL if this result is not needed.
 * @param type The type name of the mutex, matching the type name passed
 * to ap_mutex_register().
 * @param instance_id A unique string to be used in the lock filename IFF
 * this mutex type is multi-instance, NULL otherwise.
 * @param server server_rec of main server
 * @param pool pool lifetime of the mutex
 * @param options combination of AP_MUTEX_* constants, or 0 for defaults
 * (currently none are defined for this function)
 */",undetermined
17152,httpd,UNKNOWN,/* UTIL_MUTEX_H */,undetermined
17153,httpd,UNKNOWN,/** @} */,undetermined
17154,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17155,httpd,UNKNOWN,"/**
 * @file  util_script.h
 * @brief Apache script tools
 *
 * @defgroup APACHE_CORE_SCRIPT Script Tools
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
17156,httpd,UNKNOWN,"/**
 * Create an environment variable out of an Apache table of key-value pairs
 * @param p pool to allocate out of
 * @param t Apache table of key-value pairs
 * @return An array containing the same key-value pairs suitable for
 *         use with an exec call.
 * @fn char **ap_create_environment(apr_pool_t *p, apr_table_t *t)
 */",undetermined
17157,httpd,UNKNOWN,"/**
 * This ""cute"" little function comes about because the path info on
 * filenames and URLs aren't always the same. So we take the two,
 * and find as much of the two that match as possible.
 * @param uri The uri we are currently parsing
 * @param path_info The current path info
 * @return The length of the path info
 * @fn int ap_find_path_info(const char *uri, const char *path_info)
 */",undetermined
17158,httpd,UNKNOWN,"/**
 * Add CGI environment variables required by HTTP/1.1 to the request's
 * environment table
 * @param r the current request
 * @fn void ap_add_cgi_vars(request_rec *r)
 */",undetermined
17159,httpd,UNKNOWN,"/**
 * Add common CGI environment variables to the requests environment table
 * @param r The current request
 * @fn void ap_add_common_vars(request_rec *r)
 */",undetermined
17160,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param f The file to read from
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 * @fn int ap_scan_script_header_err(request_rec *r, apr_file_t *f, char *buffer)
 */",undetermined
17161,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param f The file to read from
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param module_index The module index to be used for logging
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17162,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param bb The brigade from which to read
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 * @fn int ap_scan_script_header_err_brigade(request_rec *r, apr_bucket_brigade *bb, char *buffer)
 */",undetermined
17163,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param bb The brigade from which to read
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param module_index The module index to be used for logging
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17164,httpd,UNKNOWN,"/**
 * Read headers strings from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param termch Pointer to the last character parsed.
 * @param termarg Pointer to an int to capture the last argument parsed.
 *
 * The varargs are string arguments to parse consecutively for headers,
 * with a NULL argument to terminate the list.
 *
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17165,httpd,UNKNOWN,"/**
 * Read headers strings from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param module_index The module index to be used for logging
 * @param termch Pointer to the last character parsed.
 * @param termarg Pointer to an int to capture the last argument parsed.
 *
 * The varargs are string arguments to parse consecutively for headers,
 * with a NULL argument to terminate the list.
 *
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17166,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param getsfunc Function to read the headers from.  This function should
                   act like gets()
 * @param getsfunc_data The place to read from
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17167,httpd,UNKNOWN,"/**
 * Read headers output from a script, ensuring that the output is valid.  If
 * the output is valid, then the headers are added to the headers out of the
 * current request
 * @param r The current request
 * @param buffer Empty when calling the function.  On output, if there was an
 *               error, the string that cause the error is stored here.
 * @param getsfunc Function to read the headers from.  This function should
                   act like gets()
 * @param getsfunc_data The place to read from
 * @param module_index The module index to be used for logging
 * @return HTTP_OK on success, HTTP_INTERNAL_SERVER_ERROR otherwise
 */",undetermined
17168,httpd,UNKNOWN,"/**
 * Parse query args for the request and store in a new table allocated
 * from the request pool.
 * For args with no value, ""1"" will be used instead.
 * If no query args were specified, the table will be empty.
 * @param r The current request
 * @param table A new table on output.
 */",undetermined
17169,httpd,UNKNOWN,/* !APACHE_UTIL_SCRIPT_H */,undetermined
17170,httpd,UNKNOWN,/** @} */,undetermined
17171,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17172,httpd,UNKNOWN,"/**
 * @file  util_time.h
 * @brief Apache date-time handling functions
 *
 * @defgroup APACHE_CORE_TIME Date-time handling functions
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
17173,httpd,UNKNOWN,"/* Maximum delta from the current time, in seconds, for a past time
 * to qualify as ""recent"" for use in the ap_explode_recent_*() functions:
 * (Must be a power of two minus one!)
 */",undetermined
17174,httpd,UNKNOWN,/* Options for ap_recent_ctime_ex */,undetermined
17175,httpd,UNKNOWN,/* No extension */,undetermined
17176,httpd,UNKNOWN,/* Add sub second timestamps with micro second resolution */,undetermined
17177,httpd,UNKNOWN,/* Use more compact ISO 8601 format */,undetermined
17178,httpd,UNKNOWN,"/**
 * convert a recent time to its human readable components in local timezone
 * @param tm the exploded time
 * @param t the time to explode: MUST be within the last
 *          AP_TIME_RECENT_THRESHOLD seconds
 * @note This is a faster alternative to apr_time_exp_lt that uses
 *       a cache of pre-exploded time structures.  It is useful for things
 *       that need to explode the current time multiple times per second,
 *       like loggers.
 * @return APR_SUCCESS iff successful
 */",undetermined
17179,httpd,UNKNOWN,"/**
 * convert a recent time to its human readable components in GMT timezone
 * @param tm the exploded time
 * @param t the time to explode: MUST be within the last
 *          AP_TIME_RECENT_THRESHOLD seconds
 * @note This is a faster alternative to apr_time_exp_gmt that uses
 *       a cache of pre-exploded time structures.  It is useful for things
 *       that need to explode the current time multiple times per second,
 *       like loggers.
 * @return APR_SUCCESS iff successful
 */",undetermined
17180,httpd,UNKNOWN,"/**
 * format a recent timestamp in the ctime() format.
 * @param date_str String to write to.
 * @param t the time to convert
 * @note Consider using ap_recent_ctime_ex instead.
 * @return APR_SUCCESS iff successful
 */",undetermined
17181,httpd,UNKNOWN,"/**
 * format a recent timestamp in an extended ctime() format.
 * @param date_str String to write to.
 * @param t the time to convert
 * @param option Additional formatting options (AP_CTIME_OPTION_*).
 * @param len Pointer to an int containing the length of the provided buffer.
 *        On successful return it contains the number of bytes written to the
 *        buffer.
 * @return APR_SUCCESS iff successful, APR_ENOMEM if buffer was to short.
 */",undetermined
17182,httpd,UNKNOWN,"/**
 * format a recent timestamp in the RFC822 format
 * @param date_str String to write to (must have length >= APR_RFC822_DATE_LEN)
 * @param t the time to convert
 */",undetermined
17183,httpd,UNKNOWN,/* !APACHE_UTIL_TIME_H */,undetermined
17184,httpd,UNKNOWN,/** @} */,undetermined
17185,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17186,httpd,UNKNOWN,"/**
 * @file util_varbuf.h
 * @brief Apache resizable variable length buffer library
 *
 * This set of functions provides resizable buffers. While the primary
 * usage is with NUL-terminated strings, most functions also work with
 * arbitrary binary data.
 *
 * @defgroup APACHE_CORE_VARBUF
 * @ingroup APACHE_CORE
 * @{
 */",undetermined
17187,httpd,UNKNOWN,/** A resizable buffer */,undetermined
17188,httpd,UNKNOWN,"/** the actual buffer; will point to a const '\0' if avail == 0 and
     *  to memory of the same lifetime as the pool otherwise */",undetermined
17189,httpd,UNKNOWN,"/** allocated size of the buffer (minus one for the final \0);
     *  must only be changed using ap_varbuf_grow() */",undetermined
17190,httpd,UNKNOWN,"/** length of string in buffer, or AP_VARBUF_UNKNOWN. This determines how
     *  much memory is copied by ap_varbuf_grow() and where
     *  ap_varbuf_strmemcat() will append to the buffer. */",undetermined
17191,httpd,UNKNOWN,"/** the pool for memory allocations and for registering the cleanup;
     *  the buffer memory will be released when this pool is cleared */",undetermined
17192,httpd,UNKNOWN,/** opaque info for memory allocation */,undetermined
17193,httpd,UNKNOWN,"/** initialize a resizable buffer. It is safe to re-initialize a prevously
 *  used ap_varbuf. The old buffer will be released when the corresponding
 *  pool is cleared. The buffer remains usable until the pool is cleared,
 *  even if the ap_varbuf was located on the stack and has gone out of scope.
 * @param pool the pool to allocate small buffers from and to register the
 *        cleanup with
 * @param vb pointer to the ap_varbuf struct
 * @param init_size the initial size of the buffer (see ap_varbuf_grow() for details)
 */",undetermined
17194,httpd,UNKNOWN,"/** grow a resizable buffer. If the vb->buf cannot be grown in place, it will
 *  be reallocated and the first vb->strlen + 1 bytes of memory will be copied
 *  to the new location. If vb->strlen == AP_VARBUF_UNKNOWN, the whole buffer
 *  is copied.
 * @param vb pointer to the ap_varbuf struct
 * @param new_size the minimum new size of the buffer
 * @note ap_varbuf_grow() will usually at least double vb->buf's size with
 *       every invocation in order to reduce reallications.
 * @note ap_varbuf_grow() will use pool memory for small and allocator
 *       mem nodes for larger allocations.
 * @note ap_varbuf_grow() will call vb->pool's abort function if out of memory.
 */",undetermined
17195,httpd,UNKNOWN,"/** Release memory from a ap_varbuf immediately, if possible.
 *  This allows to free large buffers before the corresponding pool is
 *  cleared. Only larger allocations using mem nodes will be freed.
 * @param vb pointer to the ap_varbuf struct
 * @note After ap_varbuf_free(), vb must not be used unless ap_varbuf_init()
 *       is called again.
 */",undetermined
17196,httpd,UNKNOWN,"/** Concatenate a string to an ap_varbuf. vb->strlen determines where
 * the string is appended in the buffer. If vb->strlen == AP_VARBUF_UNKNOWN,
 * the string will be appended at the first NUL byte in the buffer.
 * If len == 0, ap_varbuf_strmemcat() does nothing.
 * @param vb pointer to the ap_varbuf struct
 * @param str the string to append; must be at least len bytes long
 * @param len the number of characters of *str to concatenate to the buf
 * @note vb->strlen will be set to the length of the new string
 * @note if len != 0, vb->buf will always be NUL-terminated
 */",undetermined
17197,httpd,UNKNOWN,"/** Duplicate an ap_varbuf's content into pool memory
 * @param p the pool to allocate from
 * @param vb the ap_varbuf to copy from
 * @param prepend an optional buffer to prepend (may be NULL)
 * @param prepend_len length of prepend
 * @param append an optional buffer to append (may be NULL)
 * @param append_len length of append
 * @param new_len where to store the length of the resulting string
 *        (may be NULL)
 * @return the new string
 * @note ap_varbuf_pdup() uses vb->strlen to determine how much memory to
 *       copy. It works even if 0-bytes are embedded in vb->buf, prepend, or
 *       append.
 * @note If vb->strlen equals AP_VARBUF_UNKNOWN, it will be set to
 *       strlen(vb->buf).
 */",undetermined
17198,httpd,UNKNOWN,"/** Concatenate a string to an ap_varbuf
 * @param vb pointer to the ap_varbuf struct
 * @param str the string to append
 * @note vb->strlen will be set to the length of the new string
 */",undetermined
17199,httpd,UNKNOWN,"/** Perform string substitutions based on regexp match, using an ap_varbuf.
 * This function behaves like ap_pregsub(), but appends to an ap_varbuf
 * instead of allocating the result from a pool.
 * @param vb The ap_varbuf to which the string will be appended
 * @param input An arbitrary string containing $1 through $9.  These are
 *              replaced with the corresponding matched sub-expressions
 * @param source The string that was originally matched to the regex
 * @param nmatch the nmatch returned from ap_pregex
 * @param pmatch the pmatch array returned from ap_pregex
 * @param maxlen the maximum string length to append to vb, 0 for unlimited
 * @return APR_SUCCESS if successful
 * @note Just like ap_pregsub(), this function does not copy the part of
 *       *source before the matching part (i.e. the first pmatch[0].rm_so
 *       characters).
 * @note If vb->strlen equals AP_VARBUF_UNKNOWN, it will be set to
 *       strlen(vb->buf) first.
 */",undetermined
17200,httpd,UNKNOWN,"/** Read a line from an ap_configfile_t and append it to an ap_varbuf.
 * @param vb pointer to the ap_varbuf struct
 * @param cfg pointer to the ap_configfile_t
 * @param max_len maximum line length, including leading/trailing whitespace
 * @return see ap_cfg_getline()
 * @note vb->strlen will be set to the length of the line
 * @note If vb->strlen equals AP_VARBUF_UNKNOWN, it will be set to
 *       strlen(vb->buf) first.
 */",undetermined
17201,httpd,UNKNOWN,/* !AP_VARBUF_H */,undetermined
17202,httpd,UNKNOWN,/** @} */,undetermined
17203,httpd,UNKNOWN,"/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",undetermined
17204,httpd,UNKNOWN,"/**
 * @file  util_xml.h
 * @brief Apache XML library
 *
 * @defgroup APACHE_CORE_XML XML Library
 * @ingroup  APACHE_CORE
 * @{
 */",undetermined
17205,httpd,UNKNOWN,"/**
 * Get XML post data and parse it
 * @param r The current request
 * @param pdoc The XML post data
 * @return HTTP status code
 * @fn int ap_xml_parse_input(request_rec *r, apr_xml_doc **pdoc)
 */",undetermined
17206,httpd,UNKNOWN,/* UTIL_XML_H */,undetermined
17207,httpd,UNKNOWN,/** @} */,undetermined
